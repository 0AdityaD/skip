/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * let's try some vector arithmetic using the Vector2 class from photo_sizes
 */
class Vector2<T: Number>(x: T, y: T) uses Show, Equality {
  fun getX(): T {
    this.x
  }
  fun getY(): T {
    this.y
  }
  fun getWidth(): T {
    this.x
  }
  fun getHeight(): T {
    this.y
  }
  fun isEqual(other: Vector2<T>): Bool {
    this == other
  }
  fun ==(other: Vector2<T>): Bool {
    this.x == other.x && this.y == other.y
  }
  fun getAspectRatio(): Float {
    y = this.y.toFloat();
    if (y == 0.0) {
      1.0
    } else {
      this.x.toFloat() / this.y.toFloat()
    }
  }
  // Note(vjeux): I had to convert it to float otherwise it wraps-around for
  // Int::max :(
  fun getArea(): Float {
    this.x.toFloat() * this.y.toFloat()
  }
  fun toPhotoSizeVector2(): this {
    one = this.x.fromInt(1);
    Vector2(max(this.x, one), max(this.y, one))
  }
  fun toString(): String {
    "Vector2(" + this.x + ", " + this.y + ")"
  }
}

@no_inline
@cpp_export_as("aspectRatio")
fun aspectRatio(x: Float, y: Float): Float {
  v = Vector2(x, y);
  v.getAspectRatio()
}
/*  original version (works):
@cpp_export_as("sk.main") fun main(): void {
  z = aspectRatio(35.0,65.0);
  s = z.toString();
  print_raw("Result is: " + s + "\n");
  print_raw(s)
}
*/

/* @no_inline @cpp_export_as("mkVector")  */
fun mkVector(x: Float, y: Float): Vector2<Float> {
  v = Vector2(x, y);
  v
}

@cpp_export_as("sk.main")
fun main(): void {
  v = mkVector(35.75, 65.43);
  vs = v.toString();
  z = v.getAspectRatio();
  zs = z.toString();
  print_raw(vs + ".getAspectRatio() ==> " + zs + "\n");
  print_raw(zs)
}
