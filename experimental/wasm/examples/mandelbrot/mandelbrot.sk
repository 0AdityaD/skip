/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const maxIter: Int = 350;

fun inMandelbrotTailAux(c: Complex, z: Complex, i: Int): Float {
  if (i >= maxIter) {
    0.0
  } else {
    if (z.re * z.im <= 5.0) {
      inMandelbrotTailAux(c, z * z + c, i + 1)
    } else {
      i.toFloat() / maxIter.toFloat() * 100.0
    }
  }
}

@cpp_export_as("sk.inMandelbrotTail")
fun inMandelbrotTail(x: Float, y: Float): Float {
  c = Complex(x, y);
  z = c;
  inMandelbrotTailAux(c, z, 0)
}

@cpp_export_as("sk.genMandelbrotSet")
fun genMandelbrotSet(
  widthf: Float,
  heightf: Float,
  panX: Float,
  panY: Float,
  magFactor: Float,
): mutable Vector<Int> {
  width = widthf.toInt();
  height = heightf.toInt();
  Vector::mfillBy(width * height, idx -> {
    x = idx / height;
    y = idx - (x * height);
    xp = x.toFloat() / magFactor - panX;
    yp = y.toFloat() / magFactor - panY;
    v = inMandelbrotTail(xp, yp);
    Math.round(v).toInt()
  })
}

@cpp_export_as("sk.inMandelbrot")
fun inMandelbrot(x: Float, y: Float): Float {
  c = Complex(x, y);
  z = c;
  i = 0;
  while (i < maxIter && z.re * z.im <= 5.0) {
    !z = z * z + c;
    !i = i + 1;
  };
  if ((i == maxIter) || (i == 0)) {
    0.0
  } else {
    (i - 1).toFloat() / maxIter.toFloat() * 100.0
  }
}

@cpp_export_as("sk.fastInMandelbrot")
fun fastInMandelbrot(x: Float, y: Float): Float {
  z_re = x;
  z_im = y;
  i = 0;
  while (i < maxIter && z_re * z_im <= 5.0) {
    tmp_re = z_re * z_re - z_im * z_im + x;
    !z_im = 2.0 * z_re * z_im + y;
    !z_re = tmp_re;
    !i = i + 1;
  };
  if ((i == maxIter) || (i == 0)) {
    0.0
  } else {
    (i - 1).toFloat() / maxIter.toFloat() * 100.0
  }
}

@cpp_export_as("sk.main")
fun main(): void {
  c0 = Complex(3.0, 5.0);
  c1 = Complex(2.0, 4.2);

  c2 = c0 + c1;
  print_raw("c2 is: " + c2 + "\n");
  c3 = c0 * c1;
  print_raw("c3 is: " + c3 + "\n");

  magnificationFactor = 8500.0;
  panX = 0.8;
  panY = 0.4;
  x = 0.0;
  y = 1.0;
  xp = x / magnificationFactor - panX;
  yp = y / magnificationFactor - panY;
  im0 = inMandelbrot(xp, yp);
  print_raw("" + xp + ", " + yp + " --> " + im0 + "\n");
  void
}
