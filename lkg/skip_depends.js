'use strict';

var skip = require('skip');

var sk = skip.init();

var sk$Class = sk.Class = function Class() {};

sk$Class.prototype = Object.create(Object.prototype);

sk$Class.prototype.__constructor = sk$Class;

sk$Class.prototype.__classname = 'Class';

sk$Class.prototype.$frozen = undefined;

sk$Class.prototype.__type_switch_id = -1;

sk$Class.prototype.__init = function(__named_parameters) {};

sk$Class.prototype.__bases = [
  sk$Class
];

sk$Class = sk.Class = skip.initNativeClass(sk, 'Class', sk$Class);

var sk$ArgumentParser$dtParam = sk.ArgumentParser$dtParam = function ArgumentParser$dtParam(__named_parameters) {
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtParam.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtParam.prototype.__constructor = sk$ArgumentParser$dtParam;

sk$ArgumentParser$dtParam.prototype.__classname = 'ArgumentParser.Param';

sk$ArgumentParser$dtParam.prototype.$frozen = undefined;

sk$ArgumentParser$dtParam.prototype.__type_switch_id = -1;

sk$ArgumentParser$dtParam.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtParam)(this);
};

sk$ArgumentParser$dtParam.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp0 = __cache.get(this);
  if (_tmp0 === undefined)
    {
      var _tmp0 = this.__copy();
      _tmp0.$frozen = true;
      __cache.set(this, _tmp0);
      _tmp0.name = skip.deepFreeze(_tmp0.name, __cache);
      _tmp0.help = skip.deepFreeze(_tmp0.help, __cache);
    }
  return _tmp0;
};

sk$ArgumentParser$dtParam.prototype.__init = function(__named_parameters) {
  this.name = __named_parameters.name;
  this.help = __named_parameters.help === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.help;
};

sk$ArgumentParser$dtParam.prototype.__bases = [
  sk$ArgumentParser$dtParam
];

var sk$ArgumentParser$dtParseResult = sk.ArgumentParser$dtParseResult = function ArgumentParser$dtParseResult(__named_parameters) {
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtParseResult.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtParseResult.prototype.__constructor = sk$ArgumentParser$dtParseResult;

sk$ArgumentParser$dtParseResult.prototype.__classname = 'ArgumentParser.ParseResult';

sk$ArgumentParser$dtParseResult.prototype.$frozen = true;

sk$ArgumentParser$dtParseResult.prototype.__type_switch_id = 4;

sk$ArgumentParser$dtParseResult.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtParseResult)(this);
};

sk$ArgumentParser$dtParseResult.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp1 = __cache.get(this);
  if (_tmp1 === undefined)
    {
      var _tmp1 = this.__copy();
      _tmp1.$frozen = true;
      __cache.set(this, _tmp1);
      _tmp1.argumentValues = skip.deepFreeze(_tmp1.argumentValues, __cache);
      _tmp1.hasRest = skip.deepFreeze(_tmp1.hasRest, __cache);
      _tmp1.rest = skip.deepFreeze(_tmp1.rest, __cache);
      _tmp1.unknown = skip.deepFreeze(_tmp1.unknown, __cache);
    }
  return _tmp1;
};

sk$ArgumentParser$dtParseResult.prototype.__init = function(__named_parameters) {
  this.argumentValues = __named_parameters.argumentValues;
  this.hasRest = __named_parameters.hasRest;
  this.rest = __named_parameters.rest;
  this.unknown = __named_parameters.unknown;
};

sk$ArgumentParser$dtParseResult.prototype.getBool = function(name) {
  var t$ = this;
  var t$1 = t$.argumentValues;
  var t$2 = name;
  var $var = t$1.maybeGet(t$2);
  var value;
  var value1;
  var value2;
  {
    jumpBlockOuterjumpLab$bg96:{
      jumpLab$bg96:{
        jumpLab$bg95:{
          jumpLab$bg94:{
            jumpLab$bg93:{
              jumpLab$bg97:{
                jumpLab$bg98:{
                  switch ($var.__type_switch_id) {
                    case 205:
                      break jumpLab$bg98;
                    
                    case 204:
                      break jumpLab$bg96;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.value.__type_switch_id) {
                  case 5:
                    value = $var.value.value;
                    break jumpLab$bg93;
                  
                  case 7:
                    break jumpLab$bg97;
                  
                  default:
                    value1 = $var.value;
                    break jumpLab$bg95;

                }
              }
              switch ($var.value.param.__type_switch_id) {
                case 0:
                  value2 = $var.value.param.value;
                  break jumpLab$bg94;
                
                default:
                  value1 = $var.value;
                  break jumpLab$bg95;

              }
            }
            return value;
          }
          {
            var t$3 = value2;
            return t$3.$bg();
          }
        }
        {
          var t$4 = new sk$String(('Attempted to access \'')).toString();
          var t$5 = name;
          var t$6 = t$5.toString();
          var t$7 = new sk$String(('\' as a bool, got \'')).toString();
          var t$8 = value1;
          var t$9 = t$8.toString();
          var t$10 = new sk$String(('\'.')).toString();
          var t$11 = new sk$String(('')).join(new (sk$Array)([
            t$4,
            t$6,
            t$7,
            t$9,
            t$10
          ]));
          return sk$invariant_violation(t$11);
        }
      }
      {
        var t$12 = new sk$String(('Attempted to access the value of undefined argument \'')).toString();
        var t$13 = name;
        var t$14 = t$13.toString();
        var t$15 = new sk$String(('\'.')).toString();
        var t$16 = new sk$String(('')).join(new (sk$Array)([
          t$12,
          t$14,
          t$15
        ]));
        return sk$invariant_violation(t$16);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.getInt = function(name) {
  var t$ = this;
  var t$1 = name;
  var $var = t$.maybeGetInt(t$1);
  var value;
  {
    jumpBlockOuterjumpLab$bg111:{
      jumpLab$bg111:{
        jumpLab$bg110:{
          switch ($var.__type_switch_id) {
            case 205:
              value = $var.value;
              break jumpLab$bg110;
            
            default:
              break jumpLab$bg111;

          }
        }
        return value;
      }
      {
        var t$2 = new sk$String(('Attempted to unconditionally access non-required/non-default argument \'')).toString();
        var t$3 = name;
        var t$4 = t$3.toString();
        var t$5 = new sk$String(('\'.')).toString();
        var t$6 = new sk$String(('')).join(new (sk$Array)([
          t$2,
          t$4,
          t$5
        ]));
        return sk$invariant_violation(t$6);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.getString = function(name) {
  var t$ = this;
  var t$1 = name;
  var $var = t$.maybeGetString(t$1);
  var value;
  {
    jumpBlockOuterjumpLab$bg124:{
      jumpLab$bg124:{
        jumpLab$bg123:{
          switch ($var.__type_switch_id) {
            case 205:
              value = $var.value;
              break jumpLab$bg123;
            
            default:
              break jumpLab$bg124;

          }
        }
        return value;
      }
      {
        var t$2 = new sk$String(('Attempted to unconditionally access non-required/non-default argument \'')).toString();
        var t$3 = name;
        var t$4 = t$3.toString();
        var t$5 = new sk$String(('\'.')).toString();
        var t$6 = new sk$String(('')).join(new (sk$Array)([
          t$2,
          t$4,
          t$5
        ]));
        return sk$invariant_violation(t$6);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.getStringArray = function(name) {
  var t$ = this;
  var t$1 = name;
  var $var = t$.maybeGetStringArray(t$1);
  var value;
  {
    jumpBlockOuterjumpLab$bg137:{
      jumpLab$bg137:{
        jumpLab$bg136:{
          switch ($var.__type_switch_id) {
            case 205:
              value = $var.value;
              break jumpLab$bg136;
            
            default:
              break jumpLab$bg137;

          }
        }
        return value;
      }
      {
        var t$2 = new sk$String(('Attempted to unconditionally access non-required/non-default argument \'')).toString();
        var t$3 = name;
        var t$4 = t$3.toString();
        var t$5 = new sk$String(('\'.')).toString();
        var t$6 = new sk$String(('')).join(new (sk$Array)([
          t$2,
          t$4,
          t$5
        ]));
        return sk$invariant_violation(t$6);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.maybeGetBool = function(name) {
  var t$ = this;
  var t$1 = t$.argumentValues;
  var t$2 = name;
  var $var = t$1.maybeGet(t$2);
  var value;
  var value1;
  {
    jumpBlockOuterjumpLab$bg162:{
      jumpLab$bg162:{
        jumpLab$bg161:{
          jumpLab$bg160:{
            jumpLab$bg159:{
              jumpLab$bg163:{
                jumpLab$bg164:{
                  switch ($var.__type_switch_id) {
                    case 205:
                      break jumpLab$bg164;
                    
                    case 204:
                      break jumpLab$bg162;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.value.__type_switch_id) {
                  case 5:
                    value1 = $var.value.value;
                    break jumpLab$bg159;
                  
                  case 7:
                    break jumpLab$bg163;
                  
                  default:
                    value = $var.value;
                    break jumpLab$bg161;

                }
              }
              switch ($var.value.param.__type_switch_id) {
                case 0:
                  break jumpLab$bg160;
                
                default:
                  value = $var.value;
                  break jumpLab$bg161;

              }
            }
            {
              var t$3 = value1;
              return new (sk$Some)(t$3);
            }
          }
          return singleton$None;
        }
        {
          var t$4 = new sk$String(('Attempted to access \'')).toString();
          var t$5 = name;
          var t$6 = t$5.toString();
          var t$7 = new sk$String(('\' as a bool, got \'')).toString();
          var t$8 = value;
          var t$9 = t$8.toString();
          var t$10 = new sk$String(('\'.')).toString();
          var t$11 = new sk$String(('')).join(new (sk$Array)([
            t$4,
            t$6,
            t$7,
            t$9,
            t$10
          ]));
          return sk$invariant_violation(t$11);
        }
      }
      {
        var t$12 = new sk$String(('Attempted to access the value of undefined argument \'')).toString();
        var t$13 = name;
        var t$14 = t$13.toString();
        var t$15 = new sk$String(('\'.')).toString();
        var t$16 = new sk$String(('')).join(new (sk$Array)([
          t$12,
          t$14,
          t$15
        ]));
        return sk$invariant_violation(t$16);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.maybeGetInt = function(name) {
  var t$ = this;
  var t$1 = t$.argumentValues;
  var t$2 = name;
  var $var = t$1.maybeGet(t$2);
  var value;
  var value1;
  {
    jumpBlockOuterjumpLab$bg189:{
      jumpLab$bg189:{
        jumpLab$bg188:{
          jumpLab$bg187:{
            jumpLab$bg186:{
              jumpLab$bg190:{
                jumpLab$bg191:{
                  switch ($var.__type_switch_id) {
                    case 205:
                      break jumpLab$bg191;
                    
                    case 204:
                      break jumpLab$bg189;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.value.__type_switch_id) {
                  case 6:
                    value1 = $var.value.value;
                    break jumpLab$bg186;
                  
                  case 7:
                    break jumpLab$bg190;
                  
                  default:
                    value = $var.value;
                    break jumpLab$bg188;

                }
              }
              switch ($var.value.param.__type_switch_id) {
                case 1:
                  break jumpLab$bg187;
                
                default:
                  value = $var.value;
                  break jumpLab$bg188;

              }
            }
            {
              var t$3 = value1;
              return new (sk$Some)(t$3);
            }
          }
          return singleton$None;
        }
        {
          var t$4 = new sk$String(('Attempted to access \'')).toString();
          var t$5 = name;
          var t$6 = t$5.toString();
          var t$7 = new sk$String(('\' as an int, got \'')).toString();
          var t$8 = value;
          var t$9 = t$8.toString();
          var t$10 = new sk$String(('\'.')).toString();
          var t$11 = new sk$String(('')).join(new (sk$Array)([
            t$4,
            t$6,
            t$7,
            t$9,
            t$10
          ]));
          return sk$invariant_violation(t$11);
        }
      }
      {
        var t$12 = new sk$String(('Attempted to access the value of undefined argument \'')).toString();
        var t$13 = name;
        var t$14 = t$13.toString();
        var t$15 = new sk$String(('\'.')).toString();
        var t$16 = new sk$String(('')).join(new (sk$Array)([
          t$12,
          t$14,
          t$15
        ]));
        return sk$invariant_violation(t$16);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.maybeGetString = function(name) {
  var t$ = this;
  var t$1 = t$.argumentValues;
  var t$2 = name;
  var $var = t$1.maybeGet(t$2);
  var value;
  var value1;
  {
    jumpBlockOuterjumpLab$bg216:{
      jumpLab$bg216:{
        jumpLab$bg215:{
          jumpLab$bg214:{
            jumpLab$bg213:{
              jumpLab$bg217:{
                jumpLab$bg218:{
                  switch ($var.__type_switch_id) {
                    case 205:
                      break jumpLab$bg218;
                    
                    case 204:
                      break jumpLab$bg216;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.value.__type_switch_id) {
                  case 9:
                    value1 = $var.value.value;
                    break jumpLab$bg213;
                  
                  case 7:
                    break jumpLab$bg217;
                  
                  default:
                    value = $var.value;
                    break jumpLab$bg215;

                }
              }
              switch ($var.value.param.__type_switch_id) {
                case 3:
                  break jumpLab$bg214;
                
                default:
                  value = $var.value;
                  break jumpLab$bg215;

              }
            }
            {
              var t$3 = value1;
              return new (sk$Some)(t$3);
            }
          }
          return singleton$None;
        }
        {
          var t$4 = new sk$String(('Attempted to access \'')).toString();
          var t$5 = name;
          var t$6 = t$5.toString();
          var t$7 = new sk$String(('\' as a string, got \'')).toString();
          var t$8 = value;
          var t$9 = t$8.toString();
          var t$10 = new sk$String(('\'.')).toString();
          var t$11 = new sk$String(('')).join(new (sk$Array)([
            t$4,
            t$6,
            t$7,
            t$9,
            t$10
          ]));
          return sk$invariant_violation(t$11);
        }
      }
      {
        var t$12 = new sk$String(('Attempted to access the value of undefined argument \'')).toString();
        var t$13 = name;
        var t$14 = t$13.toString();
        var t$15 = new sk$String(('\'.')).toString();
        var t$16 = new sk$String(('')).join(new (sk$Array)([
          t$12,
          t$14,
          t$15
        ]));
        return sk$invariant_violation(t$16);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.maybeGetStringArray = function(name) {
  var t$ = this;
  var t$1 = t$.argumentValues;
  var t$2 = name;
  var $var = t$1.maybeGet(t$2);
  var value;
  var value1;
  {
    jumpBlockOuterjumpLab$bg243:{
      jumpLab$bg243:{
        jumpLab$bg242:{
          jumpLab$bg241:{
            jumpLab$bg240:{
              jumpLab$bg244:{
                jumpLab$bg245:{
                  switch ($var.__type_switch_id) {
                    case 205:
                      break jumpLab$bg245;
                    
                    case 204:
                      break jumpLab$bg243;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.value.__type_switch_id) {
                  case 8:
                    value1 = $var.value.value;
                    break jumpLab$bg240;
                  
                  case 7:
                    break jumpLab$bg244;
                  
                  default:
                    value = $var.value;
                    break jumpLab$bg242;

                }
              }
              switch ($var.value.param.__type_switch_id) {
                case 2:
                  break jumpLab$bg241;
                
                default:
                  value = $var.value;
                  break jumpLab$bg242;

              }
            }
            {
              var t$3 = value1;
              return new (sk$Some)(t$3);
            }
          }
          return singleton$None;
        }
        {
          var t$4 = new sk$String(('Attempted to access \'')).toString();
          var t$5 = name;
          var t$6 = t$5.toString();
          var t$7 = new sk$String(('\' as a string array, got \'')).toString();
          var t$8 = value;
          var t$9 = t$8.toString();
          var t$10 = new sk$String(('\'.')).toString();
          var t$11 = new sk$String(('')).join(new (sk$Array)([
            t$4,
            t$6,
            t$7,
            t$9,
            t$10
          ]));
          return sk$invariant_violation(t$11);
        }
      }
      {
        var t$12 = new sk$String(('Attempted to access the value of undefined argument \'')).toString();
        var t$13 = name;
        var t$14 = t$13.toString();
        var t$15 = new sk$String(('\'.')).toString();
        var t$16 = new sk$String(('')).join(new (sk$Array)([
          t$12,
          t$14,
          t$15
        ]));
        return sk$invariant_violation(t$16);
      }
    }
  }
};

sk$ArgumentParser$dtParseResult.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.argumentValues;
  return t$1.values();
};

sk$ArgumentParser$dtParseResult.prototype.__bases = [
  sk$ArgumentParser$dtParseResult
];

var sk$ArgumentParser$dtValue = sk.ArgumentParser$dtValue = function ArgumentParser$dtValue(__named_parameters) {
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtValue.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtValue.prototype.__constructor = sk$ArgumentParser$dtValue;

sk$ArgumentParser$dtValue.prototype.__classname = 'ArgumentParser.Value';

sk$ArgumentParser$dtValue.prototype.$frozen = undefined;

sk$ArgumentParser$dtValue.prototype.__type_switch_id = -1;

sk$ArgumentParser$dtValue.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtValue)(this);
};

sk$ArgumentParser$dtValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp2 = __cache.get(this);
  if (_tmp2 === undefined)
    {
      var _tmp2 = this.__copy();
      _tmp2.$frozen = true;
      __cache.set(this, _tmp2);
      _tmp2.name = skip.deepFreeze(_tmp2.name, __cache);
    }
  return _tmp2;
};

sk$ArgumentParser$dtValue.prototype.__init = function(__named_parameters) {
  this.name = __named_parameters.name;
};

sk$ArgumentParser$dtValue.prototype.__bases = [
  sk$ArgumentParser$dtValue
];

var sk$Arguments$dtSpec = sk.Arguments$dtSpec = function Arguments$dtSpec() {};

sk$Arguments$dtSpec.prototype = Object.create(Object.prototype);

sk$Arguments$dtSpec.prototype.__constructor = sk$Arguments$dtSpec;

sk$Arguments$dtSpec.prototype.__classname = 'Arguments.Spec';

sk$Arguments$dtSpec.prototype.$frozen = undefined;

sk$Arguments$dtSpec.prototype.__type_switch_id = -1;

sk$Arguments$dtSpec.prototype.__copy = function() {};

sk$Arguments$dtSpec.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp3 = __cache.get(this);
  if (_tmp3 === undefined)
    {
      var _tmp3 = this.__copy();
      _tmp3.$frozen = true;
      __cache.set(this, _tmp3);
    }
  return _tmp3;
};

sk$Arguments$dtSpec.prototype.__init = function(__named_parameters) {};

sk$Arguments$dtSpec.prototype.__bases = [
  sk$Arguments$dtSpec
];

var sk$Array$dtArrayIterator = sk.Array$dtArrayIterator = function Array$dtArrayIterator(v, i, sz) {
  this.v = v;
  this.i = i;
  this.sz = sz;
};

sk$Array$dtArrayIterator.prototype = Object.create(Object.prototype);

sk$Array$dtArrayIterator.prototype.__constructor = sk$Array$dtArrayIterator;

sk$Array$dtArrayIterator.prototype.__classname = 'Array.ArrayIterator';

sk$Array$dtArrayIterator.prototype.$frozen = undefined;

sk$Array$dtArrayIterator.prototype.__type_switch_id = -1;

sk$Array$dtArrayIterator.prototype.__copy = function() {
  return new (sk$Array$dtArrayIterator)(this.v, this.i, this.sz);
};

sk$Array$dtArrayIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp4 = __cache.get(this);
  if (_tmp4 === undefined)
    {
      var _tmp4 = this.__copy();
      _tmp4.$frozen = true;
      __cache.set(this, _tmp4);
      _tmp4.v = skip.deepFreeze(_tmp4.v, __cache);
      _tmp4.i = skip.deepFreeze(_tmp4.i, __cache);
      _tmp4.sz = skip.deepFreeze(_tmp4.sz, __cache);
    }
  return _tmp4;
};

sk$Array$dtArrayIterator.prototype.__init = function(__named_parameters) {};

sk$Array$dtArrayIterator.prototype.next = function() {
  var t$ = this;
  var i = t$.i;
  var t$1 = i;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.ult(t$3).__value)
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = i;
      var t$6 = t$4;
      t$6.i = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$7 = this;
      var t$8 = i;
      var t$9 = t$7.getItemValue(t$8);
      return new (sk$Some)(t$9);
    }
  else
    return singleton$None;
};

sk$Array$dtArrayIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$Array$dtArrayIterator.prototype.__bases = [
  sk$Array$dtArrayIterator
];

var sk$Awaitable = sk.Awaitable = function Awaitable() {};

sk$Awaitable.prototype = Object.create(Object.prototype);

sk$Awaitable.prototype.__constructor = sk$Awaitable;

sk$Awaitable.prototype.__classname = 'Awaitable';

sk$Awaitable.prototype.$frozen = undefined;

sk$Awaitable.prototype.__type_switch_id = -1;

sk$Awaitable.prototype.__copy = function() {};

sk$Awaitable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp5 = __cache.get(this);
  if (_tmp5 === undefined)
    {
      var _tmp5 = this.__copy();
      _tmp5.$frozen = true;
      __cache.set(this, _tmp5);
    }
  return _tmp5;
};

sk$Awaitable.prototype.__init = function(__named_parameters) {};

sk$Awaitable.prototype.__bases = [
  sk$Awaitable
];

var sk$Bencher = sk.Bencher = function Bencher(options) {
  this.options = options === undefined ? ((() => 
  {
    return new (sk$Bencher$dtOptions)({
      allowEmpty: undefined,
      displayOutput: undefined,
      itersPerGc: undefined,
      keepSamples: undefined,
      minIterations: undefined,
      verbose: undefined
    });
  })()) : options;
};

sk$Bencher.prototype = Object.create(Object.prototype);

sk$Bencher.prototype.__constructor = sk$Bencher;

sk$Bencher.prototype.__classname = 'Bencher';

sk$Bencher.prototype.$frozen = false;

sk$Bencher.prototype.__type_switch_id = 14;

sk$Bencher.prototype.__copy = function() {
  return new (sk$Bencher)(this.options);
};

sk$Bencher.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp6 = __cache.get(this);
  if (_tmp6 === undefined)
    {
      var _tmp6 = this.__copy();
      _tmp6.$frozen = true;
      __cache.set(this, _tmp6);
      _tmp6.options = skip.deepFreeze(_tmp6.options, __cache);
    }
  return _tmp6;
};

sk$Bencher.prototype.__init = function(__named_parameters) {};

sk$Bencher.prototype.bench = function(__named_parameters) {
  var afterEach = __named_parameters.afterEach;
  var options = __named_parameters.options;
  var run = __named_parameters.run;
  if (afterEach === undefined)
    afterEach = ((() => 
    {
      return (() => 
      {
        return sk.__.$void;
      });
    })());
  if (options === undefined)
    options = ((() => 
    {
      var t$ = this;
      return t$.options;
    })());
  var t$ = this;
  var t$1 = run;
  var t$2 = options;
  var iters = t$.getNumIters(t$1, t$2);
  var t$3 = afterEach;
  t$3();
  var t$4 = this;
  var t$5 = run;
  var t$6 = afterEach;
  var t$7 = iters;
  var t$8 = options;
  var t$9 = t$4.iter(t$5, t$6, t$7, t$8);
  var results = sk$Stats$dtremoveOutliers(t$9, new sk$Float((0.050000000000000003)));
  var t$10 = results;
  var t$11 = options;
  var t$12 = t$11.keepSamples;
  var stats = sk$Bencher$dtcomputeStats(t$10, t$12);
  var t$13 = options;
  if (t$13.verbose.__value)
    {
      var t$14 = stats;
      sk$Bencher$dtdisplayStats(t$14);
    }
  else
    {}
  return stats;
};

sk$Bencher.prototype.getNumIters = function(fn, options) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = fn;
  var t$2 = t$.timeInBlackBox(t$1);
  var baseline = t$2.toFloat();
  var t$3 = baseline;
  if (t$3.$gt(new sk$Float((1000000000.0))).__value)
    return new sk$Int(1.0, 0.0);
  else
    {
      var t$4 = baseline;
      var t$5 = new sk$Float((1000000.0)).$dv(t$4);
      var iterPerMs = sk$max(new sk$Float((1.0)), t$5);
      var t$6 = static1;
      var t$7 = t$6.MS_ITERS;
      var t$8 = iterPerMs;
      var iters = t$7.$ti(t$8);
      var t$9 = options;
      var t$10 = t$9.minIterations;
      var t$11 = iters;
      var t$12 = t$11.toInt();
      return sk$max(t$10, t$12);
    }
};

sk$Bencher.prototype.iter = function(run, afterEach, n, options) {
  var static1 = this.__constructor;
  var t$ = n;
  var results = sk$Vector.mcreate(t$);
  var t$1 = n;
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg1493:{
      break$bg1493:{
        dowhile_else$bg1492:{
          do
            {
              jumpBlockOuterdowhile_cond$bg1494:{
                dowhile_cond$bg1494:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg1512:{
                        jumpLab$bg1512:{
                          jumpLab$bg1511:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg1511;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg1512;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg1494;
                          }
                        }
                        {
                          var t$4 = results;
                          var t$5 = static1;
                          var t$6 = run;
                          var t$7 = t$5.timeInBlackBox(t$6);
                          t$4.push(t$7);
                          var t$8 = afterEach;
                          t$8();
                          var t$9 = options;
                          var t$10 = t$9.itersPerGc;
                          var t$11;
                          if (t$10.$gt(new sk$Int(0.0, 0.0)).__value)
                            {
                              var t$12 = i;
                              var t$13 = options;
                              var t$14 = t$13.itersPerGc;
                              var t$15 = t$12.$pc(t$14);
                              t$11 = t$15.$eq$eq(new sk$Int(0.0, 0.0));
                            }
                          else
                            t$11 = new sk$Bool((false));
                          if (t$11.__value)
                            sk$localGC();
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg1512;
                      }
                    }
                    break dowhile_cond$bg1494;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg1492;
                break jumpBlockOuterdowhile_cond$bg1494;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg1493;
      }
      {}
      break jumpBlockOuterbreak$bg1493;
    }
  }
  return skip.deepFreeze(results, new Map());
};

sk$Bencher.prototype.run = function(run) {
  var t$ = this;
  var t$1 = run;
  return t$.bench({
    afterEach: undefined,
    options: undefined,
    run: t$1
  });
};

sk$Bencher.timeInBlackBox = function(fn) {
  var t$ = sk$$arguments();
  var t$1 = t$.size();
  var t$2 = this;
  var t$3 = t$2.REALLY_BIG_INT;
  if (t$1.$eq$eq(t$3).__value)
    {
      var start = sk$nowNanos();
      var t$4 = fn;
      sk$debug(t$4);
      var t$5 = sk$nowNanos();
      var t$6 = start;
      return t$5.$mi(t$6);
    }
  else
    {
      var start1 = sk$nowNanos();
      var t$7 = fn;
      var t$8 = t$7();
      sk$Bencher$dtblackBox(t$8);
      var t$9 = sk$nowNanos();
      var t$10 = start1;
      return t$9.$mi(t$10);
    }
};

sk$Bencher.prototype.__bases = [
  sk$Bencher
];

Object.defineProperty(sk$Bencher, 'MS_ITERS', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$Float((300.0));
    })());
    Object.defineProperty(sk$Bencher, 'MS_ITERS', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Bencher, 'REALLY_BIG_INT', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$Int(99999999.0, 0.0);
    })());
    Object.defineProperty(sk$Bencher, 'REALLY_BIG_INT', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Bencher$dtBenchmarkStats = sk.Bencher$dtBenchmarkStats = function Bencher$dtBenchmarkStats(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Bencher$dtBenchmarkStats.prototype = Object.create(Object.prototype);

sk$Bencher$dtBenchmarkStats.prototype.__constructor = sk$Bencher$dtBenchmarkStats;

sk$Bencher$dtBenchmarkStats.prototype.__classname = 'Bencher.BenchmarkStats';

sk$Bencher$dtBenchmarkStats.prototype.$frozen = true;

sk$Bencher$dtBenchmarkStats.prototype.__type_switch_id = 15;

sk$Bencher$dtBenchmarkStats.prototype.__copy = function() {
  return new (sk$Bencher$dtBenchmarkStats)(this);
};

sk$Bencher$dtBenchmarkStats.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp7 = __cache.get(this);
  if (_tmp7 === undefined)
    {
      var _tmp7 = this.__copy();
      _tmp7.$frozen = true;
      __cache.set(this, _tmp7);
      _tmp7.average = skip.deepFreeze(_tmp7.average, __cache);
      _tmp7.median = skip.deepFreeze(_tmp7.median, __cache);
      _tmp7.standardDeviation = skip.deepFreeze(_tmp7.standardDeviation, __cache);
      _tmp7.min = skip.deepFreeze(_tmp7.min, __cache);
      _tmp7.max = skip.deepFreeze(_tmp7.max, __cache);
      _tmp7.samples = skip.deepFreeze(_tmp7.samples, __cache);
    }
  return _tmp7;
};

sk$Bencher$dtBenchmarkStats.prototype.__init = function(__named_parameters) {
  this.average = __named_parameters.average;
  this.median = __named_parameters.median;
  this.standardDeviation = __named_parameters.standardDeviation;
  this.min = __named_parameters.min;
  this.max = __named_parameters.max;
  this.samples = __named_parameters.samples;
};

sk$Bencher$dtBenchmarkStats.prototype.__bases = [
  sk$Bencher$dtBenchmarkStats
];

Object.defineProperty(sk$Bencher$dtBenchmarkStats, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$Bencher$dtBenchmarkStatsMetaClass;
    })());
    Object.defineProperty(sk$Bencher$dtBenchmarkStats, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Bencher$dtOptions = sk.Bencher$dtOptions = function Bencher$dtOptions(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Bencher$dtOptions.prototype = Object.create(Object.prototype);

sk$Bencher$dtOptions.prototype.__constructor = sk$Bencher$dtOptions;

sk$Bencher$dtOptions.prototype.__classname = 'Bencher.Options';

sk$Bencher$dtOptions.prototype.$frozen = true;

sk$Bencher$dtOptions.prototype.__type_switch_id = 16;

sk$Bencher$dtOptions.prototype.__copy = function() {
  return new (sk$Bencher$dtOptions)(this);
};

sk$Bencher$dtOptions.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp8 = __cache.get(this);
  if (_tmp8 === undefined)
    {
      var _tmp8 = this.__copy();
      _tmp8.$frozen = true;
      __cache.set(this, _tmp8);
      _tmp8.allowEmpty = skip.deepFreeze(_tmp8.allowEmpty, __cache);
      _tmp8.minIterations = skip.deepFreeze(_tmp8.minIterations, __cache);
      _tmp8.itersPerGc = skip.deepFreeze(_tmp8.itersPerGc, __cache);
      _tmp8.displayOutput = skip.deepFreeze(_tmp8.displayOutput, __cache);
      _tmp8.keepSamples = skip.deepFreeze(_tmp8.keepSamples, __cache);
      _tmp8.verbose = skip.deepFreeze(_tmp8.verbose, __cache);
    }
  return _tmp8;
};

sk$Bencher$dtOptions.prototype.__init = function(__named_parameters) {
  this.allowEmpty = __named_parameters.allowEmpty === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.allowEmpty;
  this.minIterations = __named_parameters.minIterations === undefined ? ((() => 
  {
    return (sk$Bencher$dtdefaultMinIterations());
  })()) : __named_parameters.minIterations;
  this.itersPerGc = __named_parameters.itersPerGc === undefined ? ((() => 
  {
    return (sk$Bencher$dtdefaultItersPerGc());
  })()) : __named_parameters.itersPerGc;
  this.displayOutput = __named_parameters.displayOutput === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.displayOutput;
  this.keepSamples = __named_parameters.keepSamples === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.keepSamples;
  this.verbose = __named_parameters.verbose === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.verbose;
};

sk$Bencher$dtOptions.prototype.__bases = [
  sk$Bencher$dtOptions
];

var sk$Bool = sk.Bool = function Bool() {};

sk$Bool.prototype = Object.create(Object.prototype);

sk$Bool.prototype.__constructor = sk$Bool;

sk$Bool.prototype.__classname = 'Bool';

sk$Bool.prototype.$frozen = true;

sk$Bool.prototype.__type_switch_id = 17;

sk$Bool.prototype.__init = function(__named_parameters) {};

sk$Bool.prototype.$bg = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::!')));
};

sk$Bool.prototype.$bg$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::!=')));
};

sk$Bool.prototype.$lt = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::<')));
};

sk$Bool.prototype.$lt$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::<=')));
};

sk$Bool.prototype.$eq$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::==')));
};

sk$Bool.prototype.$gt = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::>')));
};

sk$Bool.prototype.$gt$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Bool::>=')));
};

sk$Bool.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = other;
  if (t$.$lt(t$1).__value)
    return singleton$LT;
  else
    {
      var t$2 = this;
      var t$3 = other;
      if (t$2.$eq$eq(t$3).__value)
        return singleton$EQ;
      else
        return singleton$GT;
    }
};

sk$Bool.generator = function() {
  return singleton$QuickCheck$dtBoolGenerator;
};

sk$Bool.prototype.getClassName = function() {
  return new sk$String(('Bool'));
};

sk$Bool.prototype.hash = function() {
  if (this.__value)
    return new sk$Int(1.0, 0.0);
  else
    return new sk$Int(0.0, 0.0);
};

sk$Bool.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toString();
  return new (sk$InspectLiteral)(t$1);
};

sk$Bool.prototype.perturb = function(rng) {
  var t$ = rng;
  var t$1;
  if (this.__value)
    t$1 = new sk$Int(1.0, 0.0);
  else
    t$1 = new sk$Int(0.0, 0.0);
  var t$2 = t$1;
  return t$.perturb(t$2);
};

sk$Bool.prototype.property = function() {
  if (this.__value)
    return new (sk$QuickCheck$dtTestResultProperty)(singleton$QuickCheck$dtTestSuccess);
  else
    {
      var t$ = sk$Vector.createFromItems(new (sk$Array)([]));
      var t$1 = new (sk$QuickCheck$dtTestFailure)(new sk$Int(0.0, 0.0), t$);
      return new (sk$QuickCheck$dtTestResultProperty)(t$1);
    }
};

sk$Bool.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    if (this.__value)
      yield new sk$Some(new sk$Bool((false)));
    else
      {}
    return undefined;
  });
};

sk$Bool.prototype.toString = function() {
  if (this.__value)
    return new sk$String(('true'));
  else
    return new sk$String(('false'));
};

sk$Bool.prototype.__bases = [
  sk$Bool
];

sk$Bool = sk.Bool = skip.initNativeClass(sk, 'Bool', sk$Bool);

Object.defineProperty(sk$Bool, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$BoolMetaClass;
    })());
    Object.defineProperty(sk$Bool, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Char = sk.Char = function Char() {};

sk$Char.prototype = Object.create(Object.prototype);

sk$Char.prototype.__constructor = sk$Char;

sk$Char.prototype.__classname = 'Char';

sk$Char.prototype.$frozen = true;

sk$Char.prototype.__type_switch_id = 18;

sk$Char.prototype.__init = function(__named_parameters) {};

sk$Char.prototype.$bg$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::!=')));
};

sk$Char.prototype.$lt = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::<')));
};

sk$Char.prototype.$lt$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::<=')));
};

sk$Char.prototype.$eq$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::==')));
};

sk$Char.prototype.$gt = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::>')));
};

sk$Char.prototype.$gt$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::>=')));
};

sk$Char.prototype.capitalize = function() {
  jumpBlockOuterjumpLab$bg1736:{
    jumpLab$bg1736:{
      jumpLab$bg1735:{
        jumpLab$bg1734:{
          jumpLab$bg1733:{
            jumpLab$bg1732:{
              jumpLab$bg1731:{
                jumpLab$bg1730:{
                  jumpLab$bg1729:{
                    jumpLab$bg1728:{
                      jumpLab$bg1727:{
                        jumpLab$bg1726:{
                          jumpLab$bg1725:{
                            jumpLab$bg1724:{
                              jumpLab$bg1723:{
                                jumpLab$bg1722:{
                                  jumpLab$bg1721:{
                                    jumpLab$bg1720:{
                                      jumpLab$bg1719:{
                                        jumpLab$bg1718:{
                                          jumpLab$bg1717:{
                                            jumpLab$bg1716:{
                                              jumpLab$bg1715:{
                                                jumpLab$bg1714:{
                                                  jumpLab$bg1713:{
                                                    jumpLab$bg1712:{
                                                      jumpLab$bg1711:{
                                                        jumpLab$bg1710:{
                                                          {
                                                            var _tmp9 = this.__getSwitchValue();
                                                            switch (_tmp9) {
                                                              case 97:
                                                                break jumpLab$bg1710;
                                                              
                                                              case 98:
                                                                break jumpLab$bg1711;
                                                              
                                                              case 99:
                                                                break jumpLab$bg1712;
                                                              
                                                              case 100:
                                                                break jumpLab$bg1713;
                                                              
                                                              case 101:
                                                                break jumpLab$bg1714;
                                                              
                                                              case 102:
                                                                break jumpLab$bg1715;
                                                              
                                                              case 103:
                                                                break jumpLab$bg1716;
                                                              
                                                              case 104:
                                                                break jumpLab$bg1717;
                                                              
                                                              case 105:
                                                                break jumpLab$bg1718;
                                                              
                                                              case 106:
                                                                break jumpLab$bg1719;
                                                              
                                                              case 107:
                                                                break jumpLab$bg1720;
                                                              
                                                              case 108:
                                                                break jumpLab$bg1721;
                                                              
                                                              case 109:
                                                                break jumpLab$bg1722;
                                                              
                                                              case 110:
                                                                break jumpLab$bg1723;
                                                              
                                                              case 111:
                                                                break jumpLab$bg1724;
                                                              
                                                              case 112:
                                                                break jumpLab$bg1725;
                                                              
                                                              case 113:
                                                                break jumpLab$bg1726;
                                                              
                                                              case 114:
                                                                break jumpLab$bg1727;
                                                              
                                                              case 115:
                                                                break jumpLab$bg1728;
                                                              
                                                              case 116:
                                                                break jumpLab$bg1729;
                                                              
                                                              case 117:
                                                                break jumpLab$bg1730;
                                                              
                                                              case 118:
                                                                break jumpLab$bg1731;
                                                              
                                                              case 119:
                                                                break jumpLab$bg1732;
                                                              
                                                              case 120:
                                                                break jumpLab$bg1733;
                                                              
                                                              case 121:
                                                                break jumpLab$bg1734;
                                                              
                                                              case 122:
                                                                break jumpLab$bg1735;
                                                              
                                                              default:
                                                                break jumpLab$bg1736;

                                                            }
                                                          }
                                                        }
                                                        return $makeChar(65);
                                                      }
                                                      return $makeChar(66);
                                                    }
                                                    return $makeChar(67);
                                                  }
                                                  return $makeChar(68);
                                                }
                                                return $makeChar(69);
                                              }
                                              return $makeChar(70);
                                            }
                                            return $makeChar(71);
                                          }
                                          return $makeChar(72);
                                        }
                                        return $makeChar(73);
                                      }
                                      return $makeChar(74);
                                    }
                                    return $makeChar(75);
                                  }
                                  return $makeChar(76);
                                }
                                return $makeChar(77);
                              }
                              return $makeChar(78);
                            }
                            return $makeChar(79);
                          }
                          return $makeChar(80);
                        }
                        return $makeChar(81);
                      }
                      return $makeChar(82);
                    }
                    return $makeChar(83);
                  }
                  return $makeChar(84);
                }
                return $makeChar(85);
              }
              return $makeChar(86);
            }
            return $makeChar(87);
          }
          return $makeChar(88);
        }
        return $makeChar(89);
      }
      return $makeChar(90);
    }
    return this;
  }
};

sk$Char.prototype.code = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Char::code')));
};

sk$Char.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = other;
  if (t$.$lt(t$1).__value)
    return singleton$LT;
  else
    {
      var t$2 = this;
      var t$3 = other;
      if (t$2.$eq$eq(t$3).__value)
        return singleton$EQ;
      else
        return singleton$GT;
    }
};

sk$Char.fromCode = function(code) {
  var t$ = code;
  return t$.chr();
};

sk$Char.generator = function() {
  return singleton$QuickCheck$dtCharGenerator;
};

sk$Char.prototype.getClassName = function() {
  return new sk$String(('Char'));
};

sk$Char.prototype.hash = function() {
  var t$ = this;
  return t$.code();
};

sk$Char.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.code();
  var t$2 = t$1.toString();
  var t$3 = new (sk$InspectLiteral)(t$2);
  var t$4 = this;
  var t$5;
  if (sk$Chars$dtisPrintableAscii(t$4).__value)
    {
      var t$6 = this;
      var t$7 = t$6.toString();
      t$5 = new (sk$InspectString)(t$7);
    }
  else
    t$5 = new (sk$InspectSpecial)(new sk$String(('unprintable')));
  var t$8 = t$5;
  var t$9 = new (sk$Array)([
    t$3,
    t$8
  ]);
  return new (sk$InspectCall)(new sk$String(('Char')), t$9);
};

sk$Char.isValidCharCodePoint = function(code) {
  var t$ = code;
  if (t$.ult(new sk$Int(55296.0, 0.0)).__value)
    return new sk$Bool((true));
  else
    {
      var t$1 = code;
      if (t$1.$gt$eq(new sk$Int(57344.0, 0.0)).__value)
        {
          var t$2 = code;
          return t$2.$lt(new sk$Int(1114112.0, 0.0));
        }
      else
        return new sk$Bool((false));
    }
};

sk$Char.prototype.repeat = function(count) {
  var t$ = this;
  var t$1 = t$.toString();
  var t$2 = count;
  return t$1.repeat(t$2);
};

sk$Char.prototype.shrink = function(firstShrink) {
  if (firstShrink === undefined)
    firstShrink = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var t$1 = t$.code();
  var t$2 = firstShrink;
  var t$3 = t$1.shrink(t$2);
  var t$4 = t$3.filter(((_tmp1778) => 
  {
    return sk$Char.isValidCharCodePoint(_tmp1778);
  }));
  return t$4.map(((x) => 
  {
    var t$5 = x;
    return t$5.chr();
  }));
};

sk$Char.prototype.toString = function() {
  return sk$String.tabulate(new sk$Int(1.0, 0.0), ((_) => 
  {
    return this;
  }));
};

sk$Char.prototype.uncapitalize = function() {
  jumpBlockOuterjumpLab$bg1809:{
    jumpLab$bg1809:{
      jumpLab$bg1808:{
        jumpLab$bg1807:{
          jumpLab$bg1806:{
            jumpLab$bg1805:{
              jumpLab$bg1804:{
                jumpLab$bg1803:{
                  jumpLab$bg1802:{
                    jumpLab$bg1801:{
                      jumpLab$bg1800:{
                        jumpLab$bg1799:{
                          jumpLab$bg1798:{
                            jumpLab$bg1797:{
                              jumpLab$bg1796:{
                                jumpLab$bg1795:{
                                  jumpLab$bg1794:{
                                    jumpLab$bg1793:{
                                      jumpLab$bg1792:{
                                        jumpLab$bg1791:{
                                          jumpLab$bg1790:{
                                            jumpLab$bg1789:{
                                              jumpLab$bg1788:{
                                                jumpLab$bg1787:{
                                                  jumpLab$bg1786:{
                                                    jumpLab$bg1785:{
                                                      jumpLab$bg1784:{
                                                        jumpLab$bg1783:{
                                                          {
                                                            var _tmp10 = this.__getSwitchValue();
                                                            switch (_tmp10) {
                                                              case 65:
                                                                break jumpLab$bg1783;
                                                              
                                                              case 66:
                                                                break jumpLab$bg1784;
                                                              
                                                              case 67:
                                                                break jumpLab$bg1785;
                                                              
                                                              case 68:
                                                                break jumpLab$bg1786;
                                                              
                                                              case 69:
                                                                break jumpLab$bg1787;
                                                              
                                                              case 70:
                                                                break jumpLab$bg1788;
                                                              
                                                              case 71:
                                                                break jumpLab$bg1789;
                                                              
                                                              case 72:
                                                                break jumpLab$bg1790;
                                                              
                                                              case 73:
                                                                break jumpLab$bg1791;
                                                              
                                                              case 74:
                                                                break jumpLab$bg1792;
                                                              
                                                              case 75:
                                                                break jumpLab$bg1793;
                                                              
                                                              case 76:
                                                                break jumpLab$bg1794;
                                                              
                                                              case 77:
                                                                break jumpLab$bg1795;
                                                              
                                                              case 78:
                                                                break jumpLab$bg1796;
                                                              
                                                              case 79:
                                                                break jumpLab$bg1797;
                                                              
                                                              case 80:
                                                                break jumpLab$bg1798;
                                                              
                                                              case 81:
                                                                break jumpLab$bg1799;
                                                              
                                                              case 82:
                                                                break jumpLab$bg1800;
                                                              
                                                              case 83:
                                                                break jumpLab$bg1801;
                                                              
                                                              case 84:
                                                                break jumpLab$bg1802;
                                                              
                                                              case 85:
                                                                break jumpLab$bg1803;
                                                              
                                                              case 86:
                                                                break jumpLab$bg1804;
                                                              
                                                              case 87:
                                                                break jumpLab$bg1805;
                                                              
                                                              case 88:
                                                                break jumpLab$bg1806;
                                                              
                                                              case 89:
                                                                break jumpLab$bg1807;
                                                              
                                                              case 90:
                                                                break jumpLab$bg1808;
                                                              
                                                              default:
                                                                break jumpLab$bg1809;

                                                            }
                                                          }
                                                        }
                                                        return $makeChar(97);
                                                      }
                                                      return $makeChar(98);
                                                    }
                                                    return $makeChar(99);
                                                  }
                                                  return $makeChar(100);
                                                }
                                                return $makeChar(101);
                                              }
                                              return $makeChar(102);
                                            }
                                            return $makeChar(103);
                                          }
                                          return $makeChar(104);
                                        }
                                        return $makeChar(105);
                                      }
                                      return $makeChar(106);
                                    }
                                    return $makeChar(107);
                                  }
                                  return $makeChar(108);
                                }
                                return $makeChar(109);
                              }
                              return $makeChar(110);
                            }
                            return $makeChar(111);
                          }
                          return $makeChar(112);
                        }
                        return $makeChar(113);
                      }
                      return $makeChar(114);
                    }
                    return $makeChar(115);
                  }
                  return $makeChar(116);
                }
                return $makeChar(117);
              }
              return $makeChar(118);
            }
            return $makeChar(119);
          }
          return $makeChar(120);
        }
        return $makeChar(121);
      }
      return $makeChar(122);
    }
    return this;
  }
};

sk$Char.prototype.utf8Encode = function() {
  var t$ = this;
  var code = t$.code();
  var t$1 = code;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    skip.throwException(sk, singleton$Invalid_utf8_char);
  else
    {
      var t$2 = code;
      if (t$2.$lt(new sk$Int(128.0, 0.0)).__value)
        {
          var t$3 = code;
          return new (sk$Array)([
            t$3
          ]);
        }
      else
        {
          var t$4 = code;
          if (t$4.$lt(new sk$Int(2048.0, 0.0)).__value)
            {
              var t$5 = code;
              var t$6 = t$5.$dv(new sk$Int(64.0, 0.0));
              var t$7 = new sk$Int(192.0, 0.0).$pl(t$6);
              var t$8 = code;
              var t$9 = t$8.$pc(new sk$Int(64.0, 0.0));
              var t$10 = new sk$Int(128.0, 0.0).$pl(t$9);
              return new (sk$Array)([
                t$7,
                t$10
              ]);
            }
          else
            {
              var t$11 = code;
              if (t$11.$lt(new sk$Int(65536.0, 0.0)).__value)
                {
                  var t$12 = code;
                  var t$13 = t$12.$dv(new sk$Int(4096.0, 0.0));
                  var t$14 = new sk$Int(224.0, 0.0).$pl(t$13);
                  var t$15 = code;
                  var t$16 = t$15.$dv(new sk$Int(64.0, 0.0));
                  var t$17 = t$16.$pc(new sk$Int(64.0, 0.0));
                  var t$18 = new sk$Int(128.0, 0.0).$pl(t$17);
                  var t$19 = code;
                  var t$20 = t$19.$pc(new sk$Int(64.0, 0.0));
                  var t$21 = new sk$Int(128.0, 0.0).$pl(t$20);
                  return new (sk$Array)([
                    t$14,
                    t$18,
                    t$21
                  ]);
                }
              else
                {
                  var t$22 = code;
                  if (t$22.$lt(new sk$Int(1114112.0, 0.0)).__value)
                    {
                      var t$23 = code;
                      var t$24 = t$23.$dv(new sk$Int(262144.0, 0.0));
                      var t$25 = new sk$Int(240.0, 0.0).$pl(t$24);
                      var t$26 = code;
                      var t$27 = t$26.$dv(new sk$Int(4096.0, 0.0));
                      var t$28 = t$27.$pc(new sk$Int(64.0, 0.0));
                      var t$29 = new sk$Int(128.0, 0.0).$pl(t$28);
                      var t$30 = code;
                      var t$31 = t$30.$dv(new sk$Int(64.0, 0.0));
                      var t$32 = t$31.$pc(new sk$Int(64.0, 0.0));
                      var t$33 = new sk$Int(128.0, 0.0).$pl(t$32);
                      var t$34 = code;
                      var t$35 = t$34.$pc(new sk$Int(64.0, 0.0));
                      var t$36 = new sk$Int(128.0, 0.0).$pl(t$35);
                      return new (sk$Array)([
                        t$25,
                        t$29,
                        t$33,
                        t$36
                      ]);
                    }
                  else
                    skip.throwException(sk, singleton$Invalid_utf8_char);
                }
            }
        }
    }
};

sk$Char.prototype.__bases = [
  sk$Char
];

sk$Char = sk.Char = skip.initNativeClass(sk, 'Char', sk$Char);

var sk$Cycle$dtState = sk.Cycle$dtState = function Cycle$dtState() {};

sk$Cycle$dtState.prototype = Object.create(Object.prototype);

sk$Cycle$dtState.prototype.__constructor = sk$Cycle$dtState;

sk$Cycle$dtState.prototype.__classname = 'Cycle.State';

sk$Cycle$dtState.prototype.$frozen = undefined;

sk$Cycle$dtState.prototype.__type_switch_id = -1;

sk$Cycle$dtState.prototype.__copy = function() {};

sk$Cycle$dtState.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp11 = __cache.get(this);
  if (_tmp11 === undefined)
    {
      var _tmp11 = this.__copy();
      _tmp11.$frozen = true;
      __cache.set(this, _tmp11);
    }
  return _tmp11;
};

sk$Cycle$dtState.prototype.__init = function(__named_parameters) {};

sk$Cycle$dtState.prototype.__bases = [
  sk$Cycle$dtState
];

var sk$Debug$dtBufferedWriter = sk.Debug$dtBufferedWriter = function Debug$dtBufferedWriter(print, capacity, buffer) {
  this.print = print;
  this.capacity = capacity === undefined ? ((() => 
  {
    return new sk$Int(25.0, 0.0);
  })()) : capacity;
  this.buffer = buffer === undefined ? ((() => 
  {
    return sk$Vector.mcreateFromItems(new (sk$Array)([]));
  })()) : buffer;
};

sk$Debug$dtBufferedWriter.prototype = Object.create(Object.prototype);

sk$Debug$dtBufferedWriter.prototype.__constructor = sk$Debug$dtBufferedWriter;

sk$Debug$dtBufferedWriter.prototype.__classname = 'Debug.BufferedWriter';

sk$Debug$dtBufferedWriter.prototype.$frozen = false;

sk$Debug$dtBufferedWriter.prototype.__type_switch_id = 23;

sk$Debug$dtBufferedWriter.prototype.__copy = function() {
  return new (sk$Debug$dtBufferedWriter)(this.print, this.capacity, this.buffer);
};

sk$Debug$dtBufferedWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp12 = __cache.get(this);
  if (_tmp12 === undefined)
    {
      var _tmp12 = this.__copy();
      _tmp12.$frozen = true;
      __cache.set(this, _tmp12);
      _tmp12.print = skip.deepFreeze(_tmp12.print, __cache);
      _tmp12.capacity = skip.deepFreeze(_tmp12.capacity, __cache);
      _tmp12.buffer = skip.deepFreeze(_tmp12.buffer, __cache);
    }
  return _tmp12;
};

sk$Debug$dtBufferedWriter.prototype.__init = function(__named_parameters) {};

sk$Debug$dtBufferedWriter.prototype.flush = function() {
  var t$ = this;
  var t$1 = t$.print;
  var t$2 = this;
  var t$3 = t$2.buffer;
  var t$4 = t$3.join(new sk$String(('')));
  t$1(t$4);
  var t$5 = this;
  var t$6 = t$5.buffer;
  return t$6.clear();
};

sk$Debug$dtBufferedWriter.prototype.write = function(str) {
  var t$ = this;
  var t$1 = t$.buffer;
  var t$2 = str;
  t$1.push(t$2);
  var t$3 = this;
  var t$4 = t$3.buffer;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.capacity;
  if (t$5.$gt(t$7).__value)
    {
      var t$8 = this;
      return t$8.flush();
    }
  else
    return sk.__.$void;
};

sk$Debug$dtBufferedWriter.prototype.__bases = [
  sk$Debug$dtBufferedWriter
];

var sk$Debug$dtDebugBoxBase = sk.Debug$dtDebugBoxBase = function Debug$dtDebugBoxBase() {};

sk$Debug$dtDebugBoxBase.prototype = Object.create(Object.prototype);

sk$Debug$dtDebugBoxBase.prototype.__constructor = sk$Debug$dtDebugBoxBase;

sk$Debug$dtDebugBoxBase.prototype.__classname = 'Debug.DebugBoxBase';

sk$Debug$dtDebugBoxBase.prototype.$frozen = undefined;

sk$Debug$dtDebugBoxBase.prototype.__type_switch_id = -1;

sk$Debug$dtDebugBoxBase.prototype.__copy = function() {};

sk$Debug$dtDebugBoxBase.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp13 = __cache.get(this);
  if (_tmp13 === undefined)
    {
      var _tmp13 = this.__copy();
      _tmp13.$frozen = true;
      __cache.set(this, _tmp13);
    }
  return _tmp13;
};

sk$Debug$dtDebugBoxBase.prototype.__init = function(__named_parameters) {};

sk$Debug$dtDebugBoxBase.prototype.__bases = [
  sk$Debug$dtDebugBoxBase
];

var sk$DirectedGraph = sk.DirectedGraph = function DirectedGraph(__named_parameters) {
  this.__init(__named_parameters);
};

sk$DirectedGraph.prototype = Object.create(Object.prototype);

sk$DirectedGraph.prototype.__constructor = sk$DirectedGraph;

sk$DirectedGraph.prototype.__classname = 'DirectedGraph';

sk$DirectedGraph.prototype.$frozen = true;

sk$DirectedGraph.prototype.__type_switch_id = 25;

sk$DirectedGraph.prototype.__copy = function() {
  return new (sk$DirectedGraph)(this);
};

sk$DirectedGraph.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp14 = __cache.get(this);
  if (_tmp14 === undefined)
    {
      var _tmp14 = this.__copy();
      _tmp14.$frozen = true;
      __cache.set(this, _tmp14);
      _tmp14.vertices = skip.deepFreeze(_tmp14.vertices, __cache);
      _tmp14.vertexToSuccessors = skip.deepFreeze(_tmp14.vertexToSuccessors, __cache);
    }
  return _tmp14;
};

sk$DirectedGraph.prototype.__init = function(__named_parameters) {
  this.vertices = __named_parameters.vertices;
  this.vertexToSuccessors = __named_parameters.vertexToSuccessors;
};

sk$DirectedGraph.prototype.dfsOrder = function(roots) {
  var seen = sk$UnorderedSet.mcreateFromItems(new (sk$Array)([]));
  var result = sk$Set.mcreateFromItems(new (sk$Array)([]));
  var todo = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var add = ((child) => 
  {
    var t$ = seen;
    var t$1 = child;
    if (t$.maybeInsert(t$1).__value)
      {
        var t$2 = todo;
        var t$3 = child;
        var t$4 = new (sk$Tuple2)(new sk$Int(0.0, 0.0), t$3);
        return t$2.push(t$4);
      }
    else
      return sk.__.$void;
  });
  var t$5 = roots;
  var $var = t$5.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg1884:{
      break$bg1884:{
        dowhile_else$bg1883:{
          do
            {
              jumpBlockOuterdowhile_cond$bg1885:{
                dowhile_cond$bg1885:{
                  {
                    var t$6 = $var;
                    var var2 = t$6.next();
                    var vertex;
                    {
                      jumpBlockOuterjumpLab$bg1922:{
                        jumpLab$bg1922:{
                          jumpLab$bg1921:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg1921;
                              
                              case 205:
                                vertex = var2.value;
                                break jumpLab$bg1922;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg1885;
                          }
                        }
                        {
                          var t$7 = add;
                          var t$8 = vertex;
                          t$7(t$8);
                          var break_val;
                          {
                            jumpBlockOuterbreak$bg1893:{
                              break$bg1893:{
                                while_else$bg1892:{
                                  do
                                    {
                                      jumpBlockOutercontinue$bg1894:{
                                        continue$bg1894:{
                                          {
                                            var t$9 = todo;
                                            var t$10 = t$9.isEmpty();
                                            if (t$10.$bg().__value)
                                              {
                                                var t$11 = todo;
                                                var var3 = t$11.pop();
                                                var var4;
                                                var var5;
                                                {
                                                  jumpBlockOuterjumpLab$bg1918:{
                                                    jumpLab$bg1918:{
                                                      switch (var3.__type_switch_id) {
                                                        case 392:
                                                          var5 = var3.i0;
                                                          var4 = var3.i1;
                                                          break jumpLab$bg1918;
                                                        
                                                        default:
                                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                                      }
                                                    }
                                                    {
                                                      var current = var4;
                                                      var index = var5;
                                                      var t$12 = this;
                                                      var t$13 = current;
                                                      var edges = t$12.successorsOf(t$13);
                                                      var t$14 = index;
                                                      var t$15 = edges;
                                                      var t$16 = t$15.size();
                                                      var t$17;
                                                      if (t$14.$lt(t$16).__value)
                                                        {
                                                          var t$18 = todo;
                                                          var t$19 = index;
                                                          var t$20 = t$19.$pl(new sk$Int(1.0, 0.0));
                                                          var t$21 = current;
                                                          var t$22 = new (sk$Tuple2)(t$20, t$21);
                                                          t$18.push(t$22);
                                                          var t$23 = add;
                                                          var t$24 = edges;
                                                          var t$25 = index;
                                                          var t$26 = t$24.get(t$25);
                                                          t$17 = t$23(t$26);
                                                        }
                                                      else
                                                        {
                                                          var t$27 = result;
                                                          var t$28 = current;
                                                          t$17 = t$27.add(t$28);
                                                        }
                                                    }
                                                    break jumpBlockOuterjumpLab$bg1918;
                                                  }
                                                }
                                              }
                                            else
                                              break while_else$bg1892;
                                          }
                                        }
                                        {}
                                        break jumpBlockOutercontinue$bg1894;
                                      }
                                    }
                                  while (true);
                                }
                                break_val = sk.__.$void;
                                break jumpBlockOuterbreak$bg1893;
                              }
                              {}
                              break jumpBlockOuterbreak$bg1893;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg1922;
                      }
                    }
                    break dowhile_cond$bg1885;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg1883;
                break jumpBlockOuterdowhile_cond$bg1885;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg1884;
      }
      {}
      break jumpBlockOuterbreak$bg1884;
    }
  }
  return skip.deepFreeze(result, new Map());
};

sk$DirectedGraph.prototype.dfsOrderAll = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.vertices;
  return t$.dfsOrder(t$2);
};

sk$DirectedGraph.prototype.edges = function() {
  var t$ = this;
  var t$1 = t$.vertices;
  var t$2 = t$1.values();
  return t$2.flatMap(((head) => 
  {
    var t$3 = this;
    var t$4 = head;
    var t$5 = t$3.successorsOf(t$4);
    var t$6 = t$5.map(((tail) => 
    {
      var t$7 = head;
      var t$8 = tail;
      return new (sk$Tuple2)(t$7, t$8);
    }));
    return t$6.values();
  }));
};

sk$DirectedGraph.prototype.getSmallestStronglyConnectedComponent = function() {
  var t$ = this;
  var t$1 = t$.getStronglyConnectedComponents();
  var t$2 = t$1.filter(((component) => 
  {
    var t$3 = component;
    var t$4 = t$3.size();
    return t$4.$gt(new sk$Int(1.0, 0.0));
  }));
  return t$2.minBy(((cycle) => 
  {
    var t$5 = cycle;
    return t$5.size();
  }));
};

sk$DirectedGraph.prototype.getStronglyConnectedComponents = function() {
  var vertexToIndex = sk$UnorderedMap.mcreateFromItems(new (sk$Array)([]));
  var vertexToComponentRootIndex = sk$UnorderedMap.mcreateFromItems(new (sk$Array)([]));
  var t$ = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var result = t$;
  var index = new sk$Int(0.0, 0.0);
  var stack = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var onStack = sk$UnorderedSet.mcreateFromItems(new (sk$Array)([]));
  var seen = ((vertex) => 
  {
    var t$1 = vertexToIndex;
    var t$2 = vertex;
    return t$1.containsKey(t$2);
  });
  var assignIndex = ((vertex1) => 
  {
    var t$3 = vertexToIndex;
    var t$4 = vertex1;
    var t$5 = index;
    t$3.add(t$4, t$5);
    var t$6 = vertexToComponentRootIndex;
    var t$7 = vertex1;
    var t$8 = index;
    t$6.add(t$7, t$8);
    var t$9 = index;
    index = t$9.$pl(new sk$Int(1.0, 0.0));
    var t$10 = stack;
    var t$11 = vertex1;
    t$10.push(t$11);
    var t$12 = onStack;
    var t$13 = vertex1;
    return t$12.add(t$13);
  });
  var componentRootIndex = ((vertex2) => 
  {
    var t$14 = vertexToComponentRootIndex;
    var t$15 = vertex2;
    return t$14.get(t$15);
  });
  var getIndex = ((vertex3) => 
  {
    var t$16 = vertexToIndex;
    var t$17 = vertex3;
    return t$16.get(t$17);
  });
  var reduceComponentRootIndex = ((vertex4, min) => 
  {
    var t$18 = componentRootIndex;
    var t$19 = vertex4;
    var t$20 = t$18(t$19);
    var t$21 = min;
    if (t$20.$gt(t$21).__value)
      {
        var t$22 = vertexToComponentRootIndex;
        var t$23 = vertex4;
        var t$24 = min;
        return t$22.set(t$23, t$24);
      }
    else
      return sk.__.$void;
  });
  var recurse = ((_) => 
  {
    return sk.__.$void;
  });
  recurse = ((vertex5) => 
  {
    var t$25 = seen;
    var t$26 = vertex5;
    var t$27 = t$25(t$26);
    if (t$27.$bg().__value)
      {
        var t$28 = assignIndex;
        var t$29 = vertex5;
        t$28(t$29);
        var t$30 = this;
        var t$31 = vertex5;
        var t$32 = t$30.successorsOf(t$31);
        var $var = t$32.values();
        var var1 = new sk$Bool((true));
        {
          jumpBlockOuterbreak$bg1981:{
            break$bg1981:{
              dowhile_else$bg1980:{
                do
                  {
                    jumpBlockOuterdowhile_cond$bg1982:{
                      dowhile_cond$bg1982:{
                        {
                          var t$33 = $var;
                          var var2 = t$33.next();
                          var neighbor;
                          {
                            jumpBlockOuterjumpLab$bg2030:{
                              jumpLab$bg2030:{
                                jumpLab$bg2029:{
                                  switch (var2.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg2029;
                                    
                                    case 205:
                                      neighbor = var2.value;
                                      break jumpLab$bg2030;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var1 = new sk$Bool((false));
                                  break dowhile_cond$bg1982;
                                }
                              }
                              {
                                var t$34 = seen;
                                var t$35 = neighbor;
                                var t$36 = t$34(t$35);
                                if (t$36.$bg().__value)
                                  {
                                    var t$37 = recurse;
                                    var t$38 = neighbor;
                                    t$37(t$38);
                                    var t$39 = reduceComponentRootIndex;
                                    var t$40 = vertex5;
                                    var t$41 = componentRootIndex;
                                    var t$42 = neighbor;
                                    var t$43 = t$41(t$42);
                                    t$39(t$40, t$43);
                                  }
                                else
                                  {
                                    var t$44 = onStack;
                                    var t$45 = neighbor;
                                    if (t$44.contains(t$45).__value)
                                      {
                                        var t$46 = reduceComponentRootIndex;
                                        var t$47 = vertex5;
                                        var t$48 = getIndex;
                                        var t$49 = neighbor;
                                        var t$50 = t$48(t$49);
                                        t$46(t$47, t$50);
                                      }
                                    else
                                      {}
                                  }
                              }
                              break jumpBlockOuterjumpLab$bg2030;
                            }
                          }
                          break dowhile_cond$bg1982;
                        }
                      }
                      if (var1.__value)
                        {}
                      else
                        break dowhile_else$bg1980;
                      break jumpBlockOuterdowhile_cond$bg1982;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg1981;
            }
            {}
            break jumpBlockOuterbreak$bg1981;
          }
        }
        var t$51 = getIndex;
        var t$52 = vertex5;
        var t$53 = t$51(t$52);
        var t$54 = componentRootIndex;
        var t$55 = vertex5;
        var t$56 = t$54(t$55);
        if (t$53.$eq$eq(t$56).__value)
          {
            var component = sk$Vector.mcreateFromItems(new (sk$Array)([]));
            {
              jumpBlockOuterbreak$bg2012:{
                break$bg2012:{
                  while_else$bg2011:{
                    do
                      {
                        jumpBlockOutercontinue$bg2013:{
                          continue$bg2013:{
                            {
                              var t$57 = stack;
                              var top = t$57.pop();
                              var t$58 = onStack;
                              var t$59 = top;
                              t$58.remove(t$59);
                              var t$60 = component;
                              var t$61 = top;
                              t$60.push(t$61);
                              var t$62 = top;
                              var t$63 = vertex5;
                              if (t$62.$bg$eq(t$63).__value)
                                {}
                              else
                                break while_else$bg2011;
                            }
                          }
                          {}
                          break jumpBlockOutercontinue$bg2013;
                        }
                      }
                    while (true);
                  }
                  {}
                  break jumpBlockOuterbreak$bg2012;
                }
                {}
                break jumpBlockOuterbreak$bg2012;
              }
            }
            var t$64 = result;
            var t$65 = skip.deepFreeze(component, new Map());
            return t$64.push(t$65);
          }
        else
          return sk.__.$void;
      }
    else
      return sk.__.$void;
  });
  var t$66 = this;
  var t$67 = t$66.vertices;
  var t$68 = recurse;
  t$67.each(t$68);
  return skip.deepFreeze(result, new Map());
};

sk$DirectedGraph.prototype.reachableFromBFS = function(vertex) {
  var t$ = vertex;
  var t$1 = new (sk$Array)([
    t$
  ]);
  var visited = sk$Set.mcreateFromItems(t$1);
  var t$2 = vertex;
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var todo = sk$Vector.mcreateFromItems(t$3);
  var index = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg2038:{
      break$bg2038:{
        while_else$bg2037:{
          do
            {
              jumpBlockOutercontinue$bg2039:{
                continue$bg2039:{
                  {
                    var t$4 = index;
                    var t$5 = todo;
                    var t$6 = t$5.size();
                    if (t$4.$lt(t$6).__value)
                      {
                        var t$7 = todo;
                        var t$8 = index;
                        var current = t$7.get(t$8);
                        var t$9 = index;
                        index = t$9.$pl(new sk$Int(1.0, 0.0));
                        var t$10 = this;
                        var t$11 = current;
                        var t$12 = t$10.successorsOf(t$11);
                        var $var = t$12.values();
                        var var1 = new sk$Bool((true));
                        var break_val;
                        {
                          jumpBlockOuterbreak$bg2053:{
                            break$bg2053:{
                              dowhile_else$bg2052:{
                                do
                                  {
                                    jumpBlockOuterdowhile_cond$bg2054:{
                                      dowhile_cond$bg2054:{
                                        {
                                          var t$13 = $var;
                                          var var2 = t$13.next();
                                          var child;
                                          {
                                            jumpBlockOuterjumpLab$bg2064:{
                                              jumpLab$bg2064:{
                                                jumpLab$bg2063:{
                                                  switch (var2.__type_switch_id) {
                                                    case 204:
                                                      break jumpLab$bg2063;
                                                    
                                                    case 205:
                                                      child = var2.value;
                                                      break jumpLab$bg2064;
                                                    
                                                    default:
                                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                                  }
                                                }
                                                {
                                                  var1 = new sk$Bool((false));
                                                  break dowhile_cond$bg2054;
                                                }
                                              }
                                              {
                                                var t$14 = visited;
                                                var t$15 = child;
                                                if (t$14.maybeInsert(t$15).__value)
                                                  {
                                                    var t$16 = todo;
                                                    var t$17 = child;
                                                    t$16.push(t$17);
                                                  }
                                                else
                                                  {}
                                              }
                                              break jumpBlockOuterjumpLab$bg2064;
                                            }
                                          }
                                          break dowhile_cond$bg2054;
                                        }
                                      }
                                      if (var1.__value)
                                        {}
                                      else
                                        break dowhile_else$bg2052;
                                      break jumpBlockOuterdowhile_cond$bg2054;
                                    }
                                  }
                                while (true);
                              }
                              break_val = sk.__.$void;
                              break jumpBlockOuterbreak$bg2053;
                            }
                            {}
                            break jumpBlockOuterbreak$bg2053;
                          }
                        }
                      }
                    else
                      break while_else$bg2037;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg2039;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg2038;
      }
      {}
      break jumpBlockOuterbreak$bg2038;
    }
  }
  return skip.deepFreeze(visited, new Map());
};

sk$DirectedGraph.prototype.reachableFromDFS = function(vertex) {
  var t$ = this;
  var t$1 = vertex;
  var t$2 = new (sk$Array)([
    t$1
  ]);
  var t$3 = sk$Vector.createFromItems(t$2);
  return t$.dfsOrder(t$3);
};

sk$DirectedGraph.prototype.successorsOf = function(vertex) {
  var t$ = this;
  var t$1 = t$.vertexToSuccessors;
  var t$2 = vertex;
  return t$1(t$2);
};

sk$DirectedGraph.prototype.__bases = [
  sk$DirectedGraph
];

var sk$Doc = sk.Doc = function Doc() {};

sk$Doc.prototype = Object.create(Object.prototype);

sk$Doc.prototype.__constructor = sk$Doc;

sk$Doc.prototype.__classname = 'Doc';

sk$Doc.prototype.$frozen = undefined;

sk$Doc.prototype.__type_switch_id = -1;

sk$Doc.prototype.__copy = function() {
  return new (sk$Doc)();
};

sk$Doc.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp15 = __cache.get(this);
  if (_tmp15 === undefined)
    {
      var _tmp15 = this.__copy();
      _tmp15.$frozen = true;
      __cache.set(this, _tmp15);
    }
  return _tmp15;
};

sk$Doc.prototype.__init = function(__named_parameters) {};

sk$Doc.prototype.__bases = [
  sk$Doc
];

var sk$Doc$dtCommand = sk.Doc$dtCommand = function Doc$dtCommand(indent, mode, doc) {
  this.indent = indent;
  this.mode = mode;
  this.doc = doc;
};

sk$Doc$dtCommand.prototype = Object.create(Object.prototype);

sk$Doc$dtCommand.prototype.__constructor = sk$Doc$dtCommand;

sk$Doc$dtCommand.prototype.__classname = 'Doc.Command';

sk$Doc$dtCommand.prototype.$frozen = true;

sk$Doc$dtCommand.prototype.__type_switch_id = 40;

sk$Doc$dtCommand.prototype.__copy = function() {
  return new (sk$Doc$dtCommand)(this.indent, this.mode, this.doc);
};

sk$Doc$dtCommand.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp16 = __cache.get(this);
  if (_tmp16 === undefined)
    {
      var _tmp16 = this.__copy();
      _tmp16.$frozen = true;
      __cache.set(this, _tmp16);
      _tmp16.indent = skip.deepFreeze(_tmp16.indent, __cache);
      _tmp16.mode = skip.deepFreeze(_tmp16.mode, __cache);
      _tmp16.doc = skip.deepFreeze(_tmp16.doc, __cache);
    }
  return _tmp16;
};

sk$Doc$dtCommand.prototype.__init = function(__named_parameters) {};

sk$Doc$dtCommand.prototype.__bases = [
  sk$Doc$dtCommand
];

var sk$Doc$dtIndentComputation = sk.Doc$dtIndentComputation = function Doc$dtIndentComputation(indent, alignSpaces, alignTabs) {
  this.indent = indent;
  this.alignSpaces = alignSpaces;
  this.alignTabs = alignTabs;
};

sk$Doc$dtIndentComputation.prototype = Object.create(Object.prototype);

sk$Doc$dtIndentComputation.prototype.__constructor = sk$Doc$dtIndentComputation;

sk$Doc$dtIndentComputation.prototype.__classname = 'Doc.IndentComputation';

sk$Doc$dtIndentComputation.prototype.$frozen = true;

sk$Doc$dtIndentComputation.prototype.__type_switch_id = 41;

sk$Doc$dtIndentComputation.prototype.__copy = function() {
  return new (sk$Doc$dtIndentComputation)(this.indent, this.alignSpaces, this.alignTabs);
};

sk$Doc$dtIndentComputation.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp17 = __cache.get(this);
  if (_tmp17 === undefined)
    {
      var _tmp17 = this.__copy();
      _tmp17.$frozen = true;
      __cache.set(this, _tmp17);
      _tmp17.indent = skip.deepFreeze(_tmp17.indent, __cache);
      _tmp17.alignSpaces = skip.deepFreeze(_tmp17.alignSpaces, __cache);
      _tmp17.alignTabs = skip.deepFreeze(_tmp17.alignTabs, __cache);
    }
  return _tmp17;
};

sk$Doc$dtIndentComputation.prototype.__init = function(__named_parameters) {};

sk$Doc$dtIndentComputation.prototype.__bases = [
  sk$Doc$dtIndentComputation
];

var sk$Doc$dtMode = sk.Doc$dtMode = function Doc$dtMode() {};

sk$Doc$dtMode.prototype = Object.create(Object.prototype);

sk$Doc$dtMode.prototype.__constructor = sk$Doc$dtMode;

sk$Doc$dtMode.prototype.__classname = 'Doc.Mode';

sk$Doc$dtMode.prototype.$frozen = undefined;

sk$Doc$dtMode.prototype.__type_switch_id = -1;

sk$Doc$dtMode.prototype.__copy = function() {};

sk$Doc$dtMode.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp18 = __cache.get(this);
  if (_tmp18 === undefined)
    {
      var _tmp18 = this.__copy();
      _tmp18.$frozen = true;
      __cache.set(this, _tmp18);
    }
  return _tmp18;
};

sk$Doc$dtMode.prototype.__init = function(__named_parameters) {};

sk$Doc$dtMode.prototype.__bases = [
  sk$Doc$dtMode
];

var sk$Equality = sk.Equality = function Equality() {};

sk$Equality.prototype = Object.create(Object.prototype);

sk$Equality.prototype.__constructor = sk$Equality;

sk$Equality.prototype.__classname = 'Equality';

sk$Equality.prototype.$frozen = undefined;

sk$Equality.prototype.__type_switch_id = -1;

sk$Equality.prototype.__copy = function() {};

sk$Equality.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp19 = __cache.get(this);
  if (_tmp19 === undefined)
    {
      var _tmp19 = this.__copy();
      _tmp19.$frozen = true;
      __cache.set(this, _tmp19);
    }
  return _tmp19;
};

sk$Equality.prototype.__init = function(__named_parameters) {};

sk$Equality.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Equality.prototype.__bases = [
  sk$Equality
];

var sk$Exception = sk.Exception = function Exception() {};

sk$Exception.prototype = Object.create(Object.prototype);

sk$Exception.prototype.__constructor = sk$Exception;

sk$Exception.prototype.__classname = 'Exception';

sk$Exception.prototype.$frozen = undefined;

sk$Exception.prototype.__type_switch_id = -1;

sk$Exception.prototype.__copy = function() {};

sk$Exception.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp20 = __cache.get(this);
  if (_tmp20 === undefined)
    {
      var _tmp20 = this.__copy();
      _tmp20.$frozen = true;
      __cache.set(this, _tmp20);
    }
  return _tmp20;
};

sk$Exception.prototype.__init = function(__named_parameters) {};

sk$Exception.prototype.__bases = [
  sk$Exception
];

var sk$FilePosition = sk.FilePosition = function FilePosition(__named_parameters) {
  this.__init(__named_parameters);
};

sk$FilePosition.prototype = Object.create(Object.prototype);

sk$FilePosition.prototype.__constructor = sk$FilePosition;

sk$FilePosition.prototype.__classname = 'FilePosition';

sk$FilePosition.prototype.$frozen = true;

sk$FilePosition.prototype.__type_switch_id = 79;

sk$FilePosition.prototype.__copy = function() {
  return new (sk$FilePosition)(this);
};

sk$FilePosition.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp21 = __cache.get(this);
  if (_tmp21 === undefined)
    {
      var _tmp21 = this.__copy();
      _tmp21.$frozen = true;
      __cache.set(this, _tmp21);
      _tmp21.filename = skip.deepFreeze(_tmp21.filename, __cache);
      _tmp21.position = skip.deepFreeze(_tmp21.position, __cache);
    }
  return _tmp21;
};

sk$FilePosition.prototype.__init = function(__named_parameters) {
  this.filename = __named_parameters.filename;
  this.position = __named_parameters.position;
};

sk$FilePosition.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$FilePosition.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$FilePosition.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$FilePosition.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$FilePosition.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$FilePosition.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$FilePosition.prototype.atBeginningOfLine = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.atBeginningOfLine();
};

sk$FilePosition.prototype.beginningOfLine = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.position;
  var t$4 = t$3.beginningOfLine();
  return sk$FilePosition$dtcreate(t$1, t$4);
};

sk$FilePosition.prototype.column = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.column();
};

sk$FilePosition.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = other;
  var t$3 = t$2.position;
  return t$1.compare(t$3);
};

sk$FilePosition.prototype.getClassName = function() {
  return new sk$String(('FilePosition'));
};

sk$FilePosition.prototype.hash = function() {
  var h = new sk$String(('FilePosition')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.filename;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.position;
  return sk$Hashable$dtcombine(t$3, t$5);
};

sk$FilePosition.prototype.line = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.line();
};

sk$FilePosition.prototype.nextColumn = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.position;
  var t$4 = t$3.nextColumn();
  return sk$FilePosition$dtcreate(t$1, t$4);
};

sk$FilePosition.prototype.nextLine = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.position;
  var t$4 = t$3.nextLine();
  return sk$FilePosition$dtcreate(t$1, t$4);
};

sk$FilePosition.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.position;
  var t$4 = t$3.toString();
  return t$1.$pl(t$4);
};

sk$FilePosition.prototype.__bases = [
  sk$FilePosition
];

var sk$Float = sk.Float = function Float() {};

sk$Float.prototype = Object.create(Object.prototype);

sk$Float.prototype.__constructor = sk$Float;

sk$Float.prototype.__classname = 'Float';

sk$Float.prototype.$frozen = true;

sk$Float.prototype.__type_switch_id = 80;

sk$Float.prototype.__init = function(__named_parameters) {};

sk$Float.prototype.$bg$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::!=')));
};

sk$Float.prototype.$ti = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::*')));
};

sk$Float.prototype.$pl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::+')));
};

sk$Float.prototype.$mi = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::-')));
};

sk$Float.prototype.$dv = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::/')));
};

sk$Float.prototype.$lt = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::<')));
};

sk$Float.prototype.$lt$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::<=')));
};

sk$Float.prototype.$eq$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::==')));
};

sk$Float.prototype.$gt = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::>')));
};

sk$Float.prototype.$gt$eq = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::>=')));
};

sk$Float.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = other;
  if (t$.$lt(t$1).__value)
    return singleton$LT;
  else
    {
      var t$2 = this;
      var t$3 = other;
      if (t$2.$eq$eq(t$3).__value)
        return singleton$EQ;
      else
        return singleton$GT;
    }
};

sk$Float.prototype.fromFloat = function(x) {
  return x;
};

sk$Float.prototype.fromInt = function(x) {
  var t$ = x;
  return t$.toFloat();
};

sk$Float.generator = function() {
  return singleton$QuickCheck$dtFloatGenerator;
};

sk$Float.prototype.getClassName = function() {
  return new sk$String(('Float'));
};

sk$Float.prototype.hash = function() {
  var t$ = this;
  var bits = t$.toBits();
  var t$1 = bits;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$Float((-0.0)).toBits();
  else
    return bits;
};

sk$Float.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toString();
  return new (sk$InspectLiteral)(t$1);
};

sk$Float.prototype.isEqual = function(other) {
  var t$ = this;
  var t$1 = t$.toBits();
  var t$2 = other;
  var t$3 = t$2.toBits();
  return t$1.$eq$eq(t$3);
};

sk$Float.prototype.isNaN = function() {
  var t$ = this;
  var t$1 = this;
  return t$.$bg$eq(t$1);
};

sk$Float.prototype.negate = function() {
  var t$ = new sk$Float((0.0)).$mi(new sk$Float((1.0)));
  var t$1 = new sk$Float((0.0)).$ti(t$);
  var t$2 = this;
  return t$1.$mi(t$2);
};

sk$Float.prototype.shrink = function(firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (firstShrink === undefined)
      firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    if (t$.$lt(new sk$Float((0.0))).__value)
      {
        var t$1 = this;
        yield new sk$Some(t$1.negate());
      }
    else
      {}
    var t$2 = this;
    var t$3;
    if (t$2.$gt(new sk$Float((0.0))).__value)
      {
        var t$4 = this;
        t$3 = t$4.toInt();
      }
    else
      {
        var t$5 = this;
        var t$6 = t$5.negate();
        var t$7 = t$6.toInt();
        t$3 = t$7.negate();
      }
    var truncated = t$3;
    var t$8 = truncated;
    var t$9 = firstShrink;
    var t$10 = t$8.shrink(t$9);
    var $var = t$10.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg2416:{
        break$bg2416:{
          dowhile_else$bg2415:{
            do
              {
                jumpBlockOuterdowhile_cond$bg2417:{
                  dowhile_cond$bg2417:{
                    {
                      var t$11 = $var;
                      var var2 = t$11.next();
                      var x;
                      {
                        jumpBlockOuterjumpLab$bg2424:{
                          jumpLab$bg2424:{
                            jumpLab$bg2423:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg2423;
                                
                                case 205:
                                  x = var2.value;
                                  break jumpLab$bg2424;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg2417;
                            }
                          }
                          {
                            var t$12 = x;
                            yield new sk$Some(t$12.toFloat());
                          }
                          break jumpBlockOuterjumpLab$bg2424;
                        }
                      }
                      break dowhile_cond$bg2417;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg2415;
                  break jumpBlockOuterdowhile_cond$bg2417;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg2416;
        }
        {}
        break jumpBlockOuterbreak$bg2416;
      }
    }
    return undefined;
  });
};

sk$Float.prototype.toBits = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::toBits')));
};

sk$Float.prototype.toFloat = function() {
  return this;
};

sk$Float.prototype.toInt = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::toInt')));
};

sk$Float.prototype.toString = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Float::toString')));
};

sk$Float.prototype.__bases = [
  sk$Float
];

sk$Float = sk.Float = skip.initNativeClass(sk, 'Float', sk$Float);

Object.defineProperty(sk$Float, 'inf', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$Float((1.0)).$dv(new sk$Float((0.0)));
    })());
    Object.defineProperty(sk$Float, 'inf', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Float, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$FloatMetaClass;
    })());
    Object.defineProperty(sk$Float, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Float, 'nan', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$Float((0.0)).$dv(new sk$Float((0.0)));
    })());
    Object.defineProperty(sk$Float, 'nan', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$FromIterator = sk.FromIterator = function FromIterator() {};

sk$FromIterator.prototype = Object.create(Object.prototype);

sk$FromIterator.prototype.__constructor = sk$FromIterator;

sk$FromIterator.prototype.__classname = 'FromIterator';

sk$FromIterator.prototype.$frozen = undefined;

sk$FromIterator.prototype.__type_switch_id = -1;

sk$FromIterator.prototype.__copy = function() {};

sk$FromIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp22 = __cache.get(this);
  if (_tmp22 === undefined)
    {
      var _tmp22 = this.__copy();
      _tmp22.$frozen = true;
      __cache.set(this, _tmp22);
    }
  return _tmp22;
};

sk$FromIterator.prototype.__init = function(__named_parameters) {};

sk$FromIterator.prototype.__bases = [
  sk$FromIterator
];

var sk$GTest$dtTestCase = sk.GTest$dtTestCase = function GTest$dtTestCase(__named_parameters) {
  this.__init(__named_parameters);
};

sk$GTest$dtTestCase.prototype = Object.create(Object.prototype);

sk$GTest$dtTestCase.prototype.__constructor = sk$GTest$dtTestCase;

sk$GTest$dtTestCase.prototype.__classname = 'GTest.TestCase';

sk$GTest$dtTestCase.prototype.$frozen = true;

sk$GTest$dtTestCase.prototype.__type_switch_id = 81;

sk$GTest$dtTestCase.prototype.__copy = function() {
  return new (sk$GTest$dtTestCase)(this);
};

sk$GTest$dtTestCase.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp23 = __cache.get(this);
  if (_tmp23 === undefined)
    {
      var _tmp23 = this.__copy();
      _tmp23.$frozen = true;
      __cache.set(this, _tmp23);
      _tmp23.name = skip.deepFreeze(_tmp23.name, __cache);
      _tmp23.tests = skip.deepFreeze(_tmp23.tests, __cache);
    }
  return _tmp23;
};

sk$GTest$dtTestCase.prototype.__init = function(__named_parameters) {
  this.name = __named_parameters.name;
  this.tests = __named_parameters.tests;
};

sk$GTest$dtTestCase.prototype.list_tests = function() {
  var t$ = this;
  var t$1 = t$.name;
  var t$2 = t$1.$pl(new sk$String(('.')));
  sk$print_string(t$2);
  var t$3 = this;
  var t$4 = t$3.tests;
  return t$4.each(((name, _) => 
  {
    var t$5 = name;
    var t$6 = new sk$String(('  ')).$pl(t$5);
    return sk$print_string(t$6);
  }));
};

sk$GTest$dtTestCase.$new = function(name, tests) {
  var t$ = name;
  var t$1 = tests;
  return new (sk$GTest$dtTestCase)({
    name: t$,
    tests: t$1
  });
};

sk$GTest$dtTestCase.prototype.run = function() {
  var runTests = new sk$Bool((true));
  var positiveFilters = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = sk$$arguments();
  t$.each(((arg) => 
  {
    var t$1 = arg;
    if (t$1.$eq$eq(new sk$String(('--gtest_list_tests'))).__value)
      {
        var t$2 = this;
        t$2.list_tests();
        runTests = new sk$Bool((false));
        return sk.__.$void;
      }
    else
      {
        var t$3 = arg;
        if (t$3.startsWith(new sk$String(('--gtest_filter='))).__value)
          {
            var t$4 = arg;
            var t$5 = t$4.split(new sk$String(('=')));
            var value = t$5.get(new sk$Int(1.0, 0.0));
            var t$6 = value;
            var t$7 = t$6.split(new sk$String((':')));
            return t$7.each(((f) => 
            {
              var t$8 = positiveFilters;
              var t$9 = f;
              var t$10 = sk$Glob$dttoRegex(t$9);
              var t$11 = new sk$String(('^')).$pl(t$10);
              var t$12 = t$11.$pl(new sk$String(('$')));
              var t$13 = sk$Regex.create(t$12, undefined);
              return t$8.push(t$13);
            }));
          }
        else
          {
            var t$14 = arg;
            var t$15;
            if (t$14.$eq$eq(new sk$String(('--gtest_color=no'))).__value)
              t$15 = new sk$Bool((true));
            else
              {
                var t$16 = arg;
                t$15 = t$16.$eq$eq(new sk$String(('--gtest_catch_exceptions=0')));
              }
            var t$17;
            if (t$15.__value)
              t$17 = new sk$Bool((true));
            else
              {
                var t$18 = arg;
                t$17 = t$18.$eq$eq(new sk$String(('--gtest_also_run_disabled_tests')));
              }
            if (t$17.__value)
              return sk.__.$void;
            else
              {
                var t$19 = arg;
                if (t$19.$eq$eq(new sk$String(('--help'))).__value)
                  {
                    var t$20 = this;
                    t$20.usage();
                    runTests = new sk$Bool((false));
                    return sk.__.$void;
                  }
                else
                  {
                    var t$21 = arg;
                    var t$22 = new sk$String(('Unknown argument: ')).$pl(t$21);
                    var t$23 = t$22.$pl(new sk$String(('\n')));
                    sk$print_error(t$23);
                    var t$24 = this;
                    t$24.usage();
                    return sk$exit(new sk$Int(1.0, 0.0));
                  }
              }
          }
      }
  }));
  if (runTests.__value)
    {
      var tests = sk$Vector.mcreateFromItems(new (sk$Array)([]));
      var t$25 = this;
      var t$26 = t$25.tests;
      t$26.each(((name, fn) => 
      {
        var t$27 = this;
        var t$28 = t$27.name;
        var t$29 = t$28.$pl(new sk$String(('.')));
        var t$30 = name;
        var fullname = t$29.$pl(t$30);
        var t$31 = positiveFilters;
        var t$32;
        if (t$31.isEmpty().__value)
          t$32 = new sk$Bool((true));
        else
          {
            var t$33 = positiveFilters;
            t$32 = t$33.any(((f1) => 
            {
              var t$34 = fullname;
              var t$35 = f1;
              return t$34.matches(t$35);
            }));
          }
        if (t$32.__value)
          {
            var t$36 = tests;
            var t$37 = fullname;
            var t$38 = fn;
            var t$39 = new (sk$Tuple2)(t$37, t$38);
            return t$36.push(t$39);
          }
        else
          return sk.__.$void;
      }));
      var t$40 = tests;
      var t$41 = t$40.size();
      var t$42 = new sk$String(('[==========] Running ')).$pl(t$41);
      var t$43 = t$42.$pl(new sk$String((' tests from 1 test case.')));
      sk$print_string(t$43);
      sk$print_string(new sk$String(('[----------] Global test environment set-up.')));
      var t$44 = tests;
      var t$45 = t$44.size();
      var t$46 = new sk$String(('[----------] ')).$pl(t$45);
      var t$47 = t$46.$pl(new sk$String((' tests from ')));
      var t$48 = this;
      var t$49 = t$48.name;
      var t$50 = t$47.$pl(t$49);
      sk$print_string(t$50);
      var passed = new sk$Int(0.0, 0.0);
      var failures = sk$Vector.mcreateFromItems(new (sk$Array)([]));
      var totalDuration = new sk$Int(0.0, 0.0);
      var t$51 = tests;
      t$51.each(((param) => 
      {
        var fullname1;
        var fn1;
        {
          jumpBlockOuterjumpLab$bg2611:{
            jumpLab$bg2611:{
              switch (param.__type_switch_id) {
                case 392:
                  fullname1 = param.i0;
                  fn1 = param.i1;
                  break jumpLab$bg2611;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            {
              var t$52 = positiveFilters;
              var t$53 = t$52.size();
              var t$54;
              if (t$53.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                t$54 = new sk$Bool((true));
              else
                {
                  var t$55 = positiveFilters;
                  t$54 = t$55.any(((f2) => 
                  {
                    var t$56 = fullname1;
                    var t$57 = f2;
                    return t$56.matches(t$57);
                  }));
                }
              if (t$54.__value)
                {
                  var t$58 = fullname1;
                  var t$59 = new sk$String(('[ RUN      ] ')).$pl(t$58);
                  sk$print_string(t$59);
                  sk$profile_start();
                  try {
                    {
                      var t$60 = fn1;
                      t$60();
                      var t$61 = passed;
                      passed = t$61.$pl(new sk$Int(1.0, 0.0));
                      var t$62 = sk$profile_stop();
                      var fnDuration = t$62.toInt();
                      var t$63 = fullname1;
                      var t$64 = new sk$String(('[       OK ] ')).$pl(t$63);
                      var t$65 = t$64.$pl(new sk$String((' (')));
                      var t$66 = fnDuration;
                      var t$67 = t$65.$pl(t$66);
                      var t$68 = t$67.$pl(new sk$String((' ms)')));
                      sk$print_string(t$68);
                      var t$69 = totalDuration;
                      var t$70 = fnDuration;
                      totalDuration = t$69.$pl(t$70);
                      return sk.__.$void;
                    }
                  }catch ($var){
                    {
                      var e;
                      {
                        jumpBlockOuterjumpLab$bg2609:{
                          jumpLab$bg2609:{
                            switch ($var.__type_switch_id) {
                              case 65:
                                e = $var;
                                break jumpLab$bg2609;
                              
                              default:
                                skip.throwException(sk, $var);

                            }
                          }
                          {
                            var t$71 = failures;
                            var t$72 = fullname1;
                            t$71.push(t$72);
                            var t$73 = e;
                            var t$74 = t$73.getMessage();
                            sk$print_string(t$74);
                            var t$75 = sk$profile_stop();
                            var fnDuration1 = t$75.toInt();
                            var t$76 = fullname1;
                            var t$77 = new sk$String(('[  FAILED  ] ')).$pl(t$76);
                            var t$78 = t$77.$pl(new sk$String((' (')));
                            var t$79 = fnDuration1;
                            var t$80 = t$78.$pl(t$79);
                            var t$81 = t$80.$pl(new sk$String((' ms)')));
                            sk$print_string(t$81);
                            var t$82 = totalDuration;
                            var t$83 = fnDuration1;
                            totalDuration = t$82.$pl(t$83);
                            return sk.__.$void;
                          }
                        }
                      }
                    }
                  }
                }
              else
                return sk.__.$void;
            }
          }
        }
      }));
      var t$84 = tests;
      var t$85 = t$84.size();
      var t$86 = new sk$String(('[----------] ')).$pl(t$85);
      var t$87 = t$86.$pl(new sk$String((' tests from ')));
      var t$88 = this;
      var t$89 = t$88.name;
      var t$90 = t$87.$pl(t$89);
      var t$91 = t$90.$pl(new sk$String((' (')));
      var t$92 = totalDuration;
      var t$93 = t$91.$pl(t$92);
      var t$94 = t$93.$pl(new sk$String((' ms total)')));
      sk$print_string(t$94);
      sk$print_string(new sk$String(('')));
      sk$print_string(new sk$String(('[----------] Global test environment tear-down')));
      var t$95 = tests;
      var t$96 = t$95.size();
      var t$97 = new sk$String(('[==========] ')).$pl(t$96);
      var t$98 = t$97.$pl(new sk$String((' tests from 1 test case ran. (')));
      var t$99 = totalDuration;
      var t$100 = t$98.$pl(t$99);
      var t$101 = t$100.$pl(new sk$String((' ms total)')));
      sk$print_string(t$101);
      var t$102 = passed;
      if (t$102.$bg$eq(new sk$Int(0.0, 0.0)).__value)
        {
          var t$103 = passed;
          var t$104 = new sk$String(('[  PASSED  ] ')).$pl(t$103);
          var t$105 = t$104.$pl(new sk$String((' tests.')));
          sk$print_string(t$105);
        }
      else
        {}
      var t$106 = failures;
      var t$107 = t$106.size();
      if (t$107.$bg$eq(new sk$Int(0.0, 0.0)).__value)
        {
          var t$108 = failures;
          var t$109 = t$108.size();
          var t$110 = new sk$String(('[  FAILED  ] ')).$pl(t$109);
          var t$111 = t$110.$pl(new sk$String((' tests, listed below:')));
          sk$print_string(t$111);
          var t$112 = failures;
          t$112.each(((name1) => 
          {
            var t$113 = name1;
            var t$114 = new sk$String(('[  FAILED  ] ')).$pl(t$113);
            return sk$print_string(t$114);
          }));
          sk$exit(new sk$Int(1.0, 0.0));
        }
      else
        {}
      var t$115 = failures;
      var t$116 = t$115.size();
      if (t$116.$bg$eq(new sk$Int(0.0, 0.0)).__value)
        return sk$exit(new sk$Int(1.0, 0.0));
      else
        return sk.__.$void;
    }
  else
    return sk.__.$void;
};

sk$GTest$dtTestCase.prototype.usage = function() {
  sk$print_string(new sk$String(('Skip Test Harness')));
  sk$print_string(new sk$String(('')));
  sk$print_string(new sk$String(('  --gtest_list_tests')));
  return sk$print_string(new sk$String(('  --gtest_filter=POSTIVE_PATTERNS[-NEGATIVE_PATTERNS]')));
};

sk$GTest$dtTestCase.prototype.__bases = [
  sk$GTest$dtTestCase
];

var sk$Glob$dtGlobState = sk.Glob$dtGlobState = function Glob$dtGlobState() {};

sk$Glob$dtGlobState.prototype = Object.create(Object.prototype);

sk$Glob$dtGlobState.prototype.__constructor = sk$Glob$dtGlobState;

sk$Glob$dtGlobState.prototype.__classname = 'Glob.GlobState';

sk$Glob$dtGlobState.prototype.$frozen = undefined;

sk$Glob$dtGlobState.prototype.__type_switch_id = -1;

sk$Glob$dtGlobState.prototype.__copy = function() {};

sk$Glob$dtGlobState.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp24 = __cache.get(this);
  if (_tmp24 === undefined)
    {
      var _tmp24 = this.__copy();
      _tmp24.$frozen = true;
      __cache.set(this, _tmp24);
    }
  return _tmp24;
};

sk$Glob$dtGlobState.prototype.__init = function(__named_parameters) {};

sk$Glob$dtGlobState.prototype.__bases = [
  sk$Glob$dtGlobState
];

var sk$HH$dtLambda = sk.HH$dtLambda = function HH$dtLambda() {};

sk$HH$dtLambda.prototype = Object.create(Object.prototype);

sk$HH$dtLambda.prototype.__constructor = sk$HH$dtLambda;

sk$HH$dtLambda.prototype.__classname = 'HH.Lambda';

sk$HH$dtLambda.prototype.$frozen = undefined;

sk$HH$dtLambda.prototype.__type_switch_id = -1;

sk$HH$dtLambda.prototype.__copy = function() {};

sk$HH$dtLambda.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp25 = __cache.get(this);
  if (_tmp25 === undefined)
    {
      var _tmp25 = this.__copy();
      _tmp25.$frozen = true;
      __cache.set(this, _tmp25);
    }
  return _tmp25;
};

sk$HH$dtLambda.prototype.__init = function(__named_parameters) {};

sk$HH$dtLambda.prototype.__bases = [
  sk$HH$dtLambda
];

var sk$HH$dtMixed = sk.HH$dtMixed = function HH$dtMixed() {};

sk$HH$dtMixed.prototype = Object.create(Object.prototype);

sk$HH$dtMixed.prototype.__constructor = sk$HH$dtMixed;

sk$HH$dtMixed.prototype.__classname = 'HH.Mixed';

sk$HH$dtMixed.prototype.$frozen = undefined;

sk$HH$dtMixed.prototype.__type_switch_id = -1;

sk$HH$dtMixed.prototype.__copy = function() {};

sk$HH$dtMixed.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp26 = __cache.get(this);
  if (_tmp26 === undefined)
    {
      var _tmp26 = this.__copy();
      _tmp26.$frozen = true;
      __cache.set(this, _tmp26);
    }
  return _tmp26;
};

sk$HH$dtMixed.prototype.__init = function(__named_parameters) {};

sk$HH$dtMixed.prototype.expectBool = function() {
  var x;
  {
    jumpBlockOuterjumpLab$bg2643:{
      jumpLab$bg2643:{
        jumpLab$bg2642:{
          switch (this.__type_switch_id) {
            case 102:
              x = this.x;
              break jumpLab$bg2642;
            
            default:
              break jumpLab$bg2643;

          }
        }
        return x;
      }
      {
        var t$ = this;
        var t$1 = t$.typeError(new sk$String(('Bool')));
        return sk$invariant_violation(t$1);
      }
    }
  }
};

sk$HH$dtMixed.prototype.expectFloat = function() {
  var x;
  {
    jumpBlockOuterjumpLab$bg2650:{
      jumpLab$bg2650:{
        jumpLab$bg2649:{
          switch (this.__type_switch_id) {
            case 96:
              x = this.x;
              break jumpLab$bg2649;
            
            default:
              break jumpLab$bg2650;

          }
        }
        return x;
      }
      {
        var t$ = this;
        var t$1 = t$.typeError(new sk$String(('Float')));
        return sk$invariant_violation(t$1);
      }
    }
  }
};

sk$HH$dtMixed.prototype.expectInt = function() {
  var x;
  {
    jumpBlockOuterjumpLab$bg2657:{
      jumpLab$bg2657:{
        jumpLab$bg2656:{
          switch (this.__type_switch_id) {
            case 94:
              x = this.x;
              break jumpLab$bg2656;
            
            default:
              break jumpLab$bg2657;

          }
        }
        return x;
      }
      {
        var t$ = this;
        var t$1 = t$.typeError(new sk$String(('Int')));
        return sk$invariant_violation(t$1);
      }
    }
  }
};

sk$HH$dtMixed.prototype.expectString = function() {
  var x;
  {
    jumpBlockOuterjumpLab$bg2664:{
      jumpLab$bg2664:{
        jumpLab$bg2663:{
          switch (this.__type_switch_id) {
            case 95:
              x = this.x;
              break jumpLab$bg2663;
            
            default:
              break jumpLab$bg2664;

          }
        }
        return x;
      }
      {
        var t$ = this;
        var t$1 = t$.typeError(new sk$String(('String')));
        return sk$invariant_violation(t$1);
      }
    }
  }
};

sk$HH$dtMixed.prototype.isBool = function() {
  jumpBlockOuterjumpLab$bg2669:{
    jumpLab$bg2669:{
      jumpLab$bg2668:{
        switch (this.__type_switch_id) {
          case 102:
            break jumpLab$bg2668;
          
          default:
            break jumpLab$bg2669;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$HH$dtMixed.prototype.isFloat = function() {
  jumpBlockOuterjumpLab$bg2674:{
    jumpLab$bg2674:{
      jumpLab$bg2673:{
        switch (this.__type_switch_id) {
          case 96:
            break jumpLab$bg2673;
          
          default:
            break jumpLab$bg2674;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$HH$dtMixed.prototype.isInt = function() {
  jumpBlockOuterjumpLab$bg2679:{
    jumpLab$bg2679:{
      jumpLab$bg2678:{
        switch (this.__type_switch_id) {
          case 94:
            break jumpLab$bg2678;
          
          default:
            break jumpLab$bg2679;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$HH$dtMixed.prototype.isNull = function() {
  jumpBlockOuterjumpLab$bg2684:{
    jumpLab$bg2684:{
      jumpLab$bg2683:{
        switch (this.__type_switch_id) {
          case 104:
            break jumpLab$bg2683;
          
          default:
            break jumpLab$bg2684;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$HH$dtMixed.prototype.isString = function() {
  jumpBlockOuterjumpLab$bg2689:{
    jumpLab$bg2689:{
      jumpLab$bg2688:{
        switch (this.__type_switch_id) {
          case 95:
            break jumpLab$bg2688;
          
          default:
            break jumpLab$bg2689;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$HH$dtMixed.prototype.toBoolOption = function() {
  var value;
  {
    jumpBlockOuterjumpLab$bg2696:{
      jumpLab$bg2696:{
        jumpLab$bg2695:{
          jumpLab$bg2694:{
            switch (this.__type_switch_id) {
              case 104:
                break jumpLab$bg2694;
              
              case 102:
                value = this.x;
                break jumpLab$bg2695;
              
              default:
                break jumpLab$bg2696;

            }
          }
          return singleton$None;
        }
        {
          var t$ = value;
          return new (sk$Some)(t$);
        }
      }
      return sk$invariant_violation(new sk$String(('Unexpected mixed value')));
    }
  }
};

sk$HH$dtMixed.prototype.toFloatOption = function() {
  var value;
  {
    jumpBlockOuterjumpLab$bg2703:{
      jumpLab$bg2703:{
        jumpLab$bg2702:{
          jumpLab$bg2701:{
            switch (this.__type_switch_id) {
              case 104:
                break jumpLab$bg2701;
              
              case 96:
                value = this.x;
                break jumpLab$bg2702;
              
              default:
                break jumpLab$bg2703;

            }
          }
          return singleton$None;
        }
        {
          var t$ = value;
          return new (sk$Some)(t$);
        }
      }
      return sk$invariant_violation(new sk$String(('Unexpected mixed value')));
    }
  }
};

sk$HH$dtMixed.prototype.toIntOption = function() {
  var value;
  {
    jumpBlockOuterjumpLab$bg2710:{
      jumpLab$bg2710:{
        jumpLab$bg2709:{
          jumpLab$bg2708:{
            switch (this.__type_switch_id) {
              case 104:
                break jumpLab$bg2708;
              
              case 94:
                value = this.x;
                break jumpLab$bg2709;
              
              default:
                break jumpLab$bg2710;

            }
          }
          return singleton$None;
        }
        {
          var t$ = value;
          return new (sk$Some)(t$);
        }
      }
      return sk$invariant_violation(new sk$String(('Unexpected mixed value')));
    }
  }
};

sk$HH$dtMixed.prototype.toOption = function() {
  jumpBlockOuterjumpLab$bg2716:{
    jumpLab$bg2716:{
      jumpLab$bg2715:{
        switch (this.__type_switch_id) {
          case 104:
            break jumpLab$bg2715;
          
          default:
            break jumpLab$bg2716;

        }
      }
      return singleton$None;
    }
    {
      var t$ = this;
      return new (sk$Some)(t$);
    }
  }
};

sk$HH$dtMixed.prototype.toStringOption = function() {
  var value;
  {
    jumpBlockOuterjumpLab$bg2723:{
      jumpLab$bg2723:{
        jumpLab$bg2722:{
          jumpLab$bg2721:{
            switch (this.__type_switch_id) {
              case 104:
                break jumpLab$bg2721;
              
              case 95:
                value = this.x;
                break jumpLab$bg2722;
              
              default:
                break jumpLab$bg2723;

            }
          }
          return singleton$None;
        }
        {
          var t$ = value;
          return new (sk$Some)(t$);
        }
      }
      return sk$invariant_violation(new sk$String(('Unexpected mixed value')));
    }
  }
};

sk$HH$dtMixed.prototype.typeError = function(expectedType) {
  var t$ = new sk$String(('HH.Mixed: Expected a ')).toString();
  var t$1 = expectedType;
  var t$2 = t$1.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$2
  ]));
};

sk$HH$dtMixed.prototype.__bases = [
  sk$HH$dtMixed
];

var sk$HasClassName = sk.HasClassName = function HasClassName() {};

sk$HasClassName.prototype = Object.create(Object.prototype);

sk$HasClassName.prototype.__constructor = sk$HasClassName;

sk$HasClassName.prototype.__classname = 'HasClassName';

sk$HasClassName.prototype.$frozen = undefined;

sk$HasClassName.prototype.__type_switch_id = -1;

sk$HasClassName.prototype.__copy = function() {};

sk$HasClassName.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp27 = __cache.get(this);
  if (_tmp27 === undefined)
    {
      var _tmp27 = this.__copy();
      _tmp27.$frozen = true;
      __cache.set(this, _tmp27);
    }
  return _tmp27;
};

sk$HasClassName.prototype.__init = function(__named_parameters) {};

sk$HasClassName.prototype.__bases = [
  sk$HasClassName
];

var sk$Hashable = sk.Hashable = function Hashable() {};

sk$Hashable.prototype = Object.create(Object.prototype);

sk$Hashable.prototype.__constructor = sk$Hashable;

sk$Hashable.prototype.__classname = 'Hashable';

sk$Hashable.prototype.$frozen = undefined;

sk$Hashable.prototype.__type_switch_id = -1;

sk$Hashable.prototype.__copy = function() {};

sk$Hashable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp28 = __cache.get(this);
  if (_tmp28 === undefined)
    {
      var _tmp28 = this.__copy();
      _tmp28.$frozen = true;
      __cache.set(this, _tmp28);
    }
  return _tmp28;
};

sk$Hashable.prototype.__init = function(__named_parameters) {};

sk$Hashable.prototype.__bases = [
  sk$Hashable
];

var sk$HhvmInterop$dtHHArray = sk.HhvmInterop$dtHHArray = function HhvmInterop$dtHHArray() {};

sk$HhvmInterop$dtHHArray.prototype = Object.create(Object.prototype);

sk$HhvmInterop$dtHHArray.prototype.__constructor = sk$HhvmInterop$dtHHArray;

sk$HhvmInterop$dtHHArray.prototype.__classname = 'HhvmInterop.HHArray';

sk$HhvmInterop$dtHHArray.prototype.$frozen = true;

sk$HhvmInterop$dtHHArray.prototype.__type_switch_id = 105;

sk$HhvmInterop$dtHHArray.prototype.__copy = function() {
  return new (sk$HhvmInterop$dtHHArray)();
};

sk$HhvmInterop$dtHHArray.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp29 = __cache.get(this);
  if (_tmp29 === undefined)
    {
      var _tmp29 = this.__copy();
      _tmp29.$frozen = true;
      __cache.set(this, _tmp29);
    }
  return _tmp29;
};

sk$HhvmInterop$dtHHArray.prototype.__init = function(__named_parameters) {};

sk$HhvmInterop$dtHHArray.prototype.__bases = [
  sk$HhvmInterop$dtHHArray
];

var sk$HhvmInterop$dtObject = sk.HhvmInterop$dtObject = function HhvmInterop$dtObject() {};

sk$HhvmInterop$dtObject.prototype = Object.create(Object.prototype);

sk$HhvmInterop$dtObject.prototype.__constructor = sk$HhvmInterop$dtObject;

sk$HhvmInterop$dtObject.prototype.__classname = 'HhvmInterop.Object';

sk$HhvmInterop$dtObject.prototype.$frozen = true;

sk$HhvmInterop$dtObject.prototype.__type_switch_id = 106;

sk$HhvmInterop$dtObject.prototype.__copy = function() {
  return new (sk$HhvmInterop$dtObject)();
};

sk$HhvmInterop$dtObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp30 = __cache.get(this);
  if (_tmp30 === undefined)
    {
      var _tmp30 = this.__copy();
      _tmp30.$frozen = true;
      __cache.set(this, _tmp30);
    }
  return _tmp30;
};

sk$HhvmInterop$dtObject.prototype.__init = function(__named_parameters) {};

sk$HhvmInterop$dtObject.prototype.__bases = [
  sk$HhvmInterop$dtObject
];

var sk$HhvmInterop$dtTupleHelper = sk.HhvmInterop$dtTupleHelper = function HhvmInterop$dtTupleHelper(__named_parameters) {
  this.__init(__named_parameters);
};

sk$HhvmInterop$dtTupleHelper.prototype = Object.create(Object.prototype);

sk$HhvmInterop$dtTupleHelper.prototype.__constructor = sk$HhvmInterop$dtTupleHelper;

sk$HhvmInterop$dtTupleHelper.prototype.__classname = 'HhvmInterop.TupleHelper';

sk$HhvmInterop$dtTupleHelper.prototype.$frozen = true;

sk$HhvmInterop$dtTupleHelper.prototype.__type_switch_id = 107;

sk$HhvmInterop$dtTupleHelper.prototype.__init = function(__named_parameters) {};

sk$HhvmInterop$dtTupleHelper.prototype.append = function(v) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: HhvmInterop.TupleHelper::append')));
};

sk$HhvmInterop$dtTupleHelper.prototype.get = function(index) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: HhvmInterop.TupleHelper::get')));
};

sk$HhvmInterop$dtTupleHelper.internalCreate = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: HhvmInterop.TupleHelper::internalCreate')));
};

sk$HhvmInterop$dtTupleHelper.prototype.__bases = [
  sk$HhvmInterop$dtTupleHelper
];

sk$HhvmInterop$dtTupleHelper = sk.HhvmInterop$dtTupleHelper = skip.initNativeClass(sk, 'HhvmInterop.TupleHelper', sk$HhvmInterop$dtTupleHelper);

var sk$IndentedWriter = sk.IndentedWriter = function IndentedWriter(__named_parameters) {
  this.__init(__named_parameters);
};

sk$IndentedWriter.prototype = Object.create(Object.prototype);

sk$IndentedWriter.prototype.__constructor = sk$IndentedWriter;

sk$IndentedWriter.prototype.__classname = 'IndentedWriter';

sk$IndentedWriter.prototype.$frozen = false;

sk$IndentedWriter.prototype.__type_switch_id = 108;

sk$IndentedWriter.prototype.__copy = function() {
  return new (sk$IndentedWriter)(this);
};

sk$IndentedWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp31 = __cache.get(this);
  if (_tmp31 === undefined)
    {
      var _tmp31 = this.__copy();
      _tmp31.$frozen = true;
      __cache.set(this, _tmp31);
      _tmp31.currentIndent = skip.deepFreeze(_tmp31.currentIndent, __cache);
      _tmp31.lastWasNewLine = skip.deepFreeze(_tmp31.lastWasNewLine, __cache);
      _tmp31.line = skip.deepFreeze(_tmp31.line, __cache);
      _tmp31.column = skip.deepFreeze(_tmp31.column, __cache);
      _tmp31.writeRaw = skip.deepFreeze(_tmp31.writeRaw, __cache);
      _tmp31.indentSize = skip.deepFreeze(_tmp31.indentSize, __cache);
    }
  return _tmp31;
};

sk$IndentedWriter.prototype.__init = function(__named_parameters) {
  this.currentIndent = __named_parameters.currentIndent === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : __named_parameters.currentIndent;
  this.lastWasNewLine = __named_parameters.lastWasNewLine === undefined ? ((() => 
  {
    return new sk$Bool((true));
  })()) : __named_parameters.lastWasNewLine;
  this.line = __named_parameters.line === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : __named_parameters.line;
  this.column = __named_parameters.column === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : __named_parameters.column;
  this.writeRaw = __named_parameters.writeRaw;
  this.indentSize = __named_parameters.indentSize === undefined ? ((() => 
  {
    return (sk$IndentedWriter$dtdefaultIndentSize());
  })()) : __named_parameters.indentSize;
};

sk$IndentedWriter.create = function(writeRaw, indentSize) {
  if (indentSize === undefined)
    indentSize = ((() => 
    {
      return (sk$IndentedWriter$dtdefaultIndentSize());
    })());
  var t$ = writeRaw;
  var t$1 = indentSize;
  return new (sk$IndentedWriter)({
    column: undefined,
    currentIndent: undefined,
    indentSize: t$1,
    lastWasNewLine: undefined,
    line: undefined,
    writeRaw: t$
  });
};

sk$IndentedWriter.prototype.getColumn = function() {
  var t$ = this;
  return t$.column;
};

sk$IndentedWriter.prototype.getIndent = function() {
  var t$ = this;
  return t$.currentIndent;
};

sk$IndentedWriter.prototype.getLine = function() {
  var t$ = this;
  return t$.line;
};

sk$IndentedWriter.prototype.indent = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.currentIndent;
  var t$3 = this;
  var t$4 = t$3.indentSize;
  var t$5 = t$2.$pl(t$4);
  return t$.setIndent(t$5);
};

sk$IndentedWriter.prototype.outdent = function() {
  var t$ = this;
  var t$1 = t$.currentIndent;
  var t$2 = this;
  var t$3 = t$2.indentSize;
  var t$4 = t$1.$gt$eq(t$3);
  sk$invariant(t$4, new sk$String(('Mismatched outdent')));
  var t$5 = this;
  var t$6 = this;
  var t$7 = t$6.currentIndent;
  var t$8 = this;
  var t$9 = t$8.indentSize;
  var t$10 = t$7.$mi(t$9);
  return t$5.setIndent(t$10);
};

sk$IndentedWriter.prototype.setIndent = function(indent) {
  var t$ = indent;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, undefined);
  var $var = this;
  var t$2 = $var;
  var t$3 = t$2;
  t$3.currentIndent = indent;
  return sk.__.$void;
};

sk$IndentedWriter.prototype.suspendIndent = function() {
  var t$ = this;
  var result = t$.currentIndent;
  var t$1 = this;
  t$1.setIndent(new sk$Int(0.0, 0.0));
  return result;
};

sk$IndentedWriter.prototype.write = function(value) {
  var t$ = value;
  var t$1 = this;
  var t$2 = t$1;
  return t$.each(((_tmp2790) => 
  {
    return t$2.writeChar(_tmp2790);
  }));
};

sk$IndentedWriter.prototype.writeChar = function(ch) {
  var t$ = this;
  t$.writeIndent();
  var t$1 = this;
  var t$2 = ch;
  return t$1.writeCharNoPadding(t$2);
};

sk$IndentedWriter.prototype.writeCharNoPadding = function(ch) {
  var t$ = this;
  var t$1 = t$.writeRaw;
  var t$2 = ch;
  var t$3 = t$2.toString();
  t$1(t$3);
  var $var = this;
  var t$4 = $var;
  var t$5 = ch;
  var t$6 = t$4;
  t$6.lastWasNewLine = t$5.$eq$eq($makeChar(10));
  var t$7 = this;
  if (t$7.lastWasNewLine.__value)
    {
      var var1 = this;
      var t$8 = var1;
      var t$9 = this;
      var t$10 = t$9.line;
      var t$11 = t$8;
      t$11.line = t$10.$pl(new sk$Int(1.0, 0.0));
      var var2 = this;
      var t$12 = var2;
      var t$13 = t$12;
      t$13.column = new sk$Int(0.0, 0.0);
      return sk.__.$void;
    }
  else
    {
      var var3 = this;
      var t$14 = var3;
      var t$15 = this;
      var t$16 = t$15.column;
      var t$17 = t$14;
      t$17.column = t$16.$pl(new sk$Int(1.0, 0.0));
      return sk.__.$void;
    }
};

sk$IndentedWriter.prototype.writeIndent = function() {
  var t$ = this;
  if (t$.lastWasNewLine.__value)
    {
      var t$1 = this;
      var t$2 = t$1.currentIndent;
      var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
      var $var = t$3.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg2822:{
          break$bg2822:{
            dowhile_else$bg2821:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg2823:{
                    dowhile_cond$bg2823:{
                      {
                        var t$4 = $var;
                        var var2 = t$4.next();
                        var _;
                        {
                          jumpBlockOuterjumpLab$bg2830:{
                            jumpLab$bg2830:{
                              jumpLab$bg2829:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg2829;
                                  
                                  case 205:
                                    _ = var2.value;
                                    break jumpLab$bg2830;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg2823;
                              }
                            }
                            {
                              var t$5 = this;
                              t$5.writeCharNoPadding($makeChar(32));
                            }
                            break jumpBlockOuterjumpLab$bg2830;
                          }
                        }
                        break dowhile_cond$bg2823;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg2821;
                    break jumpBlockOuterdowhile_cond$bg2823;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg2822;
          }
          {}
          break jumpBlockOuterbreak$bg2822;
        }
      }
      return break_val;
    }
  else
    return sk.__.$void;
};

sk$IndentedWriter.prototype.writeIndented = function(f) {
  var t$ = this;
  t$.indent();
  var t$1 = f;
  t$1();
  var t$2 = this;
  return t$2.outdent();
};

sk$IndentedWriter.prototype.writeLine = function(value) {
  if (value === undefined)
    value = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = value;
  var t$1 = this;
  var t$2 = t$1;
  t$.each(((_tmp2840) => 
  {
    return t$2.writeChar(_tmp2840);
  }));
  var t$3 = this;
  return t$3.writeChar($makeChar(10));
};

sk$IndentedWriter.prototype.__bases = [
  sk$IndentedWriter
];

var sk$IndentedWriter$dtWriter = sk.IndentedWriter$dtWriter = function IndentedWriter$dtWriter(__named_parameters) {
  this.__init(__named_parameters);
};

sk$IndentedWriter$dtWriter.prototype = Object.create(Object.prototype);

sk$IndentedWriter$dtWriter.prototype.__constructor = sk$IndentedWriter$dtWriter;

sk$IndentedWriter$dtWriter.prototype.__classname = 'IndentedWriter.Writer';

sk$IndentedWriter$dtWriter.prototype.$frozen = undefined;

sk$IndentedWriter$dtWriter.prototype.__type_switch_id = -1;

sk$IndentedWriter$dtWriter.prototype.__copy = function() {
  return new (sk$IndentedWriter$dtWriter)(this);
};

sk$IndentedWriter$dtWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp32 = __cache.get(this);
  if (_tmp32 === undefined)
    {
      var _tmp32 = this.__copy();
      _tmp32.$frozen = true;
      __cache.set(this, _tmp32);
      _tmp32.writer = skip.deepFreeze(_tmp32.writer, __cache);
    }
  return _tmp32;
};

sk$IndentedWriter$dtWriter.prototype.__init = function(__named_parameters) {
  this.writer = __named_parameters.writer;
};

sk$IndentedWriter$dtWriter.prototype.indent = function() {
  var t$ = this;
  var t$1 = t$.writer;
  return t$1.indent();
};

sk$IndentedWriter$dtWriter.prototype.outdent = function() {
  var t$ = this;
  var t$1 = t$.writer;
  return t$1.outdent();
};

sk$IndentedWriter$dtWriter.prototype.setIndent = function(indent) {
  var t$ = this;
  var t$1 = t$.writer;
  var t$2 = indent;
  return t$1.setIndent(t$2);
};

sk$IndentedWriter$dtWriter.prototype.suspendIndent = function() {
  var t$ = this;
  var t$1 = t$.writer;
  return t$1.suspendIndent();
};

sk$IndentedWriter$dtWriter.prototype.write = function(value) {
  var t$ = this;
  var t$1 = t$.writer;
  var t$2 = value;
  return t$1.write(t$2);
};

sk$IndentedWriter$dtWriter.prototype.writeLine = function(value) {
  if (value === undefined)
    value = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var t$1 = t$.writer;
  var t$2 = value;
  return t$1.writeLine(t$2);
};

sk$IndentedWriter$dtWriter.prototype.__bases = [
  sk$IndentedWriter$dtWriter
];

var sk$Inspect = sk.Inspect = function Inspect() {};

sk$Inspect.prototype = Object.create(Object.prototype);

sk$Inspect.prototype.__constructor = sk$Inspect;

sk$Inspect.prototype.__classname = 'Inspect';

sk$Inspect.prototype.$frozen = undefined;

sk$Inspect.prototype.__type_switch_id = -1;

sk$Inspect.prototype.__copy = function() {};

sk$Inspect.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp33 = __cache.get(this);
  if (_tmp33 === undefined)
    {
      var _tmp33 = this.__copy();
      _tmp33.$frozen = true;
      __cache.set(this, _tmp33);
    }
  return _tmp33;
};

sk$Inspect.prototype.__init = function(__named_parameters) {};

sk$Inspect.prototype.isInspectSizeGreaterThan = function(n) {
  var t$ = this;
  var t$1 = new (sk$Array)([
    t$
  ]);
  var stack = sk$Vector.mcreateFromItems(t$1);
  {
    jumpBlockOuterbreak$bg3148:{
      break$bg3148:{
        while_else$bg3147:{
          do
            {
              jumpBlockOutercontinue$bg3149:{
                continue$bg3149:{
                  {
                    var t$2 = n;
                    var t$3;
                    if (t$2.$gt$eq(new sk$Int(0.0, 0.0)).__value)
                      {
                        var t$4 = stack;
                        var t$5 = t$4.size();
                        t$3 = t$5.$bg$eq(new sk$Int(0.0, 0.0));
                      }
                    else
                      t$3 = new sk$Bool((false));
                    if (t$3.__value)
                      {
                        var t$6 = stack;
                        var t$7 = t$6.pop();
                        var t$8 = n;
                        var t$9 = stack;
                        n = t$7.isInspectSizeGreaterThanIter(t$8, t$9);
                      }
                    else
                      break while_else$bg3147;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg3149;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg3148;
      }
      {}
      break jumpBlockOuterbreak$bg3148;
    }
  }
  var t$10 = n;
  return t$10.$lt(new sk$Int(0.0, 0.0));
};

sk$Inspect.prototype.print = function(writer) {
  var t$ = this;
  if (t$.isInspectSizeGreaterThan(new sk$Int(1000.0, 0.0)).__value)
    {
      var t$1 = this;
      var t$2 = writer;
      var t$3 = t$2;
      return t$1.printNon80Column(((_tmp3167) => 
      {
        return t$3.write(_tmp3167);
      }), undefined);
    }
  else
    {
      var t$4 = this;
      var t$5 = writer;
      var t$6 = t$5;
      return t$4.print80Column(((_tmp3171) => 
      {
        return t$6.write(_tmp3171);
      }));
    }
};

sk$Inspect.prototype.print80Column = function(print) {
  var t$ = this;
  var t$1 = t$.toDoc();
  var t$2 = print;
  return sk$Doc$dtprintDoc(t$1, t$2, undefined, undefined, undefined, undefined);
};

sk$Inspect.prototype.printCommaGroup = function(start, end, elems) {
  var t$ = elems;
  var t$1 = t$.size();
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = start;
      var t$3 = end;
      var t$4 = new (sk$Array)([
        t$2,
        t$3
      ]);
      return sk$Doc$dtConcat.createFromItems(t$4);
    }
  else
    {
      var t$5 = start;
      var t$6 = elems;
      var t$7 = t$6.mapWithIndex(((i, elem) => 
      {
        var t$8 = elem;
        var t$9 = i;
        var t$10 = elems;
        var t$11 = t$10.size();
        var t$12 = t$11.$mi(new sk$Int(1.0, 0.0));
        var t$13;
        if (t$9.$eq$eq(t$12).__value)
          t$13 = new (sk$Doc$dtIfBreak)(new (sk$Doc$dtStr)(new sk$String((','))), undefined);
        else
          t$13 = sk$Doc$dtConcat.createFromItems(new (sk$Array)([
            new (sk$Doc$dtStr)(new sk$String((','))),
            singleton$Doc$dtLine
          ]));
        var t$14 = t$13;
        var t$15 = new (sk$Array)([
          t$8,
          t$14
        ]);
        return sk$Doc$dtConcat.createFromItems(t$15);
      }));
      var t$16 = t$7.collect(sk$Vector);
      var t$17 = new (sk$Doc$dtConcat)(t$16);
      var t$18 = new (sk$Array)([
        singleton$Doc$dtSoftLine,
        t$17
      ]);
      var t$19 = sk$Doc$dtIndent.createFromItems(t$18);
      var t$20 = end;
      var t$21 = new (sk$Array)([
        t$5,
        t$19,
        singleton$Doc$dtSoftLine,
        t$20
      ]);
      return sk$Doc$dtGroup.createFromItems(t$21);
    }
};

sk$Inspect.prototype.printCommaGroupNon80Column = function(print, left, right, elemFns, indent) {
  var t$ = elemFns;
  var t$1 = t$.size();
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = print;
      var t$3 = left;
      var t$4 = right;
      var t$5 = t$3.$pl(t$4);
      return t$2(t$5);
    }
  else
    {
      var t$6 = indent;
      var newIndent = t$6.$pl(new sk$String(('  ')));
      var t$7 = print;
      var t$8 = left;
      t$7(t$8);
      var t$9 = print;
      t$9(new sk$String(('\n')));
      var t$10 = elemFns;
      t$10.each(((elemFn) => 
      {
        var t$11 = print;
        var t$12 = newIndent;
        t$11(t$12);
        var t$13 = elemFn;
        var t$14 = newIndent;
        t$13(t$14);
        var t$15 = print;
        return t$15(new sk$String((',\n')));
      }));
      var t$16 = print;
      var t$17 = indent;
      var t$18 = right;
      var t$19 = t$17.$pl(t$18);
      return t$16(t$19);
    }
};

sk$Inspect.prototype.printJSON = function(writer, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var t$1 = writer;
  var t$2 = t$1;
  var t$3 = indent;
  return t$.printJSONImpl(((_tmp3223) => 
  {
    return t$2.write(_tmp3223);
  }), t$3);
};

sk$Inspect.prototype.__bases = [
  sk$Inspect
];

var sk$Int = sk.Int = function Int() {};

sk$Int.prototype = Object.create(Object.prototype);

sk$Int.prototype.__constructor = sk$Int;

sk$Int.prototype.__classname = 'Int';

sk$Int.prototype.$frozen = true;

sk$Int.prototype.__type_switch_id = 116;

sk$Int.prototype.__init = function(__named_parameters) {};

sk$Int.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.neImpl(t$2);
};

sk$Int.prototype.$pc = function(other) {
  var t$ = other;
  var n = t$.toInt();
  var t$1 = n;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    skip.throwException(sk, singleton$DivisionByZeroException);
  else
    {
      var t$2 = this;
      var t$3 = n;
      return t$2.unsafe_remImpl(t$3);
    }
};

sk$Int.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.timesImpl(t$2);
};

sk$Int.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.plusImpl(t$2);
};

sk$Int.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.minusImpl(t$2);
};

sk$Int.prototype.$dv = function(other) {
  var t$ = other;
  var n = t$.toInt();
  var t$1 = n;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    skip.throwException(sk, singleton$DivisionByZeroException);
  else
    {
      var t$2 = this;
      var t$3 = n;
      return t$2.unsafe_divImpl(t$3);
    }
};

sk$Int.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.ltImpl(t$2);
};

sk$Int.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.leImpl(t$2);
};

sk$Int.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.eqImpl(t$2);
};

sk$Int.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.gtImpl(t$2);
};

sk$Int.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.geImpl(t$2);
};

sk$Int.prototype.and = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.andImpl(t$2);
};

sk$Int.prototype.andImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::andImpl')));
};

sk$Int.prototype.chr = function() {
  var t$ = this;
  var t$1 = sk$Char.isValidCharCodePoint(t$);
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      var t$3 = new sk$String(('Chr called on invalid Unicode code point: ')).$pl(t$2);
      sk$invariant_violation(t$3);
    }
  else
    {}
  var t$4 = this;
  return t$4.unsafe_chr();
};

sk$Int.prototype.clz = function() {
  var t$ = this;
  return t$.clzImpl();
};

sk$Int.prototype.clzImpl = function() {
  var t$ = this;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$Int(64.0, 0.0);
  else
    {
      var n = new sk$Int(0.0, 0.0);
      var x = this;
      {
        jumpBlockOuterbreak$bg3589:{
          break$bg3589:{
            while_else$bg3588:{
              do
                {
                  jumpBlockOutercontinue$bg3590:{
                    continue$bg3590:{
                      {
                        var t$1 = x;
                        if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
                          {
                            var t$2 = n;
                            n = t$2.$pl(new sk$Int(1.0, 0.0));
                            var t$3 = x;
                            x = t$3.shl(new sk$Int(1.0, 0.0));
                          }
                        else
                          break while_else$bg3588;
                      }
                    }
                    {}
                    break jumpBlockOutercontinue$bg3590;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg3589;
          }
          {}
          break jumpBlockOuterbreak$bg3589;
        }
      }
      return n;
    }
};

sk$Int.prototype.compare = function(other) {
  var t$ = other;
  var n = t$.toInt();
  var t$1 = this;
  var t$2 = n;
  if (t$1.$lt(t$2).__value)
    return singleton$LT;
  else
    {
      var t$3 = this;
      var t$4 = n;
      if (t$3.$eq$eq(t$4).__value)
        return singleton$EQ;
      else
        return singleton$GT;
    }
};

sk$Int.create = function(int) {
  return int;
};

sk$Int.prototype.ctz = function() {
  var t$ = this;
  return t$.ctzImpl();
};

sk$Int.prototype.ctzImpl = function() {
  var t$ = this;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$Int(64.0, 0.0);
  else
    {
      var n = new sk$Int(0.0, 0.0);
      var x = this;
      {
        jumpBlockOuterbreak$bg3612:{
          break$bg3612:{
            while_else$bg3611:{
              do
                {
                  jumpBlockOutercontinue$bg3613:{
                    continue$bg3613:{
                      {
                        var t$1 = x;
                        var t$2 = t$1.and(new sk$Int(1.0, 0.0));
                        if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                          {
                            var t$3 = n;
                            n = t$3.$pl(new sk$Int(1.0, 0.0));
                            var t$4 = x;
                            x = t$4.ushr(new sk$Int(1.0, 0.0));
                          }
                        else
                          break while_else$bg3611;
                      }
                    }
                    {}
                    break jumpBlockOutercontinue$bg3613;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg3612;
          }
          {}
          break jumpBlockOuterbreak$bg3612;
        }
      }
      return n;
    }
};

sk$Int.digit = function(d) {
  var t$ = d;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$String(('0'));
  else
    {
      var t$1 = d;
      if (t$1.$eq$eq(new sk$Int(1.0, 0.0)).__value)
        return new sk$String(('1'));
      else
        {
          var t$2 = d;
          if (t$2.$eq$eq(new sk$Int(2.0, 0.0)).__value)
            return new sk$String(('2'));
          else
            {
              var t$3 = d;
              if (t$3.$eq$eq(new sk$Int(3.0, 0.0)).__value)
                return new sk$String(('3'));
              else
                {
                  var t$4 = d;
                  if (t$4.$eq$eq(new sk$Int(4.0, 0.0)).__value)
                    return new sk$String(('4'));
                  else
                    {
                      var t$5 = d;
                      if (t$5.$eq$eq(new sk$Int(5.0, 0.0)).__value)
                        return new sk$String(('5'));
                      else
                        {
                          var t$6 = d;
                          if (t$6.$eq$eq(new sk$Int(6.0, 0.0)).__value)
                            return new sk$String(('6'));
                          else
                            {
                              var t$7 = d;
                              if (t$7.$eq$eq(new sk$Int(7.0, 0.0)).__value)
                                return new sk$String(('7'));
                              else
                                {
                                  var t$8 = d;
                                  if (t$8.$eq$eq(new sk$Int(8.0, 0.0)).__value)
                                    return new sk$String(('8'));
                                  else
                                    return new sk$String(('9'));
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};

sk$Int.prototype.eqImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::eqImpl')));
};

sk$Int.prototype.fromFloat = function(x) {
  var t$ = x;
  return t$.toInt();
};

sk$Int.prototype.fromInt = function(x) {
  return x;
};

sk$Int.prototype.geImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::geImpl')));
};

sk$Int.generator = function() {
  return singleton$QuickCheck$dtIntGenerator;
};

sk$Int.prototype.getClassName = function() {
  return new sk$String(('Int'));
};

sk$Int.prototype.gtImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::gtImpl')));
};

sk$Int.prototype.hash = function() {
  return this;
};

sk$Int.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toString();
  return new (sk$InspectLiteral)(t$1);
};

sk$Int.prototype.leImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::leImpl')));
};

sk$Int.prototype.ltImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::ltImpl')));
};

sk$Int.prototype.minusImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::minusImpl')));
};

sk$Int.prototype.neImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::neImpl')));
};

sk$Int.prototype.negate = function() {
  var t$ = this;
  return new sk$Int(0.0, 0.0).$mi(t$);
};

sk$Int.prototype.not = function() {
  var t$ = this;
  return t$.xor(new sk$Int(4294967295.0, 4294967295.0));
};

sk$Int.prototype.or = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.orImpl(t$2);
};

sk$Int.prototype.orImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::orImpl')));
};

sk$Int.prototype.perturb = function(rng) {
  var t$ = rng;
  var t$1 = this;
  return t$.perturb(t$1);
};

sk$Int.prototype.plusImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::plusImpl')));
};

sk$Int.prototype.popcount = function() {
  var t$ = this;
  return t$.popcountImpl();
};

sk$Int.prototype.popcountImpl = function() {
  var n = new sk$Int(0.0, 0.0);
  var x = this;
  {
    jumpBlockOuterbreak$bg3664:{
      break$bg3664:{
        while_else$bg3663:{
          do
            {
              jumpBlockOutercontinue$bg3665:{
                continue$bg3665:{
                  {
                    var t$ = x;
                    if (t$.$bg$eq(new sk$Int(0.0, 0.0)).__value)
                      {
                        var t$1 = n;
                        n = t$1.$pl(new sk$Int(1.0, 0.0));
                        var t$2 = x;
                        var t$3 = x;
                        var t$4 = t$3.$mi(new sk$Int(1.0, 0.0));
                        x = t$2.and(t$4);
                      }
                    else
                      break while_else$bg3663;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg3665;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg3664;
      }
      {}
      break jumpBlockOuterbreak$bg3664;
    }
  }
  return n;
};

sk$Int.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.shlImpl(t$2);
};

sk$Int.prototype.shlImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::shlImpl')));
};

sk$Int.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.shrImpl(t$2);
};

sk$Int.prototype.shrImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::shrImpl')));
};

sk$Int.prototype.shrink = function(firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (firstShrink === undefined)
      firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    if (t$.$bg$eq(new sk$Int(0.0, 0.0)).__value)
      {
        var t$1 = this;
        var absThis = sk$Math$dtabs(t$1);
        var t$2 = this;
        if (t$2.$lt(new sk$Int(0.0, 0.0)).__value)
          yield new sk$Some(absThis);
        else
          {}
        if (firstShrink.__value)
          yield new sk$Some(new sk$Int(0.0, 0.0));
        else
          {}
        var t$3 = this;
        var i = t$3.$dv(new sk$Int(2.0, 0.0));
        var t$4 = this;
        var t$5 = i;
        var m = t$4.$mi(t$5);
        {
          jumpBlockOuterbreak$bg3695:{
            break$bg3695:{
              while_else$bg3694:{
                do
                  {
                    jumpBlockOutercontinue$bg3696:{
                      continue$bg3696:{
                        {
                          var t$6 = m;
                          var t$7 = sk$Math$dtabs(t$6);
                          var t$8 = absThis;
                          if (t$7.$lt(t$8).__value)
                            {
                              yield new sk$Some(m);
                              var t$9 = i;
                              i = t$9.$dv(new sk$Int(2.0, 0.0));
                              var t$10 = this;
                              var t$11 = i;
                              m = t$10.$mi(t$11);
                            }
                          else
                            break while_else$bg3694;
                        }
                      }
                      {}
                      break jumpBlockOutercontinue$bg3696;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg3695;
            }
            {}
            break jumpBlockOuterbreak$bg3695;
          }
        }
      }
    else
      {}
    return undefined;
  });
};

sk$Int.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('Int'))));
};

sk$Int.prototype.timesImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::timesImpl')));
};

sk$Int.prototype.toFloat = function() {
  var t$ = this;
  return t$.toFloatImpl();
};

sk$Int.prototype.toFloatImpl = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::toFloatImpl')));
};

sk$Int.prototype.toInt = function() {
  return this;
};

sk$Int.prototype.toString = function() {
  var t$ = this;
  return t$.toStringImpl();
};

sk$Int.prototype.toStringBinary = function() {
  return sk$String.tabulate(new sk$Int(64.0, 0.0), ((i) => 
  {
    var t$ = this;
    var t$1 = i;
    var t$2 = sk$Int.min.ushr(t$1);
    var t$3 = t$.and(t$2);
    if (t$3.$bg$eq(new sk$Int(0.0, 0.0)).__value)
      return $makeChar(49);
    else
      return $makeChar(48);
  }));
};

sk$Int.prototype.toStringImpl = function() {
  var t$ = this;
  var $var = sk$compare(t$, new sk$Int(0.0, 0.0));
  {
    jumpBlockOuterjumpLab$bg3728:{
      jumpLab$bg3728:{
        jumpLab$bg3727:{
          jumpLab$bg3726:{
            switch ($var.__type_switch_id) {
              case 208:
                break jumpLab$bg3726;
              
              case 206:
                break jumpLab$bg3727;
              
              case 207:
                break jumpLab$bg3728;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$1 = this;
            var t$2 = t$1.toStringNegative();
            return new sk$String(('-')).$pl(t$2);
          }
        }
        return new sk$String(('0'));
      }
      {
        var t$3 = this;
        return t$3.toStringPositive();
      }
    }
  }
};

sk$Int.prototype.toStringNegative = function() {
  var static1 = this.__constructor;
  var t$ = this;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$String((''));
  else
    {
      var t$1 = this;
      var t$2 = t$1.$dv(new sk$Int(10.0, 0.0));
      var t$3 = this;
      var t$4 = t$3.$pc(new sk$Int(10.0, 0.0));
      var t$5 = t$4.negate();
      var $var = new (sk$Tuple2)(t$2, t$5);
      var var1;
      var var2;
      {
        jumpBlockOuterjumpLab$bg3745:{
          jumpLab$bg3745:{
            switch ($var.__type_switch_id) {
              case 392:
                var1 = $var.i0;
                var2 = $var.i1;
                break jumpLab$bg3745;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var r = var2;
            var rest = var1;
            var t$6 = rest;
            var t$7 = t$6.toStringNegative();
            var t$8 = static1;
            var t$9 = r;
            var t$10 = t$8.digit(t$9);
            return t$7.$pl(t$10);
          }
        }
      }
    }
};

sk$Int.prototype.toStringPositive = function() {
  var static1 = this.__constructor;
  var t$ = this;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$String((''));
  else
    {
      var t$1 = this;
      var t$2 = t$1.$dv(new sk$Int(10.0, 0.0));
      var t$3 = this;
      var t$4 = t$3.$pc(new sk$Int(10.0, 0.0));
      var $var = new (sk$Tuple2)(t$2, t$4);
      var var1;
      var var2;
      {
        jumpBlockOuterjumpLab$bg3761:{
          jumpLab$bg3761:{
            switch ($var.__type_switch_id) {
              case 392:
                var1 = $var.i0;
                var2 = $var.i1;
                break jumpLab$bg3761;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var r = var2;
            var rest = var1;
            var t$5 = rest;
            var t$6 = t$5.toStringPositive();
            var t$7 = static1;
            var t$8 = r;
            var t$9 = t$7.digit(t$8);
            return t$6.$pl(t$9);
          }
        }
      }
    }
};

sk$Int.truncate = function(int) {
  return int;
};

sk$Int.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.ugeImpl(t$2);
};

sk$Int.prototype.ugeImpl = function(other) {
  var t$ = this;
  var t$1 = t$.$pl(sk$Int.min);
  var t$2 = other;
  var t$3 = t$2.$pl(sk$Int.min);
  return t$1.$gt$eq(t$3);
};

sk$Int.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.ugtImpl(t$2);
};

sk$Int.prototype.ugtImpl = function(other) {
  var t$ = this;
  var t$1 = t$.$pl(sk$Int.min);
  var t$2 = other;
  var t$3 = t$2.$pl(sk$Int.min);
  return t$1.$gt(t$3);
};

sk$Int.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.uleImpl(t$2);
};

sk$Int.prototype.uleImpl = function(other) {
  var t$ = this;
  var t$1 = t$.$pl(sk$Int.min);
  var t$2 = other;
  var t$3 = t$2.$pl(sk$Int.min);
  return t$1.$lt$eq(t$3);
};

sk$Int.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.ultImpl(t$2);
};

sk$Int.prototype.ultImpl = function(other) {
  var t$ = this;
  var t$1 = t$.$pl(sk$Int.min);
  var t$2 = other;
  var t$3 = t$2.$pl(sk$Int.min);
  return t$1.$lt(t$3);
};

sk$Int.prototype.unsafe_chr = function() {
  var t$ = this;
  return t$.unsafe_chrImpl();
};

sk$Int.prototype.unsafe_chrImpl = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::unsafe_chrImpl')));
};

sk$Int.prototype.unsafe_divImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::unsafe_divImpl')));
};

sk$Int.prototype.unsafe_remImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::unsafe_remImpl')));
};

sk$Int.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.ushrImpl(t$2);
};

sk$Int.prototype.ushrImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::ushrImpl')));
};

sk$Int.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$1.toInt();
  return t$.xorImpl(t$2);
};

sk$Int.prototype.xorImpl = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int::xorImpl')));
};

sk$Int.prototype.__bases = [
  sk$Int
];

sk$Int = sk.Int = skip.initNativeClass(sk, 'Int', sk$Int);

Object.defineProperty(sk$Int, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$Int(4294967295.0, 2147483647.0);
    })());
    Object.defineProperty(sk$Int, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Int, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$IntMetaClass;
    })());
    Object.defineProperty(sk$Int, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Int, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$Int(0.0, 2147483648.0);
    })());
    Object.defineProperty(sk$Int, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Int16 = sk.Int16 = function Int16() {};

sk$Int16.prototype = Object.create(Object.prototype);

sk$Int16.prototype.__constructor = sk$Int16;

sk$Int16.prototype.__classname = 'Int16';

sk$Int16.prototype.$frozen = true;

sk$Int16.prototype.__type_switch_id = 117;

sk$Int16.prototype.__init = function(__named_parameters) {};

sk$Int16.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$Int16.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$Int16.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$Int16.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$Int16.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$Int16.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$Int16.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$Int16.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$Int16.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$Int16.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$Int16.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$Int16.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$Int16.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$Int16.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$Int16.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$Int16.create = function(n) {
  var t$ = this;
  var t$1 = n;
  var x = t$.truncate(t$1);
  var t$2 = n;
  var t$3 = x;
  var t$4 = t$3.toInt();
  if (t$2.$bg$eq(t$4).__value)
    {
      var t$5 = this;
      var t$6 = n;
      t$5.throwOutOfRange(t$6);
    }
  else
    {}
  return x;
};

sk$Int16.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$Int16.prototype.getClassName = function() {
  return new sk$String(('Int16'));
};

sk$Int16.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$Int16.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$Int16.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$Int16.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$Int16.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$Int16.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$Int16.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$Int16.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$Int16.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('Int16'))));
};

sk$Int16.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$Int16.prototype.toInt = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int16::toInt')));
};

sk$Int16.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$Int16.truncate = function(n) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int16::truncate')));
};

sk$Int16.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$Int16.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$Int16.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$Int16.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$Int16.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$Int16.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$Int16.prototype.__bases = [
  sk$Int16
];

sk$Int16 = sk.Int16 = skip.initNativeClass(sk, 'Int16', sk$Int16);

Object.defineProperty(sk$Int16, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$Int16.truncate(new sk$Int(32767.0, 0.0));
    })());
    Object.defineProperty(sk$Int16, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Int16, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$Int16.truncate(new sk$Int(4294934528.0, 4294967295.0));
    })());
    Object.defineProperty(sk$Int16, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Int32 = sk.Int32 = function Int32() {};

sk$Int32.prototype = Object.create(Object.prototype);

sk$Int32.prototype.__constructor = sk$Int32;

sk$Int32.prototype.__classname = 'Int32';

sk$Int32.prototype.$frozen = true;

sk$Int32.prototype.__type_switch_id = 118;

sk$Int32.prototype.__init = function(__named_parameters) {};

sk$Int32.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$Int32.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$Int32.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$Int32.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$Int32.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$Int32.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$Int32.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$Int32.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$Int32.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$Int32.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$Int32.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$Int32.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$Int32.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$Int32.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$Int32.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$Int32.create = function(n) {
  var t$ = this;
  var t$1 = n;
  var x = t$.truncate(t$1);
  var t$2 = n;
  var t$3 = x;
  var t$4 = t$3.toInt();
  if (t$2.$bg$eq(t$4).__value)
    {
      var t$5 = this;
      var t$6 = n;
      t$5.throwOutOfRange(t$6);
    }
  else
    {}
  return x;
};

sk$Int32.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$Int32.prototype.getClassName = function() {
  return new sk$String(('Int32'));
};

sk$Int32.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$Int32.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$Int32.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$Int32.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$Int32.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$Int32.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$Int32.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$Int32.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$Int32.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('Int32'))));
};

sk$Int32.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$Int32.prototype.toInt = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int32::toInt')));
};

sk$Int32.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$Int32.truncate = function(n) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int32::truncate')));
};

sk$Int32.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$Int32.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$Int32.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$Int32.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$Int32.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$Int32.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$Int32.prototype.__bases = [
  sk$Int32
];

sk$Int32 = sk.Int32 = skip.initNativeClass(sk, 'Int32', sk$Int32);

Object.defineProperty(sk$Int32, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$Int32.truncate(new sk$Int(2147483647.0, 0.0));
    })());
    Object.defineProperty(sk$Int32, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Int32, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$Int32.truncate(new sk$Int(2147483648.0, 4294967295.0));
    })());
    Object.defineProperty(sk$Int32, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Int8 = sk.Int8 = function Int8() {};

sk$Int8.prototype = Object.create(Object.prototype);

sk$Int8.prototype.__constructor = sk$Int8;

sk$Int8.prototype.__classname = 'Int8';

sk$Int8.prototype.$frozen = true;

sk$Int8.prototype.__type_switch_id = 119;

sk$Int8.prototype.__init = function(__named_parameters) {};

sk$Int8.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$Int8.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$Int8.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$Int8.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$Int8.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$Int8.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$Int8.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$Int8.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$Int8.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$Int8.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$Int8.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$Int8.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$Int8.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$Int8.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$Int8.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$Int8.create = function(n) {
  var t$ = this;
  var t$1 = n;
  var x = t$.truncate(t$1);
  var t$2 = n;
  var t$3 = x;
  var t$4 = t$3.toInt();
  if (t$2.$bg$eq(t$4).__value)
    {
      var t$5 = this;
      var t$6 = n;
      t$5.throwOutOfRange(t$6);
    }
  else
    {}
  return x;
};

sk$Int8.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$Int8.prototype.getClassName = function() {
  return new sk$String(('Int8'));
};

sk$Int8.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$Int8.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$Int8.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$Int8.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$Int8.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$Int8.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$Int8.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$Int8.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$Int8.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('Int8'))));
};

sk$Int8.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$Int8.prototype.toInt = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int8::toInt')));
};

sk$Int8.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$Int8.truncate = function(n) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Int8::truncate')));
};

sk$Int8.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$Int8.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$Int8.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$Int8.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$Int8.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$Int8.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$Int8.prototype.__bases = [
  sk$Int8
];

sk$Int8 = sk.Int8 = skip.initNativeClass(sk, 'Int8', sk$Int8);

Object.defineProperty(sk$Int8, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$Int8.truncate(new sk$Int(127.0, 0.0));
    })());
    Object.defineProperty(sk$Int8, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Int8, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$Int8.truncate(new sk$Int(4294967168.0, 4294967295.0));
    })());
    Object.defineProperty(sk$Int8, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$IntoIterator = sk.IntoIterator = function IntoIterator() {};

sk$IntoIterator.prototype = Object.create(Object.prototype);

sk$IntoIterator.prototype.__constructor = sk$IntoIterator;

sk$IntoIterator.prototype.__classname = 'IntoIterator';

sk$IntoIterator.prototype.$frozen = undefined;

sk$IntoIterator.prototype.__type_switch_id = -1;

sk$IntoIterator.prototype.__copy = function() {};

sk$IntoIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp34 = __cache.get(this);
  if (_tmp34 === undefined)
    {
      var _tmp34 = this.__copy();
      _tmp34.$frozen = true;
      __cache.set(this, _tmp34);
    }
  return _tmp34;
};

sk$IntoIterator.prototype.__init = function(__named_parameters) {};

sk$IntoIterator.prototype.__bases = [
  sk$IntoIterator
];

var sk$Iterator = sk.Iterator = function Iterator() {};

sk$Iterator.prototype = Object.create(Object.prototype);

sk$Iterator.prototype.__constructor = sk$Iterator;

sk$Iterator.prototype.__classname = 'Iterator';

sk$Iterator.prototype.$frozen = undefined;

sk$Iterator.prototype.__type_switch_id = -1;

sk$Iterator.prototype.__copy = function() {};

sk$Iterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp35 = __cache.get(this);
  if (_tmp35 === undefined)
    {
      var _tmp35 = this.__copy();
      _tmp35.$frozen = true;
      __cache.set(this, _tmp35);
    }
  return _tmp35;
};

sk$Iterator.prototype.__init = function(__named_parameters) {};

sk$Iterator.prototype.all = function(p) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg4234:{
      break$bg4234:{
        dowhile_else$bg4233:{
          do
            {
              jumpBlockOuterdowhile_cond$bg4235:{
                dowhile_cond$bg4235:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var v;
                    {
                      jumpBlockOuterjumpLab$bg4244:{
                        jumpLab$bg4244:{
                          jumpLab$bg4243:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg4243;
                              
                              case 205:
                                v = var2.value;
                                break jumpLab$bg4244;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg4235;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = v;
                          var t$4 = t$2(t$3);
                          if (t$4.$bg().__value)
                            {
                              break_val = new sk$Bool((false));
                              break break$bg4234;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg4244;
                      }
                    }
                    break dowhile_cond$bg4235;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg4233;
                break jumpBlockOuterdowhile_cond$bg4235;
              }
            }
          while (true);
        }
        break_val = new sk$Bool((true));
        break jumpBlockOuterbreak$bg4234;
      }
      {}
      break jumpBlockOuterbreak$bg4234;
    }
  }
  return break_val;
};

sk$Iterator.prototype.any = function(p) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg4249:{
      break$bg4249:{
        dowhile_else$bg4248:{
          do
            {
              jumpBlockOuterdowhile_cond$bg4250:{
                dowhile_cond$bg4250:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var v;
                    {
                      jumpBlockOuterjumpLab$bg4258:{
                        jumpLab$bg4258:{
                          jumpLab$bg4257:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg4257;
                              
                              case 205:
                                v = var2.value;
                                break jumpLab$bg4258;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg4250;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = v;
                          if (t$2(t$3).__value)
                            {
                              break_val = new sk$Bool((true));
                              break break$bg4249;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg4258;
                      }
                    }
                    break dowhile_cond$bg4250;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg4248;
                break jumpBlockOuterdowhile_cond$bg4250;
              }
            }
          while (true);
        }
        break_val = new sk$Bool((false));
        break jumpBlockOuterbreak$bg4249;
      }
      {}
      break jumpBlockOuterbreak$bg4249;
    }
  }
  return break_val;
};

sk$Iterator.prototype.collect = function(cls) {
  var t$ = cls;
  var t$1 = this;
  return t$.createFromIterator(t$1);
};

sk$Iterator.prototype.concat = function(tail) {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4266:{
        break$bg4266:{
          dowhile_else$bg4265:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4267:{
                  dowhile_cond$bg4267:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var x;
                      {
                        jumpBlockOuterjumpLab$bg4281:{
                          jumpLab$bg4281:{
                            jumpLab$bg4280:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4280;
                                
                                case 205:
                                  x = var2.value;
                                  break jumpLab$bg4281;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4267;
                            }
                          }
                          yield new sk$Some(x);
                          break jumpBlockOuterjumpLab$bg4281;
                        }
                      }
                      break dowhile_cond$bg4267;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4265;
                  break jumpBlockOuterdowhile_cond$bg4267;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4266;
        }
        {}
        break jumpBlockOuterbreak$bg4266;
      }
    }
    var t$2 = tail;
    var var3 = t$2.values();
    var var4 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4274:{
        break$bg4274:{
          dowhile_else$bg4273:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4275:{
                  dowhile_cond$bg4275:{
                    {
                      var t$3 = var3;
                      var var5 = t$3.next();
                      var x1;
                      {
                        jumpBlockOuterjumpLab$bg4285:{
                          jumpLab$bg4285:{
                            jumpLab$bg4284:{
                              switch (var5.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4284;
                                
                                case 205:
                                  x1 = var5.value;
                                  break jumpLab$bg4285;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var4 = new sk$Bool((false));
                              break dowhile_cond$bg4275;
                            }
                          }
                          yield new sk$Some(x1);
                          break jumpBlockOuterjumpLab$bg4285;
                        }
                      }
                      break dowhile_cond$bg4275;
                    }
                  }
                  if (var4.__value)
                    {}
                  else
                    break dowhile_else$bg4273;
                  break jumpBlockOuterdowhile_cond$bg4275;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4274;
        }
        {}
        break jumpBlockOuterbreak$bg4274;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.drop = function(n) {
  var t$ = this;
  var t$1 = n;
  return new (sk$Iterator$dtDropIterator)(t$, t$1);
};

sk$Iterator.prototype.dropWhile = function(p) {
  return sk.__.toSkipGenerator.call(this, function*() {
    var dropping = new sk$Bool((true));
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4292:{
        break$bg4292:{
          dowhile_else$bg4291:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4293:{
                  dowhile_cond$bg4293:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var v;
                      {
                        jumpBlockOuterjumpLab$bg4305:{
                          jumpLab$bg4305:{
                            jumpLab$bg4304:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4304;
                                
                                case 205:
                                  v = var2.value;
                                  break jumpLab$bg4305;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4293;
                            }
                          }
                          {
                            var t$2;
                            if (dropping.__value)
                              {
                                var t$3 = p;
                                var t$4 = v;
                                var t$5 = t$3(t$4);
                                t$2 = t$5.$bg();
                              }
                            else
                              t$2 = new sk$Bool((false));
                            var t$6;
                            if (t$2.__value)
                              {
                                dropping = new sk$Bool((false));
                                t$6 = sk.__.$void;
                              }
                            else
                              t$6 = sk.__.$void;
                            var t$7 = dropping;
                            if (t$7.$bg().__value)
                              yield new sk$Some(v);
                            else
                              {}
                          }
                          break jumpBlockOuterjumpLab$bg4305;
                        }
                      }
                      break dowhile_cond$bg4293;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4291;
                  break jumpBlockOuterdowhile_cond$bg4293;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4292;
        }
        {}
        break jumpBlockOuterbreak$bg4292;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.each = function(f) {
  var break_val;
  {
    jumpBlockOuterbreak$bg4308:{
      break$bg4308:{
        do
          {
            jumpBlockOutercontinue$bg4309:{
              continue$bg4309:{
                {
                  var t$ = this;
                  var $var = t$.next();
                  var x;
                  {
                    jumpBlockOuterjumpLab$bg4317:{
                      jumpLab$bg4317:{
                        jumpLab$bg4316:{
                          switch ($var.__type_switch_id) {
                            case 205:
                              x = $var.value;
                              break jumpLab$bg4316;
                            
                            case 204:
                              break jumpLab$bg4317;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$1 = f;
                          var t$2 = x;
                          t$1(t$2);
                        }
                        break jumpBlockOuterjumpLab$bg4317;
                      }
                      {
                        break_val = sk.__.$void;
                        break break$bg4308;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg4309;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg4308;
    }
  }
  return break_val;
};

sk$Iterator.prototype.eachWithIndex = function(f) {
  var t$ = this;
  var t$1 = t$.enumerated();
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg4323:{
      break$bg4323:{
        dowhile_else$bg4322:{
          do
            {
              jumpBlockOuterdowhile_cond$bg4324:{
                dowhile_cond$bg4324:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var item;
                    {
                      jumpBlockOuterjumpLab$bg4335:{
                        jumpLab$bg4335:{
                          jumpLab$bg4334:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg4334;
                              
                              case 205:
                                item = var2.value;
                                break jumpLab$bg4335;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg4324;
                          }
                        }
                        {
                          var var3;
                          var var4;
                          {
                            jumpBlockOuterjumpLab$bg4331:{
                              jumpLab$bg4331:{
                                switch (item.__type_switch_id) {
                                  case 392:
                                    var4 = item.i0;
                                    var3 = item.i1;
                                    break jumpLab$bg4331;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var value = var3;
                                var index = var4;
                                var t$3 = f;
                                var t$4 = index;
                                var t$5 = value;
                                t$3(t$4, t$5);
                              }
                              break jumpBlockOuterjumpLab$bg4331;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg4335;
                      }
                    }
                    break dowhile_cond$bg4324;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg4322;
                break jumpBlockOuterdowhile_cond$bg4324;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg4323;
      }
      {}
      break jumpBlockOuterbreak$bg4323;
    }
  }
  return break_val;
};

sk$Iterator.prototype.enumerated = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var index = new sk$Int(0.0, 0.0);
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4340:{
        break$bg4340:{
          dowhile_else$bg4339:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4341:{
                  dowhile_cond$bg4341:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var x;
                      {
                        jumpBlockOuterjumpLab$bg4350:{
                          jumpLab$bg4350:{
                            jumpLab$bg4349:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4349;
                                
                                case 205:
                                  x = var2.value;
                                  break jumpLab$bg4350;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4341;
                            }
                          }
                          {
                            var t$2 = index;
                            var t$3 = x;
                            yield new sk$Some(new (sk$Tuple2)(t$2, t$3));
                            var t$4 = index;
                            index = t$4.$pl(new sk$Int(1.0, 0.0));
                          }
                          break jumpBlockOuterjumpLab$bg4350;
                        }
                      }
                      break dowhile_cond$bg4341;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4339;
                  break jumpBlockOuterdowhile_cond$bg4341;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4340;
        }
        {}
        break jumpBlockOuterbreak$bg4340;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.filter = function(p) {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4355:{
        break$bg4355:{
          dowhile_else$bg4354:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4356:{
                  dowhile_cond$bg4356:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var v;
                      {
                        jumpBlockOuterjumpLab$bg4364:{
                          jumpLab$bg4364:{
                            jumpLab$bg4363:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4363;
                                
                                case 205:
                                  v = var2.value;
                                  break jumpLab$bg4364;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4356;
                            }
                          }
                          {
                            var t$2 = p;
                            var t$3 = v;
                            if (t$2(t$3).__value)
                              yield new sk$Some(v);
                            else
                              {}
                          }
                          break jumpBlockOuterjumpLab$bg4364;
                        }
                      }
                      break dowhile_cond$bg4356;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4354;
                  break jumpBlockOuterdowhile_cond$bg4356;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4355;
        }
        {}
        break jumpBlockOuterbreak$bg4355;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.filterNone = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4369:{
        break$bg4369:{
          dowhile_else$bg4368:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4370:{
                  dowhile_cond$bg4370:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var v;
                      {
                        jumpBlockOuterjumpLab$bg4379:{
                          jumpLab$bg4379:{
                            jumpLab$bg4378:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4378;
                                
                                case 205:
                                  v = var2.value;
                                  break jumpLab$bg4379;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4370;
                            }
                          }
                          {
                            var x;
                            {
                              jumpBlockOuterjumpLab$bg4375:{
                                jumpLab$bg4375:{
                                  jumpLab$bg4374:{
                                    switch (v.__type_switch_id) {
                                      case 205:
                                        x = v.value;
                                        break jumpLab$bg4374;
                                      
                                      case 204:
                                        break jumpLab$bg4375;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  yield new sk$Some(x);
                                  break jumpBlockOuterjumpLab$bg4375;
                                }
                                {}
                                break jumpBlockOuterjumpLab$bg4375;
                              }
                            }
                          }
                          break jumpBlockOuterjumpLab$bg4379;
                        }
                      }
                      break dowhile_cond$bg4370;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4368;
                  break jumpBlockOuterdowhile_cond$bg4370;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4369;
        }
        {}
        break jumpBlockOuterbreak$bg4369;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.find = function(p) {
  var flag = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg4383:{
      break$bg4383:{
        dowhile_else$bg4382:{
          do
            {
              jumpBlockOuterdowhile_cond$bg4384:{
                dowhile_cond$bg4384:{
                  {
                    var t$ = this;
                    var $var = t$.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg4393:{
                        jumpLab$bg4393:{
                          jumpLab$bg4392:{
                            switch ($var.__type_switch_id) {
                              case 205:
                                x = $var.value;
                                break jumpLab$bg4392;
                              
                              case 204:
                                break jumpLab$bg4393;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var t$1 = p;
                            var t$2 = x;
                            if (t$1(t$2).__value)
                              {
                                var t$3 = x;
                                break_val = new (sk$Some)(t$3);
                                break break$bg4383;
                              }
                            else
                              {}
                          }
                          break jumpBlockOuterjumpLab$bg4393;
                        }
                        flag = new sk$Bool((false));
                        break jumpBlockOuterjumpLab$bg4393;
                      }
                    }
                    break dowhile_cond$bg4384;
                  }
                }
                if (flag.__value)
                  {}
                else
                  break dowhile_else$bg4382;
                break jumpBlockOuterdowhile_cond$bg4384;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg4383;
      }
      {}
      break jumpBlockOuterbreak$bg4383;
    }
  }
  return break_val;
};

sk$Iterator.prototype.flatMap = function(f) {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg4398:{
        break$bg4398:{
          dowhile_else$bg4397:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4399:{
                  dowhile_cond$bg4399:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var value;
                      {
                        jumpBlockOuterjumpLab$bg4420:{
                          jumpLab$bg4420:{
                            jumpLab$bg4419:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4419;
                                
                                case 205:
                                  value = var2.value;
                                  break jumpLab$bg4420;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4399;
                            }
                          }
                          {
                            var t$2 = f;
                            var t$3 = value;
                            var iter = t$2(t$3);
                            var t$4 = iter;
                            var t$5 = t$4;
                            var var3 = t$5.values();
                            var var4 = new sk$Bool((true));
                            var break_val;
                            {
                              jumpBlockOuterbreak$bg4409:{
                                break$bg4409:{
                                  dowhile_else$bg4408:{
                                    do
                                      {
                                        jumpBlockOuterdowhile_cond$bg4410:{
                                          dowhile_cond$bg4410:{
                                            {
                                              var t$6 = var3;
                                              var var5 = t$6.next();
                                              var x;
                                              {
                                                jumpBlockOuterjumpLab$bg4416:{
                                                  jumpLab$bg4416:{
                                                    jumpLab$bg4415:{
                                                      switch (var5.__type_switch_id) {
                                                        case 204:
                                                          break jumpLab$bg4415;
                                                        
                                                        case 205:
                                                          x = var5.value;
                                                          break jumpLab$bg4416;
                                                        
                                                        default:
                                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                                      }
                                                    }
                                                    {
                                                      var4 = new sk$Bool((false));
                                                      break dowhile_cond$bg4410;
                                                    }
                                                  }
                                                  yield new sk$Some(x);
                                                  break jumpBlockOuterjumpLab$bg4416;
                                                }
                                              }
                                              break dowhile_cond$bg4410;
                                            }
                                          }
                                          if (var4.__value)
                                            {}
                                          else
                                            break dowhile_else$bg4408;
                                          break jumpBlockOuterdowhile_cond$bg4410;
                                        }
                                      }
                                    while (true);
                                  }
                                  break_val = sk.__.$void;
                                  break jumpBlockOuterbreak$bg4409;
                                }
                                {}
                                break jumpBlockOuterbreak$bg4409;
                              }
                            }
                          }
                          break jumpBlockOuterjumpLab$bg4420;
                        }
                      }
                      break dowhile_cond$bg4399;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4397;
                  break jumpBlockOuterdowhile_cond$bg4399;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4398;
        }
        {}
        break jumpBlockOuterbreak$bg4398;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.flatten = function() {
  var t$ = this;
  return t$.flatMap(((_tmp4423) => 
  {
    return sk$id(_tmp4423);
  }));
};

sk$Iterator.prototype.foldl = function(f, init) {
  var t$ = this;
  var t$1 = f;
  var t$2 = init;
  return t$.reduce(t$1, t$2);
};

sk$Iterator.prototype.iterator = function() {
  return this;
};

sk$Iterator.prototype.map = function(f) {
  var t$ = this;
  var t$1 = f;
  return new (sk$Iterator$dtMapIterator)(t$, t$1);
};

sk$Iterator.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((x) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = x;
    result = t$1(t$2, t$3);
    return sk.__.$void;
  }));
  return result;
};

sk$Iterator.prototype.sizeHint = function() {
  return singleton$None;
};

sk$Iterator.prototype.take = function(n) {
  var t$ = this;
  var t$1 = n;
  return new (sk$Iterator$dtTakeIterator)(t$, t$1);
};

sk$Iterator.prototype.takeWhile = function(p) {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var $var = t$.values();
    var var1 = new sk$Bool((true));
    var break_val;
    {
      jumpBlockOuterbreak$bg4439:{
        break$bg4439:{
          dowhile_else$bg4438:{
            do
              {
                jumpBlockOuterdowhile_cond$bg4440:{
                  dowhile_cond$bg4440:{
                    {
                      var t$1 = $var;
                      var var2 = t$1.next();
                      var v;
                      {
                        jumpBlockOuterjumpLab$bg4449:{
                          jumpLab$bg4449:{
                            jumpLab$bg4448:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg4448;
                                
                                case 205:
                                  v = var2.value;
                                  break jumpLab$bg4449;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg4440;
                            }
                          }
                          {
                            var t$2 = p;
                            var t$3 = v;
                            var t$4 = t$2(t$3);
                            if (t$4.$bg().__value)
                              {
                                break_val = sk.__.$void;
                                break break$bg4439;
                              }
                            else
                              yield new sk$Some(v);
                          }
                          break jumpBlockOuterjumpLab$bg4449;
                        }
                      }
                      break dowhile_cond$bg4440;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg4438;
                  break jumpBlockOuterdowhile_cond$bg4440;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg4439;
        }
        {}
        break jumpBlockOuterbreak$bg4439;
      }
    }
    return undefined;
  });
};

sk$Iterator.prototype.unique = function() {
  var t$ = this;
  var t$1 = t$.collect(sk$Set);
  return t$1.iterator();
};

sk$Iterator.prototype.values = function() {
  return this;
};

sk$Iterator.prototype.zip = function(other) {
  var t$ = this;
  var t$1 = other;
  return new (sk$Iterator$dtZipIterator)(t$, t$1);
};

sk$Iterator.prototype.zipWith = function(other, f) {
  var t$ = this;
  var t$1 = other;
  var t$2 = f;
  return new (sk$Iterator$dtZipWithIterator)(t$, t$1, t$2);
};

sk$Iterator.prototype.__bases = [
  sk$Iterator
];

var sk$Iterator$dtGeneratorBase = sk.Iterator$dtGeneratorBase = function Iterator$dtGeneratorBase() {};

sk$Iterator$dtGeneratorBase.prototype = Object.create(Object.prototype);

sk$Iterator$dtGeneratorBase.prototype.__constructor = sk$Iterator$dtGeneratorBase;

sk$Iterator$dtGeneratorBase.prototype.__classname = 'Iterator.GeneratorBase';

sk$Iterator$dtGeneratorBase.prototype.$frozen = undefined;

sk$Iterator$dtGeneratorBase.prototype.__type_switch_id = -1;

sk$Iterator$dtGeneratorBase.prototype.__copy = function() {};

sk$Iterator$dtGeneratorBase.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp36 = __cache.get(this);
  if (_tmp36 === undefined)
    {
      var _tmp36 = this.__copy();
      _tmp36.$frozen = true;
      __cache.set(this, _tmp36);
    }
  return _tmp36;
};

sk$Iterator$dtGeneratorBase.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtGeneratorBase.prototype.inspect = function() {
  return new (sk$InspectObject)(new sk$String(('Generator')), new (sk$Array)([]));
};

sk$Iterator$dtGeneratorBase.prototype.__bases = [
  sk$Iterator$dtGeneratorBase
];

var sk$JSON$dtFormat = sk.JSON$dtFormat = function JSON$dtFormat() {};

sk$JSON$dtFormat.prototype = Object.create(Object.prototype);

sk$JSON$dtFormat.prototype.__constructor = sk$JSON$dtFormat;

sk$JSON$dtFormat.prototype.__classname = 'JSON.Format';

sk$JSON$dtFormat.prototype.$frozen = true;

sk$JSON$dtFormat.prototype.__type_switch_id = 150;

sk$JSON$dtFormat.prototype.__copy = function() {
  return new (sk$JSON$dtFormat)();
};

sk$JSON$dtFormat.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp37 = __cache.get(this);
  if (_tmp37 === undefined)
    {
      var _tmp37 = this.__copy();
      _tmp37.$frozen = true;
      __cache.set(this, _tmp37);
    }
  return _tmp37;
};

sk$JSON$dtFormat.prototype.__init = function(__named_parameters) {};

sk$JSON$dtFormat.deserialize = function(data, serializer) {
  var t$ = this;
  var t$1 = data;
  var t$2 = sk$Lexer$dtLexingPosition.create(t$1);
  var t$3 = serializer;
  return t$.streamDeserialize(t$2, t$3);
};

sk$JSON$dtFormat.reader = function(data) {
  var t$ = data;
  return new (sk$JSON$dtReader)(t$);
};

sk$JSON$dtFormat.serialize = function(value, serializer, isPretty) {
  if (isPretty === undefined)
    isPretty = ((() => 
    {
      return new sk$Bool((false));
    })());
  var vec = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  var t$1 = value;
  var t$2 = serializer;
  var t$3 = vec;
  var t$4 = t$3;
  var t$5 = isPretty;
  var result = t$.streamSerialize(t$1, t$2, ((_tmp4886) => 
  {
    return t$4.push(_tmp4886);
  }), t$5);
  var exn;
  {
    jumpBlockOuterjumpLab$bg4893:{
      jumpLab$bg4893:{
        jumpLab$bg4892:{
          switch (result.__type_switch_id) {
            case 259:
              break jumpLab$bg4892;
            
            case 258:
              exn = result.error;
              break jumpLab$bg4893;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$6 = vec;
          var t$7 = t$6.join(new sk$String(('')));
          return new (sk$Success)(t$7);
        }
      }
      {
        var t$8 = exn;
        return new (sk$Failure)(t$8);
      }
    }
  }
};

sk$JSON$dtFormat.streamDeserialize = function(data, serializer) {
  try {
    {
      var t$ = this;
      var t$1 = data;
      var reader = t$.reader(t$1);
      var t$2 = serializer;
      var t$3 = reader;
      var result = t$2.deserialize(t$3);
      var t$4 = result;
      return new (sk$Success)(t$4);
    }
  }catch ($var){
    {
      var exn;
      {
        jumpBlockOuterjumpLab$bg4902:{
          jumpLab$bg4902:{
            switch ($var.__type_switch_id) {
              case 48:
                exn = $var;
                break jumpLab$bg4902;
              
              case 46:
                exn = $var;
                break jumpLab$bg4902;
              
              case 47:
                exn = $var;
                break jumpLab$bg4902;
              
              case 49:
                exn = $var;
                break jumpLab$bg4902;
              
              case 50:
                exn = $var;
                break jumpLab$bg4902;
              
              case 51:
                exn = $var;
                break jumpLab$bg4902;
              
              case 52:
                exn = $var;
                break jumpLab$bg4902;
              
              case 53:
                exn = $var;
                break jumpLab$bg4902;
              
              case 54:
                exn = $var;
                break jumpLab$bg4902;
              
              case 55:
                exn = $var;
                break jumpLab$bg4902;
              
              case 56:
                exn = $var;
                break jumpLab$bg4902;
              
              case 57:
                exn = $var;
                break jumpLab$bg4902;
              
              case 58:
                exn = $var;
                break jumpLab$bg4902;
              
              case 59:
                exn = $var;
                break jumpLab$bg4902;
              
              case 60:
                exn = $var;
                break jumpLab$bg4902;
              
              case 61:
                exn = $var;
                break jumpLab$bg4902;
              
              case 62:
                exn = $var;
                break jumpLab$bg4902;
              
              case 63:
                exn = $var;
                break jumpLab$bg4902;
              
              default:
                skip.throwException(sk, $var);

            }
          }
          {
            var t$5 = exn;
            return new (sk$Failure)(t$5);
          }
        }
      }
    }
  }
};

sk$JSON$dtFormat.streamSerialize = function(value, serializer, write, isPretty) {
  if (isPretty === undefined)
    isPretty = ((() => 
    {
      return new sk$Bool((false));
    })());
  try {
    {
      var t$;
      if (isPretty.__value)
        {
          var t$1 = write;
          t$ = new (sk$JSON$dtPrettyFormatter)(t$1, undefined, undefined);
        }
      else
        {
          var t$2 = write;
          t$ = new (sk$JSON$dtCompactFormatter)(t$2);
        }
      var jsonFormatter = t$;
      var t$3 = this;
      var t$4 = jsonFormatter;
      var writer = t$3.writer(t$4);
      var t$5 = serializer;
      var t$6 = value;
      var t$7 = writer;
      t$5.serialize(t$6, t$7);
      var t$8 = writer;
      t$8.result();
      return new (sk$Success)(sk.__.$void);
    }
  }catch ($var){
    {
      var exn;
      {
        jumpBlockOuterjumpLab$bg4916:{
          jumpLab$bg4916:{
            switch ($var.__type_switch_id) {
              case 48:
                exn = $var;
                break jumpLab$bg4916;
              
              case 46:
                exn = $var;
                break jumpLab$bg4916;
              
              case 47:
                exn = $var;
                break jumpLab$bg4916;
              
              case 49:
                exn = $var;
                break jumpLab$bg4916;
              
              case 50:
                exn = $var;
                break jumpLab$bg4916;
              
              case 51:
                exn = $var;
                break jumpLab$bg4916;
              
              case 52:
                exn = $var;
                break jumpLab$bg4916;
              
              case 53:
                exn = $var;
                break jumpLab$bg4916;
              
              case 54:
                exn = $var;
                break jumpLab$bg4916;
              
              case 55:
                exn = $var;
                break jumpLab$bg4916;
              
              case 56:
                exn = $var;
                break jumpLab$bg4916;
              
              case 57:
                exn = $var;
                break jumpLab$bg4916;
              
              case 58:
                exn = $var;
                break jumpLab$bg4916;
              
              case 59:
                exn = $var;
                break jumpLab$bg4916;
              
              case 60:
                exn = $var;
                break jumpLab$bg4916;
              
              case 61:
                exn = $var;
                break jumpLab$bg4916;
              
              case 62:
                exn = $var;
                break jumpLab$bg4916;
              
              case 63:
                exn = $var;
                break jumpLab$bg4916;
              
              default:
                skip.throwException(sk, $var);

            }
          }
          {
            var t$9 = exn;
            return new (sk$Failure)(t$9);
          }
        }
      }
    }
  }
};

sk$JSON$dtFormat.writer = function(jsonFormatter) {
  var t$ = jsonFormatter;
  return new (sk$JSON$dtWriter)(t$);
};

sk$JSON$dtFormat.prototype.__bases = [
  sk$JSON$dtFormat
];

var sk$JSON$dtFormatter = sk.JSON$dtFormatter = function JSON$dtFormatter() {};

sk$JSON$dtFormatter.prototype = Object.create(Object.prototype);

sk$JSON$dtFormatter.prototype.__constructor = sk$JSON$dtFormatter;

sk$JSON$dtFormatter.prototype.__classname = 'JSON.Formatter';

sk$JSON$dtFormatter.prototype.$frozen = undefined;

sk$JSON$dtFormatter.prototype.__type_switch_id = -1;

sk$JSON$dtFormatter.prototype.__copy = function() {
  return new (sk$JSON$dtFormatter)();
};

sk$JSON$dtFormatter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp38 = __cache.get(this);
  if (_tmp38 === undefined)
    {
      var _tmp38 = this.__copy();
      _tmp38.$frozen = true;
      __cache.set(this, _tmp38);
    }
  return _tmp38;
};

sk$JSON$dtFormatter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtFormatter.prototype.__bases = [
  sk$JSON$dtFormatter
];

var sk$JSON$dtItemReader = sk.JSON$dtItemReader = function JSON$dtItemReader() {};

sk$JSON$dtItemReader.prototype = Object.create(Object.prototype);

sk$JSON$dtItemReader.prototype.__constructor = sk$JSON$dtItemReader;

sk$JSON$dtItemReader.prototype.__classname = 'JSON.ItemReader';

sk$JSON$dtItemReader.prototype.$frozen = undefined;

sk$JSON$dtItemReader.prototype.__type_switch_id = -1;

sk$JSON$dtItemReader.prototype.__copy = function() {
  return new (sk$JSON$dtItemReader)();
};

sk$JSON$dtItemReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp39 = __cache.get(this);
  if (_tmp39 === undefined)
    {
      var _tmp39 = this.__copy();
      _tmp39.$frozen = true;
      __cache.set(this, _tmp39);
    }
  return _tmp39;
};

sk$JSON$dtItemReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtItemReader.prototype.endBase = function(iter) {
  var t$ = iter;
  sk$JSON$dteatWhitespace(t$);
  var t$1 = iter;
  return sk$JSON$dteat(t$1, $makeChar(125));
};

sk$JSON$dtItemReader.prototype.readKeyBase = function(iter, serializer) {
  var t$ = iter;
  sk$JSON$dteatWhitespace(t$);
  var t$1 = iter;
  var t$2 = t$1.peek();
  if (t$2.$eq$eq($makeChar(125)).__value)
    return singleton$None;
  else
    {
      var t$3 = serializer;
      var t$4 = iter;
      var t$5 = new (sk$JSON$dtStringReader)(t$4);
      var key = t$3.deserialize(t$5);
      var t$6 = iter;
      sk$JSON$dteatWhitespace(t$6);
      var t$7 = iter;
      sk$JSON$dteat(t$7, $makeChar(58));
      var t$8 = iter;
      sk$JSON$dteatWhitespace(t$8);
      var t$9 = key;
      return new (sk$Some)(t$9);
    }
};

sk$JSON$dtItemReader.prototype.readValueBase = function(iter, serializer) {
  var t$ = serializer;
  var t$1 = iter;
  var t$2 = new (sk$JSON$dtReader)(t$1);
  var value = t$.deserialize(t$2);
  var t$3 = iter;
  sk$JSON$dteatWhitespace(t$3);
  var t$4 = iter;
  var $var = t$4.peek();
  var c;
  {
    jumpBlockOuterjumpLab$bg5001:{
      jumpLab$bg5001:{
        jumpLab$bg5000:{
          jumpLab$bg4999:{
            {
              var _tmp40 = $var.__getSwitchValue();
              switch (_tmp40) {
                case 44:
                  break jumpLab$bg4999;
                
                case 125:
                  break jumpLab$bg5000;
                
                default:
                  {
                    c = $var;
                    break jumpLab$bg5001;
                  }

              }
            }
          }
          {
            var t$5 = iter;
            sk$JSON$dteat(t$5, $makeChar(44));
            var t$6 = iter;
            sk$JSON$dteatWhitespace(t$6);
          }
          break jumpBlockOuterjumpLab$bg5001;
        }
        {}
        break jumpBlockOuterjumpLab$bg5001;
      }
      {
        var t$7 = iter;
        var t$8 = new sk$String(('Unexpected character \'')).toString();
        var t$9 = c;
        var t$10 = sk$JSON$dtcharToString(t$9);
        var t$11 = t$10.toString();
        var t$12 = new sk$String(('\' in JSON .Array. Expected \',\' or \']\'.')).toString();
        var t$13 = new sk$String(('')).join(new (sk$Array)([
          t$8,
          t$11,
          t$12
        ]));
        sk$JSON$dtreportInvalidJSON(t$7, t$13);
      }
      break jumpBlockOuterjumpLab$bg5001;
    }
  }
  return value;
};

sk$JSON$dtItemReader.prototype.__bases = [
  sk$JSON$dtItemReader
];

var sk$JSON$dtItemWriter = sk.JSON$dtItemWriter = function JSON$dtItemWriter() {};

sk$JSON$dtItemWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtItemWriter.prototype.__constructor = sk$JSON$dtItemWriter;

sk$JSON$dtItemWriter.prototype.__classname = 'JSON.ItemWriter';

sk$JSON$dtItemWriter.prototype.$frozen = undefined;

sk$JSON$dtItemWriter.prototype.__type_switch_id = -1;

sk$JSON$dtItemWriter.prototype.__copy = function() {
  return new (sk$JSON$dtItemWriter)();
};

sk$JSON$dtItemWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp41 = __cache.get(this);
  if (_tmp41 === undefined)
    {
      var _tmp41 = this.__copy();
      _tmp41.$frozen = true;
      __cache.set(this, _tmp41);
    }
  return _tmp41;
};

sk$JSON$dtItemWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtItemWriter.prototype.endBase = function(jsonFormatter, begun) {
  var t$ = begun;
  if (t$.$bg().__value)
    {
      var t$1 = jsonFormatter;
      t$1.writeRaw(new sk$String(('{}')));
      return sk.__.$void;
    }
  else
    {
      var t$2 = jsonFormatter;
      return t$2.writeCurlyClose();
    }
};

sk$JSON$dtItemWriter.prototype.writeItemBase = function(jsonFormatter, key, keySerializer, value, valueSerializer, begun) {
  var t$ = begun;
  if (t$.$bg().__value)
    {
      var t$1 = jsonFormatter;
      t$1.writeCurlyOpen();
    }
  else
    {
      var t$2 = jsonFormatter;
      t$2.writeComma();
    }
  var t$3 = jsonFormatter;
  var keyWriter = new (sk$JSON$dtStringWriter)(t$3);
  var t$4 = keySerializer;
  var t$5 = key;
  var t$6 = keyWriter;
  t$4.serialize(t$5, t$6);
  var t$7 = jsonFormatter;
  t$7.writeColon();
  var t$8 = jsonFormatter;
  var valueWriter = new (sk$JSON$dtWriter)(t$8);
  var t$9 = valueSerializer;
  var t$10 = value;
  var t$11 = valueWriter;
  return t$9.serialize(t$10, t$11);
};

sk$JSON$dtItemWriter.prototype.__bases = [
  sk$JSON$dtItemWriter
];

var sk$JSON$dtValue = sk.JSON$dtValue = function JSON$dtValue() {};

sk$JSON$dtValue.prototype = Object.create(Object.prototype);

sk$JSON$dtValue.prototype.__constructor = sk$JSON$dtValue;

sk$JSON$dtValue.prototype.__classname = 'JSON.Value';

sk$JSON$dtValue.prototype.$frozen = undefined;

sk$JSON$dtValue.prototype.__type_switch_id = -1;

sk$JSON$dtValue.prototype.__copy = function() {};

sk$JSON$dtValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp42 = __cache.get(this);
  if (_tmp42 === undefined)
    {
      var _tmp42 = this.__copy();
      _tmp42.$frozen = true;
      __cache.set(this, _tmp42);
    }
  return _tmp42;
};

sk$JSON$dtValue.prototype.__init = function(__named_parameters) {};

sk$JSON$dtValue.prototype.encode = function() {
  var t$ = this;
  return t$.toString();
};

sk$JSON$dtValue.prototype.expectMap = function() {
  var t$ = this;
  var t$1 = t$.expectObject();
  return t$1.value;
};

sk$JSON$dtValue.prototype.expectVector = function() {
  var t$ = this;
  var t$1 = t$.expectArray();
  return t$1.value;
};

sk$JSON$dtValue.prototype.print = function(space) {
  if (space === undefined)
    space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  var t$ = this;
  var t$1 = space;
  return t$.writeToStream(((_tmp5486) => 
  {
    return sk$print_raw(_tmp5486);
  }), t$1, undefined);
};

sk$JSON$dtValue.prototype.toString = function() {
  var vec = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  var t$1 = vec;
  var t$2 = t$1;
  t$.writeToStream(((_tmp5492) => 
  {
    return t$2.push(_tmp5492);
  }), undefined, undefined);
  var t$3 = vec;
  return t$3.join(new sk$String(('')));
};

sk$JSON$dtValue.prototype.__bases = [
  sk$JSON$dtValue
];

var sk$JSON$dtValueReader = sk.JSON$dtValueReader = function JSON$dtValueReader() {};

sk$JSON$dtValueReader.prototype = Object.create(Object.prototype);

sk$JSON$dtValueReader.prototype.__constructor = sk$JSON$dtValueReader;

sk$JSON$dtValueReader.prototype.__classname = 'JSON.ValueReader';

sk$JSON$dtValueReader.prototype.$frozen = undefined;

sk$JSON$dtValueReader.prototype.__type_switch_id = -1;

sk$JSON$dtValueReader.prototype.__copy = function() {
  return new (sk$JSON$dtValueReader)();
};

sk$JSON$dtValueReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp43 = __cache.get(this);
  if (_tmp43 === undefined)
    {
      var _tmp43 = this.__copy();
      _tmp43.$frozen = true;
      __cache.set(this, _tmp43);
    }
  return _tmp43;
};

sk$JSON$dtValueReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtValueReader.prototype.endBase = function(iter) {
  var t$ = iter;
  sk$JSON$dteatWhitespace(t$);
  var t$1 = iter;
  return sk$JSON$dteat(t$1, $makeChar(93));
};

sk$JSON$dtValueReader.prototype.readValueBase = function(iter, serializer) {
  var t$ = iter;
  sk$JSON$dteatWhitespace(t$);
  var t$1 = iter;
  var t$2 = t$1.peek();
  if (t$2.$eq$eq($makeChar(93)).__value)
    return singleton$None;
  else
    {
      var t$3 = serializer;
      var t$4 = iter;
      var t$5 = new (sk$JSON$dtReader)(t$4);
      var t$6 = t$3.deserialize(t$5);
      var v = new (sk$Some)(t$6);
      var t$7 = iter;
      sk$JSON$dteatWhitespace(t$7);
      var t$8 = iter;
      var $var = t$8.peek();
      var c;
      {
        jumpBlockOuterjumpLab$bg5521:{
          jumpLab$bg5521:{
            jumpLab$bg5520:{
              jumpLab$bg5519:{
                {
                  var _tmp44 = $var.__getSwitchValue();
                  switch (_tmp44) {
                    case 44:
                      break jumpLab$bg5519;
                    
                    case 93:
                      break jumpLab$bg5520;
                    
                    default:
                      {
                        c = $var;
                        break jumpLab$bg5521;
                      }

                  }
                }
              }
              {
                var t$9 = iter;
                t$9.advance();
                var t$10 = iter;
                sk$JSON$dteatWhitespace(t$10);
              }
              break jumpBlockOuterjumpLab$bg5521;
            }
            {}
            break jumpBlockOuterjumpLab$bg5521;
          }
          {
            var t$11 = iter;
            var t$12 = new sk$String(('Unexpected character \'\'')).toString();
            var t$13 = c;
            var t$14 = sk$JSON$dtcharToString(t$13);
            var t$15 = t$14.toString();
            var t$16 = new sk$String((' in JSON .Array. Expected \',\' or \']\'.')).toString();
            var t$17 = new sk$String(('')).join(new (sk$Array)([
              t$12,
              t$15,
              t$16
            ]));
            sk$JSON$dtreportInvalidJSON(t$11, t$17);
          }
          break jumpBlockOuterjumpLab$bg5521;
        }
      }
      var t$18 = iter;
      sk$JSON$dteatWhitespace(t$18);
      return v;
    }
};

sk$JSON$dtValueReader.prototype.__bases = [
  sk$JSON$dtValueReader
];

var sk$JSON$dtValueWriter = sk.JSON$dtValueWriter = function JSON$dtValueWriter() {};

sk$JSON$dtValueWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtValueWriter.prototype.__constructor = sk$JSON$dtValueWriter;

sk$JSON$dtValueWriter.prototype.__classname = 'JSON.ValueWriter';

sk$JSON$dtValueWriter.prototype.$frozen = undefined;

sk$JSON$dtValueWriter.prototype.__type_switch_id = -1;

sk$JSON$dtValueWriter.prototype.__copy = function() {
  return new (sk$JSON$dtValueWriter)();
};

sk$JSON$dtValueWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp45 = __cache.get(this);
  if (_tmp45 === undefined)
    {
      var _tmp45 = this.__copy();
      _tmp45.$frozen = true;
      __cache.set(this, _tmp45);
    }
  return _tmp45;
};

sk$JSON$dtValueWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtValueWriter.prototype.endBase = function(jsonFormatter, begun) {
  var t$ = begun;
  if (t$.$bg().__value)
    {
      var t$1 = jsonFormatter;
      return t$1.writeRaw(new sk$String(('[]')));
    }
  else
    {
      var t$2 = jsonFormatter;
      return t$2.writeSquareClose();
    }
};

sk$JSON$dtValueWriter.prototype.writeValueBase = function(jsonFormatter, serializer, value, begun) {
  var t$ = begun;
  if (t$.$bg().__value)
    {
      var t$1 = jsonFormatter;
      t$1.writeSquareOpen();
    }
  else
    {
      var t$2 = jsonFormatter;
      t$2.writeComma();
    }
  var t$3 = jsonFormatter;
  var writer = new (sk$JSON$dtWriter)(t$3);
  var t$4 = serializer;
  var t$5 = value;
  var t$6 = writer;
  return t$4.serialize(t$5, t$6);
};

sk$JSON$dtValueWriter.prototype.__bases = [
  sk$JSON$dtValueWriter
];

var sk$KeyedSequence = sk.KeyedSequence = function KeyedSequence() {};

sk$KeyedSequence.prototype = Object.create(Object.prototype);

sk$KeyedSequence.prototype.__constructor = sk$KeyedSequence;

sk$KeyedSequence.prototype.__classname = 'KeyedSequence';

sk$KeyedSequence.prototype.$frozen = undefined;

sk$KeyedSequence.prototype.__type_switch_id = -1;

sk$KeyedSequence.prototype.__copy = function() {};

sk$KeyedSequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp46 = __cache.get(this);
  if (_tmp46 === undefined)
    {
      var _tmp46 = this.__copy();
      _tmp46.$frozen = true;
      __cache.set(this, _tmp46);
    }
  return _tmp46;
};

sk$KeyedSequence.prototype.__init = function(__named_parameters) {};

sk$KeyedSequence.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.find(((k, v) => 
  {
    var t$2 = p;
    var t$3 = k;
    var t$4 = v;
    var t$5 = t$2(t$3, t$4);
    return t$5.$bg();
  }));
  return t$1.isNone();
};

sk$KeyedSequence.prototype.any = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.find(t$1);
  return t$2.isSome();
};

sk$KeyedSequence.prototype.containsKey = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.isSome();
};

sk$KeyedSequence.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.each(((i) => 
  {
    var t$2 = f;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$KeyedSequence.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = p;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return t$2.collect(sk$Map);
};

sk$KeyedSequence.prototype.filterNone = function() {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i1;
    var t$5 = t$4;
    return t$5.isSome();
  }));
  var t$6 = t$2.map(((i1) => 
  {
    var t$7 = i1;
    var t$8 = t$7.i0;
    var t$9 = i1;
    var t$10 = t$9.i1;
    var t$11 = t$10;
    var t$12 = t$11.fromSome(undefined);
    return new (sk$Tuple2)(t$8, t$12);
  }));
  return t$6.collect(sk$Map);
};

sk$KeyedSequence.prototype.find = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.findItem(t$1);
  return t$2.map(((i) => 
  {
    var t$3 = i;
    return t$3.i1;
  }));
};

sk$KeyedSequence.prototype.findItem = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.find(((i) => 
  {
    var t$2 = p;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$KeyedSequence.prototype.genFilter = skip.asyncToGenerator(function*(_p) {
  return sk$invariant_violation(new sk$String(('TODO: implement default version')));
});

sk$KeyedSequence.prototype.genMap = skip.asyncToGenerator(function*(_s) {
  return sk$invariant_violation(new sk$String(('TODO: implement default version')));
});

sk$KeyedSequence.prototype.get = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var v;
  {
    jumpBlockOuterjumpLab$bg5595:{
      jumpLab$bg5595:{
        jumpLab$bg5594:{
          jumpLab$bg5596:{
            switch ($var.__type_switch_id) {
              case 205:
                break jumpLab$bg5596;
              
              case 204:
                break jumpLab$bg5595;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          switch ($var.value.__type_switch_id) {
            case 392:
              v = $var.value.i1;
              break jumpLab$bg5594;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return v;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$KeyedSequence.prototype.getItem = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var i;
  {
    jumpBlockOuterjumpLab$bg5603:{
      jumpLab$bg5603:{
        jumpLab$bg5602:{
          switch ($var.__type_switch_id) {
            case 205:
              i = $var.value;
              break jumpLab$bg5602;
            
            case 204:
              break jumpLab$bg5603;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return i;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$KeyedSequence.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$KeyedSequence.prototype.iterator = function() {
  var t$ = this;
  return t$.items();
};

sk$KeyedSequence.prototype.joinKeys = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((k, _) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = k;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$KeyedSequence.prototype.joinValues = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((_, v) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = v;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$KeyedSequence.prototype.keys = function() {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.map(((i) => 
  {
    var t$2 = i;
    return t$2.i0;
  }));
};

sk$KeyedSequence.prototype.map = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = s;
    var t$6 = i;
    var t$7 = t$6.i0;
    var t$8 = i;
    var t$9 = t$8.i1;
    var t$10 = t$5(t$7, t$9);
    return new (sk$Tuple2)(t$4, t$10);
  }));
  return t$2.collect(sk$Map);
};

sk$KeyedSequence.prototype.mapItems = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = s;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return t$2.collect(sk$Map);
};

sk$KeyedSequence.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.map(((v) => 
  {
    var t$3 = v;
    return t$3.i1;
  }));
};

sk$KeyedSequence.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((k, v) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = k;
    var t$4 = v;
    result = t$1(t$2, t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$KeyedSequence.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.map(((i) => 
  {
    var t$2 = i;
    return t$2.i1;
  }));
};

sk$KeyedSequence.prototype.__bases = [
  sk$KeyedSequence
];

var sk$Lexer$dtLexer = sk.Lexer$dtLexer = function Lexer$dtLexer(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Lexer$dtLexer.prototype = Object.create(Object.prototype);

sk$Lexer$dtLexer.prototype.__constructor = sk$Lexer$dtLexer;

sk$Lexer$dtLexer.prototype.__classname = 'Lexer.Lexer';

sk$Lexer$dtLexer.prototype.$frozen = undefined;

sk$Lexer$dtLexer.prototype.__type_switch_id = -1;

sk$Lexer$dtLexer.prototype.__copy = function() {
  return new (sk$Lexer$dtLexer)(this);
};

sk$Lexer$dtLexer.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp47 = __cache.get(this);
  if (_tmp47 === undefined)
    {
      var _tmp47 = this.__copy();
      _tmp47.$frozen = true;
      __cache.set(this, _tmp47);
      _tmp47.position = skip.deepFreeze(_tmp47.position, __cache);
      _tmp47.errors = skip.deepFreeze(_tmp47.errors, __cache);
      _tmp47.comments = skip.deepFreeze(_tmp47.comments, __cache);
    }
  return _tmp47;
};

sk$Lexer$dtLexer.prototype.__init = function(__named_parameters) {
  this.position = __named_parameters.position;
  this.errors = __named_parameters.errors;
  this.comments = __named_parameters.comments;
};

sk$Lexer$dtLexer.prototype.addAndCreateError = function(start, errorCode, message) {
  var t$ = this;
  var t$1 = errorCode;
  var t$2 = this;
  var t$3 = start;
  var t$4 = t$2.getRange(t$3);
  var t$5 = message;
  var t$6 = sk$SyntaxError$dtcreate(t$1, t$4, t$5, undefined, undefined);
  t$.addError(t$6);
  var t$7 = this;
  var t$8 = start;
  return t$7.createErrorToken(t$8);
};

sk$Lexer$dtLexer.prototype.addComment = function(comment) {
  var t$ = this;
  var t$1 = t$.comments;
  var t$2 = comment;
  return t$1.push(t$2);
};

sk$Lexer$dtLexer.prototype.addError = function(error) {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = error;
  return t$1.push(t$2);
};

sk$Lexer$dtLexer.prototype.addErrorAt = function(start, errorCode, message) {
  var t$ = this;
  var t$1 = errorCode;
  var t$2 = start;
  var t$3 = t$2.position;
  var t$4 = sk$TextRange$dtempty(t$3);
  var t$5 = message;
  var t$6 = sk$SyntaxError$dtcreate(t$1, t$4, t$5, undefined, undefined);
  return t$.addError(t$6);
};

sk$Lexer$dtLexer.prototype.advance = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.advance();
};

sk$Lexer$dtLexer.prototype.atEnd = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.atEnd();
};

sk$Lexer$dtLexer.prototype.createAndAddComment = function(start, kind) {
  var t$ = this;
  var t$1 = this;
  var t$2 = start;
  var t$3 = kind;
  var t$4 = t$1.createComment(t$2, t$3);
  return t$.addComment(t$4);
};

sk$Lexer$dtLexer.prototype.createComment = function(start, kind) {
  var t$ = this;
  var t$1 = start;
  var value = t$.getTokenText(t$1);
  var t$2 = kind;
  var t$3 = this;
  var t$4 = start;
  var t$5 = t$3.getRange(t$4);
  var t$6 = value;
  return new (sk$Token$dtComment)({
    kind: t$2,
    range: t$5,
    value: t$6
  });
};

sk$Lexer$dtLexer.prototype.createEmptyToken = function(kind) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.position;
  var t$3 = kind;
  return t$.createToken(t$2, t$3, new sk$Bool((false)));
};

sk$Lexer$dtLexer.prototype.createErrorToken = function(start) {
  var t$ = this;
  var t$1 = t$.errorCount();
  var t$2 = t$1.$gt(new sk$Int(0.0, 0.0));
  sk$invariant(t$2, new sk$String(('Must not create an ErrorToken without adding an Error')));
  var t$3 = this;
  var t$4 = start;
  return t$3.createToken(t$4, singleton$TokenKind$dtERROR, new sk$Bool((false)));
};

sk$Lexer$dtLexer.prototype.createStartResult = function() {
  var t$ = this;
  var t$1 = t$.mark();
  var t$2 = this;
  var t$3 = t$2.createEmptyToken(singleton$TokenKind$dtBEGINNING_OF_FILE);
  return new (sk$Lexer$dtTokenResult)({
    startPosition: t$1,
    token: t$3
  });
};

sk$Lexer$dtLexer.prototype.createToken = function(start, kind, includeTrailingTrivia) {
  var t$ = this;
  var t$1 = t$.errors;
  var errors = t$1.toArray();
  var t$2 = this;
  var t$3 = t$2.comments;
  var leadingComments = t$3.toArray();
  var t$4 = this;
  var t$5 = start;
  var value = t$4.getTokenText(t$5);
  var t$6 = this;
  var t$7 = start;
  var range = t$6.getRange(t$7);
  var t$8 = this;
  t$8.finishToken();
  var trailingComments = new (sk$Array)([]);
  if (includeTrailingTrivia.__value)
    {
      var t$9 = this;
      t$9.lexTrailingTrivia();
      var t$10 = errors;
      var t$11 = this;
      var t$12 = t$11.errors;
      var t$13 = t$12.toArray();
      errors = t$10.concat(t$13);
      var t$14 = this;
      var t$15 = t$14.comments;
      trailingComments = t$15.toArray();
      var t$16 = this;
      t$16.finishToken();
    }
  else
    {}
  var t$17 = kind;
  var t$18 = range;
  var t$19 = value;
  var t$20 = errors;
  var t$21 = leadingComments;
  var t$22 = trailingComments;
  return new (sk$Token$dtToken)({
    errors: t$20,
    kind: t$17,
    leadingComments: t$21,
    range: t$18,
    trailingComments: t$22,
    value: t$19
  });
};

sk$Lexer$dtLexer.prototype.eatOpt = function(ch) {
  var t$ = this;
  var t$1 = ch;
  if (t$.peekChar(t$1).__value)
    {
      var t$2 = this;
      t$2.advance();
      return new sk$Bool((true));
    }
  else
    return new sk$Bool((false));
};

sk$Lexer$dtLexer.prototype.errorCount = function() {
  var t$ = this;
  var t$1 = t$.errors;
  return t$1.size();
};

sk$Lexer$dtLexer.prototype.finishToken = function() {
  var t$ = this;
  var t$1 = t$.errors;
  t$1.clear();
  var t$2 = this;
  var t$3 = t$2.comments;
  return t$3.clear();
};

sk$Lexer$dtLexer.prototype.getRange = function(start) {
  var t$ = start;
  var t$1 = this;
  var t$2 = t$1.position;
  return t$.getRange(t$2);
};

sk$Lexer$dtLexer.prototype.getTokenText = function(start) {
  var t$ = start;
  var t$1 = this;
  var t$2 = t$1.position;
  return t$.getText(t$2);
};

sk$Lexer$dtLexer.prototype.hadError = function(initialErrorCount) {
  var t$ = this;
  var t$1 = t$.errorCount();
  var t$2 = initialErrorCount;
  return t$1.$bg$eq(t$2);
};

sk$Lexer$dtLexer.prototype.lexToken = function(includeTrailingTrivia) {
  var t$ = this;
  var startPosition = t$.mark();
  var t$1 = this;
  var t$2 = includeTrailingTrivia;
  var token = t$1.lexTokenInternal(t$2);
  var t$3 = startPosition;
  var t$4 = token;
  return new (sk$Lexer$dtTokenResult)({
    startPosition: t$3,
    token: t$4
  });
};

sk$Lexer$dtLexer.prototype.mark = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.clone();
};

sk$Lexer$dtLexer.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.next();
};

sk$Lexer$dtLexer.prototype.peek = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.peek();
};

sk$Lexer$dtLexer.prototype.peekChar = function(ch) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = ch;
  return t$1.peekChar(t$2);
};

sk$Lexer$dtLexer.prototype.peekCharOffset = function(ch, offset) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = ch;
  var t$3 = offset;
  return t$1.peekCharOffset(t$2, t$3);
};

sk$Lexer$dtLexer.prototype.peekOffset = function(offset) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = offset;
  return t$1.peekOffset(t$2);
};

sk$Lexer$dtLexer.prototype.saveState = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.saveState();
};

sk$Lexer$dtLexer.prototype.setPosition = function(position) {
  var $var = this;
  var t$ = $var;
  var t$1 = position;
  var t$2 = t$;
  t$2.position = t$1.clone();
  return sk.__.$void;
};

sk$Lexer$dtLexer.prototype.skipChars = function(predicate) {
  var break_val;
  {
    jumpBlockOuterbreak$bg5841:{
      break$bg5841:{
        do
          {
            jumpBlockOutercontinue$bg5842:{
              continue$bg5842:{
                {
                  var t$ = predicate;
                  var t$1 = this;
                  var t$2 = t$1.peek();
                  var t$3 = t$(t$2);
                  var t$4;
                  if (t$3.$bg().__value)
                    {
                      break_val = sk.__.$void;
                      break break$bg5841;
                    }
                  else
                    t$4 = sk.__.$void;
                  var t$5 = this;
                  t$5.advance();
                }
              }
              {}
              break jumpBlockOutercontinue$bg5842;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg5841;
    }
  }
  return break_val;
};

sk$Lexer$dtLexer.prototype.__bases = [
  sk$Lexer$dtLexer
];

var sk$Lexer$dtLexingPosition = sk.Lexer$dtLexingPosition = function Lexer$dtLexingPosition(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Lexer$dtLexingPosition.prototype = Object.create(Object.prototype);

sk$Lexer$dtLexingPosition.prototype.__constructor = sk$Lexer$dtLexingPosition;

sk$Lexer$dtLexingPosition.prototype.__classname = 'Lexer.LexingPosition';

sk$Lexer$dtLexingPosition.prototype.$frozen = false;

sk$Lexer$dtLexingPosition.prototype.__type_switch_id = 171;

sk$Lexer$dtLexingPosition.prototype.__copy = function() {
  return new (sk$Lexer$dtLexingPosition)(this);
};

sk$Lexer$dtLexingPosition.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp48 = __cache.get(this);
  if (_tmp48 === undefined)
    {
      var _tmp48 = this.__copy();
      _tmp48.$frozen = true;
      __cache.set(this, _tmp48);
      _tmp48.source = skip.deepFreeze(_tmp48.source, __cache);
      _tmp48.position = skip.deepFreeze(_tmp48.position, __cache);
      _tmp48.iter = skip.deepFreeze(_tmp48.iter, __cache);
    }
  return _tmp48;
};

sk$Lexer$dtLexingPosition.prototype.__init = function(__named_parameters) {
  this.source = __named_parameters.source;
  this.position = __named_parameters.position;
  this.iter = __named_parameters.iter;
};

sk$Lexer$dtLexingPosition.prototype.advance = function() {
  var $var = this;
  var t$ = $var;
  var t$1 = this;
  var t$2 = t$1.iter;
  var t$3;
  var var1 = t$2.next();
  var ch;
  var ch1;
  {
    jumpBlockOuterjumpLab$bg5872:{
      jumpLab$bg5872:{
        jumpLab$bg5871:{
          jumpLab$bg5870:{
            switch (var1.__type_switch_id) {
              case 205:
                ch1 = var1.value;
                var var2 = new sk$Bool((false));
                var t$4 = ch1;
                var2 = t$4.$eq$eq((sk$Chars$dtlineFeed()));
                if (var2.__value)
                  break jumpLab$bg5870;
                else
                  {
                    ch = var1.value;
                    var var3 = new sk$Bool((false));
                    var t$5 = ch;
                    var3 = t$5.$eq$eq((sk$Chars$dtcarriageReturn()));
                    if (var3.__value)
                      break jumpLab$bg5871;
                    else
                      break jumpLab$bg5872;
                  }
              
              default:
                break jumpLab$bg5872;

            }
          }
          {
            var t$6 = this;
            var t$7 = t$6.position;
            t$3 = t$7.nextLine();
          }
          break jumpBlockOuterjumpLab$bg5872;
        }
        {
          var t$8 = this;
          if (t$8.peekChar((sk$Chars$dtlineFeed())).__value)
            {
              var t$9 = this;
              var t$10 = t$9.iter;
              t$10.next();
            }
          else
            {}
          var t$11 = this;
          var t$12 = t$11.position;
          t$3 = t$12.nextLine();
        }
        break jumpBlockOuterjumpLab$bg5872;
      }
      {
        var t$13 = this;
        var t$14 = t$13.position;
        t$3 = t$14.nextColumn();
      }
      break jumpBlockOuterjumpLab$bg5872;
    }
  }
  var t$15 = t$;
  t$15.position = t$3;
  return sk.__.$void;
};

sk$Lexer$dtLexingPosition.prototype.atEnd = function() {
  var t$ = this;
  var t$1 = t$.iter;
  return t$1.atEnd();
};

sk$Lexer$dtLexingPosition.prototype.clone = function() {
  var t$ = this;
  var t$1 = t$.source;
  var t$2 = this;
  var t$3 = t$2.position;
  var t$4 = this;
  var t$5 = t$4.iter;
  var t$6 = t$5.clone();
  return new (sk$Lexer$dtLexingPosition)({
    iter: t$6,
    position: t$3,
    source: t$1
  });
};

sk$Lexer$dtLexingPosition.create = function(source) {
  var t$ = source;
  var t$1 = source;
  var t$2 = t$1.getIter();
  return new (sk$Lexer$dtLexingPosition)({
    iter: t$2,
    position: (sk$Position$dtstart()),
    source: t$
  });
};

sk$Lexer$dtLexingPosition.createAt = function(state) {
  var t$ = state;
  var t$1 = t$.source;
  var t$2 = state;
  var t$3 = t$2.position;
  var t$4 = state;
  var t$5 = t$4.iter;
  var t$6 = t$5.clone();
  return new (sk$Lexer$dtLexingPosition)({
    iter: t$6,
    position: t$3,
    source: t$1
  });
};

sk$Lexer$dtLexingPosition.prototype.getPosition = function() {
  var t$ = this;
  return t$.position;
};

sk$Lexer$dtLexingPosition.prototype.getRange = function(end) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = end;
  var t$3 = t$2.position;
  return sk$TextRange$dtcreate(t$1, t$3);
};

sk$Lexer$dtLexingPosition.prototype.getText = function(end) {
  var t$ = this;
  var t$1 = end;
  var t$2 = t$1.iter;
  return t$.getTextOfIter(t$2);
};

sk$Lexer$dtLexingPosition.prototype.getTextOfIter = function(end) {
  var t$ = this;
  var t$1 = t$.iter;
  var t$2 = end;
  return t$1.substring(t$2);
};

sk$Lexer$dtLexingPosition.prototype.line = function() {
  var t$ = this;
  var t$1 = t$.getPosition();
  return t$1.line();
};

sk$Lexer$dtLexingPosition.prototype.next = function() {
  var t$ = this;
  var result = t$.peek();
  var t$1 = this;
  t$1.advance();
  return result;
};

sk$Lexer$dtLexingPosition.prototype.peek = function() {
  var t$ = this;
  return t$.peekOffset(new sk$Int(0.0, 0.0));
};

sk$Lexer$dtLexingPosition.prototype.peekChar = function(ch) {
  var t$ = this;
  var t$1 = ch;
  return t$.peekCharOffset(t$1, new sk$Int(0.0, 0.0));
};

sk$Lexer$dtLexingPosition.prototype.peekCharOffset = function(ch, offset) {
  var t$ = this;
  var t$1 = offset;
  var t$2 = t$.peekOffset(t$1);
  var t$3 = ch;
  return t$2.$eq$eq(t$3);
};

sk$Lexer$dtLexingPosition.peekIterCurrent = function(iter) {
  var t$ = iter;
  var $var = t$.current();
  var ch;
  {
    jumpBlockOuterjumpLab$bg5936:{
      jumpLab$bg5936:{
        jumpLab$bg5935:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg5935;
            
            case 205:
              ch = $var.value;
              break jumpLab$bg5936;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return (sk$Chars$dtnull());
      }
      return ch;
    }
  }
};

sk$Lexer$dtLexingPosition.peekIterOffset = function(iter, offset) {
  do
    {
      jumpBlockOuterloop_end$bg5949:{
        loop_end$bg5949:{
          {
            var t$ = offset;
            var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
            sk$invariant(t$1, new sk$String(('No peeking backwards')));
            var t$2 = offset;
            if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
              {
                var t$3 = this;
                var t$4 = iter;
                return t$3.peekIterCurrent(t$4);
              }
            else
              {
                var t$5 = iter;
                t$5.next();
                var t$6 = this;
                var t$7 = iter;
                var t$8 = offset;
                var t$9 = t$8.$mi(new sk$Int(1.0, 0.0));
                var t$10 = t$7;
                var t$11 = t$9;
                iter = t$10;
                offset = t$11;
                break loop_end$bg5949;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg5949;
      }
    }
  while (true);
};

sk$Lexer$dtLexingPosition.prototype.peekOffset = function(offset) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = t$1.iter;
  var t$3 = t$2.clone();
  var t$4 = offset;
  return t$.peekIterOffset(t$3, t$4);
};

sk$Lexer$dtLexingPosition.prototype.saveState = function() {
  var t$ = this;
  var t$1 = t$.source;
  var t$2 = this;
  var t$3 = t$2.position;
  var t$4 = this;
  var t$5 = skip.deepFreeze(t$4.iter, new Map());
  return new (sk$Lexer$dtLexingPosition)({
    iter: t$5,
    position: t$3,
    source: t$1
  });
};

sk$Lexer$dtLexingPosition.prototype.__bases = [
  sk$Lexer$dtLexingPosition
];

var sk$Lexer$dtTokenResult = sk.Lexer$dtTokenResult = function Lexer$dtTokenResult(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Lexer$dtTokenResult.prototype = Object.create(Object.prototype);

sk$Lexer$dtTokenResult.prototype.__constructor = sk$Lexer$dtTokenResult;

sk$Lexer$dtTokenResult.prototype.__classname = 'Lexer.TokenResult';

sk$Lexer$dtTokenResult.prototype.$frozen = false;

sk$Lexer$dtTokenResult.prototype.__type_switch_id = 172;

sk$Lexer$dtTokenResult.prototype.__copy = function() {
  return new (sk$Lexer$dtTokenResult)(this);
};

sk$Lexer$dtTokenResult.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp49 = __cache.get(this);
  if (_tmp49 === undefined)
    {
      var _tmp49 = this.__copy();
      _tmp49.$frozen = true;
      __cache.set(this, _tmp49);
      _tmp49.startPosition = skip.deepFreeze(_tmp49.startPosition, __cache);
      _tmp49.token = skip.deepFreeze(_tmp49.token, __cache);
    }
  return _tmp49;
};

sk$Lexer$dtTokenResult.prototype.__init = function(__named_parameters) {
  this.startPosition = __named_parameters.startPosition;
  this.token = __named_parameters.token;
};

sk$Lexer$dtTokenResult.prototype.hasError = function() {
  var t$ = this;
  var t$1 = t$.token;
  var t$2 = t$1.errors;
  var t$3 = t$2.isEmpty();
  return t$3.$bg();
};

sk$Lexer$dtTokenResult.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.token;
  return t$1.toString();
};

sk$Lexer$dtTokenResult.prototype.__bases = [
  sk$Lexer$dtTokenResult
];

var sk$Map$dtMapEntry = sk.Map$dtMapEntry = function Map$dtMapEntry(hash, key, value) {
  this.hash = hash;
  this.key = key;
  this.value = value;
};

sk$Map$dtMapEntry.prototype = Object.create(Object.prototype);

sk$Map$dtMapEntry.prototype.__constructor = sk$Map$dtMapEntry;

sk$Map$dtMapEntry.prototype.__classname = 'Map.MapEntry';

sk$Map$dtMapEntry.prototype.$frozen = true;

sk$Map$dtMapEntry.prototype.__type_switch_id = 173;

sk$Map$dtMapEntry.prototype.__copy = function() {
  return new (sk$Map$dtMapEntry)(this.hash, this.key, this.value);
};

sk$Map$dtMapEntry.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp50 = __cache.get(this);
  if (_tmp50 === undefined)
    {
      var _tmp50 = this.__copy();
      _tmp50.$frozen = true;
      __cache.set(this, _tmp50);
      _tmp50.hash = skip.deepFreeze(_tmp50.hash, __cache);
      _tmp50.key = skip.deepFreeze(_tmp50.key, __cache);
      _tmp50.value = skip.deepFreeze(_tmp50.value, __cache);
    }
  return _tmp50;
};

sk$Map$dtMapEntry.prototype.__init = function(__named_parameters) {};

sk$Map$dtMapEntry.create = function(hash, key, value) {
  var t$ = hash;
  var t$1 = key;
  var t$2 = sk$Unsafe$dtRawStorage.make(t$1);
  var t$3 = value;
  var t$4 = sk$Unsafe$dtRawStorage.make(t$3);
  return new (sk$Map$dtMapEntry)(t$, t$2, t$4);
};

sk$Map$dtMapEntry.empty = function() {
  var t$ = sk$Unsafe$dtRawStorage.uninitialized();
  var t$1 = sk$Unsafe$dtRawStorage.uninitialized();
  return new (sk$Map$dtMapEntry)((sk$Map$dtemptyHash()), t$, t$1);
};

sk$Map$dtMapEntry.prototype.expectItem = function() {
  var t$ = this;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      var t$3 = t$2.unsafeKey();
      var t$4 = this;
      var t$5 = t$4.unsafeValue();
      return new (sk$Tuple2)(t$3, t$5);
    }
  else
    return sk$throwKeyNotFound();
};

sk$Map$dtMapEntry.prototype.expectKey = function() {
  var t$ = this;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      return t$2.unsafeKey();
    }
  else
    return sk$throwKeyNotFound();
};

sk$Map$dtMapEntry.prototype.expectValue = function() {
  var t$ = this;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      return t$2.unsafeValue();
    }
  else
    return sk$throwKeyNotFound();
};

sk$Map$dtMapEntry.prototype.inspect = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new (sk$InspectCall)(new sk$String(('MapEntry')), new (sk$Array)([
      new (sk$InspectLiteral)(new sk$String(('<<empty>>')))
    ]));
  else
    {
      var t$1 = this;
      var t$2 = t$1.hash;
      var t$3 = t$2.toStringBinary();
      var t$4 = new (sk$InspectLiteral)(t$3);
      var t$5 = new (sk$Tuple2)(new sk$String(('hash')), t$4);
      var t$6 = this;
      var t$7 = t$6.key;
      var t$8 = sk$inspect(t$7);
      var t$9 = new (sk$Tuple2)(new sk$String(('key')), t$8);
      var t$10 = this;
      var t$11 = t$10.value;
      var t$12 = sk$inspect(t$11);
      var t$13 = new (sk$Tuple2)(new sk$String(('value')), t$12);
      var t$14 = new (sk$Array)([
        t$5,
        t$9,
        t$13
      ]);
      return new (sk$InspectObject)(new sk$String(('MapEntry')), t$14);
    }
};

sk$Map$dtMapEntry.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.hash;
  return t$1.$eq$eq((sk$Map$dtemptyHash()));
};

sk$Map$dtMapEntry.prototype.map = function(f) {
  var t$ = this;
  if (t$.isEmpty().__value)
    return singleton$None;
  else
    {
      var t$1 = f;
      var t$2 = this;
      var t$3 = t$1(t$2);
      return new (sk$Some)(t$3);
    }
};

sk$Map$dtMapEntry.prototype.maybeItem = function() {
  var t$ = this;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      var t$3 = t$2.unsafeKey();
      var t$4 = this;
      var t$5 = t$4.unsafeValue();
      var t$6 = new (sk$Tuple2)(t$3, t$5);
      return new (sk$Some)(t$6);
    }
  else
    return singleton$None;
};

sk$Map$dtMapEntry.prototype.maybeKey = function() {
  var t$ = this;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      var t$3 = t$2.unsafeKey();
      return new (sk$Some)(t$3);
    }
  else
    return singleton$None;
};

sk$Map$dtMapEntry.prototype.maybeValue = function() {
  var t$ = this;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = this;
      var t$3 = t$2.unsafeValue();
      return new (sk$Some)(t$3);
    }
  else
    return singleton$None;
};

sk$Map$dtMapEntry.prototype.unsafeKey = function() {
  var t$ = this;
  var t$1 = t$.key;
  return sk$Unsafe$dtRawStorage.unsafeGet(t$1);
};

sk$Map$dtMapEntry.prototype.unsafeValue = function() {
  var t$ = this;
  var t$1 = t$.value;
  return sk$Unsafe$dtRawStorage.unsafeGet(t$1);
};

sk$Map$dtMapEntry.prototype.__bases = [
  sk$Map$dtMapEntry
];

var sk$Map$dtMapIndex = sk.Map$dtMapIndex = function Map$dtMapIndex(index) {
  this.index = index;
};

sk$Map$dtMapIndex.prototype = Object.create(Object.prototype);

sk$Map$dtMapIndex.prototype.__constructor = sk$Map$dtMapIndex;

sk$Map$dtMapIndex.prototype.__classname = 'Map.MapIndex';

sk$Map$dtMapIndex.prototype.$frozen = true;

sk$Map$dtMapIndex.prototype.__type_switch_id = 174;

sk$Map$dtMapIndex.prototype.__copy = function() {
  return new (sk$Map$dtMapIndex)(this.index);
};

sk$Map$dtMapIndex.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp51 = __cache.get(this);
  if (_tmp51 === undefined)
    {
      var _tmp51 = this.__copy();
      _tmp51.$frozen = true;
      __cache.set(this, _tmp51);
      _tmp51.index = skip.deepFreeze(_tmp51.index, __cache);
    }
  return _tmp51;
};

sk$Map$dtMapIndex.prototype.__init = function(__named_parameters) {};

sk$Map$dtMapIndex.create = function(index) {
  var t$ = index;
  var t$1 = sk$UInt32.create(t$);
  return new (sk$Map$dtMapIndex)(t$1);
};

sk$Map$dtMapIndex.empty = function() {
  return new (sk$Map$dtMapIndex)((sk$Map$dtemptyIndex()));
};

sk$Map$dtMapIndex.prototype.inspect = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new (sk$InspectCall)(new sk$String(('MapIndex')), new (sk$Array)([
      new (sk$InspectLiteral)(new sk$String(('<<empty>>')))
    ]));
  else
    {
      var t$1 = this;
      var t$2 = t$1.index;
      var t$3 = sk$inspect(t$2);
      var t$4 = new (sk$Array)([
        t$3
      ]);
      return new (sk$InspectCall)(new sk$String(('MapIndex')), t$4);
    }
};

sk$Map$dtMapIndex.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.index;
  return t$1.$eq$eq((sk$Map$dtemptyIndex()));
};

sk$Map$dtMapIndex.prototype.__bases = [
  sk$Map$dtMapIndex
];

var sk$Map$dtMapIterator = sk.Map$dtMapIterator = function Map$dtMapIterator(table, sz, used, slots, indexMinusGeneration) {
  this.table = table;
  this.sz = sz;
  this.used = used;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtMapIterator.prototype = Object.create(Object.prototype);

sk$Map$dtMapIterator.prototype.__constructor = sk$Map$dtMapIterator;

sk$Map$dtMapIterator.prototype.__classname = 'Map.MapIterator';

sk$Map$dtMapIterator.prototype.$frozen = undefined;

sk$Map$dtMapIterator.prototype.__type_switch_id = -1;

sk$Map$dtMapIterator.prototype.__copy = function() {
  return new (sk$Map$dtMapIterator)(this.table, this.sz, this.used, this.slots, this.indexMinusGeneration);
};

sk$Map$dtMapIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp52 = __cache.get(this);
  if (_tmp52 === undefined)
    {
      var _tmp52 = this.__copy();
      _tmp52.$frozen = true;
      __cache.set(this, _tmp52);
      _tmp52.table = skip.deepFreeze(_tmp52.table, __cache);
      _tmp52.sz = skip.deepFreeze(_tmp52.sz, __cache);
      _tmp52.used = skip.deepFreeze(_tmp52.used, __cache);
      _tmp52.slots = skip.deepFreeze(_tmp52.slots, __cache);
      _tmp52.indexMinusGeneration = skip.deepFreeze(_tmp52.indexMinusGeneration, __cache);
    }
  return _tmp52;
};

sk$Map$dtMapIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtMapIterator.prototype.next = function() {
  var t$ = this;
  var slots = t$.slots;
  var break_val;
  {
    jumpBlockOuterbreak$bg8895:{
      break$bg8895:{
        do
          {
            jumpBlockOutercontinue$bg8896:{
              continue$bg8896:{
                {
                  var t$1 = this;
                  var t$2 = t$1.indexMinusGeneration;
                  var t$3 = this;
                  var t$4 = t$3.table;
                  var t$5 = t$4.generation_PRIVATE;
                  var index = t$2.$pl(t$5);
                  var t$6 = index;
                  var t$7 = this;
                  var t$8 = t$7.used;
                  var t$9;
                  if (t$6.uge(t$8).__value)
                    {
                      var t$10 = index;
                      var t$11;
                      if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                        t$11 = sk$throwContainerChanged();
                      else
                        t$11 = sk.__.$void;
                      break_val = singleton$None;
                      break break$bg8895;
                    }
                  else
                    {
                      var t$12 = slots;
                      var t$13 = index;
                      var entry = sk$Map$dtunsafeGet(t$12, t$13);
                      var $var = this;
                      var t$14 = $var;
                      var t$15 = this;
                      var t$16 = t$15.indexMinusGeneration;
                      var t$17 = t$14;
                      t$17.indexMinusGeneration = t$16.$pl(new sk$Int(1.0, 0.0));
                      var t$18 = entry;
                      var t$19 = t$18.isEmpty();
                      var t$20;
                      if (t$19.$bg().__value)
                        {
                          var t$21 = this;
                          var t$22 = entry;
                          var t$23 = t$21.extractEntryResult(t$22);
                          break_val = new (sk$Some)(t$23);
                          break break$bg8895;
                        }
                      else
                        t$20 = sk.__.$void;
                      t$9 = t$20;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8896;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8895;
    }
  }
  return break_val;
};

sk$Map$dtMapIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.table;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var size = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = size;
  return new (sk$Some)(t$9);
};

sk$Map$dtMapIterator.prototype.__bases = [
  sk$Map$dtMapIterator
];

var sk$Map$dtUnorderedMapSlot = sk.Map$dtUnorderedMapSlot = function Map$dtUnorderedMapSlot(hash, k, v) {
  this.hash = hash;
  this.k = k;
  this.v = v;
};

sk$Map$dtUnorderedMapSlot.prototype = Object.create(Object.prototype);

sk$Map$dtUnorderedMapSlot.prototype.__constructor = sk$Map$dtUnorderedMapSlot;

sk$Map$dtUnorderedMapSlot.prototype.__classname = 'Map.UnorderedMapSlot';

sk$Map$dtUnorderedMapSlot.prototype.$frozen = true;

sk$Map$dtUnorderedMapSlot.prototype.__type_switch_id = 175;

sk$Map$dtUnorderedMapSlot.prototype.__copy = function() {
  return new (sk$Map$dtUnorderedMapSlot)(this.hash, this.k, this.v);
};

sk$Map$dtUnorderedMapSlot.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp53 = __cache.get(this);
  if (_tmp53 === undefined)
    {
      var _tmp53 = this.__copy();
      _tmp53.$frozen = true;
      __cache.set(this, _tmp53);
      _tmp53.hash = skip.deepFreeze(_tmp53.hash, __cache);
      _tmp53.k = skip.deepFreeze(_tmp53.k, __cache);
      _tmp53.v = skip.deepFreeze(_tmp53.v, __cache);
    }
  return _tmp53;
};

sk$Map$dtUnorderedMapSlot.prototype.__init = function(__named_parameters) {};

sk$Map$dtUnorderedMapSlot.create = function(h, k, v) {
  var t$ = h;
  var t$1 = k;
  var t$2 = sk$Unsafe$dtRawStorage.make(t$1);
  var t$3 = v;
  var t$4 = sk$Unsafe$dtRawStorage.make(t$3);
  return new (sk$Map$dtUnorderedMapSlot)(t$, t$2, t$4);
};

sk$Map$dtUnorderedMapSlot.empty = function(h) {
  var t$ = h;
  var t$1 = sk$Unsafe$dtRawStorage.uninitialized();
  var t$2 = sk$Unsafe$dtRawStorage.uninitialized();
  return new (sk$Map$dtUnorderedMapSlot)(t$, t$1, t$2);
};

sk$Map$dtUnorderedMapSlot.emptyForIndex = function(index, shift) {
  var t$ = this;
  var t$1 = index;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var t$3 = shift;
  var t$4 = t$2.shl(t$3);
  var t$5 = t$4.$mi(new sk$Int(1.0, 0.0));
  return t$.empty(t$5);
};

sk$Map$dtUnorderedMapSlot.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.hash;
  var t$2 = t$1.and(new sk$Int(1.0, 0.0));
  return t$2.$bg$eq(new sk$Int(0.0, 0.0));
};

sk$Map$dtUnorderedMapSlot.prototype.key = function() {
  var t$ = this;
  var t$1 = t$.k;
  return sk$Unsafe$dtRawStorage.unsafeGet(t$1);
};

sk$Map$dtUnorderedMapSlot.prototype.value = function() {
  var t$ = this;
  var t$1 = t$.v;
  return sk$Unsafe$dtRawStorage.unsafeGet(t$1);
};

sk$Map$dtUnorderedMapSlot.prototype.__bases = [
  sk$Map$dtUnorderedMapSlot
];

var sk$MetaClass = sk.MetaClass = function MetaClass() {};

sk$MetaClass.prototype = Object.create(Object.prototype);

sk$MetaClass.prototype.__constructor = sk$MetaClass;

sk$MetaClass.prototype.__classname = 'MetaClass';

sk$MetaClass.prototype.$frozen = undefined;

sk$MetaClass.prototype.__type_switch_id = -1;

sk$MetaClass.prototype.__copy = function() {};

sk$MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp54 = __cache.get(this);
  if (_tmp54 === undefined)
    {
      var _tmp54 = this.__copy();
      _tmp54.$frozen = true;
      __cache.set(this, _tmp54);
    }
  return _tmp54;
};

sk$MetaClass.prototype.__init = function(__named_parameters) {};

sk$MetaClass.prototype.__bases = [
  sk$MetaClass
];

var sk$Nullable = sk.Nullable = function Nullable() {};

sk$Nullable.prototype = Object.create(Object.prototype);

sk$Nullable.prototype.__constructor = sk$Nullable;

sk$Nullable.prototype.__classname = 'Nullable';

sk$Nullable.prototype.$frozen = undefined;

sk$Nullable.prototype.__type_switch_id = -1;

sk$Nullable.prototype.__copy = function() {};

sk$Nullable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp55 = __cache.get(this);
  if (_tmp55 === undefined)
    {
      var _tmp55 = this.__copy();
      _tmp55.$frozen = true;
      __cache.set(this, _tmp55);
    }
  return _tmp55;
};

sk$Nullable.prototype.__init = function(__named_parameters) {};

sk$Nullable.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Nullable.prototype.__bases = [
  sk$Nullable
];

var sk$Option = sk.Option = function Option() {};

sk$Option.prototype = Object.create(Object.prototype);

sk$Option.prototype.__constructor = sk$Option;

sk$Option.prototype.__classname = 'Option';

sk$Option.prototype.$frozen = undefined;

sk$Option.prototype.__type_switch_id = -1;

sk$Option.prototype.__copy = function() {};

sk$Option.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp56 = __cache.get(this);
  if (_tmp56 === undefined)
    {
      var _tmp56 = this.__copy();
      _tmp56.$frozen = true;
      __cache.set(this, _tmp56);
    }
  return _tmp56;
};

sk$Option.prototype.__init = function(__named_parameters) {};

sk$Option.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Option.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Option.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Option.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Option.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Option.generator = function(generator) {
  var t$ = generator;
  return new (sk$QuickCheck$dtOptionGenerator)(t$);
};

sk$Option.meta = function(itemClass) {
  var t$ = itemClass;
  return new (sk$OptionMetaClass)(t$);
};

sk$Option.prototype.__bases = [
  sk$Option
];

var sk$Order = sk.Order = function Order() {};

sk$Order.prototype = Object.create(Object.prototype);

sk$Order.prototype.__constructor = sk$Order;

sk$Order.prototype.__classname = 'Order';

sk$Order.prototype.$frozen = undefined;

sk$Order.prototype.__type_switch_id = -1;

sk$Order.prototype.__copy = function() {};

sk$Order.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp57 = __cache.get(this);
  if (_tmp57 === undefined)
    {
      var _tmp57 = this.__copy();
      _tmp57.$frozen = true;
      __cache.set(this, _tmp57);
    }
  return _tmp57;
};

sk$Order.prototype.__init = function(__named_parameters) {};

sk$Order.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Order.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Order.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Order.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Order.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Order.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.typeOrder();
  var t$2 = other;
  var t$3 = t$2.typeOrder();
  return sk$compare(t$1, t$3);
};

sk$Order.generator = function() {
  return singleton$QuickCheck$dtOrderGenerator;
};

sk$Order.prototype.perturb = function(rng) {
  var t$ = rng;
  var t$1;
  {
    jumpBlockOuterjumpLab$bg10040:{
      jumpLab$bg10040:{
        jumpLab$bg10039:{
          jumpLab$bg10038:{
            switch (this.__type_switch_id) {
              case 208:
                break jumpLab$bg10038;
              
              case 206:
                break jumpLab$bg10039;
              
              case 207:
                break jumpLab$bg10040;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          t$1 = new sk$Int(0.0, 0.0);
          break jumpBlockOuterjumpLab$bg10040;
        }
        t$1 = new sk$Int(1.0, 0.0);
        break jumpBlockOuterjumpLab$bg10040;
      }
      t$1 = new sk$Int(2.0, 0.0);
      break jumpBlockOuterjumpLab$bg10040;
    }
  }
  var t$2 = t$1;
  return t$.perturb(t$2);
};

sk$Order.prototype.__bases = [
  sk$Order
];

var sk$Orderable$dtLambdaOrderable = sk.Orderable$dtLambdaOrderable = function Orderable$dtLambdaOrderable(value, compareFn) {
  this.value = value;
  this.compareFn = compareFn;
};

sk$Orderable$dtLambdaOrderable.prototype = Object.create(Object.prototype);

sk$Orderable$dtLambdaOrderable.prototype.__constructor = sk$Orderable$dtLambdaOrderable;

sk$Orderable$dtLambdaOrderable.prototype.__classname = 'Orderable.LambdaOrderable';

sk$Orderable$dtLambdaOrderable.prototype.$frozen = true;

sk$Orderable$dtLambdaOrderable.prototype.__type_switch_id = 209;

sk$Orderable$dtLambdaOrderable.prototype.__copy = function() {
  return new (sk$Orderable$dtLambdaOrderable)(this.value, this.compareFn);
};

sk$Orderable$dtLambdaOrderable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp58 = __cache.get(this);
  if (_tmp58 === undefined)
    {
      var _tmp58 = this.__copy();
      _tmp58.$frozen = true;
      __cache.set(this, _tmp58);
      _tmp58.value = skip.deepFreeze(_tmp58.value, __cache);
      _tmp58.compareFn = skip.deepFreeze(_tmp58.compareFn, __cache);
    }
  return _tmp58;
};

sk$Orderable$dtLambdaOrderable.prototype.__init = function(__named_parameters) {};

sk$Orderable$dtLambdaOrderable.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Orderable$dtLambdaOrderable.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Orderable$dtLambdaOrderable.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Orderable$dtLambdaOrderable.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var $var = t$.compare(t$1);
  {
    jumpBlockOuterjumpLab$bg10078:{
      jumpLab$bg10078:{
        jumpLab$bg10077:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg10077;
            
            default:
              break jumpLab$bg10078;

          }
        }
        return new sk$Bool((true));
      }
      return new sk$Bool((false));
    }
  }
};

sk$Orderable$dtLambdaOrderable.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Orderable$dtLambdaOrderable.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Orderable$dtLambdaOrderable.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.compareFn;
  var t$2 = this;
  var t$3 = t$2.value;
  var t$4 = other;
  var t$5 = t$4.value;
  return t$1(t$3, t$5);
};

sk$Orderable$dtLambdaOrderable.prototype.getClassName = function() {
  return new sk$String(('Orderable.LambdaOrderable'));
};

sk$Orderable$dtLambdaOrderable.prototype.__bases = [
  sk$Orderable$dtLambdaOrderable
];

var sk$ParseTree$dtCodeMod = sk.ParseTree$dtCodeMod = function ParseTree$dtCodeMod() {};

sk$ParseTree$dtCodeMod.prototype = Object.create(Object.prototype);

sk$ParseTree$dtCodeMod.prototype.__constructor = sk$ParseTree$dtCodeMod;

sk$ParseTree$dtCodeMod.prototype.__classname = 'ParseTree.CodeMod';

sk$ParseTree$dtCodeMod.prototype.$frozen = undefined;

sk$ParseTree$dtCodeMod.prototype.__type_switch_id = -1;

sk$ParseTree$dtCodeMod.prototype.__copy = function() {};

sk$ParseTree$dtCodeMod.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp59 = __cache.get(this);
  if (_tmp59 === undefined)
    {
      var _tmp59 = this.__copy();
      _tmp59.$frozen = true;
      __cache.set(this, _tmp59);
    }
  return _tmp59;
};

sk$ParseTree$dtCodeMod.prototype.__init = function(__named_parameters) {};

sk$ParseTree$dtCodeMod.prototype.transform = function(tree) {
  var t$ = this;
  var t$1 = tree;
  var $var = t$.transformChildren(t$1);
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg10154:{
      jumpLab$bg10154:{
        switch ($var.__type_switch_id) {
          case 392:
            var1 = $var.i0;
            var2 = $var.i1;
            break jumpLab$bg10154;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var childSubstitions = var2;
        var afterChildren = var1;
        var t$2 = this;
        var t$3 = afterChildren;
        var var3 = t$2.transformTree(t$3);
        var transformedTree;
        {
          jumpBlockOuterjumpLab$bg10151:{
            jumpLab$bg10151:{
              jumpLab$bg10150:{
                switch (var3.__type_switch_id) {
                  case 204:
                    break jumpLab$bg10150;
                  
                  case 205:
                    transformedTree = var3.value;
                    break jumpLab$bg10151;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$4 = afterChildren;
                var t$5 = childSubstitions;
                return new (sk$Tuple2)(t$4, t$5);
              }
            }
            {
              var t$6 = afterChildren;
              var t$7 = t$6.getTokens();
              var t$8 = t$7.map(((token) => 
              {
                var t$9 = token;
                var t$10 = t$9.comments();
                return t$10.collect(sk$Vector);
              }));
              var t$11 = t$8.flatten();
              var missingComments = sk$Set.mcreateFromItems(t$11);
              var t$12 = transformedTree;
              var t$13 = t$12.getTokens();
              var t$14 = t$13.map(((token1) => 
              {
                var t$15 = token1;
                var t$16 = t$15.comments();
                return t$16.collect(sk$Vector);
              }));
              var t$17 = t$14.flatten();
              var addedComments = sk$Set.mcreateFromItems(t$17);
              var t$18 = missingComments;
              var t$19 = addedComments;
              t$18.subtract(t$19);
              var t$20 = missingComments;
              var t$21 = t$20.isEmpty();
              if (t$21.$bg().__value)
                {
                  var t$22 = transformedTree;
                  var var4 = t$22.getFirstToken();
                  var firstToken;
                  {
                    jumpBlockOuterjumpLab$bg10147:{
                      jumpLab$bg10147:{
                        jumpLab$bg10146:{
                          switch (var4.__type_switch_id) {
                            case 204:
                              break jumpLab$bg10146;
                            
                            case 205:
                              firstToken = var4.value;
                              break jumpLab$bg10147;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {}
                        break jumpBlockOuterjumpLab$bg10147;
                      }
                      {
                        var t$23 = firstToken;
                        var t$24 = missingComments;
                        var t$25 = t$24.collect(sk$Vector);
                        var t$26 = t$25.sortedBy(((comment) => 
                        {
                          var t$27 = comment;
                          return t$27.range;
                        }), undefined);
                        var t$28 = firstToken;
                        var t$29 = t$28.leadingComments;
                        var t$30 = t$26.concat(t$29);
                        var t$31 = t$30.collect(sk$Array);
                        var newFirstToken = ((() => 
                        {
                          var _tmp60 = t$23.__copy();
                          _tmp60.leadingComments = t$31;
                          return _tmp60;
                        })());
                        var t$32 = firstToken;
                        var t$33 = newFirstToken;
                        var t$34 = transformedTree;
                        var t$35 = sk$ParseTree$dtReplaceTokenCodeMod.doIt(t$32, t$33, t$34);
                        transformedTree = t$35.i0;
                      }
                      break jumpBlockOuterjumpLab$bg10147;
                    }
                  }
                }
              else
                {}
              var t$36 = transformedTree;
              var t$37 = tree;
              var t$38 = t$37.getRangeWithComments();
              var t$39 = transformedTree;
              var t$40 = new (sk$Tuple2)(t$38, t$39);
              var t$41 = new (sk$Array)([
                t$40
              ]);
              var t$42 = sk$Vector.createFromItems(t$41);
              return new (sk$Tuple2)(t$36, t$42);
            }
          }
        }
      }
    }
  }
};

sk$ParseTree$dtCodeMod.prototype.transformChildren = function(tree) {
  var t$ = tree;
  var t$1 = this;
  return t$.transform(t$1);
};

sk$ParseTree$dtCodeMod.prototype.__bases = [
  sk$ParseTree$dtCodeMod
];

var sk$ParseTree$dtParseTree = sk.ParseTree$dtParseTree = function ParseTree$dtParseTree(__named_parameters) {
  this.__init(__named_parameters);
};

sk$ParseTree$dtParseTree.prototype = Object.create(Object.prototype);

sk$ParseTree$dtParseTree.prototype.__constructor = sk$ParseTree$dtParseTree;

sk$ParseTree$dtParseTree.prototype.__classname = 'ParseTree.ParseTree';

sk$ParseTree$dtParseTree.prototype.$frozen = undefined;

sk$ParseTree$dtParseTree.prototype.__type_switch_id = -1;

sk$ParseTree$dtParseTree.prototype.__copy = function() {
  return new (sk$ParseTree$dtParseTree)(this);
};

sk$ParseTree$dtParseTree.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp61 = __cache.get(this);
  if (_tmp61 === undefined)
    {
      var _tmp61 = this.__copy();
      _tmp61.$frozen = true;
      __cache.set(this, _tmp61);
      _tmp61.range = skip.deepFreeze(_tmp61.range, __cache);
    }
  return _tmp61;
};

sk$ParseTree$dtParseTree.prototype.__init = function(__named_parameters) {
  this.range = __named_parameters.range;
};

sk$ParseTree$dtParseTree.prototype.asEmpty = function() {
  var t$ = this;
  var t$1 = t$.getKind();
  var t$2 = new sk$String(('Expected EmptyTree; found ')).$pl(t$1);
  return sk$invariant_violation(t$2);
};

sk$ParseTree$dtParseTree.prototype.asError = function() {
  var t$ = this;
  var t$1 = t$.getKind();
  var t$2 = new sk$String(('Expected ErrorTree; found ')).$pl(t$1);
  return sk$invariant_violation(t$2);
};

sk$ParseTree$dtParseTree.prototype.asList = function() {
  var t$ = this;
  var t$1 = t$.getKind();
  var t$2 = new sk$String(('Expected ParseTreeList; found ')).$pl(t$1);
  return sk$invariant_violation(t$2);
};

sk$ParseTree$dtParseTree.prototype.asToken = function() {
  var t$ = this;
  var t$1 = t$.getKind();
  var t$2 = new sk$String(('Expected TokenTree; found ')).$pl(t$1);
  return sk$invariant_violation(t$2);
};

sk$ParseTree$dtParseTree.prototype.getFirstToken = function() {
  var t$ = this;
  var t$1 = t$.getChildren();
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg10211:{
      break$bg10211:{
        dowhile_else$bg10210:{
          do
            {
              jumpBlockOuterdowhile_cond$bg10212:{
                dowhile_cond$bg10212:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var child;
                    {
                      jumpBlockOuterjumpLab$bg10227:{
                        jumpLab$bg10227:{
                          jumpLab$bg10226:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg10226;
                              
                              case 205:
                                child = var2.value;
                                break jumpLab$bg10227;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg10212;
                          }
                        }
                        {
                          var token;
                          var tree;
                          {
                            jumpBlockOuterjumpLab$bg10223:{
                              jumpLab$bg10223:{
                                jumpLab$bg10222:{
                                  switch (child.__type_switch_id) {
                                    case 215:
                                      token = child.token;
                                      break jumpLab$bg10222;
                                    
                                    default:
                                      tree = child;
                                      break jumpLab$bg10223;

                                  }
                                }
                                {
                                  var t$3 = token;
                                  break_val = new (sk$Some)(t$3);
                                  break break$bg10211;
                                }
                              }
                              {
                                var t$4 = tree;
                                var var3 = t$4.getFirstToken();
                                var _;
                                var token1;
                                var _1;
                                {
                                  jumpBlockOuterjumpLab$bg10220:{
                                    jumpLab$bg10220:{
                                      jumpLab$bg10219:{
                                        switch (var3.__type_switch_id) {
                                          case 205:
                                            token1 = var3;
                                            _1 = var3.value;
                                            break jumpLab$bg10219;
                                          
                                          default:
                                            _ = var3;
                                            break jumpLab$bg10220;

                                        }
                                      }
                                      {
                                        break_val = token1;
                                        break break$bg10211;
                                      }
                                    }
                                    {}
                                    break jumpBlockOuterjumpLab$bg10220;
                                  }
                                }
                              }
                              break jumpBlockOuterjumpLab$bg10223;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg10227;
                      }
                    }
                    break dowhile_cond$bg10212;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg10210;
                break jumpBlockOuterdowhile_cond$bg10212;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg10211;
      }
      {}
      break jumpBlockOuterbreak$bg10211;
    }
  }
  return break_val;
};

sk$ParseTree$dtParseTree.prototype.getLastToken = function() {
  var t$ = this;
  var t$1 = t$.getChildren();
  var reversed = sk$Vector.reverseFromIterator(t$1);
  var t$2 = reversed;
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg10234:{
      break$bg10234:{
        dowhile_else$bg10233:{
          do
            {
              jumpBlockOuterdowhile_cond$bg10235:{
                dowhile_cond$bg10235:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var child;
                    {
                      jumpBlockOuterjumpLab$bg10250:{
                        jumpLab$bg10250:{
                          jumpLab$bg10249:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg10249;
                              
                              case 205:
                                child = var2.value;
                                break jumpLab$bg10250;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg10235;
                          }
                        }
                        {
                          var tree;
                          var token;
                          {
                            jumpBlockOuterjumpLab$bg10246:{
                              jumpLab$bg10246:{
                                jumpLab$bg10245:{
                                  switch (child.__type_switch_id) {
                                    case 215:
                                      token = child.token;
                                      break jumpLab$bg10245;
                                    
                                    default:
                                      tree = child;
                                      break jumpLab$bg10246;

                                  }
                                }
                                {
                                  var t$4 = token;
                                  break_val = new (sk$Some)(t$4);
                                  break break$bg10234;
                                }
                              }
                              {
                                var t$5 = tree;
                                var var3 = t$5.getLastToken();
                                var _;
                                var _1;
                                var token1;
                                {
                                  jumpBlockOuterjumpLab$bg10243:{
                                    jumpLab$bg10243:{
                                      jumpLab$bg10242:{
                                        switch (var3.__type_switch_id) {
                                          case 205:
                                            token1 = var3;
                                            _1 = var3.value;
                                            break jumpLab$bg10242;
                                          
                                          default:
                                            _ = var3;
                                            break jumpLab$bg10243;

                                        }
                                      }
                                      {
                                        break_val = token1;
                                        break break$bg10234;
                                      }
                                    }
                                    {}
                                    break jumpBlockOuterjumpLab$bg10243;
                                  }
                                }
                              }
                              break jumpBlockOuterjumpLab$bg10246;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg10250;
                      }
                    }
                    break dowhile_cond$bg10235;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg10233;
                break jumpBlockOuterdowhile_cond$bg10235;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg10234;
      }
      {}
      break jumpBlockOuterbreak$bg10234;
    }
  }
  return break_val;
};

sk$ParseTree$dtParseTree.prototype.getList = function() {
  var t$ = this;
  var t$1 = t$.asList();
  return t$1.elements;
};

sk$ParseTree$dtParseTree.prototype.getOptList = function() {
  jumpBlockOuterjumpLab$bg10259:{
    jumpLab$bg10259:{
      jumpLab$bg10258:{
        switch (this.__type_switch_id) {
          case 211:
            break jumpLab$bg10258;
          
          default:
            break jumpLab$bg10259;

        }
      }
      return new (sk$Array)([]);
    }
    {
      var t$ = this;
      var t$1 = t$.asList();
      return t$1.elements;
    }
  }
};

sk$ParseTree$dtParseTree.prototype.getRangeWithComments = function() {
  var t$ = this;
  var result = t$.range;
  var t$1 = this;
  var $var = t$1.getFirstToken();
  var token;
  {
    jumpBlockOuterjumpLab$bg10288:{
      jumpLab$bg10288:{
        jumpLab$bg10287:{
          switch ($var.__type_switch_id) {
            case 205:
              token = $var.value;
              var var1 = new sk$Bool((false));
              var t$2 = token;
              var t$3 = t$2.leadingComments;
              var t$4 = t$3.size();
              var1 = t$4.$gt(new sk$Int(0.0, 0.0));
              if (var1.__value)
                break jumpLab$bg10287;
              else
                break jumpLab$bg10288;
            
            default:
              break jumpLab$bg10288;

          }
        }
        {
          var t$5 = result;
          var t$6 = token;
          var t$7 = t$6.leadingComments;
          var t$8 = t$7.get(new sk$Int(0.0, 0.0));
          var t$9 = t$8.range;
          var t$10 = t$9.start;
          result = ((() => 
          {
            var _tmp62 = t$5.__copy();
            _tmp62.start = t$10;
            return _tmp62;
          })());
        }
        break jumpBlockOuterjumpLab$bg10288;
      }
      {}
      break jumpBlockOuterjumpLab$bg10288;
    }
  }
  var t$11 = this;
  var var2 = t$11.getLastToken();
  var token1;
  {
    jumpBlockOuterjumpLab$bg10296:{
      jumpLab$bg10296:{
        jumpLab$bg10295:{
          switch (var2.__type_switch_id) {
            case 205:
              token1 = var2.value;
              var var3 = new sk$Bool((false));
              var t$12 = token1;
              var t$13 = t$12.trailingComments;
              var t$14 = t$13.size();
              var3 = t$14.$gt(new sk$Int(0.0, 0.0));
              if (var3.__value)
                break jumpLab$bg10295;
              else
                break jumpLab$bg10296;
            
            default:
              break jumpLab$bg10296;

          }
        }
        {
          var t$15 = result;
          var t$16 = token1;
          var t$17 = t$16.trailingComments;
          var t$18 = t$17.maybeLast();
          var t$19 = t$18.fromSome(undefined);
          var t$20 = t$19.range;
          var t$21 = t$20.end;
          return ((() => 
          {
            var _tmp63 = t$15.__copy();
            _tmp63.end = t$21;
            return _tmp63;
          })());
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg10296;
    }
  }
  return result;
};

sk$ParseTree$dtParseTree.prototype.getToken = function() {
  var t$ = this;
  var t$1 = t$.asToken();
  return t$1.token;
};

sk$ParseTree$dtParseTree.prototype.getTokenKind = function() {
  var t$ = this;
  var t$1 = t$.getToken();
  return t$1.kind;
};

sk$ParseTree$dtParseTree.prototype.getTokenString = function() {
  var t$ = this;
  var t$1 = t$.getToken();
  return t$1.value;
};

sk$ParseTree$dtParseTree.prototype.getTokens = function() {
  var accumulator = new (sk$ParseTree$dtTokenAccumulator)({
    tokens: undefined
  });
  var t$ = accumulator;
  var t$1 = this;
  t$.visit(t$1);
  var t$2 = accumulator;
  return skip.deepFreeze(t$2.tokens, new Map());
};

sk$ParseTree$dtParseTree.prototype.isEmpty = function() {
  return new sk$Bool((false));
};

sk$ParseTree$dtParseTree.prototype.isEmptyList = function() {
  var t$ = this;
  if (t$.isList().__value)
    {
      var t$1 = this;
      var t$2 = t$1.getList();
      return t$2.isEmpty();
    }
  else
    return new sk$Bool((false));
};

sk$ParseTree$dtParseTree.prototype.isError = function() {
  return new sk$Bool((false));
};

sk$ParseTree$dtParseTree.prototype.isList = function() {
  return new sk$Bool((false));
};

sk$ParseTree$dtParseTree.prototype.isToken = function() {
  return new sk$Bool((false));
};

sk$ParseTree$dtParseTree.prototype.matchTreeKind = function(kind) {
  var t$ = this;
  if (t$.isToken().__value)
    {
      var t$1 = this;
      var t$2 = t$1.getTokenKind();
      var t$3 = kind;
      return t$2.$eq$eq(t$3);
    }
  else
    return new sk$Bool((false));
};

sk$ParseTree$dtParseTree.prototype.print = function(indent, name) {
  var t$ = indent;
  var t$1 = $makeChar(32).repeat(t$);
  var t$2 = name;
  var t$3 = t$1.$pl(t$2);
  var t$4 = t$3.$pl(new sk$String((':')));
  var t$5 = this;
  var t$6 = t$5.getKind();
  var t$7 = t$4.$pl(t$6);
  var t$8 = t$7.$pl(new sk$String((' ')));
  var t$9 = this;
  var t$10 = t$9.range;
  var t$11 = t$8.$pl(t$10);
  var t$12;
  var separators;
  var endDelimiter;
  var elements;
  var token;
  var startDelimiter;
  {
    jumpBlockOuterjumpLab$bg10388:{
      jumpLab$bg10388:{
        jumpLab$bg10387:{
          jumpLab$bg10386:{
            switch (this.__type_switch_id) {
              case 214:
                elements = this.elements;
                endDelimiter = this.endDelimiter;
                separators = this.separators;
                startDelimiter = this.startDelimiter;
                break jumpLab$bg10386;
              
              case 215:
                token = this.token;
                break jumpLab$bg10387;
              
              default:
                break jumpLab$bg10388;

            }
          }
          {
            var t$13 = startDelimiter;
            var t$14 = indent;
            var t$15 = t$14.$pl(new sk$Int(1.0, 0.0));
            var t$16 = t$13.print(t$15, new sk$String(('startDelimiter')));
            var t$17 = new sk$String(('\n')).$pl(t$16);
            var t$18 = elements;
            var t$19 = t$18.mapWithIndex(((index, element) => 
            {
              var t$20 = element;
              var t$21 = indent;
              var t$22 = t$21.$pl(new sk$Int(2.0, 0.0));
              var t$23 = index;
              var t$24 = t$23.toString();
              return t$20.print(t$22, t$24);
            }));
            var t$25 = t$19.join(new sk$String(('')));
            var t$26 = t$17.$pl(t$25);
            var t$27 = separators;
            var t$28 = t$27.mapWithIndex(((index1, element1) => 
            {
              var t$29 = element1;
              var t$30 = indent;
              var t$31 = t$30.$pl(new sk$Int(2.0, 0.0));
              var t$32 = index1;
              var t$33 = t$32.toString();
              return t$29.print(t$31, t$33);
            }));
            var t$34 = t$28.join(new sk$String(('')));
            var t$35 = t$26.$pl(t$34);
            var t$36 = endDelimiter;
            var t$37 = indent;
            var t$38 = t$37.$pl(new sk$Int(1.0, 0.0));
            var t$39 = t$36.print(t$38, new sk$String(('endDelimiter')));
            t$12 = t$35.$pl(t$39);
          }
          break jumpBlockOuterjumpLab$bg10388;
        }
        {
          var t$40 = token;
          var t$41 = t$40.value;
          var t$42 = new sk$String((':')).$pl(t$41);
          t$12 = t$42.$pl(new sk$String(('\n')));
        }
        break jumpBlockOuterjumpLab$bg10388;
      }
      {
        var t$43 = this;
        var childs = t$43.getNamedFields();
        var t$44 = childs;
        var t$45 = t$44.size();
        var t$46;
        if (t$45.$eq$eq(new sk$Int(0.0, 0.0)).__value)
          t$46 = new sk$String(('\n'));
        else
          {
            var t$47 = this;
            var t$48 = t$47.getNamedFields();
            var t$49 = t$48.map(((child) => 
            {
              var $var;
              var var1;
              {
                jumpBlockOuterjumpLab$bg10384:{
                  jumpLab$bg10384:{
                    switch (child.__type_switch_id) {
                      case 392:
                        var1 = child.i0;
                        $var = child.i1;
                        break jumpLab$bg10384;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var childTree = $var;
                    var childName = var1;
                    var t$50 = childTree;
                    var t$51 = indent;
                    var t$52 = t$51.$pl(new sk$Int(2.0, 0.0));
                    var t$53 = childName;
                    return t$50.print(t$52, t$53);
                  }
                }
              }
            }));
            var t$54 = t$49.join(new sk$String(('')));
            t$46 = new sk$String(('\n')).$pl(t$54);
          }
        t$12 = t$46;
      }
      break jumpBlockOuterjumpLab$bg10388;
    }
  }
  var t$55 = t$12;
  return t$11.$pl(t$55);
};

sk$ParseTree$dtParseTree.prototype.toDebugString = function() {
  var t$ = this;
  var t$1 = t$.getKind();
  var t$2 = t$1.toString();
  var t$3 = new sk$String((' ')).toString();
  var t$4 = this;
  var t$5;
  if (t$4.isToken().__value)
    {
      var t$6 = this;
      var t$7 = t$6.getTokenKind();
      t$5 = t$7.toString();
    }
  else
    t$5 = new sk$String((''));
  var t$8 = t$5;
  var t$9 = t$8.toString();
  var t$10 = new sk$String((' ')).toString();
  var t$11 = this;
  var t$12 = t$11.range;
  var t$13 = t$12.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$3,
    t$9,
    t$10,
    t$13
  ]));
};

sk$ParseTree$dtParseTree.prototype.__bases = [
  sk$ParseTree$dtParseTree
];

var sk$ParseTree$dtParseTreeVisitor = sk.ParseTree$dtParseTreeVisitor = function ParseTree$dtParseTreeVisitor() {};

sk$ParseTree$dtParseTreeVisitor.prototype = Object.create(Object.prototype);

sk$ParseTree$dtParseTreeVisitor.prototype.__constructor = sk$ParseTree$dtParseTreeVisitor;

sk$ParseTree$dtParseTreeVisitor.prototype.__classname = 'ParseTree.ParseTreeVisitor';

sk$ParseTree$dtParseTreeVisitor.prototype.$frozen = undefined;

sk$ParseTree$dtParseTreeVisitor.prototype.__type_switch_id = -1;

sk$ParseTree$dtParseTreeVisitor.prototype.__copy = function() {};

sk$ParseTree$dtParseTreeVisitor.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp64 = __cache.get(this);
  if (_tmp64 === undefined)
    {
      var _tmp64 = this.__copy();
      _tmp64.$frozen = true;
      __cache.set(this, _tmp64);
    }
  return _tmp64;
};

sk$ParseTree$dtParseTreeVisitor.prototype.__init = function(__named_parameters) {};

sk$ParseTree$dtParseTreeVisitor.prototype.visitChildren = function(tree) {
  var t$ = tree;
  var t$1 = t$.getChildren();
  var t$2 = this;
  var t$3 = t$2;
  return t$1.each(((_tmp10568) => 
  {
    return t$3.visit(_tmp10568);
  }));
};

sk$ParseTree$dtParseTreeVisitor.prototype.__bases = [
  sk$ParseTree$dtParseTreeVisitor
];

var sk$Parser$dtParsePosition = sk.Parser$dtParsePosition = function Parser$dtParsePosition(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Parser$dtParsePosition.prototype = Object.create(Object.prototype);

sk$Parser$dtParsePosition.prototype.__constructor = sk$Parser$dtParsePosition;

sk$Parser$dtParsePosition.prototype.__classname = 'Parser.ParsePosition';

sk$Parser$dtParsePosition.prototype.$frozen = false;

sk$Parser$dtParsePosition.prototype.__type_switch_id = 217;

sk$Parser$dtParsePosition.prototype.__copy = function() {
  return new (sk$Parser$dtParsePosition)(this);
};

sk$Parser$dtParsePosition.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp65 = __cache.get(this);
  if (_tmp65 === undefined)
    {
      var _tmp65 = this.__copy();
      _tmp65.$frozen = true;
      __cache.set(this, _tmp65);
      _tmp65.index = skip.deepFreeze(_tmp65.index, __cache);
      _tmp65.tokens = skip.deepFreeze(_tmp65.tokens, __cache);
      _tmp65.lexer = skip.deepFreeze(_tmp65.lexer, __cache);
      _tmp65.position = skip.deepFreeze(_tmp65.position, __cache);
    }
  return _tmp65;
};

sk$Parser$dtParsePosition.prototype.__init = function(__named_parameters) {
  this.index = __named_parameters.index;
  this.tokens = __named_parameters.tokens;
  this.lexer = __named_parameters.lexer;
  this.position = __named_parameters.position;
};

sk$Parser$dtParsePosition.prototype.advance = function(includeTrailingTrivia) {
  if (includeTrailingTrivia === undefined)
    includeTrailingTrivia = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var t$1 = t$.index;
  var t$2 = this;
  var t$3 = t$2.tokens;
  var t$4 = t$3.size();
  if (t$1.$gt(t$4).__value)
    {
      var t$5 = new sk$String(('Attempt to advance past the last token at: ')).toString();
      var t$6 = this;
      var t$7 = t$6.position;
      var t$8 = t$7.position;
      var t$9 = t$8.toString();
      var t$10 = new sk$String(('')).join(new (sk$Array)([
        t$5,
        t$9
      ]));
      sk$invariant_violation(t$10);
    }
  else
    {}
  var t$11 = this;
  var token = t$11.peekToken();
  var t$12 = includeTrailingTrivia;
  var t$13;
  if (t$12.$bg().__value)
    {
      var t$14 = token;
      var t$15 = t$14.trailingComments;
      var t$16 = t$15.isEmpty();
      t$13 = t$16.$bg();
    }
  else
    t$13 = new sk$Bool((false));
  if (t$13.__value)
    {
      var t$17 = this;
      var t$18 = this;
      var t$19 = t$18.lexer;
      t$17.setLexer(t$19);
      var t$20 = this;
      var t$21 = this;
      var t$22 = t$21.index;
      token = t$20.getToken(t$22, new sk$Bool((false)));
    }
  else
    {}
  var $var = this;
  var t$23 = $var;
  var t$24 = this;
  var t$25 = t$24.index;
  var t$26 = t$23;
  t$26.index = t$25.$pl(new sk$Int(1.0, 0.0));
  var var1 = this;
  var t$27 = var1;
  var t$28 = this;
  var t$29 = t$28.index;
  var t$30 = this;
  var t$31 = t$30.tokens;
  var t$32 = t$31.size();
  var t$33;
  if (t$29.$eq$eq(t$32).__value)
    {
      var t$34 = this;
      var t$35 = t$34.lexer;
      t$33 = t$35.mark();
    }
  else
    {
      var t$36 = this;
      var t$37 = t$36.tokens;
      var t$38 = this;
      var t$39 = t$38.index;
      var t$40 = t$37.get(t$39);
      t$33 = t$40.startPosition;
    }
  var t$41 = t$27;
  t$41.position = t$33;
  return token;
};

sk$Parser$dtParsePosition.prototype.atEnd = function() {
  var t$ = this;
  return t$.peekKind(singleton$TokenKind$dtEND_OF_FILE);
};

sk$Parser$dtParsePosition.prototype.clone = function() {
  var t$ = this;
  var t$1 = t$.index;
  var t$2 = this;
  var t$3 = t$2.tokens;
  var t$4 = this;
  var t$5 = t$4.lexer;
  var t$6 = this;
  var t$7 = t$6.position;
  var t$8 = t$7.clone();
  return new (sk$Parser$dtParsePosition)({
    index: t$1,
    lexer: t$5,
    position: t$8,
    tokens: t$3
  });
};

sk$Parser$dtParsePosition.create = function(lexer) {
  var t$ = lexer;
  var startPosition = t$.mark();
  var t$1 = lexer;
  var t$2 = t$1.createStartResult();
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var t$4 = sk$Vector.mcreateFromItems(t$3);
  var t$5 = lexer;
  var t$6 = startPosition;
  return new (sk$Parser$dtParsePosition)({
    index: new sk$Int(0.0, 0.0),
    lexer: t$5,
    position: t$6,
    tokens: t$4
  });
};

sk$Parser$dtParsePosition.prototype.createEmptyTreeAfter = function() {
  var t$ = this;
  var t$1 = t$.createRangeAfter();
  return new (sk$ParseTree$dtEmptyTree)({
    range: t$1
  });
};

sk$Parser$dtParsePosition.prototype.createEmptyTreeBefore = function() {
  var t$ = this;
  var t$1 = t$.createRangeBefore();
  return new (sk$ParseTree$dtEmptyTree)({
    range: t$1
  });
};

sk$Parser$dtParsePosition.prototype.createRange = function(start) {
  var t$ = start;
  var t$1;
  if (t$.atEnd().__value)
    {
      var t$2 = this;
      t$1 = t$2.atEnd();
    }
  else
    t$1 = new sk$Bool((false));
  if (t$1.__value)
    {
      var t$3 = start;
      return t$3.createRangeAfter();
    }
  else
    {
      var t$4 = start;
      var t$5 = t$4.positionAfter();
      var t$6 = this;
      var t$7 = t$6.positionBefore();
      return sk$TextRange$dtcreate(t$5, t$7);
    }
};

sk$Parser$dtParsePosition.prototype.createRangeAfter = function() {
  var t$ = this;
  var t$1 = t$.peekToken();
  return sk$Parser$dtcreateRangeAfterToken(t$1);
};

sk$Parser$dtParsePosition.prototype.createRangeBefore = function() {
  var t$ = this;
  var t$1 = t$.positionBefore();
  return sk$TextRange$dtempty(t$1);
};

sk$Parser$dtParsePosition.prototype.getComments = function() {
  var t$ = this;
  var t$1 = t$.tokens;
  var t$2 = t$1.values();
  var t$3 = t$2.flatMap(((result) => 
  {
    var t$4 = result;
    var t$5 = t$4.token;
    return t$5.comments();
  }));
  return t$3.collect(sk$Array);
};

sk$Parser$dtParsePosition.prototype.getLexErrors = function() {
  var t$ = this;
  var t$1 = t$.tokens;
  var t$2 = t$1.values();
  var t$3 = t$2.flatMap(((result) => 
  {
    var t$4 = result;
    var t$5 = t$4.token;
    var t$6 = t$5.errors;
    return t$6.values();
  }));
  return t$3.collect(sk$Array);
};

sk$Parser$dtParsePosition.prototype.getToken = function(index, includeTrailingTrivia) {
  if (includeTrailingTrivia === undefined)
    includeTrailingTrivia = ((() => 
    {
      return new sk$Bool((true));
    })());
  {
    jumpBlockOuterbreak$bg10746:{
      break$bg10746:{
        while_else$bg10745:{
          do
            {
              jumpBlockOutercontinue$bg10747:{
                continue$bg10747:{
                  {
                    var t$ = index;
                    var t$1 = this;
                    var t$2 = t$1.tokens;
                    var t$3 = t$2.size();
                    if (t$.$gt$eq(t$3).__value)
                      {
                        var t$4 = this;
                        var t$5 = t$4.lexer;
                        var t$6 = includeTrailingTrivia;
                        var newTokenResult = t$5.lexToken(t$6);
                        var t$7 = this;
                        var t$8 = t$7.tokens;
                        var t$9 = t$8.isEmpty();
                        var t$10;
                        if (t$9.$bg().__value)
                          {
                            var t$11 = this;
                            var t$12 = t$11.tokens;
                            var t$13 = t$12.last();
                            var lastToken = t$13.token;
                            var t$14 = newTokenResult;
                            var newToken = t$14.token;
                            var t$15 = lastToken;
                            var t$16 = t$15.range;
                            var t$17 = t$16.end;
                            var t$18 = newToken;
                            var t$19 = t$18.range;
                            var t$20 = t$19.start;
                            var t$21;
                            if (t$17.$gt(t$20).__value)
                              {
                                var t$22 = new sk$String(('Lexer returned overlapping tokens: ')).toString();
                                var t$23 = lastToken;
                                var t$24 = t$23.toString();
                                var t$25 = new sk$String((' and ')).toString();
                                var t$26 = newToken;
                                var t$27 = t$26.toString();
                                var t$28 = new sk$String(('')).join(new (sk$Array)([
                                  t$22,
                                  t$24,
                                  t$25,
                                  t$27
                                ]));
                                t$21 = sk$invariant_violation(t$28);
                              }
                            else
                              t$21 = sk.__.$void;
                            t$10 = t$21;
                          }
                        else
                          t$10 = sk.__.$void;
                        var t$29 = this;
                        var t$30 = t$29.tokens;
                        var t$31 = newTokenResult;
                        t$30.push(t$31);
                      }
                    else
                      break while_else$bg10745;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg10747;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg10746;
      }
      {}
      break jumpBlockOuterbreak$bg10746;
    }
  }
  var t$32 = this;
  var t$33 = t$32.tokens;
  var t$34 = index;
  var t$35 = t$33.get(t$34);
  return t$35.token;
};

sk$Parser$dtParsePosition.prototype.getTokens = function() {
  var t$ = this;
  var t$1 = t$.tokens;
  var t$2 = t$1.map(((result) => 
  {
    var t$3 = result;
    return t$3.token;
  }));
  var t$4 = t$2.toArray();
  var t$5 = this;
  var t$6 = t$5.index;
  return t$4.slice(new sk$Int(0.0, 0.0), t$6);
};

sk$Parser$dtParsePosition.prototype.peek = function() {
  var t$ = this;
  return t$.peekOffset(new sk$Int(0.0, 0.0));
};

sk$Parser$dtParsePosition.prototype.peekKind = function(kind) {
  var t$ = this;
  var t$1 = kind;
  return t$.peekKindOffset(t$1, new sk$Int(0.0, 0.0));
};

sk$Parser$dtParsePosition.prototype.peekKindOffset = function(kind, offset) {
  var t$ = this;
  var t$1 = offset;
  var t$2 = t$.peekOffset(t$1);
  var t$3 = kind;
  return t$2.$eq$eq(t$3);
};

sk$Parser$dtParsePosition.prototype.peekOffset = function(offset) {
  var t$ = this;
  var t$1 = offset;
  var t$2 = t$.peekTokenOffset(t$1);
  return t$2.kind;
};

sk$Parser$dtParsePosition.prototype.peekPredefinedName = function(name) {
  var t$ = this;
  var t$1 = t$.peekToken();
  var t$2 = t$1.value;
  var t$3 = name;
  return t$2.$eq$eq(t$3);
};

sk$Parser$dtParsePosition.prototype.peekPredefinedNameOffset = function(name, offset) {
  var t$ = this;
  var t$1 = offset;
  var t$2 = t$.peekTokenOffset(t$1);
  var t$3 = t$2.value;
  var t$4 = name;
  return t$3.$eq$eq(t$4);
};

sk$Parser$dtParsePosition.prototype.peekToken = function() {
  var t$ = this;
  return t$.peekTokenOffset(new sk$Int(0.0, 0.0));
};

sk$Parser$dtParsePosition.prototype.peekTokenOffset = function(offset) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.index;
  var t$3 = offset;
  var t$4 = t$2.$pl(t$3);
  return t$.getToken(t$4, undefined);
};

sk$Parser$dtParsePosition.prototype.positionAfter = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.index;
  var t$3 = t$.getToken(t$2, undefined);
  var t$4 = t$3.range;
  return t$4.start;
};

sk$Parser$dtParsePosition.prototype.positionBefore = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.index;
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  var t$4 = sk$max(new sk$Int(0.0, 0.0), t$3);
  var t$5 = t$.getToken(t$4, undefined);
  var t$6 = t$5.range;
  return t$6.end;
};

sk$Parser$dtParsePosition.prototype.setLexer = function(lexer) {
  var t$ = this;
  var t$1 = t$.tokens;
  var t$2 = this;
  var t$3 = t$2.index;
  var t$4 = this;
  var t$5 = t$4.tokens;
  var t$6 = t$5.get(new sk$Int(0.0, 0.0));
  t$1.resize(t$3, t$6);
  var t$7 = lexer;
  var t$8 = this;
  var t$9 = t$8.position;
  t$7.setPosition(t$9);
  var $var = this;
  var t$10 = $var;
  var t$11 = t$10;
  t$11.lexer = lexer;
  return sk.__.$void;
};

sk$Parser$dtParsePosition.prototype.__bases = [
  sk$Parser$dtParsePosition
];

var sk$Parser$dtParseResults = sk.Parser$dtParseResults = function Parser$dtParseResults(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Parser$dtParseResults.prototype = Object.create(Object.prototype);

sk$Parser$dtParseResults.prototype.__constructor = sk$Parser$dtParseResults;

sk$Parser$dtParseResults.prototype.__classname = 'Parser.ParseResults';

sk$Parser$dtParseResults.prototype.$frozen = true;

sk$Parser$dtParseResults.prototype.__type_switch_id = 218;

sk$Parser$dtParseResults.prototype.__copy = function() {
  return new (sk$Parser$dtParseResults)(this);
};

sk$Parser$dtParseResults.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp66 = __cache.get(this);
  if (_tmp66 === undefined)
    {
      var _tmp66 = this.__copy();
      _tmp66.$frozen = true;
      __cache.set(this, _tmp66);
      _tmp66.tokens = skip.deepFreeze(_tmp66.tokens, __cache);
      _tmp66.comments = skip.deepFreeze(_tmp66.comments, __cache);
      _tmp66.tree = skip.deepFreeze(_tmp66.tree, __cache);
      _tmp66.errors = skip.deepFreeze(_tmp66.errors, __cache);
    }
  return _tmp66;
};

sk$Parser$dtParseResults.prototype.__init = function(__named_parameters) {
  this.tokens = __named_parameters.tokens;
  this.comments = __named_parameters.comments;
  this.tree = __named_parameters.tree;
  this.errors = __named_parameters.errors;
};

sk$Parser$dtParseResults.prototype.convertErrors = function(filename) {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = t$1.map(((error) => 
  {
    var t$3 = error;
    var t$4 = filename;
    return sk$SkipError$dterrorFromSyntaxError(t$3, t$4);
  }));
  return t$2.collect(sk$Vector);
};

sk$Parser$dtParseResults.prototype.hasError = function() {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = t$1.isEmpty();
  return t$2.$bg();
};

sk$Parser$dtParseResults.prototype.throwOnError = function(filename) {
  var t$ = this;
  if (t$.hasError().__value)
    {
      var t$1 = this;
      var t$2 = filename;
      var t$3 = t$1.convertErrors(t$2);
      return sk$SkipError$dtthrowErrors(t$3);
    }
  else
    return sk.__.$void;
};

sk$Parser$dtParseResults.prototype.__bases = [
  sk$Parser$dtParseResults
];

var sk$Parser$dtParser = sk.Parser$dtParser = function Parser$dtParser(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Parser$dtParser.prototype = Object.create(Object.prototype);

sk$Parser$dtParser.prototype.__constructor = sk$Parser$dtParser;

sk$Parser$dtParser.prototype.__classname = 'Parser.Parser';

sk$Parser$dtParser.prototype.$frozen = undefined;

sk$Parser$dtParser.prototype.__type_switch_id = -1;

sk$Parser$dtParser.prototype.__copy = function() {
  return new (sk$Parser$dtParser)(this);
};

sk$Parser$dtParser.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp67 = __cache.get(this);
  if (_tmp67 === undefined)
    {
      var _tmp67 = this.__copy();
      _tmp67.$frozen = true;
      __cache.set(this, _tmp67);
      _tmp67.position = skip.deepFreeze(_tmp67.position, __cache);
      _tmp67.errors = skip.deepFreeze(_tmp67.errors, __cache);
    }
  return _tmp67;
};

sk$Parser$dtParser.prototype.__init = function(__named_parameters) {
  this.position = __named_parameters.position;
  this.errors = __named_parameters.errors === undefined ? ((() => 
  {
    return sk$Vector.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.errors;
};

sk$Parser$dtParser.prototype.addError = function(error) {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = error;
  return t$1.push(t$2);
};

sk$Parser$dtParser.prototype.addErrorAtCurrent = function(errorCode, message, relatedMessages, fix) {
  if (relatedMessages === undefined)
    relatedMessages = ((() => 
    {
      return sk$List.createFromItems(new (sk$Array)([]));
    })());
  if (fix === undefined)
    fix = ((() => 
    {
      return singleton$None;
    })());
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.peekToken();
  var t$3 = t$2.range;
  var t$4 = errorCode;
  var t$5 = message;
  var t$6 = relatedMessages;
  var t$7 = fix;
  return t$.addErrorAtRange(t$3, t$4, t$5, t$6, t$7);
};

sk$Parser$dtParser.prototype.addErrorAtRange = function(range, errorCode, message, relatedMessages, fix) {
  if (relatedMessages === undefined)
    relatedMessages = ((() => 
    {
      return sk$List.createFromItems(new (sk$Array)([]));
    })());
  if (fix === undefined)
    fix = ((() => 
    {
      return singleton$None;
    })());
  var t$ = this;
  var t$1 = errorCode;
  var t$2 = range;
  var t$3 = message;
  var t$4 = relatedMessages;
  var t$5 = fix;
  var t$6 = sk$SyntaxError$dtcreate(t$1, t$2, t$3, t$4, t$5);
  return t$.addError(t$6);
};

sk$Parser$dtParser.prototype.addErrorAtTree = function(tree, errorCode, message) {
  var t$ = this;
  var t$1 = tree;
  var t$2 = t$1.range;
  var t$3 = errorCode;
  var t$4 = message;
  return t$.addErrorAtRange(t$2, t$3, t$4, undefined, undefined);
};

sk$Parser$dtParser.prototype.advance = function(includeTrailingTrivia) {
  if (includeTrailingTrivia === undefined)
    includeTrailingTrivia = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = includeTrailingTrivia;
  return t$1.advance(t$2);
};

sk$Parser$dtParser.prototype.atEnd = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.atEnd();
};

sk$Parser$dtParser.prototype.createEmptyList = function() {
  var t$ = this;
  var t$1 = t$.createRangeAfter();
  return sk$Parser$dtcreateEmptyParseTreeList(t$1);
};

sk$Parser$dtParser.prototype.createEmptyTreeAfter = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.createEmptyTreeAfter();
};

sk$Parser$dtParser.prototype.createEmptyTreeBefore = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.createEmptyTreeBefore();
};

sk$Parser$dtParser.prototype.createError = function() {
  var t$ = this;
  var t$1 = t$.peekToken();
  return sk$Parser$dtcreateErrorTree(t$1);
};

sk$Parser$dtParser.prototype.createRange = function(start) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = start;
  return t$1.createRange(t$2);
};

sk$Parser$dtParser.prototype.createRangeAfter = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.createRangeAfter();
};

sk$Parser$dtParser.prototype.createRangeBefore = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.createRangeBefore();
};

sk$Parser$dtParser.prototype.eatToken = function(kind, openDelimiterOpt, includeTrailingTrivia) {
  if (openDelimiterOpt === undefined)
    openDelimiterOpt = ((() => 
    {
      return singleton$None;
    })());
  if (includeTrailingTrivia === undefined)
    includeTrailingTrivia = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var t$1 = kind;
  var t$2 = openDelimiterOpt;
  t$.expect(t$1, t$2);
  var t$3 = this;
  var t$4 = includeTrailingTrivia;
  return t$3.advance(t$4);
};

sk$Parser$dtParser.prototype.eatTree = function(kind, openDelimiterOpt, includeTrailingTrivia) {
  if (openDelimiterOpt === undefined)
    openDelimiterOpt = ((() => 
    {
      return singleton$None;
    })());
  if (includeTrailingTrivia === undefined)
    includeTrailingTrivia = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var t$1 = kind;
  var t$2 = openDelimiterOpt;
  var t$3 = includeTrailingTrivia;
  var token = t$.eatToken(t$1, t$2, t$3);
  var t$4 = token;
  return sk$Parser$dtcreateTokenTree(t$4);
};

sk$Parser$dtParser.prototype.eatTreeOpt = function(kind) {
  var t$ = this;
  var t$1 = kind;
  if (t$.peekKind(t$1).__value)
    {
      var t$2 = this;
      var t$3 = kind;
      return t$2.eatTree(t$3, undefined, undefined);
    }
  else
    {
      var t$4 = this;
      return t$4.createEmptyTreeBefore();
    }
};

sk$Parser$dtParser.prototype.errorResult = function(errorCode, message, relatedMessages, fix) {
  if (relatedMessages === undefined)
    relatedMessages = ((() => 
    {
      return sk$List.createFromItems(new (sk$Array)([]));
    })());
  if (fix === undefined)
    fix = ((() => 
    {
      return singleton$None;
    })());
  var t$ = this;
  var result = t$.createError();
  var t$1 = this;
  var t$2 = errorCode;
  var t$3 = message;
  var t$4 = relatedMessages;
  var t$5 = fix;
  t$1.addErrorAtCurrent(t$2, t$3, t$4, t$5);
  return result;
};

sk$Parser$dtParser.prototype.errorResultAdvance = function(errorCode, message) {
  var t$ = this;
  var t$1 = errorCode;
  var t$2 = message;
  var result = t$.errorResult(t$1, t$2, undefined, undefined);
  var t$3 = this;
  t$3.advance(undefined);
  return result;
};

sk$Parser$dtParser.prototype.expect = function(kind, openDelimiterOpt) {
  if (openDelimiterOpt === undefined)
    openDelimiterOpt = ((() => 
    {
      return singleton$None;
    })());
  var t$ = this;
  var token = t$.peekToken();
  var t$1 = token;
  var t$2 = t$1.kind;
  var t$3 = kind;
  if (t$2.$bg$eq(t$3).__value)
    {
      var t$4 = this;
      var t$5 = token;
      var t$6 = kind;
      var t$7 = openDelimiterOpt;
      return t$4.reportUnexpectedToken(t$5, t$6, t$7);
    }
  else
    return sk.__.$void;
};

sk$Parser$dtParser.prototype.getComments = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.getComments();
};

sk$Parser$dtParser.prototype.getErrors = function() {
  var t$ = this;
  var t$1 = t$.getLexErrors();
  var t$2 = this;
  var t$3 = t$2.errors;
  var t$4 = t$3.toArray();
  return t$1.concat(t$4);
};

sk$Parser$dtParser.prototype.getLexErrors = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.getLexErrors();
};

sk$Parser$dtParser.prototype.getTokens = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.getTokens();
};

sk$Parser$dtParser.prototype.hasErrors = function() {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = t$1.isEmpty();
  return t$2.$bg();
};

sk$Parser$dtParser.prototype.mark = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.clone();
};

sk$Parser$dtParser.prototype.parseDelimited = function(startKind, parseElement, endKind) {
  var t$ = this;
  var t$1 = startKind;
  var startDelimiter = t$.eatTree(t$1, undefined, undefined);
  var t$2 = parseElement;
  var t$3 = this;
  var element = t$2(t$3);
  var t$4 = this;
  var t$5 = endKind;
  var t$6 = startDelimiter;
  var t$7 = new (sk$Some)(t$6);
  var endDelimiter = t$4.eatTree(t$5, t$7, undefined);
  var t$8 = startDelimiter;
  var t$9 = element;
  var t$10 = endDelimiter;
  return new (sk$Tuple3)(t$8, t$9, t$10);
};

sk$Parser$dtParser.prototype.parseDelimitedList = function(startKind, parseList, endKind) {
  var t$ = this;
  var t$1 = startKind;
  var t$2 = parseList;
  var t$3 = endKind;
  var $var = t$.parseDelimited(t$1, t$2, t$3);
  var var1;
  var var2;
  var var3;
  {
    jumpBlockOuterjumpLab$bg11010:{
      jumpLab$bg11010:{
        switch ($var.__type_switch_id) {
          case 393:
            var1 = $var.i0;
            var2 = $var.i1;
            var3 = $var.i2;
            break jumpLab$bg11010;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var endDelimiter = var3;
        var list = var2;
        var startDelimiter = var1;
        var t$4 = list;
        var t$5 = startDelimiter;
        var t$6 = endDelimiter;
        return t$4.addDelimiters(t$5, t$6);
      }
    }
  }
};

sk$Parser$dtParser.prototype.parseList = function(peekElement, parseElement) {
  var t$ = this;
  var t$1 = peekElement;
  var t$2 = parseElement;
  var elements = t$.parseListElements(t$1, t$2);
  var t$3 = this;
  var t$4 = t$3.createRangeAfter();
  var t$5 = elements;
  return sk$Parser$dtreturnParseTreeList(t$4, t$5);
};

sk$Parser$dtParser.prototype.parseListBefore = function(peekElement, parseElement) {
  var t$ = this;
  var t$1 = peekElement;
  var t$2 = parseElement;
  var elements = t$.parseListElements(t$1, t$2);
  var t$3 = this;
  var t$4 = t$3.createRangeBefore();
  var t$5 = elements;
  return sk$Parser$dtreturnParseTreeList(t$4, t$5);
};

sk$Parser$dtParser.prototype.parseListElements = function(peekElement, parseElement) {
  var elements = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  {
    jumpBlockOuterbreak$bg11029:{
      break$bg11029:{
        while_else$bg11028:{
          do
            {
              jumpBlockOutercontinue$bg11030:{
                continue$bg11030:{
                  {
                    var t$ = peekElement;
                    var t$1 = this;
                    if (t$(t$1).__value)
                      {
                        var t$2 = elements;
                        var t$3 = parseElement;
                        var t$4 = this;
                        var t$5 = t$3(t$4);
                        t$2.push(t$5);
                      }
                    else
                      break while_else$bg11028;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg11030;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11029;
      }
      {}
      break jumpBlockOuterbreak$bg11029;
    }
  }
  var t$6 = elements;
  return t$6.collect(sk$Array);
};

sk$Parser$dtParser.prototype.parseSeparatedList = function(separatorKind, parseElement) {
  var t$ = this;
  var t$1 = separatorKind;
  var t$2 = parseElement;
  var $var = t$.parseSeparatedListElements(t$1, t$2);
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg11051:{
      jumpLab$bg11051:{
        switch ($var.__type_switch_id) {
          case 392:
            var1 = $var.i0;
            var2 = $var.i1;
            break jumpLab$bg11051;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var separators = var2;
        var elements = var1;
        var t$3 = elements;
        var t$4 = sk$Parser$dtcreateRangeOfList(t$3);
        var t$5 = elements;
        var t$6 = separators;
        var t$7 = separatorKind;
        return sk$ParseTree$dtParseTreeList.makeSeparatedList({
          elements: t$5,
          range: t$4,
          separatorKind: t$7,
          separators: t$6
        });
      }
    }
  }
};

sk$Parser$dtParser.prototype.parseSeparatedListElements = function(separatorKind, parseElement) {
  var t$ = parseElement;
  var t$1 = this;
  var t$2 = t$(t$1);
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var elements = sk$Vector.mcreateFromItems(t$3);
  var separators = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  {
    jumpBlockOuterbreak$bg11060:{
      break$bg11060:{
        while_else$bg11059:{
          do
            {
              jumpBlockOutercontinue$bg11061:{
                continue$bg11061:{
                  {
                    var t$4 = this;
                    var t$5 = separatorKind;
                    var separator = t$4.eatTreeOpt(t$5);
                    var t$6 = separator;
                    var t$7 = t$6.isEmpty();
                    var t$8;
                    if (t$7.$bg().__value)
                      {
                        var t$9 = separators;
                        var t$10 = separator;
                        t$9.push(t$10);
                        var t$11 = elements;
                        var t$12 = parseElement;
                        var t$13 = this;
                        var t$14 = t$12(t$13);
                        t$11.push(t$14);
                        t$8 = new sk$Bool((true));
                      }
                    else
                      t$8 = new sk$Bool((false));
                    if (t$8.__value)
                      {}
                    else
                      break while_else$bg11059;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg11061;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11060;
      }
      {}
      break jumpBlockOuterbreak$bg11060;
    }
  }
  var t$15 = separators;
  var t$16 = t$15.size();
  var t$17 = t$16.$pl(new sk$Int(1.0, 0.0));
  var t$18 = elements;
  var t$19 = t$18.size();
  var t$20 = t$17.$eq$eq(t$19);
  sk$invariant(t$20, undefined);
  var t$21 = elements;
  var t$22 = t$21.collect(sk$Array);
  var t$23 = separators;
  var t$24 = t$23.collect(sk$Array);
  return new (sk$Tuple2)(t$22, t$24);
};

sk$Parser$dtParser.prototype.parseSeparatedOptList = function(separatorKind, peekElement, parseElement) {
  var t$ = parseElement;
  var t$1 = this;
  var head = t$(t$1);
  var t$2 = head;
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var elements = sk$Vector.mcreateFromItems(t$3);
  var separators = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var last = head;
  {
    jumpBlockOuterbreak$bg11092:{
      break$bg11092:{
        while_else$bg11091:{
          do
            {
              jumpBlockOutercontinue$bg11093:{
                continue$bg11093:{
                  {
                    var t$4 = this;
                    var t$5 = separatorKind;
                    var separator = t$4.eatTreeOpt(t$5);
                    var t$6 = separator;
                    var t$7 = t$6.isEmpty();
                    var t$8;
                    if (t$7.$bg().__value)
                      {
                        last = separator;
                        var t$9 = separators;
                        var t$10 = separator;
                        t$9.push(t$10);
                        var t$11 = peekElement;
                        var t$12 = this;
                        var t$13;
                        if (t$11(t$12).__value)
                          {
                            var t$14 = parseElement;
                            var t$15 = this;
                            var next = t$14(t$15);
                            last = next;
                            var t$16 = elements;
                            var t$17 = next;
                            t$16.push(t$17);
                            t$13 = new sk$Bool((true));
                          }
                        else
                          t$13 = new sk$Bool((false));
                        t$8 = t$13;
                      }
                    else
                      t$8 = new sk$Bool((false));
                    if (t$8.__value)
                      {}
                    else
                      break while_else$bg11091;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg11093;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11092;
      }
      {}
      break jumpBlockOuterbreak$bg11092;
    }
  }
  var t$18 = head;
  var t$19 = last;
  var t$20 = sk$Parser$dtcreateRangeOfTrees(t$18, t$19);
  var t$21 = elements;
  var t$22 = t$21.collect(sk$Array);
  var t$23 = separators;
  var t$24 = t$23.collect(sk$Array);
  var t$25 = separatorKind;
  return sk$ParseTree$dtParseTreeList.makeSeparatedList({
    elements: t$22,
    range: t$20,
    separatorKind: t$25,
    separators: t$24
  });
};

sk$Parser$dtParser.prototype.parseSeparatedOptListOpt = function(separatorKind, peekElement, parseElement) {
  var t$ = peekElement;
  var t$1 = this;
  if (t$(t$1).__value)
    {
      var t$2 = this;
      var t$3 = separatorKind;
      var t$4 = peekElement;
      var t$5 = parseElement;
      return t$2.parseSeparatedOptList(t$3, t$4, t$5);
    }
  else
    {
      var t$6 = this;
      return t$6.createEmptyList();
    }
};

sk$Parser$dtParser.prototype.peek = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.peek();
};

sk$Parser$dtParser.prototype.peekKind = function(kind) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = kind;
  return t$1.peekKind(t$2);
};

sk$Parser$dtParser.prototype.peekKindOffset = function(kind, offset) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = kind;
  var t$3 = offset;
  return t$1.peekKindOffset(t$2, t$3);
};

sk$Parser$dtParser.prototype.peekOffset = function(offset) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = offset;
  return t$1.peekOffset(t$2);
};

sk$Parser$dtParser.prototype.peekParse = function(parse) {
  var t$ = this;
  var peekParser = t$.createPeekParser();
  var t$1 = parse;
  var t$2 = peekParser;
  t$1(t$2);
  var t$3 = peekParser;
  var t$4 = t$3.hasErrors();
  return t$4.$bg();
};

sk$Parser$dtParser.prototype.peekPredefinedName = function(name) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = name;
  return t$1.peekPredefinedName(t$2);
};

sk$Parser$dtParser.prototype.peekPredefinedNameOffset = function(name, offset) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = name;
  var t$3 = offset;
  return t$1.peekPredefinedNameOffset(t$2, t$3);
};

sk$Parser$dtParser.prototype.peekToken = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.peekToken();
};

sk$Parser$dtParser.prototype.peekTokenOffset = function(offset) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = offset;
  return t$1.peekTokenOffset(t$2);
};

sk$Parser$dtParser.prototype.positionAfter = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.positionAfter();
};

sk$Parser$dtParser.prototype.positionBefore = function() {
  var t$ = this;
  var t$1 = t$.position;
  return t$1.positionBefore();
};

sk$Parser$dtParser.prototype.setLexer = function(lexer) {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = lexer;
  return t$1.setLexer(t$2);
};

sk$Parser$dtParser.prototype.tokenResult = function() {
  var t$ = this;
  var t$1 = t$.advance(undefined);
  return sk$Parser$dtcreateTokenTree(t$1);
};

sk$Parser$dtParser.prototype.__bases = [
  sk$Parser$dtParser
];

var sk$Persistent$dtIndex = sk.Persistent$dtIndex = function Persistent$dtIndex(i) {
  this.i = i === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : i;
};

sk$Persistent$dtIndex.prototype = Object.create(Object.prototype);

sk$Persistent$dtIndex.prototype.__constructor = sk$Persistent$dtIndex;

sk$Persistent$dtIndex.prototype.__classname = 'Persistent.Index';

sk$Persistent$dtIndex.prototype.$frozen = true;

sk$Persistent$dtIndex.prototype.__type_switch_id = 219;

sk$Persistent$dtIndex.prototype.__copy = function() {
  return new (sk$Persistent$dtIndex)(this.i);
};

sk$Persistent$dtIndex.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp68 = __cache.get(this);
  if (_tmp68 === undefined)
    {
      var _tmp68 = this.__copy();
      _tmp68.$frozen = true;
      __cache.set(this, _tmp68);
      _tmp68.i = skip.deepFreeze(_tmp68.i, __cache);
    }
  return _tmp68;
};

sk$Persistent$dtIndex.prototype.__init = function(__named_parameters) {};

sk$Persistent$dtIndex.prototype.child = function(shift) {
  var t$ = this;
  var t$1 = t$.i;
  var t$2 = shift;
  var t$3 = t$2.i;
  var t$4 = t$1.shr(t$3);
  var t$5 = (sk$Persistent$dtbranchFactor()).$mi(new sk$Int(1.0, 0.0));
  return t$4.and(t$5);
};

sk$Persistent$dtIndex.prototype.leafChild = function() {
  var t$ = this;
  var t$1 = t$.i;
  var t$2 = (sk$Persistent$dtbranchFactor()).$mi(new sk$Int(1.0, 0.0));
  return t$1.and(t$2);
};

sk$Persistent$dtIndex.prototype.__bases = [
  sk$Persistent$dtIndex
];

var sk$Persistent$dtNode = sk.Persistent$dtNode = function Persistent$dtNode() {};

sk$Persistent$dtNode.prototype = Object.create(Object.prototype);

sk$Persistent$dtNode.prototype.__constructor = sk$Persistent$dtNode;

sk$Persistent$dtNode.prototype.__classname = 'Persistent.Node';

sk$Persistent$dtNode.prototype.$frozen = undefined;

sk$Persistent$dtNode.prototype.__type_switch_id = -1;

sk$Persistent$dtNode.prototype.__copy = function() {};

sk$Persistent$dtNode.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp69 = __cache.get(this);
  if (_tmp69 === undefined)
    {
      var _tmp69 = this.__copy();
      _tmp69.$frozen = true;
      __cache.set(this, _tmp69);
    }
  return _tmp69;
};

sk$Persistent$dtNode.prototype.__init = function(__named_parameters) {};

sk$Persistent$dtNode.branchLadder = function(shift, tailSize, tail) {
  var t$ = shift;
  var t$1 = t$.i;
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var elements = sk$Array.mfill((sk$Persistent$dtbranchFactor()), singleton$None);
      var t$2 = elements;
      var t$3 = this;
      var t$4 = shift;
      var t$5 = t$4.decrement();
      var t$6 = tailSize;
      var t$7 = tail;
      var t$8 = t$3.branchLadder(t$5, t$6, t$7);
      var t$9 = new (sk$Some)(t$8);
      t$2.set(new sk$Int(0.0, 0.0), t$9);
      var t$10 = elements;
      var t$11 = t$10;
      return new (sk$Persistent$dtInternal)(t$11);
    }
  else
    {
      var t$12 = tail;
      return new (sk$Persistent$dtLeaf)(t$12);
    }
};

sk$Persistent$dtNode.prototype.get = function(shift, index) {
  var node = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg11473:{
      break$bg11473:{
        do
          {
            jumpBlockOutercontinue$bg11474:{
              continue$bg11474:{
                {
                  var elements;
                  var elements1;
                  {
                    jumpBlockOuterjumpLab$bg11497:{
                      jumpLab$bg11497:{
                        jumpLab$bg11496:{
                          switch (node.__type_switch_id) {
                            case 221:
                              elements1 = node.elements;
                              break jumpLab$bg11496;
                            
                            case 220:
                              elements = node.elements;
                              break jumpLab$bg11497;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$ = elements1;
                          var t$1 = index;
                          var t$2 = t$1.leafChild();
                          var t$3 = sk$Unsafe$dtarray_get(t$, t$2);
                          break_val = sk$Persistent$dtunsafeGet(t$3);
                          break break$bg11473;
                        }
                      }
                      {
                        var t$4 = elements;
                        var t$5 = index;
                        var t$6 = shift;
                        var t$7 = t$5.child(t$6);
                        var t$8;
                        var $var = sk$Unsafe$dtarray_get(t$4, t$7);
                        var childNode;
                        var _;
                        {
                          jumpBlockOuterjumpLab$bg11494:{
                            jumpLab$bg11494:{
                              jumpLab$bg11493:{
                                switch ($var.__type_switch_id) {
                                  case 205:
                                    childNode = $var.value;
                                    break jumpLab$bg11493;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg11494;

                                }
                              }
                              {
                                node = childNode;
                                t$8 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg11494;
                            }
                            {
                              var t$9 = new sk$String(('Node::get: unexpected null node with shift=')).toString();
                              var t$10 = shift;
                              var t$11 = t$10.i;
                              var t$12 = t$11.toString();
                              var t$13 = new sk$String(('')).join(new (sk$Array)([
                                t$9,
                                t$12
                              ]));
                              t$8 = sk$invariant_violation(t$13);
                            }
                            break jumpBlockOuterjumpLab$bg11494;
                          }
                        }
                        var t$14 = shift;
                        shift = t$14.decrement();
                      }
                      break jumpBlockOuterjumpLab$bg11497;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg11474;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg11473;
    }
  }
  return break_val;
};

sk$Persistent$dtNode.prototype.__bases = [
  sk$Persistent$dtNode
];

var sk$Persistent$dtShift = sk.Persistent$dtShift = function Persistent$dtShift(i) {
  this.i = i === undefined ? ((() => 
  {
    return sk$UInt8.min;
  })()) : i;
};

sk$Persistent$dtShift.prototype = Object.create(Object.prototype);

sk$Persistent$dtShift.prototype.__constructor = sk$Persistent$dtShift;

sk$Persistent$dtShift.prototype.__classname = 'Persistent.Shift';

sk$Persistent$dtShift.prototype.$frozen = true;

sk$Persistent$dtShift.prototype.__type_switch_id = 222;

sk$Persistent$dtShift.prototype.__copy = function() {
  return new (sk$Persistent$dtShift)(this.i);
};

sk$Persistent$dtShift.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp70 = __cache.get(this);
  if (_tmp70 === undefined)
    {
      var _tmp70 = this.__copy();
      _tmp70.$frozen = true;
      __cache.set(this, _tmp70);
      _tmp70.i = skip.deepFreeze(_tmp70.i, __cache);
    }
  return _tmp70;
};

sk$Persistent$dtShift.prototype.__init = function(__named_parameters) {};

sk$Persistent$dtShift.prototype.decrement = function() {
  var t$ = this;
  var t$1 = t$.i;
  var t$2 = t$1.$mi((sk$Persistent$dtbitsPerLevel()));
  var t$3 = sk$UInt8.truncate(t$2);
  return new (sk$Persistent$dtShift)(t$3);
};

sk$Persistent$dtShift.prototype.increment = function() {
  var t$ = this;
  var t$1 = t$.i;
  var t$2 = t$1.$pl((sk$Persistent$dtbitsPerLevel()));
  var t$3 = sk$UInt8.truncate(t$2);
  return new (sk$Persistent$dtShift)(t$3);
};

sk$Persistent$dtShift.prototype.__bases = [
  sk$Persistent$dtShift
];

var sk$Pos = sk.Pos = function Pos(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Pos.prototype = Object.create(Object.prototype);

sk$Pos.prototype.__constructor = sk$Pos;

sk$Pos.prototype.__classname = 'Pos';

sk$Pos.prototype.$frozen = undefined;

sk$Pos.prototype.__type_switch_id = -1;

sk$Pos.prototype.__copy = function() {
  return new (sk$Pos)(this);
};

sk$Pos.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp71 = __cache.get(this);
  if (_tmp71 === undefined)
    {
      var _tmp71 = this.__copy();
      _tmp71.$frozen = true;
      __cache.set(this, _tmp71);
      _tmp71.filename = skip.deepFreeze(_tmp71.filename, __cache);
      _tmp71.range = skip.deepFreeze(_tmp71.range, __cache);
    }
  return _tmp71;
};

sk$Pos.prototype.__init = function(__named_parameters) {
  this.filename = __named_parameters.filename;
  this.range = __named_parameters.range;
};

sk$Pos.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Pos.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Pos.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Pos.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$Pos.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Pos.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Pos.prototype.contains = function(position) {
  var t$ = this;
  var t$1 = t$.range;
  var t$2 = position;
  var t$3 = t$2.position;
  return t$1.contains(t$3);
};

sk$Pos.create = function(filename, range) {
  var t$ = filename;
  var t$1 = range;
  return new (sk$FileRange)({
    filename: t$,
    range: t$1
  });
};

sk$Pos.prototype.defaultToString = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.range;
  var t$4 = t$3.toString();
  return t$1.$pl(t$4);
};

sk$Pos.prototype.end = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.range;
  var t$4 = t$3.end;
  return sk$FilePosition$dtcreate(t$1, t$4);
};

sk$Pos.prototype.endPosition = function() {
  var t$ = this;
  var t$1 = t$.range;
  return t$1.end;
};

sk$Pos.fromStartEnd = function(start, end) {
  var t$ = start;
  var t$1 = t$.filename;
  var t$2 = start;
  var t$3 = t$2.position;
  var t$4 = end;
  var t$5 = t$4.position;
  var t$6 = sk$TextRange$dtcreate(t$3, t$5);
  return sk$FileRange$dtcreate(t$1, t$6);
};

sk$Pos.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toString();
  return new (sk$InspectLiteral)(t$1);
};

sk$Pos.prototype.invariant = function(flag, msg) {
  var t$ = flag;
  if (t$.$bg().__value)
    {
      var t$1 = this;
      var t$2 = msg;
      return t$1.die(t$2);
    }
  else
    return sk.__.$void;
};

sk$Pos.prototype.lazyInvariant = function(flag, msg) {
  var t$ = flag;
  if (t$.$bg().__value)
    {
      var t$1 = this;
      var t$2 = msg;
      var t$3 = t$2();
      return t$1.die(t$3);
    }
  else
    return sk.__.$void;
};

sk$Pos.prototype.start = function() {
  var t$ = this;
  var t$1 = t$.filename;
  var t$2 = this;
  var t$3 = t$2.range;
  var t$4 = t$3.start;
  return sk$FilePosition$dtcreate(t$1, t$4);
};

sk$Pos.prototype.startPosition = function() {
  var t$ = this;
  var t$1 = t$.range;
  return t$1.start;
};

sk$Pos.prototype.toString = function() {
  var t$ = this;
  return t$.defaultToString();
};

sk$Pos.prototype.__bases = [
  sk$Pos
];

var sk$Position = sk.Position = function Position(lineColumn) {
  this.lineColumn = lineColumn;
};

sk$Position.prototype = Object.create(Object.prototype);

sk$Position.prototype.__constructor = sk$Position;

sk$Position.prototype.__classname = 'Position';

sk$Position.prototype.$frozen = true;

sk$Position.prototype.__type_switch_id = 224;

sk$Position.prototype.__copy = function() {
  return new (sk$Position)(this.lineColumn);
};

sk$Position.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp72 = __cache.get(this);
  if (_tmp72 === undefined)
    {
      var _tmp72 = this.__copy();
      _tmp72.$frozen = true;
      __cache.set(this, _tmp72);
      _tmp72.lineColumn = skip.deepFreeze(_tmp72.lineColumn, __cache);
    }
  return _tmp72;
};

sk$Position.prototype.__init = function(__named_parameters) {};

sk$Position.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Position.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Position.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Position.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$Position.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Position.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Position.prototype.atBeginningOfLine = function() {
  var t$ = this;
  var t$1 = t$.column();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Position.prototype.beginningOfLine = function() {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = t$1.line();
  return t$.create(t$2, new sk$Int(0.0, 0.0));
};

sk$Position.prototype.column = function() {
  var t$ = this;
  var t$1 = t$.lineColumn;
  return t$1.and((sk$Int$dtlow32BitMask()));
};

sk$Position.prototype.compare = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg12747:{
      jumpLab$bg12747:{
        jumpLab$bg12746:{
          switch (other.__type_switch_id) {
            case 224:
              otherTyped = other;
              break jumpLab$bg12746;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.lineColumn;
          var t$2 = otherTyped;
          var t$3 = t$2.lineColumn;
          var $var = sk$compare(t$1, t$3);
          var result;
          {
            jumpBlockOuterjumpLab$bg12744:{
              jumpLab$bg12744:{
                jumpLab$bg12743:{
                  switch ($var.__type_switch_id) {
                    case 206:
                      break jumpLab$bg12743;
                    
                    default:
                      result = $var;
                      break jumpLab$bg12744;

                  }
                }
                {}
                break jumpBlockOuterjumpLab$bg12744;
              }
              return result;
            }
          }
          return singleton$EQ;
        }
      }
      {
        var t$4 = this;
        var t$5 = t$4.getClassName();
        var t$6 = other;
        var t$7 = t$6.getClassName();
        return t$5.compare(t$7);
      }
    }
  }
};

sk$Position.create = function(line, column) {
  var t$ = line;
  var t$1 = t$.shl(new sk$Int(32.0, 0.0));
  var t$2 = column;
  var t$3 = t$2.and((sk$Int$dtlow32BitMask()));
  var t$4 = t$1.or(t$3);
  return new (sk$Position)(t$4);
};

sk$Position.prototype.getClassName = function() {
  return new sk$String(('Position'));
};

sk$Position.prototype.hash = function() {
  var h = new sk$String(('Position')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.lineColumn;
  return sk$Hashable$dtcombine(t$, t$2);
};

sk$Position.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toString();
  return new (sk$InspectLiteral)(t$1);
};

sk$Position.prototype.line = function() {
  var t$ = this;
  var t$1 = t$.lineColumn;
  return t$1.ushr(new sk$Int(32.0, 0.0));
};

sk$Position.prototype.nextColumn = function() {
  var t$ = this;
  var t$1 = t$.lineColumn;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  return new (sk$Position)(t$2);
};

sk$Position.prototype.nextLine = function() {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = t$1.line();
  var t$3 = t$2.$pl(new sk$Int(1.0, 0.0));
  return t$.create(t$3, new sk$Int(0.0, 0.0));
};

sk$Position.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.line();
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var t$3 = new sk$String(('(')).$pl(t$2);
  var t$4 = t$3.$pl(new sk$String((', ')));
  var t$5 = this;
  var t$6 = t$5.column();
  var t$7 = t$6.$pl(new sk$Int(1.0, 0.0));
  var t$8 = t$4.$pl(t$7);
  return t$8.$pl(new sk$String((')')));
};

sk$Position.prototype.__bases = [
  sk$Position
];

var sk$QuickCheck$dtConfig = sk.QuickCheck$dtConfig = function QuickCheck$dtConfig(__named_parameters) {
  this.__init(__named_parameters);
};

sk$QuickCheck$dtConfig.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtConfig.prototype.__constructor = sk$QuickCheck$dtConfig;

sk$QuickCheck$dtConfig.prototype.__classname = 'QuickCheck.Config';

sk$QuickCheck$dtConfig.prototype.$frozen = true;

sk$QuickCheck$dtConfig.prototype.__type_switch_id = 225;

sk$QuickCheck$dtConfig.prototype.__copy = function() {
  return new (sk$QuickCheck$dtConfig)(this);
};

sk$QuickCheck$dtConfig.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp73 = __cache.get(this);
  if (_tmp73 === undefined)
    {
      var _tmp73 = this.__copy();
      _tmp73.$frozen = true;
      __cache.set(this, _tmp73);
      _tmp73.seed = skip.deepFreeze(_tmp73.seed, __cache);
      _tmp73.attempts = skip.deepFreeze(_tmp73.attempts, __cache);
      _tmp73.maxSize = skip.deepFreeze(_tmp73.maxSize, __cache);
    }
  return _tmp73;
};

sk$QuickCheck$dtConfig.prototype.__init = function(__named_parameters) {
  this.seed = __named_parameters.seed === undefined ? ((() => 
  {
    return (sk$QuickCheck$dtdefaultSeed());
  })()) : __named_parameters.seed;
  this.attempts = __named_parameters.attempts === undefined ? ((() => 
  {
    return (sk$QuickCheck$dtdefaultAttempts());
  })()) : __named_parameters.attempts;
  this.maxSize = __named_parameters.maxSize === undefined ? ((() => 
  {
    return (sk$QuickCheck$dtdefaultMaxSize());
  })()) : __named_parameters.maxSize;
};

sk$QuickCheck$dtConfig.prototype.__bases = [
  sk$QuickCheck$dtConfig
];

var sk$QuickCheck$dtFun1 = sk.QuickCheck$dtFun1 = function QuickCheck$dtFun1(f) {
  this.f = f;
};

sk$QuickCheck$dtFun1.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtFun1.prototype.__constructor = sk$QuickCheck$dtFun1;

sk$QuickCheck$dtFun1.prototype.__classname = 'QuickCheck.Fun1';

sk$QuickCheck$dtFun1.prototype.$frozen = true;

sk$QuickCheck$dtFun1.prototype.__type_switch_id = 226;

sk$QuickCheck$dtFun1.prototype.__copy = function() {
  return new (sk$QuickCheck$dtFun1)(this.f);
};

sk$QuickCheck$dtFun1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp74 = __cache.get(this);
  if (_tmp74 === undefined)
    {
      var _tmp74 = this.__copy();
      _tmp74.$frozen = true;
      __cache.set(this, _tmp74);
      _tmp74.f = skip.deepFreeze(_tmp74.f, __cache);
    }
  return _tmp74;
};

sk$QuickCheck$dtFun1.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtFun1.generator = function(generator) {
  var t$ = generator;
  return new (sk$QuickCheck$dtFun1Generator)(t$);
};

sk$QuickCheck$dtFun1.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    return undefined;
  });
};

sk$QuickCheck$dtFun1.prototype.toString = function() {
  return new sk$String(('<<function>>'));
};

sk$QuickCheck$dtFun1.prototype.__bases = [
  sk$QuickCheck$dtFun1
];

var sk$QuickCheck$dtGeneratable = sk.QuickCheck$dtGeneratable = function QuickCheck$dtGeneratable() {};

sk$QuickCheck$dtGeneratable.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtGeneratable.prototype.__constructor = sk$QuickCheck$dtGeneratable;

sk$QuickCheck$dtGeneratable.prototype.__classname = 'QuickCheck.Generatable';

sk$QuickCheck$dtGeneratable.prototype.$frozen = undefined;

sk$QuickCheck$dtGeneratable.prototype.__type_switch_id = -1;

sk$QuickCheck$dtGeneratable.prototype.__copy = function() {};

sk$QuickCheck$dtGeneratable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp75 = __cache.get(this);
  if (_tmp75 === undefined)
    {
      var _tmp75 = this.__copy();
      _tmp75.$frozen = true;
      __cache.set(this, _tmp75);
    }
  return _tmp75;
};

sk$QuickCheck$dtGeneratable.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtGeneratable.prototype.__bases = [
  sk$QuickCheck$dtGeneratable
];

var sk$QuickCheck$dtGenerator = sk.QuickCheck$dtGenerator = function QuickCheck$dtGenerator() {};

sk$QuickCheck$dtGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtGenerator.prototype.__constructor = sk$QuickCheck$dtGenerator;

sk$QuickCheck$dtGenerator.prototype.__classname = 'QuickCheck.Generator';

sk$QuickCheck$dtGenerator.prototype.$frozen = undefined;

sk$QuickCheck$dtGenerator.prototype.__type_switch_id = -1;

sk$QuickCheck$dtGenerator.prototype.__copy = function() {};

sk$QuickCheck$dtGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp76 = __cache.get(this);
  if (_tmp76 === undefined)
    {
      var _tmp76 = this.__copy();
      _tmp76.$frozen = true;
      __cache.set(this, _tmp76);
    }
  return _tmp76;
};

sk$QuickCheck$dtGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtGenerator.prototype.map = function(f) {
  var t$ = this;
  var t$1 = f;
  return new (sk$QuickCheck$dtMapComposedGenerator)(t$, t$1);
};

sk$QuickCheck$dtGenerator.prototype.__bases = [
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtLazy = sk.QuickCheck$dtLazy = function QuickCheck$dtLazy() {};

sk$QuickCheck$dtLazy.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtLazy.prototype.__constructor = sk$QuickCheck$dtLazy;

sk$QuickCheck$dtLazy.prototype.__classname = 'QuickCheck.Lazy';

sk$QuickCheck$dtLazy.prototype.$frozen = undefined;

sk$QuickCheck$dtLazy.prototype.__type_switch_id = -1;

sk$QuickCheck$dtLazy.prototype.__copy = function() {
  return new (sk$QuickCheck$dtLazy)();
};

sk$QuickCheck$dtLazy.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp77 = __cache.get(this);
  if (_tmp77 === undefined)
    {
      var _tmp77 = this.__copy();
      _tmp77.$frozen = true;
      __cache.set(this, _tmp77);
    }
  return _tmp77;
};

sk$QuickCheck$dtLazy.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtLazy.prototype.concat = function(second) {
  var t$ = this;
  var t$1 = second;
  return new (sk$QuickCheck$dtConcatLazy)(t$, t$1);
};

sk$QuickCheck$dtLazy.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.iterator();
  var t$2 = f;
  return t$1.each(t$2);
};

sk$QuickCheck$dtLazy.empty = function() {
  return singleton$QuickCheck$dtEmptyLazy;
};

sk$QuickCheck$dtLazy.prototype.find = function(p) {
  var t$ = this;
  var t$1 = t$.iterator();
  var t$2 = p;
  return t$1.find(t$2);
};

sk$QuickCheck$dtLazy.prototype.map = function(f) {
  var t$ = this;
  var t$1 = f;
  return new (sk$QuickCheck$dtMapLazy)(t$, t$1);
};

sk$QuickCheck$dtLazy.prototype.__bases = [
  sk$QuickCheck$dtLazy
];

var sk$QuickCheck$dtPerturb = sk.QuickCheck$dtPerturb = function QuickCheck$dtPerturb() {};

sk$QuickCheck$dtPerturb.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtPerturb.prototype.__constructor = sk$QuickCheck$dtPerturb;

sk$QuickCheck$dtPerturb.prototype.__classname = 'QuickCheck.Perturb';

sk$QuickCheck$dtPerturb.prototype.$frozen = undefined;

sk$QuickCheck$dtPerturb.prototype.__type_switch_id = -1;

sk$QuickCheck$dtPerturb.prototype.__copy = function() {};

sk$QuickCheck$dtPerturb.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp78 = __cache.get(this);
  if (_tmp78 === undefined)
    {
      var _tmp78 = this.__copy();
      _tmp78.$frozen = true;
      __cache.set(this, _tmp78);
    }
  return _tmp78;
};

sk$QuickCheck$dtPerturb.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtPerturb.prototype.__bases = [
  sk$QuickCheck$dtPerturb
];

var sk$QuickCheck$dtProperty = sk.QuickCheck$dtProperty = function QuickCheck$dtProperty() {};

sk$QuickCheck$dtProperty.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtProperty.prototype.__constructor = sk$QuickCheck$dtProperty;

sk$QuickCheck$dtProperty.prototype.__classname = 'QuickCheck.Property';

sk$QuickCheck$dtProperty.prototype.$frozen = undefined;

sk$QuickCheck$dtProperty.prototype.__type_switch_id = -1;

sk$QuickCheck$dtProperty.prototype.__copy = function() {};

sk$QuickCheck$dtProperty.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp79 = __cache.get(this);
  if (_tmp79 === undefined)
    {
      var _tmp79 = this.__copy();
      _tmp79.$frozen = true;
      __cache.set(this, _tmp79);
    }
  return _tmp79;
};

sk$QuickCheck$dtProperty.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtProperty.prototype.property = function() {
  return this;
};

sk$QuickCheck$dtProperty.prototype.__bases = [
  sk$QuickCheck$dtProperty
];

var sk$QuickCheck$dtShrinkable = sk.QuickCheck$dtShrinkable = function QuickCheck$dtShrinkable() {};

sk$QuickCheck$dtShrinkable.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtShrinkable.prototype.__constructor = sk$QuickCheck$dtShrinkable;

sk$QuickCheck$dtShrinkable.prototype.__classname = 'QuickCheck.Shrinkable';

sk$QuickCheck$dtShrinkable.prototype.$frozen = undefined;

sk$QuickCheck$dtShrinkable.prototype.__type_switch_id = -1;

sk$QuickCheck$dtShrinkable.prototype.__copy = function() {};

sk$QuickCheck$dtShrinkable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp80 = __cache.get(this);
  if (_tmp80 === undefined)
    {
      var _tmp80 = this.__copy();
      _tmp80.$frozen = true;
      __cache.set(this, _tmp80);
    }
  return _tmp80;
};

sk$QuickCheck$dtShrinkable.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtShrinkable.prototype.__bases = [
  sk$QuickCheck$dtShrinkable
];

var sk$QuickCheck$dtTestResult = sk.QuickCheck$dtTestResult = function QuickCheck$dtTestResult() {};

sk$QuickCheck$dtTestResult.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTestResult.prototype.__constructor = sk$QuickCheck$dtTestResult;

sk$QuickCheck$dtTestResult.prototype.__classname = 'QuickCheck.TestResult';

sk$QuickCheck$dtTestResult.prototype.$frozen = undefined;

sk$QuickCheck$dtTestResult.prototype.__type_switch_id = -1;

sk$QuickCheck$dtTestResult.prototype.__copy = function() {};

sk$QuickCheck$dtTestResult.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp81 = __cache.get(this);
  if (_tmp81 === undefined)
    {
      var _tmp81 = this.__copy();
      _tmp81.$frozen = true;
      __cache.set(this, _tmp81);
    }
  return _tmp81;
};

sk$QuickCheck$dtTestResult.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTestResult.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$QuickCheck$dtTestResult.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var $var = new (sk$Tuple2)(t$, t$1);
  var counterExample2;
  var seed2;
  var seed1;
  var counterExample1;
  {
    jumpBlockOuterjumpLab$bg13073:{
      jumpLab$bg13073:{
        jumpLab$bg13072:{
          jumpLab$bg13071:{
            jumpLab$bg13074:{
              jumpLab$bg13075:{
                jumpLab$bg13076:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg13076;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 251:
                    break jumpLab$bg13074;
                  
                  case 250:
                    break jumpLab$bg13075;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 250:
                  counterExample1 = $var.i0.counterExample;
                  seed1 = $var.i0.seed;
                  counterExample2 = $var.i1.counterExample;
                  seed2 = $var.i1.seed;
                  break jumpLab$bg13072;
                
                default:
                  break jumpLab$bg13073;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 251:
                break jumpLab$bg13071;
              
              default:
                break jumpLab$bg13073;

            }
          }
          return new sk$Bool((true));
        }
        {
          var t$2 = seed1;
          var t$3 = seed2;
          if (t$2.$eq$eq(t$3).__value)
            {
              var t$4 = counterExample1;
              var t$5 = counterExample2;
              return t$4.$eq$eq(t$5);
            }
          else
            return new sk$Bool((false));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$QuickCheck$dtTestResult.prototype.property = function() {
  var t$ = this;
  return new (sk$QuickCheck$dtTestResultProperty)(t$);
};

sk$QuickCheck$dtTestResult.prototype.__bases = [
  sk$QuickCheck$dtTestResult
];

var sk$QuickCheck$dtTestable = sk.QuickCheck$dtTestable = function QuickCheck$dtTestable() {};

sk$QuickCheck$dtTestable.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTestable.prototype.__constructor = sk$QuickCheck$dtTestable;

sk$QuickCheck$dtTestable.prototype.__classname = 'QuickCheck.Testable';

sk$QuickCheck$dtTestable.prototype.$frozen = undefined;

sk$QuickCheck$dtTestable.prototype.__type_switch_id = -1;

sk$QuickCheck$dtTestable.prototype.__copy = function() {};

sk$QuickCheck$dtTestable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp82 = __cache.get(this);
  if (_tmp82 === undefined)
    {
      var _tmp82 = this.__copy();
      _tmp82.$frozen = true;
      __cache.set(this, _tmp82);
    }
  return _tmp82;
};

sk$QuickCheck$dtTestable.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTestable.prototype.__bases = [
  sk$QuickCheck$dtTestable
];

var sk$QuickCheck$dtTree = sk.QuickCheck$dtTree = function QuickCheck$dtTree(root, descendants) {
  this.root = root;
  this.descendants = descendants;
};

sk$QuickCheck$dtTree.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTree.prototype.__constructor = sk$QuickCheck$dtTree;

sk$QuickCheck$dtTree.prototype.__classname = 'QuickCheck.Tree';

sk$QuickCheck$dtTree.prototype.$frozen = true;

sk$QuickCheck$dtTree.prototype.__type_switch_id = 252;

sk$QuickCheck$dtTree.prototype.__copy = function() {
  return new (sk$QuickCheck$dtTree)(this.root, this.descendants);
};

sk$QuickCheck$dtTree.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp83 = __cache.get(this);
  if (_tmp83 === undefined)
    {
      var _tmp83 = this.__copy();
      _tmp83.$frozen = true;
      __cache.set(this, _tmp83);
      _tmp83.root = skip.deepFreeze(_tmp83.root, __cache);
      _tmp83.descendants = skip.deepFreeze(_tmp83.descendants, __cache);
    }
  return _tmp83;
};

sk$QuickCheck$dtTree.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTree.prototype.iterator = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    yield new sk$Some(t$.root);
    var t$1 = this;
    var t$2 = t$1.descendants;
    var t$3 = t$2.iterator();
    var $var = t$3.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg13104:{
        break$bg13104:{
          dowhile_else$bg13103:{
            do
              {
                jumpBlockOuterdowhile_cond$bg13105:{
                  dowhile_cond$bg13105:{
                    {
                      var t$4 = $var;
                      var var2 = t$4.next();
                      var descendant;
                      {
                        jumpBlockOuterjumpLab$bg13124:{
                          jumpLab$bg13124:{
                            jumpLab$bg13123:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg13123;
                                
                                case 205:
                                  descendant = var2.value;
                                  break jumpLab$bg13124;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg13105;
                            }
                          }
                          {
                            var t$5 = descendant;
                            var t$6 = t$5.iterator();
                            var var3 = t$6.values();
                            var var4 = new sk$Bool((true));
                            var break_val;
                            {
                              jumpBlockOuterbreak$bg13113:{
                                break$bg13113:{
                                  dowhile_else$bg13112:{
                                    do
                                      {
                                        jumpBlockOuterdowhile_cond$bg13114:{
                                          dowhile_cond$bg13114:{
                                            {
                                              var t$7 = var3;
                                              var var5 = t$7.next();
                                              var x;
                                              {
                                                jumpBlockOuterjumpLab$bg13120:{
                                                  jumpLab$bg13120:{
                                                    jumpLab$bg13119:{
                                                      switch (var5.__type_switch_id) {
                                                        case 204:
                                                          break jumpLab$bg13119;
                                                        
                                                        case 205:
                                                          x = var5.value;
                                                          break jumpLab$bg13120;
                                                        
                                                        default:
                                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                                      }
                                                    }
                                                    {
                                                      var4 = new sk$Bool((false));
                                                      break dowhile_cond$bg13114;
                                                    }
                                                  }
                                                  yield new sk$Some(x);
                                                  break jumpBlockOuterjumpLab$bg13120;
                                                }
                                              }
                                              break dowhile_cond$bg13114;
                                            }
                                          }
                                          if (var4.__value)
                                            {}
                                          else
                                            break dowhile_else$bg13112;
                                          break jumpBlockOuterdowhile_cond$bg13114;
                                        }
                                      }
                                    while (true);
                                  }
                                  break_val = sk.__.$void;
                                  break jumpBlockOuterbreak$bg13113;
                                }
                                {}
                                break jumpBlockOuterbreak$bg13113;
                              }
                            }
                          }
                          break jumpBlockOuterjumpLab$bg13124;
                        }
                      }
                      break dowhile_cond$bg13105;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg13103;
                  break jumpBlockOuterdowhile_cond$bg13105;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg13104;
        }
        {}
        break jumpBlockOuterbreak$bg13104;
      }
    }
    return undefined;
  });
};

sk$QuickCheck$dtTree.prototype.join = function() {
  var t$ = this;
  var outer = t$.descendants;
  var t$1 = this;
  var t$2 = t$1.root;
  var t$3 = t$2;
  var root = t$3.root;
  var t$4 = this;
  var t$5 = t$4.root;
  var t$6 = t$5;
  var inner = t$6.descendants;
  var t$7 = root;
  var t$8 = outer;
  var t$9 = t$8.map(((n) => 
  {
    var t$10 = n;
    return t$10.join();
  }));
  var t$11 = inner;
  var t$12 = t$9.concat(t$11);
  return new (sk$QuickCheck$dtTree)(t$7, t$12);
};

sk$QuickCheck$dtTree.prototype.map = function(f) {
  var t$ = f;
  var t$1 = this;
  var t$2 = t$1.root;
  var t$3 = t$(t$2);
  var t$4 = this;
  var t$5 = t$4.descendants;
  var t$6 = t$5.map(((node) => 
  {
    var t$7 = node;
    var t$8 = f;
    return t$7.map(t$8);
  }));
  return new (sk$QuickCheck$dtTree)(t$3, t$6);
};

sk$QuickCheck$dtTree.prototype.__bases = [
  sk$QuickCheck$dtTree
];

var sk$Random = sk.Random = function Random(s0, s1) {
  this.s0 = s0;
  this.s1 = s1;
};

sk$Random.prototype = Object.create(Object.prototype);

sk$Random.prototype.__constructor = sk$Random;

sk$Random.prototype.__classname = 'Random';

sk$Random.prototype.$frozen = false;

sk$Random.prototype.__type_switch_id = 253;

sk$Random.prototype.__copy = function() {
  return new (sk$Random)(this.s0, this.s1);
};

sk$Random.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp84 = __cache.get(this);
  if (_tmp84 === undefined)
    {
      var _tmp84 = this.__copy();
      _tmp84.$frozen = true;
      __cache.set(this, _tmp84);
      _tmp84.s0 = skip.deepFreeze(_tmp84.s0, __cache);
      _tmp84.s1 = skip.deepFreeze(_tmp84.s1, __cache);
    }
  return _tmp84;
};

sk$Random.prototype.__init = function(__named_parameters) {};

sk$Random.prototype.clone = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = this;
  var t$3 = t$2.s1;
  return new (sk$Random)(t$1, t$3);
};

sk$Random.create = function(state) {
  var t$ = this;
  var t$1 = state;
  return skip.deepFreeze(t$.mcreate(t$1), new Map());
};

sk$Random.createWithState = function(s0, s1) {
  var t$ = this;
  var t$1 = s0;
  var t$2 = s1;
  return skip.deepFreeze(t$.mcreateWithState(t$1, t$2), new Map());
};

sk$Random.mcreate = function(seed) {
  var t$ = seed;
  var t$1 = t$.$bg$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Random: Expected seed to be non-zero.')));
  var t$2 = seed;
  var rng = sk$Random$dtSplitmix64.mcreate(t$2);
  var s0 = new sk$Int(0.0, 0.0);
  var s1 = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg13190:{
      break$bg13190:{
        while_else$bg13189:{
          do
            {
              jumpBlockOutercontinue$bg13191:{
                continue$bg13191:{
                  {
                    var t$3 = s0;
                    if (t$3.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                      {
                        var t$4 = rng;
                        s0 = t$4.next();
                      }
                    else
                      break while_else$bg13189;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg13191;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg13190;
      }
      {}
      break jumpBlockOuterbreak$bg13190;
    }
  }
  {
    jumpBlockOuterbreak$bg13198:{
      break$bg13198:{
        while_else$bg13197:{
          do
            {
              jumpBlockOutercontinue$bg13199:{
                continue$bg13199:{
                  {
                    var t$5 = s1;
                    if (t$5.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                      {
                        var t$6 = rng;
                        s1 = t$6.next();
                      }
                    else
                      break while_else$bg13197;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg13199;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg13198;
      }
      {}
      break jumpBlockOuterbreak$bg13198;
    }
  }
  var t$7 = s0;
  var t$8 = s1;
  return new (sk$Random)(t$7, t$8);
};

sk$Random.mcreateWithState = function(s0, s1) {
  var t$ = s0;
  var t$1;
  if (t$.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$1 = new sk$Bool((true));
  else
    {
      var t$2 = s1;
      t$1 = t$2.$bg$eq(new sk$Int(0.0, 0.0));
    }
  var t$3 = t$1;
  sk$invariant(t$3, new sk$String(('Random: Expected at least one seed to be non-zero.')));
  var t$4 = s0;
  var t$5 = s1;
  return new (sk$Random)(t$4, t$5);
};

sk$Random.prototype.next = function() {
  var t$ = this;
  var s0 = t$.s0;
  var t$1 = this;
  var s1 = t$1.s1;
  var t$2 = s0;
  var t$3 = s1;
  var result = t$2.$pl(t$3);
  var t$4 = s1;
  var t$5 = s0;
  s1 = t$4.xor(t$5);
  var $var = this;
  var t$6 = $var;
  var t$7 = s0;
  var t$8 = sk$Random$dtrotl(t$7, new sk$Int(55.0, 0.0));
  var t$9 = s1;
  var t$10 = t$8.xor(t$9);
  var t$11 = s1;
  var t$12 = t$11.shl(new sk$Int(14.0, 0.0));
  var t$13 = t$6;
  t$13.s0 = t$10.xor(t$12);
  var var1 = this;
  var t$14 = var1;
  var t$15 = s1;
  var t$16 = t$14;
  t$16.s1 = sk$Random$dtrotl(t$15, new sk$Int(36.0, 0.0));
  return result;
};

sk$Random.prototype.perturb = function(n) {
  var $var = this;
  var t$ = $var;
  var t$1 = this;
  var t$2 = t$1.s0;
  var t$3 = n;
  var t$4 = t$;
  t$4.s0 = t$2.xor(t$3);
  var var1 = this;
  var t$5 = var1;
  var t$6 = this;
  var t$7 = t$6.s1;
  var t$8 = n;
  var t$9 = t$5;
  t$9.s1 = t$7.xor(t$8);
  return sk.__.$void;
};

sk$Random.prototype.random = function(start, end) {
  var t$ = end;
  var t$1 = start;
  var range = t$.$mi(t$1);
  var t$2 = end;
  var t$3 = start;
  var t$4 = t$2.$gt(t$3);
  sk$invariant(t$4, new sk$String(('Random.random(): Expected end to be greater than start.')));
  var t$5 = range;
  var t$6 = t$5.ule(sk$Int.max);
  sk$invariant(t$6, new sk$String(('Random.random(): Expected start/end delta to be less than maximum Int.')));
  var raw = new sk$Int(0.0, 0.0);
  var t$7 = range;
  var shift = t$7.clz();
  {
    jumpBlockOuterbreak$bg13253:{
      break$bg13253:{
        while_else$bg13252:{
          do
            {
              jumpBlockOutercontinue$bg13254:{
                continue$bg13254:{
                  {
                    var t$8 = this;
                    var t$9 = t$8.next();
                    var t$10 = shift;
                    raw = t$9.ushr(t$10);
                    var t$11 = raw;
                    var t$12 = range;
                    if (t$11.uge(t$12).__value)
                      {}
                    else
                      break while_else$bg13252;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg13254;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg13253;
      }
      {}
      break jumpBlockOuterbreak$bg13253;
    }
  }
  var t$13 = start;
  var t$14 = raw;
  return t$13.$pl(t$14);
};

sk$Random.prototype.randomBool = function() {
  var t$ = this;
  var t$1 = t$.next();
  return t$1.$gt(new sk$Int(0.0, 0.0));
};

sk$Random.prototype.randomFloat = function() {
  var t$ = this;
  var t$1 = new sk$Int(1.0, 0.0).shl(new sk$Int(53.0, 0.0));
  var next = t$.random(new sk$Int(0.0, 0.0), t$1);
  var t$2 = next;
  var t$3 = t$2.toFloat();
  var t$4 = new sk$Int(1.0, 0.0).shl(new sk$Int(53.0, 0.0));
  var t$5 = t$4.toFloat();
  var t$6 = new sk$Float((1.0)).$dv(t$5);
  return t$3.$ti(t$6);
};

sk$Random.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.toString();
  var t$3 = t$2.$pl(new sk$String((' ')));
  var t$4 = this;
  var t$5 = t$4.s1;
  return t$3.$pl(t$5);
};

sk$Random.prototype.__bases = [
  sk$Random
];

var sk$Random$dtSplitmix64 = sk.Random$dtSplitmix64 = function Random$dtSplitmix64(state) {
  this.state = state;
};

sk$Random$dtSplitmix64.prototype = Object.create(Object.prototype);

sk$Random$dtSplitmix64.prototype.__constructor = sk$Random$dtSplitmix64;

sk$Random$dtSplitmix64.prototype.__classname = 'Random.Splitmix64';

sk$Random$dtSplitmix64.prototype.$frozen = false;

sk$Random$dtSplitmix64.prototype.__type_switch_id = 254;

sk$Random$dtSplitmix64.prototype.__copy = function() {
  return new (sk$Random$dtSplitmix64)(this.state);
};

sk$Random$dtSplitmix64.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp85 = __cache.get(this);
  if (_tmp85 === undefined)
    {
      var _tmp85 = this.__copy();
      _tmp85.$frozen = true;
      __cache.set(this, _tmp85);
      _tmp85.state = skip.deepFreeze(_tmp85.state, __cache);
    }
  return _tmp85;
};

sk$Random$dtSplitmix64.prototype.__init = function(__named_parameters) {};

sk$Random$dtSplitmix64.mcreate = function(seed) {
  var t$ = seed;
  var t$1 = t$.$bg$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Splitmix64: Expected seed to be non-zero.')));
  var t$2 = seed;
  return new (sk$Random$dtSplitmix64)(t$2);
};

sk$Random$dtSplitmix64.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.state;
  var state = t$1.$pl(new sk$Int(2135587861.0, 2654435769.0));
  var t$2 = state;
  var t$3 = state;
  var t$4 = t$3.ushr(new sk$Int(30.0, 0.0));
  var t$5 = t$2.xor(t$4);
  var next = t$5.$ti(new sk$Int(484763065.0, 3210233709.0));
  var t$6 = next;
  var t$7 = next;
  var t$8 = t$7.ushr(new sk$Int(27.0, 0.0));
  var t$9 = t$6.xor(t$8);
  next = t$9.$ti(new sk$Int(321982955.0, 2496678331.0));
  var t$10 = next;
  var t$11 = next;
  var t$12 = t$11.ushr(new sk$Int(31.0, 0.0));
  next = t$10.xor(t$12);
  var $var = this;
  var t$13 = $var;
  var t$14 = t$13;
  t$14.state = state;
  return next;
};

sk$Random$dtSplitmix64.prototype.__bases = [
  sk$Random$dtSplitmix64
];

var sk$Ref = sk.Ref = function Ref(value) {
  this.value = value;
};

sk$Ref.prototype = Object.create(Object.prototype);

sk$Ref.prototype.__constructor = sk$Ref;

sk$Ref.prototype.__classname = 'Ref';

sk$Ref.prototype.$frozen = false;

sk$Ref.prototype.__type_switch_id = 255;

sk$Ref.prototype.__copy = function() {
  return new (sk$Ref)(this.value);
};

sk$Ref.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp86 = __cache.get(this);
  if (_tmp86 === undefined)
    {
      var _tmp86 = this.__copy();
      _tmp86.$frozen = true;
      __cache.set(this, _tmp86);
      _tmp86.value = skip.deepFreeze(_tmp86.value, __cache);
    }
  return _tmp86;
};

sk$Ref.prototype.__init = function(__named_parameters) {};

sk$Ref.prototype.set = function(value) {
  var $var = this;
  var t$ = $var;
  var t$1 = t$;
  t$1.value = value;
  return sk.__.$void;
};

sk$Ref.prototype.__bases = [
  sk$Ref
];

var sk$Regex = sk.Regex = function Regex() {};

sk$Regex.prototype = Object.create(Object.prototype);

sk$Regex.prototype.__constructor = sk$Regex;

sk$Regex.prototype.__classname = 'Regex';

sk$Regex.prototype.$frozen = true;

sk$Regex.prototype.__type_switch_id = 256;

sk$Regex.prototype.__init = function(__named_parameters) {};

sk$Regex.create = skip.createTrackedFunction(function(pattern, flags) {
  if (flags === undefined)
    flags = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = pattern;
  var t$1 = flags;
  sk$Regex.validate(t$, t$1);
  var t$2 = pattern;
  var t$3 = flags;
  return sk$Regex.createWithoutCheck(t$2, t$3);
}, true);

sk$Regex.createWithoutCheck = function(pattern, flags) {
  if (flags === undefined)
    flags = ((() => 
    {
      return new sk$String((''));
    })());
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Regex::createWithoutCheck')));
};

sk$Regex.validate = function(pattern, flags) {
  if (flags === undefined)
    flags = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = flags;
  var $var = t$.match(sk$Regex.flagRegex);
  var m;
  {
    jumpBlockOuterjumpLab$bg13649:{
      jumpLab$bg13649:{
        jumpLab$bg13648:{
          switch ($var.__type_switch_id) {
            case 205:
              m = $var.value;
              break jumpLab$bg13648;
            
            default:
              break jumpLab$bg13649;

          }
        }
        {
          var t$1 = m;
          var t$2 = t$1.get(new sk$Int(0.0, 0.0));
          var t$3 = new sk$String(('Unsupported flag ')).$pl(t$2);
          skip.throwException(sk, new (sk$InvalidRegex)(t$3));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13649;
    }
  }
  var t$4 = pattern;
  var var1 = t$4.match(sk$Regex.escapeRegex);
  var m1;
  {
    jumpBlockOuterjumpLab$bg13653:{
      jumpLab$bg13653:{
        jumpLab$bg13652:{
          switch (var1.__type_switch_id) {
            case 205:
              m1 = var1.value;
              break jumpLab$bg13652;
            
            default:
              break jumpLab$bg13653;

          }
        }
        {
          var t$5 = m1;
          var t$6 = t$5.get(new sk$Int(0.0, 0.0));
          var t$7 = new sk$String(('Unsupported escape sequence ')).$pl(t$6);
          skip.throwException(sk, new (sk$InvalidRegex)(t$7));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13653;
    }
  }
  var t$8 = pattern;
  var var2 = t$8.match(sk$Regex.octalRegex);
  var m2;
  {
    jumpBlockOuterjumpLab$bg13657:{
      jumpLab$bg13657:{
        jumpLab$bg13656:{
          switch (var2.__type_switch_id) {
            case 205:
              m2 = var2.value;
              break jumpLab$bg13656;
            
            default:
              break jumpLab$bg13657;

          }
        }
        {
          var t$9 = m2;
          var t$10 = t$9.get(new sk$Int(0.0, 0.0));
          var t$11 = new sk$String(('Unsupported octal notation ')).$pl(t$10);
          skip.throwException(sk, new (sk$InvalidRegex)(t$11));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13657;
    }
  }
  var t$12 = pattern;
  var var3 = t$12.match(sk$Regex.xEscapeRegex);
  var m3;
  {
    jumpBlockOuterjumpLab$bg13661:{
      jumpLab$bg13661:{
        jumpLab$bg13660:{
          switch (var3.__type_switch_id) {
            case 205:
              m3 = var3.value;
              break jumpLab$bg13660;
            
            default:
              break jumpLab$bg13661;

          }
        }
        {
          var t$13 = m3;
          var t$14 = t$13.get(new sk$Int(0.0, 0.0));
          var t$15 = new sk$String(('Unsupported escape sequence ')).$pl(t$14);
          skip.throwException(sk, new (sk$InvalidRegex)(t$15));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13661;
    }
  }
  var t$16 = pattern;
  var var4 = t$16.match(sk$Regex.cEscapeRegex);
  var m4;
  {
    jumpBlockOuterjumpLab$bg13665:{
      jumpLab$bg13665:{
        jumpLab$bg13664:{
          switch (var4.__type_switch_id) {
            case 205:
              m4 = var4.value;
              break jumpLab$bg13664;
            
            default:
              break jumpLab$bg13665;

          }
        }
        {
          var t$17 = m4;
          var t$18 = t$17.get(new sk$Int(0.0, 0.0));
          var t$19 = new sk$String(('Unsupported pattern ')).$pl(t$18);
          skip.throwException(sk, new (sk$InvalidRegex)(t$19));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13665;
    }
  }
  var t$20 = pattern;
  var var5 = t$20.match(sk$Regex.questionRegex);
  var m5;
  {
    jumpBlockOuterjumpLab$bg13669:{
      jumpLab$bg13669:{
        jumpLab$bg13668:{
          switch (var5.__type_switch_id) {
            case 205:
              m5 = var5.value;
              break jumpLab$bg13668;
            
            default:
              break jumpLab$bg13669;

          }
        }
        {
          var t$21 = m5;
          var t$22 = t$21.get(new sk$Int(0.0, 0.0));
          var t$23 = new sk$String(('Unsupported pattern ')).$pl(t$22);
          skip.throwException(sk, new (sk$InvalidRegex)(t$23));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13669;
    }
  }
  var t$24 = pattern;
  var var6 = t$24.match(sk$Regex.smartPlacementRegex);
  var m6;
  {
    jumpBlockOuterjumpLab$bg13673:{
      jumpLab$bg13673:{
        jumpLab$bg13672:{
          switch (var6.__type_switch_id) {
            case 205:
              m6 = var6.value;
              break jumpLab$bg13672;
            
            default:
              break jumpLab$bg13673;

          }
        }
        {
          var t$25 = m6;
          var t$26 = t$25.get(new sk$Int(0.0, 0.0));
          var t$27 = new sk$String(('Unsupported smart placement ')).$pl(t$26);
          skip.throwException(sk, new (sk$InvalidRegex)(t$27));
        }
      }
      {}
      break jumpBlockOuterjumpLab$bg13673;
    }
  }
  var t$28 = pattern;
  var var7 = t$28.match(sk$Regex.namedCharacterClassRegex);
  var m7;
  {
    jumpBlockOuterjumpLab$bg13677:{
      jumpLab$bg13677:{
        jumpLab$bg13676:{
          switch (var7.__type_switch_id) {
            case 205:
              m7 = var7.value;
              break jumpLab$bg13676;
            
            default:
              break jumpLab$bg13677;

          }
        }
        {
          var t$29 = m7;
          var t$30 = t$29.get(new sk$Int(0.0, 0.0));
          var t$31 = new sk$String(('Unsupported named character class ')).$pl(t$30);
          skip.throwException(sk, new (sk$InvalidRegex)(t$31));
        }
      }
      return sk.__.$void;
    }
  }
};

sk$Regex.prototype.__bases = [
  sk$Regex
];

sk$Regex = sk.Regex = skip.initNativeClass(sk, 'Regex', sk$Regex);

Object.defineProperty(sk$Regex, 'bs', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return new sk$String(('(?:[^\\\\]|^)(?:\\\\{2})*'));
    })());
    Object.defineProperty(sk$Regex, 'bs', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'cEscapeRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\\\c[^A-Z]')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'cEscapeRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'escapeRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\\\[aAeEgGkKpPQRuVzZ]')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'escapeRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'flagRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('[^im]')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'flagRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'namedCharacterClassRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\[:')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'namedCharacterClassRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'octalRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\\\0[0-9]+')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'octalRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'questionRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\(\\?[^=!:]')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'questionRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'smartPlacementRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\[\\^\\]')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'smartPlacementRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$Regex, 'xEscapeRegex', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      var t$ = sk$Regex.bs.$pl(new sk$String(('\\\\x\\{')));
      return sk$Regex.createWithoutCheck(t$, undefined);
    })());
    Object.defineProperty(sk$Regex, 'xEscapeRegex', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Regex$dtMatch = sk.Regex$dtMatch = function Regex$dtMatch(matches) {
  this.matches = matches;
};

sk$Regex$dtMatch.prototype = Object.create(Object.prototype);

sk$Regex$dtMatch.prototype.__constructor = sk$Regex$dtMatch;

sk$Regex$dtMatch.prototype.__classname = 'Regex.Match';

sk$Regex$dtMatch.prototype.$frozen = true;

sk$Regex$dtMatch.prototype.__type_switch_id = 257;

sk$Regex$dtMatch.prototype.__copy = function() {
  return new (sk$Regex$dtMatch)(this.matches);
};

sk$Regex$dtMatch.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp87 = __cache.get(this);
  if (_tmp87 === undefined)
    {
      var _tmp87 = this.__copy();
      _tmp87.$frozen = true;
      __cache.set(this, _tmp87);
      _tmp87.matches = skip.deepFreeze(_tmp87.matches, __cache);
    }
  return _tmp87;
};

sk$Regex$dtMatch.prototype.__init = function(__named_parameters) {};

sk$Regex$dtMatch.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Regex$dtMatch.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg13699:{
      jumpLab$bg13699:{
        jumpLab$bg13698:{
          switch (other.__type_switch_id) {
            case 257:
              otherTyped = other;
              break jumpLab$bg13698;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.matches;
          var t$2 = otherTyped;
          var t$3 = t$2.matches;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Regex$dtMatch.prototype.get = function(i) {
  var t$ = this;
  var t$1 = t$.matches;
  var t$2 = i;
  return t$1.get(t$2);
};

sk$Regex$dtMatch.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.matches;
  return t$1.size();
};

sk$Regex$dtMatch.prototype.toArray = function() {
  var t$ = this;
  return t$.matches;
};

sk$Regex$dtMatch.prototype.__bases = [
  sk$Regex$dtMatch
];

var sk$Result = sk.Result = function Result() {};

sk$Result.prototype = Object.create(Object.prototype);

sk$Result.prototype.__constructor = sk$Result;

sk$Result.prototype.__classname = 'Result';

sk$Result.prototype.$frozen = undefined;

sk$Result.prototype.__type_switch_id = -1;

sk$Result.prototype.__copy = function() {};

sk$Result.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp88 = __cache.get(this);
  if (_tmp88 === undefined)
    {
      var _tmp88 = this.__copy();
      _tmp88.$frozen = true;
      __cache.set(this, _tmp88);
    }
  return _tmp88;
};

sk$Result.prototype.__init = function(__named_parameters) {};

sk$Result.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Result.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var $var = new (sk$Tuple2)(t$, t$1);
  var value2;
  var error2;
  var error1;
  var value1;
  {
    jumpBlockOuterjumpLab$bg13724:{
      jumpLab$bg13724:{
        jumpLab$bg13723:{
          jumpLab$bg13722:{
            jumpLab$bg13725:{
              jumpLab$bg13726:{
                jumpLab$bg13727:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg13727;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 259:
                    break jumpLab$bg13725;
                  
                  case 258:
                    break jumpLab$bg13726;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 258:
                  error1 = $var.i0.error;
                  error2 = $var.i1.error;
                  break jumpLab$bg13723;
                
                default:
                  break jumpLab$bg13724;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 259:
                value1 = $var.i0.value;
                value2 = $var.i1.value;
                break jumpLab$bg13722;
              
              default:
                break jumpLab$bg13724;

            }
          }
          {
            var t$2 = value1;
            var t$3 = value2;
            return t$2.$eq$eq(t$3);
          }
        }
        {
          var t$4 = error1;
          var t$5 = error2;
          return t$4.$eq$eq(t$5);
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Result.generator = function(successGenerator, failureGenerator) {
  var t$ = successGenerator;
  var t$1 = failureGenerator;
  return new (sk$QuickCheck$dtResultGenerator)(t$, t$1);
};

sk$Result.guard = function(f) {
  try {
    {
      var t$ = f;
      var t$1 = t$();
      return new (sk$Success)(t$1);
    }
  }catch ($var){
    {
      var exn;
      {
        jumpBlockOuterjumpLab$bg13737:{
          jumpLab$bg13737:{
            {
              exn = $var;
              break jumpLab$bg13737;
            }
          }
          {
            var t$2 = exn;
            return new (sk$Failure)(t$2);
          }
        }
      }
    }
  }
};

sk$Result.prototype.__bases = [
  sk$Result
];

var sk$Runtime$dtGCPointer = sk.Runtime$dtGCPointer = function Runtime$dtGCPointer() {};

sk$Runtime$dtGCPointer.prototype = Object.create(Object.prototype);

sk$Runtime$dtGCPointer.prototype.__constructor = sk$Runtime$dtGCPointer;

sk$Runtime$dtGCPointer.prototype.__classname = 'Runtime.GCPointer';

sk$Runtime$dtGCPointer.prototype.$frozen = true;

sk$Runtime$dtGCPointer.prototype.__type_switch_id = 260;

sk$Runtime$dtGCPointer.prototype.__init = function(__named_parameters) {};

sk$Runtime$dtGCPointer.prototype.__bases = [
  sk$Runtime$dtGCPointer
];

sk$Runtime$dtGCPointer = sk.Runtime$dtGCPointer = skip.initNativeClass(sk, 'Runtime.GCPointer', sk$Runtime$dtGCPointer);

var sk$Runtime$dtHhvmHandle = sk.Runtime$dtHhvmHandle = function Runtime$dtHhvmHandle() {};

sk$Runtime$dtHhvmHandle.prototype = Object.create(Object.prototype);

sk$Runtime$dtHhvmHandle.prototype.__constructor = sk$Runtime$dtHhvmHandle;

sk$Runtime$dtHhvmHandle.prototype.__classname = 'Runtime.HhvmHandle';

sk$Runtime$dtHhvmHandle.prototype.$frozen = true;

sk$Runtime$dtHhvmHandle.prototype.__type_switch_id = 261;

sk$Runtime$dtHhvmHandle.prototype.__init = function(__named_parameters) {};

sk$Runtime$dtHhvmHandle.prototype.inspect = function() {
  var t$ = this;
  var t$1 = sk$Runtime$dtinspectHandle(t$);
  return new (sk$InspectLiteral)(t$1);
};

sk$Runtime$dtHhvmHandle.prototype.__bases = [
  sk$Runtime$dtHhvmHandle
];

sk$Runtime$dtHhvmHandle = sk.Runtime$dtHhvmHandle = skip.initNativeClass(sk, 'Runtime.HhvmHandle', sk$Runtime$dtHhvmHandle);

var sk$Runtime$dtHhvmShapeHandle = sk.Runtime$dtHhvmShapeHandle = function Runtime$dtHhvmShapeHandle() {};

sk$Runtime$dtHhvmShapeHandle.prototype = Object.create(Object.prototype);

sk$Runtime$dtHhvmShapeHandle.prototype.__constructor = sk$Runtime$dtHhvmShapeHandle;

sk$Runtime$dtHhvmShapeHandle.prototype.__classname = 'Runtime.HhvmShapeHandle';

sk$Runtime$dtHhvmShapeHandle.prototype.$frozen = true;

sk$Runtime$dtHhvmShapeHandle.prototype.__type_switch_id = 262;

sk$Runtime$dtHhvmShapeHandle.prototype.__copy = function() {
  return new (sk$Runtime$dtHhvmShapeHandle)();
};

sk$Runtime$dtHhvmShapeHandle.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp89 = __cache.get(this);
  if (_tmp89 === undefined)
    {
      var _tmp89 = this.__copy();
      _tmp89.$frozen = true;
      __cache.set(this, _tmp89);
    }
  return _tmp89;
};

sk$Runtime$dtHhvmShapeHandle.prototype.__init = function(__named_parameters) {};

sk$Runtime$dtHhvmShapeHandle.prototype.__bases = [
  sk$Runtime$dtHhvmShapeHandle
];

var sk$Runtime$dtNonGCPointer = sk.Runtime$dtNonGCPointer = function Runtime$dtNonGCPointer() {};

sk$Runtime$dtNonGCPointer.prototype = Object.create(Object.prototype);

sk$Runtime$dtNonGCPointer.prototype.__constructor = sk$Runtime$dtNonGCPointer;

sk$Runtime$dtNonGCPointer.prototype.__classname = 'Runtime.NonGCPointer';

sk$Runtime$dtNonGCPointer.prototype.$frozen = true;

sk$Runtime$dtNonGCPointer.prototype.__type_switch_id = 263;

sk$Runtime$dtNonGCPointer.prototype.__init = function(__named_parameters) {};

sk$Runtime$dtNonGCPointer.zero = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Runtime.NonGCPointer::zero')));
};

sk$Runtime$dtNonGCPointer.prototype.__bases = [
  sk$Runtime$dtNonGCPointer
];

sk$Runtime$dtNonGCPointer = sk.Runtime$dtNonGCPointer = skip.initNativeClass(sk, 'Runtime.NonGCPointer', sk$Runtime$dtNonGCPointer);

var sk$Sequence = sk.Sequence = function Sequence() {};

sk$Sequence.prototype = Object.create(Object.prototype);

sk$Sequence.prototype.__constructor = sk$Sequence;

sk$Sequence.prototype.__classname = 'Sequence';

sk$Sequence.prototype.$frozen = undefined;

sk$Sequence.prototype.__type_switch_id = -1;

sk$Sequence.prototype.__copy = function() {};

sk$Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp90 = __cache.get(this);
  if (_tmp90 === undefined)
    {
      var _tmp90 = this.__copy();
      _tmp90.$frozen = true;
      __cache.set(this, _tmp90);
    }
  return _tmp90;
};

sk$Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = p;
    var t$3 = x;
    var t$4 = t$2(t$3);
    return t$4.$bg();
  }));
  return t$1.isNone();
};

sk$Sequence.prototype.any = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.find(t$1);
  return t$2.isSome();
};

sk$Sequence.prototype.collect = function(cls) {
  var t$ = cls;
  var t$1 = this;
  var t$2 = t$1.iterator();
  return t$.createFromIterator(t$2);
};

sk$Sequence.prototype.drop = function(n) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = n;
  var t$3 = t$1.drop(t$2);
  return t$3.collect(sk$Vector);
};

sk$Sequence.prototype.dropWhile = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = p;
  var t$3 = t$1.dropWhile(t$2);
  return t$3.collect(sk$Vector);
};

sk$Sequence.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = f;
  return t$1.each(t$2);
};

sk$Sequence.prototype.eachWithIndex = function(f) {
  var index = new sk$Int(0.0, 0.0);
  var t$ = this;
  return t$.each(((x) => 
  {
    var t$1 = f;
    var t$2 = index;
    var t$3 = x;
    t$1(t$2, t$3);
    var t$4 = index;
    index = t$4.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
};

sk$Sequence.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = p;
  var t$3 = t$1.filter(t$2);
  return t$3.collect(sk$Vector);
};

sk$Sequence.prototype.filterNone = function() {
  var result = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  var t$1 = t$.values();
  t$1.each(((item) => 
  {
    var x;
    {
      jumpBlockOuterjumpLab$bg13785:{
        jumpLab$bg13785:{
          jumpLab$bg13784:{
            switch (item.__type_switch_id) {
              case 205:
                x = item.value;
                break jumpLab$bg13784;
              
              case 204:
                break jumpLab$bg13785;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$2 = result;
            var t$3 = x;
            return t$2.push(t$3);
          }
        }
        return sk.__.$void;
      }
    }
  }));
  var t$4 = result;
  return t$4;
};

sk$Sequence.prototype.find = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = p;
  return t$1.find(t$2);
};

sk$Sequence.prototype.findIndex = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.enumerated();
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg13795:{
      break$bg13795:{
        dowhile_else$bg13794:{
          do
            {
              jumpBlockOuterdowhile_cond$bg13796:{
                dowhile_cond$bg13796:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var item;
                    var index;
                    {
                      jumpBlockOuterjumpLab$bg13805:{
                        jumpLab$bg13805:{
                          jumpLab$bg13804:{
                            jumpLab$bg13806:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg13804;
                                
                                case 205:
                                  break jumpLab$bg13806;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                index = var2.value.i0;
                                item = var2.value.i1;
                                break jumpLab$bg13805;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg13796;
                          }
                        }
                        {
                          var t$4 = p;
                          var t$5 = item;
                          if (t$4(t$5).__value)
                            {
                              var t$6 = index;
                              break_val = new (sk$Some)(t$6);
                              break break$bg13795;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg13805;
                      }
                    }
                    break dowhile_cond$bg13796;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg13794;
                break jumpBlockOuterdowhile_cond$bg13796;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg13795;
      }
      {}
      break jumpBlockOuterbreak$bg13795;
    }
  }
  return break_val;
};

sk$Sequence.prototype.first = function() {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.next();
  return t$2.fromSome(undefined);
};

sk$Sequence.prototype.flatMap = function(s) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.flatMap(((item) => 
  {
    var t$3 = s;
    var t$4 = item;
    var t$5 = t$3(t$4);
    return t$5.values();
  }));
  return t$2.collect(sk$Vector);
};

sk$Sequence.prototype.flatten = function() {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.flatMap(((item) => 
  {
    var t$3 = item;
    var t$4 = t$3;
    return t$4.values();
  }));
  return t$2.collect(sk$Vector);
};

sk$Sequence.prototype.foldl = function(f, init) {
  var t$ = this;
  var t$1 = f;
  var t$2 = init;
  return t$.reduce(t$1, t$2);
};

sk$Sequence.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Sequence.prototype.iterator = function() {
  var t$ = this;
  return t$.values();
};

sk$Sequence.prototype.join = function(separator) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.collect(sk$Vector);
  var t$3 = separator;
  return t$2.join(t$3);
};

sk$Sequence.prototype.map = function(s) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = s;
  var t$3 = t$1.map(t$2);
  return t$3.collect(sk$Vector);
};

sk$Sequence.prototype.mapAcc = function(f, acc) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.map(((x) => 
  {
    var t$3 = f;
    var t$4 = acc;
    var t$5 = x;
    var $var = t$3(t$4, t$5);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg13847:{
        jumpLab$bg13847:{
          switch ($var.__type_switch_id) {
            case 392:
              var1 = $var.i0;
              var2 = $var.i1;
              break jumpLab$bg13847;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var y = var2;
          acc = var1;
          return y;
        }
      }
    }
  }));
  var $new = t$2.collect(sk$Vector);
  var t$6 = acc;
  var t$7 = $new;
  return new (sk$Tuple2)(t$6, t$7);
};

sk$Sequence.prototype.mapWithIndex = function(s) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = t$1.map(((item) => 
  {
    var t$3 = index;
    index = t$3.$pl(new sk$Int(1.0, 0.0));
    var t$4 = s;
    var t$5 = index;
    var t$6 = item;
    return t$4(t$5, t$6);
  }));
  return t$2.collect(sk$Vector);
};

sk$Sequence.prototype.max = function() {
  var t$ = this;
  return t$.maxBy(((_tmp13857) => 
  {
    return sk$id(_tmp13857);
  }));
};

sk$Sequence.prototype.maxBy = function(selector) {
  var currentMax = singleton$None;
  var t$ = this;
  t$.each(((x) => 
  {
    var t$1 = selector;
    var t$2 = x;
    var value = t$1(t$2);
    var max;
    {
      jumpBlockOuterjumpLab$bg13870:{
        jumpLab$bg13870:{
          jumpLab$bg13869:{
            jumpLab$bg13874:{
              switch (currentMax.__type_switch_id) {
                case 205:
                  break jumpLab$bg13874;
                
                default:
                  break jumpLab$bg13870;

              }
            }
            switch (currentMax.value.__type_switch_id) {
              case 392:
                max = currentMax.value.i0;
                var $var = new sk$Bool((false));
                var t$3 = value;
                var t$4 = max;
                $var = t$3.$lt$eq(t$4);
                if ($var.__value)
                  break jumpLab$bg13869;
                else
                  break jumpLab$bg13870;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          return sk.__.$void;
        }
        {
          var t$5 = value;
          var t$6 = x;
          var t$7 = new (sk$Tuple2)(t$5, t$6);
          currentMax = new (sk$Some)(t$7);
          return sk.__.$void;
        }
      }
    }
  }));
  var t$8 = currentMax;
  return t$8.map(((pair) => 
  {
    var t$9 = pair;
    return t$9.i1;
  }));
};

sk$Sequence.prototype.min = function() {
  var t$ = this;
  return t$.minBy(((_tmp13877) => 
  {
    return sk$id(_tmp13877);
  }));
};

sk$Sequence.prototype.minBy = function(selector) {
  var currentMin = singleton$None;
  var t$ = this;
  t$.each(((x) => 
  {
    var t$1 = selector;
    var t$2 = x;
    var value = t$1(t$2);
    var min;
    {
      jumpBlockOuterjumpLab$bg13890:{
        jumpLab$bg13890:{
          jumpLab$bg13889:{
            jumpLab$bg13894:{
              switch (currentMin.__type_switch_id) {
                case 205:
                  break jumpLab$bg13894;
                
                default:
                  break jumpLab$bg13890;

              }
            }
            switch (currentMin.value.__type_switch_id) {
              case 392:
                min = currentMin.value.i0;
                var $var = new sk$Bool((false));
                var t$3 = value;
                var t$4 = min;
                $var = t$3.$gt$eq(t$4);
                if ($var.__value)
                  break jumpLab$bg13889;
                else
                  break jumpLab$bg13890;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          return sk.__.$void;
        }
        {
          var t$5 = value;
          var t$6 = x;
          var t$7 = new (sk$Tuple2)(t$5, t$6);
          currentMin = new (sk$Some)(t$7);
          return sk.__.$void;
        }
      }
    }
  }));
  var t$8 = currentMin;
  return t$8.map(((pair) => 
  {
    var t$9 = pair;
    return t$9.i1;
  }));
};

sk$Sequence.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((x) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = x;
    result = t$1(t$2, t$3);
    return sk.__.$void;
  }));
  return result;
};

sk$Sequence.prototype.reversed = function() {
  var t$ = this;
  var t$1 = t$.values();
  return sk$Vector.reverseFromIterator(t$1);
};

sk$Sequence.prototype.sorted = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortedBy(((_tmp13903) => 
  {
    return sk$id(_tmp13903);
  }), t$1);
};

sk$Sequence.prototype.sortedBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = t$.values();
  var result = sk$Vector.mcreateFromIterator(t$1);
  var t$2 = result;
  var t$3 = selector;
  var t$4 = compare;
  t$2.sortBy(t$3, t$4);
  var t$5 = result;
  return t$5;
};

sk$Sequence.prototype.sumFloat = function() {
  var t$ = this;
  return t$.reduce(((acc, x) => 
  {
    var t$1 = acc;
    var t$2 = x;
    return t$1.$pl(t$2);
  }), new sk$Float((0.0)));
};

sk$Sequence.prototype.sumInt = function() {
  var t$ = this;
  return t$.reduce(((acc, x) => 
  {
    var t$1 = acc;
    var t$2 = x;
    return t$1.$pl(t$2);
  }), new sk$Int(0.0, 0.0));
};

sk$Sequence.prototype.take = function(n) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = n;
  var t$3 = t$1.take(t$2);
  return t$3.collect(sk$Vector);
};

sk$Sequence.prototype.takeWhile = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = p;
  var t$3 = t$1.takeWhile(t$2);
  return t$3.collect(sk$Vector);
};

sk$Sequence.prototype.unzip = function() {
  var t$ = this;
  return t$.unzipWith(((_tmp13930) => 
  {
    return sk$id(_tmp13930);
  }));
};

sk$Sequence.prototype.unzipWith = function(f) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var v0 = sk$Vector.mcreate(t$1);
  var t$2 = sz;
  var v1 = sk$Vector.mcreate(t$2);
  var t$3 = this;
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg13937:{
      break$bg13937:{
        dowhile_else$bg13936:{
          do
            {
              jumpBlockOuterdowhile_cond$bg13938:{
                dowhile_cond$bg13938:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg13956:{
                        jumpLab$bg13956:{
                          jumpLab$bg13955:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg13955;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg13956;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg13938;
                          }
                        }
                        {
                          var t$5 = f;
                          var t$6 = x;
                          var p = t$5(t$6);
                          var t$7 = v0;
                          var t$8 = p;
                          var t$9 = t$8.i0;
                          t$7.push(t$9);
                          var t$10 = v1;
                          var t$11 = p;
                          var t$12 = t$11.i1;
                          t$10.push(t$12);
                        }
                        break jumpBlockOuterjumpLab$bg13956;
                      }
                    }
                    break dowhile_cond$bg13938;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg13936;
                break jumpBlockOuterdowhile_cond$bg13938;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg13937;
      }
      {}
      break jumpBlockOuterbreak$bg13937;
    }
  }
  var t$13 = v0;
  var t$14 = t$13;
  var t$15 = v1;
  var t$16 = t$15;
  return new (sk$Tuple2)(t$14, t$16);
};

sk$Sequence.prototype.zip = function(second) {
  var t$ = this;
  var t$1 = second;
  return t$.zipWith(t$1, ((t, u) => 
  {
    var t$2 = t;
    var t$3 = u;
    return new (sk$Tuple2)(t$2, t$3);
  }));
};

sk$Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence.prototype.zipReduce = function(second, f, init) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = second;
  var t$3 = t$2;
  var t$4 = t$3.values();
  var t$5 = t$1.zip(t$4);
  var t$6 = init;
  return t$5.reduce(((r, p) => 
  {
    var t$7 = f;
    var t$8 = r;
    var t$9 = p;
    var t$10 = t$9.i0;
    var t$11 = p;
    var t$12 = t$11.i1;
    return t$7(t$8, t$10, t$12);
  }), t$6);
};

sk$Sequence.prototype.zipWith = function(second, s) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = second;
  var t$3 = t$2;
  var t$4 = t$3.values();
  var t$5 = s;
  var t$6 = t$1.zipWith(t$4, t$5);
  return t$6.collect(sk$Vector);
};

sk$Sequence.prototype.__bases = [
  sk$Sequence
];

var sk$Serialization$dtFormat = sk.Serialization$dtFormat = function Serialization$dtFormat() {};

sk$Serialization$dtFormat.prototype = Object.create(Object.prototype);

sk$Serialization$dtFormat.prototype.__constructor = sk$Serialization$dtFormat;

sk$Serialization$dtFormat.prototype.__classname = 'Serialization.Format';

sk$Serialization$dtFormat.prototype.$frozen = undefined;

sk$Serialization$dtFormat.prototype.__type_switch_id = -1;

sk$Serialization$dtFormat.prototype.__copy = function() {
  return new (sk$Serialization$dtFormat)();
};

sk$Serialization$dtFormat.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp91 = __cache.get(this);
  if (_tmp91 === undefined)
    {
      var _tmp91 = this.__copy();
      _tmp91.$frozen = true;
      __cache.set(this, _tmp91);
    }
  return _tmp91;
};

sk$Serialization$dtFormat.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtFormat.prototype.__bases = [
  sk$Serialization$dtFormat
];

var sk$Serialization$dtKeyedSequenceReader = sk.Serialization$dtKeyedSequenceReader = function Serialization$dtKeyedSequenceReader() {};

sk$Serialization$dtKeyedSequenceReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtKeyedSequenceReader.prototype.__constructor = sk$Serialization$dtKeyedSequenceReader;

sk$Serialization$dtKeyedSequenceReader.prototype.__classname = 'Serialization.KeyedSequenceReader';

sk$Serialization$dtKeyedSequenceReader.prototype.$frozen = undefined;

sk$Serialization$dtKeyedSequenceReader.prototype.__type_switch_id = -1;

sk$Serialization$dtKeyedSequenceReader.prototype.__copy = function() {
  return new (sk$Serialization$dtKeyedSequenceReader)();
};

sk$Serialization$dtKeyedSequenceReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp92 = __cache.get(this);
  if (_tmp92 === undefined)
    {
      var _tmp92 = this.__copy();
      _tmp92.$frozen = true;
      __cache.set(this, _tmp92);
    }
  return _tmp92;
};

sk$Serialization$dtKeyedSequenceReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtKeyedSequenceReader.prototype.__bases = [
  sk$Serialization$dtKeyedSequenceReader
];

var sk$Serialization$dtKeyedSequenceWriter = sk.Serialization$dtKeyedSequenceWriter = function Serialization$dtKeyedSequenceWriter() {};

sk$Serialization$dtKeyedSequenceWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtKeyedSequenceWriter.prototype.__constructor = sk$Serialization$dtKeyedSequenceWriter;

sk$Serialization$dtKeyedSequenceWriter.prototype.__classname = 'Serialization.KeyedSequenceWriter';

sk$Serialization$dtKeyedSequenceWriter.prototype.$frozen = undefined;

sk$Serialization$dtKeyedSequenceWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtKeyedSequenceWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtKeyedSequenceWriter)();
};

sk$Serialization$dtKeyedSequenceWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp93 = __cache.get(this);
  if (_tmp93 === undefined)
    {
      var _tmp93 = this.__copy();
      _tmp93.$frozen = true;
      __cache.set(this, _tmp93);
    }
  return _tmp93;
};

sk$Serialization$dtKeyedSequenceWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtKeyedSequenceWriter.prototype.__bases = [
  sk$Serialization$dtKeyedSequenceWriter
];

var sk$Serialization$dtReader = sk.Serialization$dtReader = function Serialization$dtReader() {};

sk$Serialization$dtReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtReader.prototype.__constructor = sk$Serialization$dtReader;

sk$Serialization$dtReader.prototype.__classname = 'Serialization.Reader';

sk$Serialization$dtReader.prototype.$frozen = undefined;

sk$Serialization$dtReader.prototype.__type_switch_id = -1;

sk$Serialization$dtReader.prototype.__copy = function() {
  return new (sk$Serialization$dtReader)();
};

sk$Serialization$dtReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp94 = __cache.get(this);
  if (_tmp94 === undefined)
    {
      var _tmp94 = this.__copy();
      _tmp94.$frozen = true;
      __cache.set(this, _tmp94);
    }
  return _tmp94;
};

sk$Serialization$dtReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtReader.prototype.__bases = [
  sk$Serialization$dtReader
];

var sk$Serialization$dtRecordReader = sk.Serialization$dtRecordReader = function Serialization$dtRecordReader() {};

sk$Serialization$dtRecordReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtRecordReader.prototype.__constructor = sk$Serialization$dtRecordReader;

sk$Serialization$dtRecordReader.prototype.__classname = 'Serialization.RecordReader';

sk$Serialization$dtRecordReader.prototype.$frozen = undefined;

sk$Serialization$dtRecordReader.prototype.__type_switch_id = -1;

sk$Serialization$dtRecordReader.prototype.__copy = function() {
  return new (sk$Serialization$dtRecordReader)();
};

sk$Serialization$dtRecordReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp95 = __cache.get(this);
  if (_tmp95 === undefined)
    {
      var _tmp95 = this.__copy();
      _tmp95.$frozen = true;
      __cache.set(this, _tmp95);
    }
  return _tmp95;
};

sk$Serialization$dtRecordReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtRecordReader.prototype.__bases = [
  sk$Serialization$dtRecordReader
];

var sk$Serialization$dtRecordWriter = sk.Serialization$dtRecordWriter = function Serialization$dtRecordWriter() {};

sk$Serialization$dtRecordWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtRecordWriter.prototype.__constructor = sk$Serialization$dtRecordWriter;

sk$Serialization$dtRecordWriter.prototype.__classname = 'Serialization.RecordWriter';

sk$Serialization$dtRecordWriter.prototype.$frozen = undefined;

sk$Serialization$dtRecordWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtRecordWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtRecordWriter)();
};

sk$Serialization$dtRecordWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp96 = __cache.get(this);
  if (_tmp96 === undefined)
    {
      var _tmp96 = this.__copy();
      _tmp96.$frozen = true;
      __cache.set(this, _tmp96);
    }
  return _tmp96;
};

sk$Serialization$dtRecordWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtRecordWriter.prototype.__bases = [
  sk$Serialization$dtRecordWriter
];

var sk$Serialization$dtSequenceReader = sk.Serialization$dtSequenceReader = function Serialization$dtSequenceReader() {};

sk$Serialization$dtSequenceReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtSequenceReader.prototype.__constructor = sk$Serialization$dtSequenceReader;

sk$Serialization$dtSequenceReader.prototype.__classname = 'Serialization.SequenceReader';

sk$Serialization$dtSequenceReader.prototype.$frozen = undefined;

sk$Serialization$dtSequenceReader.prototype.__type_switch_id = -1;

sk$Serialization$dtSequenceReader.prototype.__copy = function() {
  return new (sk$Serialization$dtSequenceReader)();
};

sk$Serialization$dtSequenceReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp97 = __cache.get(this);
  if (_tmp97 === undefined)
    {
      var _tmp97 = this.__copy();
      _tmp97.$frozen = true;
      __cache.set(this, _tmp97);
    }
  return _tmp97;
};

sk$Serialization$dtSequenceReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtSequenceReader.prototype.__bases = [
  sk$Serialization$dtSequenceReader
];

var sk$Serialization$dtSequenceWriter = sk.Serialization$dtSequenceWriter = function Serialization$dtSequenceWriter() {};

sk$Serialization$dtSequenceWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtSequenceWriter.prototype.__constructor = sk$Serialization$dtSequenceWriter;

sk$Serialization$dtSequenceWriter.prototype.__classname = 'Serialization.SequenceWriter';

sk$Serialization$dtSequenceWriter.prototype.$frozen = undefined;

sk$Serialization$dtSequenceWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtSequenceWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtSequenceWriter)();
};

sk$Serialization$dtSequenceWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp98 = __cache.get(this);
  if (_tmp98 === undefined)
    {
      var _tmp98 = this.__copy();
      _tmp98.$frozen = true;
      __cache.set(this, _tmp98);
    }
  return _tmp98;
};

sk$Serialization$dtSequenceWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtSequenceWriter.prototype.__bases = [
  sk$Serialization$dtSequenceWriter
];

var sk$Serialization$dtSerializer = sk.Serialization$dtSerializer = function Serialization$dtSerializer() {};

sk$Serialization$dtSerializer.prototype = Object.create(Object.prototype);

sk$Serialization$dtSerializer.prototype.__constructor = sk$Serialization$dtSerializer;

sk$Serialization$dtSerializer.prototype.__classname = 'Serialization.Serializer';

sk$Serialization$dtSerializer.prototype.$frozen = undefined;

sk$Serialization$dtSerializer.prototype.__type_switch_id = -1;

sk$Serialization$dtSerializer.prototype.__copy = function() {};

sk$Serialization$dtSerializer.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp99 = __cache.get(this);
  if (_tmp99 === undefined)
    {
      var _tmp99 = this.__copy();
      _tmp99.$frozen = true;
      __cache.set(this, _tmp99);
    }
  return _tmp99;
};

sk$Serialization$dtSerializer.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtSerializer.prototype.__bases = [
  sk$Serialization$dtSerializer
];

var sk$Serialization$dtTestRecord = sk.Serialization$dtTestRecord = function Serialization$dtTestRecord(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Serialization$dtTestRecord.prototype = Object.create(Object.prototype);

sk$Serialization$dtTestRecord.prototype.__constructor = sk$Serialization$dtTestRecord;

sk$Serialization$dtTestRecord.prototype.__classname = 'Serialization.TestRecord';

sk$Serialization$dtTestRecord.prototype.$frozen = false;

sk$Serialization$dtTestRecord.prototype.__type_switch_id = 287;

sk$Serialization$dtTestRecord.prototype.__copy = function() {
  return new (sk$Serialization$dtTestRecord)(this);
};

sk$Serialization$dtTestRecord.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp100 = __cache.get(this);
  if (_tmp100 === undefined)
    {
      var _tmp100 = this.__copy();
      _tmp100.$frozen = true;
      __cache.set(this, _tmp100);
      _tmp100.str = skip.deepFreeze(_tmp100.str, __cache);
      _tmp100.int = skip.deepFreeze(_tmp100.int, __cache);
      _tmp100.opt = skip.deepFreeze(_tmp100.opt, __cache);
    }
  return _tmp100;
};

sk$Serialization$dtTestRecord.prototype.__init = function(__named_parameters) {
  this.str = __named_parameters.str;
  this.int = __named_parameters.int;
  this.opt = __named_parameters.opt;
};

sk$Serialization$dtTestRecord.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtTestRecord.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15572:{
      jumpLab$bg15572:{
        jumpLab$bg15571:{
          switch (other.__type_switch_id) {
            case 287:
              otherTyped = other;
              break jumpLab$bg15571;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.str;
          var t$2 = otherTyped;
          var t$3 = t$2.str;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.int;
          var t$7 = otherTyped;
          var t$8 = t$7.int;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$10 = this;
          var t$11 = t$10.opt;
          var t$12 = otherTyped;
          var t$13 = t$12.opt;
          var t$14 = sk$isEqual(t$11, t$13);
          if (t$14.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtTestRecord.prototype.toString = function() {
  var t$ = new sk$String(('TestRecord(')).toString();
  var t$1 = this;
  var t$2 = t$1.str;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((', ')).toString();
  var t$5 = this;
  var t$6 = t$5.int;
  var t$7 = t$6.toString();
  var t$8 = new sk$String((', ')).toString();
  var t$9 = this;
  var t$10 = t$9.opt;
  var t$11 = t$10.toString();
  var t$12 = new sk$String((')')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7,
    t$8,
    t$11,
    t$12
  ]));
};

sk$Serialization$dtTestRecord.prototype.__bases = [
  sk$Serialization$dtTestRecord
];

Object.defineProperty(sk$Serialization$dtTestRecord, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$Serialization$dtTestRecordMetaClass;
    })());
    Object.defineProperty(sk$Serialization$dtTestRecord, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$Serialization$dtTupleReader = sk.Serialization$dtTupleReader = function Serialization$dtTupleReader() {};

sk$Serialization$dtTupleReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtTupleReader.prototype.__constructor = sk$Serialization$dtTupleReader;

sk$Serialization$dtTupleReader.prototype.__classname = 'Serialization.TupleReader';

sk$Serialization$dtTupleReader.prototype.$frozen = undefined;

sk$Serialization$dtTupleReader.prototype.__type_switch_id = -1;

sk$Serialization$dtTupleReader.prototype.__copy = function() {
  return new (sk$Serialization$dtTupleReader)();
};

sk$Serialization$dtTupleReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp101 = __cache.get(this);
  if (_tmp101 === undefined)
    {
      var _tmp101 = this.__copy();
      _tmp101.$frozen = true;
      __cache.set(this, _tmp101);
    }
  return _tmp101;
};

sk$Serialization$dtTupleReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtTupleReader.prototype.readTuple10 = function(serializer0, serializer1, serializer2, serializer3, serializer4, serializer5, serializer6, serializer7, serializer8, serializer9) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var t$12 = this;
  var t$13 = serializer4;
  var t$14 = t$12.readValue(t$13);
  var t$15 = this;
  var t$16 = serializer5;
  var t$17 = t$15.readValue(t$16);
  var t$18 = this;
  var t$19 = serializer6;
  var t$20 = t$18.readValue(t$19);
  var t$21 = this;
  var t$22 = serializer7;
  var t$23 = t$21.readValue(t$22);
  var t$24 = this;
  var t$25 = serializer8;
  var t$26 = t$24.readValue(t$25);
  var t$27 = this;
  var t$28 = serializer9;
  var t$29 = t$27.readValue(t$28);
  var result = new (sk$Tuple10)(t$2, t$5, t$8, t$11, t$14, t$17, t$20, t$23, t$26, t$29);
  var t$30 = this;
  t$30.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple2 = function(serializer0, serializer1) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var result = new (sk$Tuple2)(t$2, t$5);
  var t$6 = this;
  t$6.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple3 = function(serializer0, serializer1, serializer2) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var result = new (sk$Tuple3)(t$2, t$5, t$8);
  var t$9 = this;
  t$9.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple4 = function(serializer0, serializer1, serializer2, serializer3) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var result = new (sk$Tuple4)(t$2, t$5, t$8, t$11);
  var t$12 = this;
  t$12.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple5 = function(serializer0, serializer1, serializer2, serializer3, serializer4) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var t$12 = this;
  var t$13 = serializer4;
  var t$14 = t$12.readValue(t$13);
  var result = new (sk$Tuple5)(t$2, t$5, t$8, t$11, t$14);
  var t$15 = this;
  t$15.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple6 = function(serializer0, serializer1, serializer2, serializer3, serializer4, serializer5) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var t$12 = this;
  var t$13 = serializer4;
  var t$14 = t$12.readValue(t$13);
  var t$15 = this;
  var t$16 = serializer5;
  var t$17 = t$15.readValue(t$16);
  var result = new (sk$Tuple6)(t$2, t$5, t$8, t$11, t$14, t$17);
  var t$18 = this;
  t$18.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple7 = function(serializer0, serializer1, serializer2, serializer3, serializer4, serializer5, serializer6) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var t$12 = this;
  var t$13 = serializer4;
  var t$14 = t$12.readValue(t$13);
  var t$15 = this;
  var t$16 = serializer5;
  var t$17 = t$15.readValue(t$16);
  var t$18 = this;
  var t$19 = serializer6;
  var t$20 = t$18.readValue(t$19);
  var result = new (sk$Tuple7)(t$2, t$5, t$8, t$11, t$14, t$17, t$20);
  var t$21 = this;
  t$21.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple8 = function(serializer0, serializer1, serializer2, serializer3, serializer4, serializer5, serializer6, serializer7) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var t$12 = this;
  var t$13 = serializer4;
  var t$14 = t$12.readValue(t$13);
  var t$15 = this;
  var t$16 = serializer5;
  var t$17 = t$15.readValue(t$16);
  var t$18 = this;
  var t$19 = serializer6;
  var t$20 = t$18.readValue(t$19);
  var t$21 = this;
  var t$22 = serializer7;
  var t$23 = t$21.readValue(t$22);
  var result = new (sk$Tuple8)(t$2, t$5, t$8, t$11, t$14, t$17, t$20, t$23);
  var t$24 = this;
  t$24.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.readTuple9 = function(serializer0, serializer1, serializer2, serializer3, serializer4, serializer5, serializer6, serializer7, serializer8) {
  var t$ = this;
  var t$1 = serializer0;
  var t$2 = t$.readValue(t$1);
  var t$3 = this;
  var t$4 = serializer1;
  var t$5 = t$3.readValue(t$4);
  var t$6 = this;
  var t$7 = serializer2;
  var t$8 = t$6.readValue(t$7);
  var t$9 = this;
  var t$10 = serializer3;
  var t$11 = t$9.readValue(t$10);
  var t$12 = this;
  var t$13 = serializer4;
  var t$14 = t$12.readValue(t$13);
  var t$15 = this;
  var t$16 = serializer5;
  var t$17 = t$15.readValue(t$16);
  var t$18 = this;
  var t$19 = serializer6;
  var t$20 = t$18.readValue(t$19);
  var t$21 = this;
  var t$22 = serializer7;
  var t$23 = t$21.readValue(t$22);
  var t$24 = this;
  var t$25 = serializer8;
  var t$26 = t$24.readValue(t$25);
  var result = new (sk$Tuple9)(t$2, t$5, t$8, t$11, t$14, t$17, t$20, t$23, t$26);
  var t$27 = this;
  t$27.end();
  return result;
};

sk$Serialization$dtTupleReader.prototype.__bases = [
  sk$Serialization$dtTupleReader
];

var sk$Serialization$dtTupleWriter = sk.Serialization$dtTupleWriter = function Serialization$dtTupleWriter() {};

sk$Serialization$dtTupleWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtTupleWriter.prototype.__constructor = sk$Serialization$dtTupleWriter;

sk$Serialization$dtTupleWriter.prototype.__classname = 'Serialization.TupleWriter';

sk$Serialization$dtTupleWriter.prototype.$frozen = undefined;

sk$Serialization$dtTupleWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtTupleWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtTupleWriter)();
};

sk$Serialization$dtTupleWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp102 = __cache.get(this);
  if (_tmp102 === undefined)
    {
      var _tmp102 = this.__copy();
      _tmp102.$frozen = true;
      __cache.set(this, _tmp102);
    }
  return _tmp102;
};

sk$Serialization$dtTupleWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtTupleWriter.prototype.writeTuple10 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3, value4, serializer4, value5, serializer5, value6, serializer6, value7, serializer7, value8, serializer8, value9, serializer9) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  var t$13 = value4;
  var t$14 = serializer4;
  t$12.writeValue(t$13, t$14);
  var t$15 = this;
  var t$16 = value5;
  var t$17 = serializer5;
  t$15.writeValue(t$16, t$17);
  var t$18 = this;
  var t$19 = value6;
  var t$20 = serializer6;
  t$18.writeValue(t$19, t$20);
  var t$21 = this;
  var t$22 = value7;
  var t$23 = serializer7;
  t$21.writeValue(t$22, t$23);
  var t$24 = this;
  var t$25 = value8;
  var t$26 = serializer8;
  t$24.writeValue(t$25, t$26);
  var t$27 = this;
  var t$28 = value9;
  var t$29 = serializer9;
  t$27.writeValue(t$28, t$29);
  var t$30 = this;
  return t$30.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple2 = function(value0, serializer0, value1, serializer1) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  return t$6.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple3 = function(value0, serializer0, value1, serializer1, value2, serializer2) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  return t$9.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple4 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  return t$12.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple5 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3, value4, serializer4) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  var t$13 = value4;
  var t$14 = serializer4;
  t$12.writeValue(t$13, t$14);
  var t$15 = this;
  return t$15.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple6 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3, value4, serializer4, value5, serializer5) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  var t$13 = value4;
  var t$14 = serializer4;
  t$12.writeValue(t$13, t$14);
  var t$15 = this;
  var t$16 = value5;
  var t$17 = serializer5;
  t$15.writeValue(t$16, t$17);
  var t$18 = this;
  return t$18.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple7 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3, value4, serializer4, value5, serializer5, value6, serializer6) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  var t$13 = value4;
  var t$14 = serializer4;
  t$12.writeValue(t$13, t$14);
  var t$15 = this;
  var t$16 = value5;
  var t$17 = serializer5;
  t$15.writeValue(t$16, t$17);
  var t$18 = this;
  var t$19 = value6;
  var t$20 = serializer6;
  t$18.writeValue(t$19, t$20);
  var t$21 = this;
  return t$21.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple8 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3, value4, serializer4, value5, serializer5, value6, serializer6, value7, serializer7) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  var t$13 = value4;
  var t$14 = serializer4;
  t$12.writeValue(t$13, t$14);
  var t$15 = this;
  var t$16 = value5;
  var t$17 = serializer5;
  t$15.writeValue(t$16, t$17);
  var t$18 = this;
  var t$19 = value6;
  var t$20 = serializer6;
  t$18.writeValue(t$19, t$20);
  var t$21 = this;
  var t$22 = value7;
  var t$23 = serializer7;
  t$21.writeValue(t$22, t$23);
  var t$24 = this;
  return t$24.end();
};

sk$Serialization$dtTupleWriter.prototype.writeTuple9 = function(value0, serializer0, value1, serializer1, value2, serializer2, value3, serializer3, value4, serializer4, value5, serializer5, value6, serializer6, value7, serializer7, value8, serializer8) {
  var t$ = this;
  var t$1 = value0;
  var t$2 = serializer0;
  t$.writeValue(t$1, t$2);
  var t$3 = this;
  var t$4 = value1;
  var t$5 = serializer1;
  t$3.writeValue(t$4, t$5);
  var t$6 = this;
  var t$7 = value2;
  var t$8 = serializer2;
  t$6.writeValue(t$7, t$8);
  var t$9 = this;
  var t$10 = value3;
  var t$11 = serializer3;
  t$9.writeValue(t$10, t$11);
  var t$12 = this;
  var t$13 = value4;
  var t$14 = serializer4;
  t$12.writeValue(t$13, t$14);
  var t$15 = this;
  var t$16 = value5;
  var t$17 = serializer5;
  t$15.writeValue(t$16, t$17);
  var t$18 = this;
  var t$19 = value6;
  var t$20 = serializer6;
  t$18.writeValue(t$19, t$20);
  var t$21 = this;
  var t$22 = value7;
  var t$23 = serializer7;
  t$21.writeValue(t$22, t$23);
  var t$24 = this;
  var t$25 = value8;
  var t$26 = serializer8;
  t$24.writeValue(t$25, t$26);
  var t$27 = this;
  return t$27.end();
};

sk$Serialization$dtTupleWriter.prototype.__bases = [
  sk$Serialization$dtTupleWriter
];

var sk$Serialization$dtVisitor = sk.Serialization$dtVisitor = function Serialization$dtVisitor() {};

sk$Serialization$dtVisitor.prototype = Object.create(Object.prototype);

sk$Serialization$dtVisitor.prototype.__constructor = sk$Serialization$dtVisitor;

sk$Serialization$dtVisitor.prototype.__classname = 'Serialization.Visitor';

sk$Serialization$dtVisitor.prototype.$frozen = undefined;

sk$Serialization$dtVisitor.prototype.__type_switch_id = -1;

sk$Serialization$dtVisitor.prototype.__copy = function() {};

sk$Serialization$dtVisitor.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp103 = __cache.get(this);
  if (_tmp103 === undefined)
    {
      var _tmp103 = this.__copy();
      _tmp103.$frozen = true;
      __cache.set(this, _tmp103);
    }
  return _tmp103;
};

sk$Serialization$dtVisitor.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtVisitor.prototype.__bases = [
  sk$Serialization$dtVisitor
];

var sk$Serialization$dtWriter = sk.Serialization$dtWriter = function Serialization$dtWriter() {};

sk$Serialization$dtWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtWriter.prototype.__constructor = sk$Serialization$dtWriter;

sk$Serialization$dtWriter.prototype.__classname = 'Serialization.Writer';

sk$Serialization$dtWriter.prototype.$frozen = undefined;

sk$Serialization$dtWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtWriter)();
};

sk$Serialization$dtWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp104 = __cache.get(this);
  if (_tmp104 === undefined)
    {
      var _tmp104 = this.__copy();
      _tmp104.$frozen = true;
      __cache.set(this, _tmp104);
    }
  return _tmp104;
};

sk$Serialization$dtWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtWriter.prototype.__bases = [
  sk$Serialization$dtWriter
];

var sk$Set$dtEmptyValue = sk.Set$dtEmptyValue = function Set$dtEmptyValue() {};

sk$Set$dtEmptyValue.prototype = Object.create(Object.prototype);

sk$Set$dtEmptyValue.prototype.__constructor = sk$Set$dtEmptyValue;

sk$Set$dtEmptyValue.prototype.__classname = 'Set.EmptyValue';

sk$Set$dtEmptyValue.prototype.$frozen = true;

sk$Set$dtEmptyValue.prototype.__type_switch_id = 291;

sk$Set$dtEmptyValue.prototype.__copy = function() {
  return new (sk$Set$dtEmptyValue)();
};

sk$Set$dtEmptyValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp105 = __cache.get(this);
  if (_tmp105 === undefined)
    {
      var _tmp105 = this.__copy();
      _tmp105.$frozen = true;
      __cache.set(this, _tmp105);
    }
  return _tmp105;
};

sk$Set$dtEmptyValue.prototype.__init = function(__named_parameters) {};

sk$Set$dtEmptyValue.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Set$dtEmptyValue.prototype.$eq$eq = function(_other) {
  return new sk$Bool((true));
};

sk$Set$dtEmptyValue.prototype.hash = function() {
  return new sk$String(('Set.EmptyValue')).hash();
};

sk$Set$dtEmptyValue.prototype.__bases = [
  sk$Set$dtEmptyValue
];

var sk$Show = sk.Show = function Show() {};

sk$Show.prototype = Object.create(Object.prototype);

sk$Show.prototype.__constructor = sk$Show;

sk$Show.prototype.__classname = 'Show';

sk$Show.prototype.$frozen = undefined;

sk$Show.prototype.__type_switch_id = -1;

sk$Show.prototype.__copy = function() {};

sk$Show.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp106 = __cache.get(this);
  if (_tmp106 === undefined)
    {
      var _tmp106 = this.__copy();
      _tmp106.$frozen = true;
      __cache.set(this, _tmp106);
    }
  return _tmp106;
};

sk$Show.prototype.__init = function(__named_parameters) {};

sk$Show.prototype.__bases = [
  sk$Show
];

var sk$SkipError$dtError = sk.SkipError$dtError = function SkipError$dtError(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipError$dtError.prototype = Object.create(Object.prototype);

sk$SkipError$dtError.prototype.__constructor = sk$SkipError$dtError;

sk$SkipError$dtError.prototype.__classname = 'SkipError.Error';

sk$SkipError$dtError.prototype.$frozen = true;

sk$SkipError$dtError.prototype.__type_switch_id = 292;

sk$SkipError$dtError.prototype.__copy = function() {
  return new (sk$SkipError$dtError)(this);
};

sk$SkipError$dtError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp107 = __cache.get(this);
  if (_tmp107 === undefined)
    {
      var _tmp107 = this.__copy();
      _tmp107.$frozen = true;
      __cache.set(this, _tmp107);
      _tmp107.traces = skip.deepFreeze(_tmp107.traces, __cache);
      _tmp107.fix = skip.deepFreeze(_tmp107.fix, __cache);
    }
  return _tmp107;
};

sk$SkipError$dtError.prototype.__init = function(__named_parameters) {
  this.traces = __named_parameters.traces;
  this.fix = __named_parameters.fix;
};

sk$SkipError$dtError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SkipError$dtError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg16634:{
      jumpLab$bg16634:{
        jumpLab$bg16633:{
          switch (other.__type_switch_id) {
            case 292:
              otherTyped = other;
              break jumpLab$bg16633;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.traces;
          var t$2 = otherTyped;
          var t$3 = t$2.traces;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.fix;
          var t$7 = otherTyped;
          var t$8 = t$7.fix;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$SkipError$dtError.prototype.filename = function() {
  var t$ = this;
  var t$1 = t$.traces;
  var t$2 = t$1.getHead();
  var t$3 = t$2.i0;
  return t$3.filename;
};

sk$SkipError$dtError.prototype.hash = function() {
  var h = new sk$String(('SkipError.Error')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.traces;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.fix;
  return sk$Hashable$dtcombine(t$3, t$5);
};

sk$SkipError$dtError.prototype.message = function() {
  var t$ = this;
  var t$1 = t$.traces;
  var t$2 = t$1.getHead();
  return t$2.i1;
};

sk$SkipError$dtError.prototype.range = function() {
  var t$ = this;
  var t$1 = t$.traces;
  var t$2 = t$1.getHead();
  return t$2.i0;
};

sk$SkipError$dtError.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.traces;
  var t$2 = t$1.map(((_tmp16657) => 
  {
    return sk$SkipError$dttraceToString(_tmp16657);
  }));
  return t$2.join(new sk$String(('\n')));
};

sk$SkipError$dtError.prototype.__bases = [
  sk$SkipError$dtError
];

var sk$SkipError$dtFix = sk.SkipError$dtFix = function SkipError$dtFix(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipError$dtFix.prototype = Object.create(Object.prototype);

sk$SkipError$dtFix.prototype.__constructor = sk$SkipError$dtFix;

sk$SkipError$dtFix.prototype.__classname = 'SkipError.Fix';

sk$SkipError$dtFix.prototype.$frozen = true;

sk$SkipError$dtFix.prototype.__type_switch_id = 293;

sk$SkipError$dtFix.prototype.__copy = function() {
  return new (sk$SkipError$dtFix)(this);
};

sk$SkipError$dtFix.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp108 = __cache.get(this);
  if (_tmp108 === undefined)
    {
      var _tmp108 = this.__copy();
      _tmp108.$frozen = true;
      __cache.set(this, _tmp108);
      _tmp108.oldRange = skip.deepFreeze(_tmp108.oldRange, __cache);
      _tmp108.newText = skip.deepFreeze(_tmp108.newText, __cache);
      _tmp108.speculative = skip.deepFreeze(_tmp108.speculative, __cache);
      _tmp108.title = skip.deepFreeze(_tmp108.title, __cache);
    }
  return _tmp108;
};

sk$SkipError$dtFix.prototype.__init = function(__named_parameters) {
  this.oldRange = __named_parameters.oldRange;
  this.newText = __named_parameters.newText;
  this.speculative = __named_parameters.speculative === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.speculative;
  this.title = __named_parameters.title === undefined ? ((() => 
  {
    return new sk$String(('Fix'));
  })()) : __named_parameters.title;
};

sk$SkipError$dtFix.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SkipError$dtFix.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg16689:{
      jumpLab$bg16689:{
        jumpLab$bg16688:{
          switch (other.__type_switch_id) {
            case 293:
              otherTyped = other;
              break jumpLab$bg16688;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.oldRange;
          var t$2 = otherTyped;
          var t$3 = t$2.oldRange;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.newText;
          var t$7 = otherTyped;
          var t$8 = t$7.newText;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$10 = this;
          var t$11 = t$10.speculative;
          var t$12 = otherTyped;
          var t$13 = t$12.speculative;
          var t$14 = sk$isEqual(t$11, t$13);
          if (t$14.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$15 = this;
          var t$16 = t$15.title;
          var t$17 = otherTyped;
          var t$18 = t$17.title;
          var t$19 = sk$isEqual(t$16, t$18);
          if (t$19.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$SkipError$dtFix.prototype.hash = function() {
  var h = new sk$String(('SkipError.Fix')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.oldRange;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.newText;
  h = sk$Hashable$dtcombine(t$3, t$5);
  var t$6 = h;
  var t$7 = this;
  var t$8 = t$7.speculative;
  h = sk$Hashable$dtcombine(t$6, t$8);
  var t$9 = h;
  var t$10 = this;
  var t$11 = t$10.title;
  return sk$Hashable$dtcombine(t$9, t$11);
};

sk$SkipError$dtFix.prototype.__bases = [
  sk$SkipError$dtFix
];

var sk$SkipProject$dtArguments = sk.SkipProject$dtArguments = function SkipProject$dtArguments(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtArguments.prototype = Object.create(Object.prototype);

sk$SkipProject$dtArguments.prototype.__constructor = sk$SkipProject$dtArguments;

sk$SkipProject$dtArguments.prototype.__classname = 'SkipProject.Arguments';

sk$SkipProject$dtArguments.prototype.$frozen = true;

sk$SkipProject$dtArguments.prototype.__type_switch_id = 294;

sk$SkipProject$dtArguments.prototype.__copy = function() {
  return new (sk$SkipProject$dtArguments)(this);
};

sk$SkipProject$dtArguments.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp109 = __cache.get(this);
  if (_tmp109 === undefined)
    {
      var _tmp109 = this.__copy();
      _tmp109.$frozen = true;
      __cache.set(this, _tmp109);
      _tmp109.sourceOnly = skip.deepFreeze(_tmp109.sourceOnly, __cache);
      _tmp109.bindings = skip.deepFreeze(_tmp109.bindings, __cache);
      _tmp109.targets = skip.deepFreeze(_tmp109.targets, __cache);
    }
  return _tmp109;
};

sk$SkipProject$dtArguments.prototype.__init = function(__named_parameters) {
  this.sourceOnly = __named_parameters.sourceOnly === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.sourceOnly;
  this.bindings = __named_parameters.bindings === undefined ? ((() => 
  {
    return sk$Map.createFromItems(new (sk$Array)([]));
  })()) : __named_parameters.bindings;
  this.targets = __named_parameters.targets === undefined ? ((() => 
  {
    return sk$Vector.createFromItems(new (sk$Array)([]));
  })()) : __named_parameters.targets;
};

sk$SkipProject$dtArguments.prototype.__bases = [
  sk$SkipProject$dtArguments
];

var sk$SkipProject$dtBinding = sk.SkipProject$dtBinding = function SkipProject$dtBinding(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtBinding.prototype = Object.create(Object.prototype);

sk$SkipProject$dtBinding.prototype.__constructor = sk$SkipProject$dtBinding;

sk$SkipProject$dtBinding.prototype.__classname = 'SkipProject.Binding';

sk$SkipProject$dtBinding.prototype.$frozen = true;

sk$SkipProject$dtBinding.prototype.__type_switch_id = 295;

sk$SkipProject$dtBinding.prototype.__copy = function() {
  return new (sk$SkipProject$dtBinding)(this);
};

sk$SkipProject$dtBinding.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp110 = __cache.get(this);
  if (_tmp110 === undefined)
    {
      var _tmp110 = this.__copy();
      _tmp110.$frozen = true;
      __cache.set(this, _tmp110);
      _tmp110.variable = skip.deepFreeze(_tmp110.variable, __cache);
      _tmp110.value = skip.deepFreeze(_tmp110.value, __cache);
    }
  return _tmp110;
};

sk$SkipProject$dtBinding.prototype.__init = function(__named_parameters) {
  this.variable = __named_parameters.variable;
  this.value = __named_parameters.value;
};

sk$SkipProject$dtBinding.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.variable;
  var t$2 = t$1.toString();
  var t$3 = new sk$String(('=')).toString();
  var t$4 = this;
  var t$5 = t$4.value;
  var t$6 = t$5.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$3,
    t$6
  ]));
};

sk$SkipProject$dtBinding.prototype.__bases = [
  sk$SkipProject$dtBinding
];

var sk$SkipProject$dtFileInfo = sk.SkipProject$dtFileInfo = function SkipProject$dtFileInfo(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtFileInfo.prototype = Object.create(Object.prototype);

sk$SkipProject$dtFileInfo.prototype.__constructor = sk$SkipProject$dtFileInfo;

sk$SkipProject$dtFileInfo.prototype.__classname = 'SkipProject.FileInfo';

sk$SkipProject$dtFileInfo.prototype.$frozen = true;

sk$SkipProject$dtFileInfo.prototype.__type_switch_id = 296;

sk$SkipProject$dtFileInfo.prototype.__copy = function() {
  return new (sk$SkipProject$dtFileInfo)(this);
};

sk$SkipProject$dtFileInfo.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp111 = __cache.get(this);
  if (_tmp111 === undefined)
    {
      var _tmp111 = this.__copy();
      _tmp111.$frozen = true;
      __cache.set(this, _tmp111);
      _tmp111.key = skip.deepFreeze(_tmp111.key, __cache);
      _tmp111.binding = skip.deepFreeze(_tmp111.binding, __cache);
    }
  return _tmp111;
};

sk$SkipProject$dtFileInfo.prototype.__init = function(__named_parameters) {
  this.key = __named_parameters.key;
  this.binding = __named_parameters.binding;
};

sk$SkipProject$dtFileInfo.prototype.__bases = [
  sk$SkipProject$dtFileInfo
];

var sk$SkipProject$dtParameter = sk.SkipProject$dtParameter = function SkipProject$dtParameter(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtParameter.prototype = Object.create(Object.prototype);

sk$SkipProject$dtParameter.prototype.__constructor = sk$SkipProject$dtParameter;

sk$SkipProject$dtParameter.prototype.__classname = 'SkipProject.Parameter';

sk$SkipProject$dtParameter.prototype.$frozen = true;

sk$SkipProject$dtParameter.prototype.__type_switch_id = 297;

sk$SkipProject$dtParameter.prototype.__copy = function() {
  return new (sk$SkipProject$dtParameter)(this);
};

sk$SkipProject$dtParameter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp112 = __cache.get(this);
  if (_tmp112 === undefined)
    {
      var _tmp112 = this.__copy();
      _tmp112.$frozen = true;
      __cache.set(this, _tmp112);
      _tmp112.name = skip.deepFreeze(_tmp112.name, __cache);
      _tmp112.valueToSources = skip.deepFreeze(_tmp112.valueToSources, __cache);
    }
  return _tmp112;
};

sk$SkipProject$dtParameter.prototype.__init = function(__named_parameters) {
  this.name = __named_parameters.name;
  this.valueToSources = __named_parameters.valueToSources;
};

sk$SkipProject$dtParameter.prototype.__bases = [
  sk$SkipProject$dtParameter
];

var sk$SkipProject$dtProgramUnit = sk.SkipProject$dtProgramUnit = function SkipProject$dtProgramUnit(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtProgramUnit.prototype = Object.create(Object.prototype);

sk$SkipProject$dtProgramUnit.prototype.__constructor = sk$SkipProject$dtProgramUnit;

sk$SkipProject$dtProgramUnit.prototype.__classname = 'SkipProject.ProgramUnit';

sk$SkipProject$dtProgramUnit.prototype.$frozen = true;

sk$SkipProject$dtProgramUnit.prototype.__type_switch_id = 298;

sk$SkipProject$dtProgramUnit.prototype.__copy = function() {
  return new (sk$SkipProject$dtProgramUnit)(this);
};

sk$SkipProject$dtProgramUnit.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp113 = __cache.get(this);
  if (_tmp113 === undefined)
    {
      var _tmp113 = this.__copy();
      _tmp113.$frozen = true;
      __cache.set(this, _tmp113);
      _tmp113.key = skip.deepFreeze(_tmp113.key, __cache);
      _tmp113.kind = skip.deepFreeze(_tmp113.kind, __cache);
      _tmp113.isDefault = skip.deepFreeze(_tmp113.isDefault, __cache);
      _tmp113.project = skip.deepFreeze(_tmp113.project, __cache);
      _tmp113.files = skip.deepFreeze(_tmp113.files, __cache);
      _tmp113.references = skip.deepFreeze(_tmp113.references, __cache);
      _tmp113.parameters = skip.deepFreeze(_tmp113.parameters, __cache);
    }
  return _tmp113;
};

sk$SkipProject$dtProgramUnit.prototype.__init = function(__named_parameters) {
  this.key = __named_parameters.key;
  this.kind = __named_parameters.kind;
  this.isDefault = __named_parameters.isDefault;
  this.project = __named_parameters.project;
  this.files = __named_parameters.files;
  this.references = __named_parameters.references;
  this.parameters = __named_parameters.parameters;
};

sk$SkipProject$dtProgramUnit.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SkipProject$dtProgramUnit.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.key;
  var t$2 = other;
  var t$3 = t$2.key;
  return t$1.$eq$eq(t$3);
};

sk$SkipProject$dtProgramUnit.prototype.getFiles = function(bindings) {
  var t$ = this;
  var t$1 = t$.parameters;
  var t$2 = this;
  var t$3 = t$2.files;
  return t$1.reduce(((files, parameter) => 
  {
    var t$4 = files;
    var t$5 = parameter;
    var t$6 = t$5.valueToSources;
    var t$7 = bindings;
    var t$8 = parameter;
    var t$9 = t$8.name;
    var t$10 = t$7.get(t$9);
    var t$11 = t$6.get(t$10);
    return t$4.union(t$11);
  }), t$3);
};

sk$SkipProject$dtProgramUnit.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.key;
  return t$1.hash();
};

Object.defineProperty(sk$SkipProject$dtProgramUnit.prototype, 'name', {
  configurable: true,
  enumerable: true,
  writable: true,
  value: function() {
    var t$ = this;
    var t$1 = t$.key;
    return t$1.name;
  }
});

sk$SkipProject$dtProgramUnit.prototype.__bases = [
  sk$SkipProject$dtProgramUnit
];

var sk$SkipProject$dtProgramUnitKey = sk.SkipProject$dtProgramUnitKey = function SkipProject$dtProgramUnitKey(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtProgramUnitKey.prototype = Object.create(Object.prototype);

sk$SkipProject$dtProgramUnitKey.prototype.__constructor = sk$SkipProject$dtProgramUnitKey;

sk$SkipProject$dtProgramUnitKey.prototype.__classname = 'SkipProject.ProgramUnitKey';

sk$SkipProject$dtProgramUnitKey.prototype.$frozen = true;

sk$SkipProject$dtProgramUnitKey.prototype.__type_switch_id = 299;

sk$SkipProject$dtProgramUnitKey.prototype.__copy = function() {
  return new (sk$SkipProject$dtProgramUnitKey)(this);
};

sk$SkipProject$dtProgramUnitKey.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp114 = __cache.get(this);
  if (_tmp114 === undefined)
    {
      var _tmp114 = this.__copy();
      _tmp114.$frozen = true;
      __cache.set(this, _tmp114);
      _tmp114.projectPath = skip.deepFreeze(_tmp114.projectPath, __cache);
      _tmp114.name = skip.deepFreeze(_tmp114.name, __cache);
    }
  return _tmp114;
};

sk$SkipProject$dtProgramUnitKey.prototype.__init = function(__named_parameters) {
  this.projectPath = __named_parameters.projectPath;
  this.name = __named_parameters.name;
};

sk$SkipProject$dtProgramUnitKey.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SkipProject$dtProgramUnitKey.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg16779:{
      jumpLab$bg16779:{
        jumpLab$bg16778:{
          switch (other.__type_switch_id) {
            case 299:
              otherTyped = other;
              break jumpLab$bg16778;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.projectPath;
          var t$2 = otherTyped;
          var t$3 = t$2.projectPath;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.name;
          var t$7 = otherTyped;
          var t$8 = t$7.name;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$SkipProject$dtProgramUnitKey.create = function(projectPath, name) {
  var t$ = projectPath;
  var t$1 = sk$Path$dtisNormalized(t$);
  sk$invariant(t$1, new sk$String(('Expected normalized path')));
  var t$2 = projectPath;
  var t$3 = name;
  return new (sk$SkipProject$dtProgramUnitKey)({
    name: t$3,
    projectPath: t$2
  });
};

sk$SkipProject$dtProgramUnitKey.prototype.hash = function() {
  var h = new sk$String(('SkipProject.ProgramUnitKey')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.projectPath;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.name;
  return sk$Hashable$dtcombine(t$3, t$5);
};

sk$SkipProject$dtProgramUnitKey.prototype.__bases = [
  sk$SkipProject$dtProgramUnitKey
];

var sk$SkipProject$dtProject = sk.SkipProject$dtProject = function SkipProject$dtProject(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtProject.prototype = Object.create(Object.prototype);

sk$SkipProject$dtProject.prototype.__constructor = sk$SkipProject$dtProject;

sk$SkipProject$dtProject.prototype.__classname = 'SkipProject.Project';

sk$SkipProject$dtProject.prototype.$frozen = true;

sk$SkipProject$dtProject.prototype.__type_switch_id = 300;

sk$SkipProject$dtProject.prototype.__copy = function() {
  return new (sk$SkipProject$dtProject)(this);
};

sk$SkipProject$dtProject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp115 = __cache.get(this);
  if (_tmp115 === undefined)
    {
      var _tmp115 = this.__copy();
      _tmp115.$frozen = true;
      __cache.set(this, _tmp115);
      _tmp115.dirpath = skip.deepFreeze(_tmp115.dirpath, __cache);
      _tmp115.config = skip.deepFreeze(_tmp115.config, __cache);
    }
  return _tmp115;
};

sk$SkipProject$dtProject.prototype.__init = function(__named_parameters) {
  this.dirpath = __named_parameters.dirpath;
  this.config = __named_parameters.config;
};

sk$SkipProject$dtProject.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SkipProject$dtProject.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.dirpath;
  var t$2 = other;
  var t$3 = t$2.dirpath;
  return t$1.$eq$eq(t$3);
};

sk$SkipProject$dtProject.prototype.allReferencedProjects = function() {
  var t$ = this;
  var t$1 = t$.config;
  var t$2 = t$1.programUnits;
  var t$3 = t$2.items();
  var t$4 = t$3.collect(sk$Vector);
  var t$5 = t$4.flatMap(((nameUnit) => 
  {
    var t$6 = nameUnit;
    var t$7 = t$6.i1;
    var t$8 = t$7.references;
    return t$8.map(((reference) => 
    {
      var t$9 = this;
      var t$10 = reference;
      var t$11 = t$10.path;
      return t$9.getRelativePath(t$11);
    }));
  }));
  return t$5.collect(sk$Set);
};

sk$SkipProject$dtProject.prototype.getDefaultOrFirstProgramUnitKey = function() {
  var t$ = this;
  var t$1 = t$.dirpath;
  var t$2 = this;
  var t$3 = t$2.getDefaultOrFirstProgramUnitName();
  return sk$SkipProject$dtProgramUnitKey.create(t$1, t$3);
};

sk$SkipProject$dtProject.prototype.getDefaultOrFirstProgramUnitName = function() {
  var t$ = this;
  var t$1 = t$.config;
  var $var = t$1.$default;
  var name;
  {
    jumpBlockOuterjumpLab$bg16827:{
      jumpLab$bg16827:{
        jumpLab$bg16826:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg16826;
            
            case 205:
              name = $var.value;
              break jumpLab$bg16827;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = this;
          var t$3 = t$2.config;
          var t$4 = t$3.programUnits;
          var t$5 = t$4.keys();
          var t$6 = t$5.next();
          return t$6.fromSome(undefined);
        }
      }
      return name;
    }
  }
};

sk$SkipProject$dtProject.prototype.getDefaultProgramUnitName = function() {
  var t$ = this;
  var t$1 = t$.config;
  var $var = t$1.$default;
  var name;
  {
    jumpBlockOuterjumpLab$bg16847:{
      jumpLab$bg16847:{
        jumpLab$bg16846:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg16846;
            
            case 205:
              name = $var.value;
              break jumpLab$bg16847;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = this;
          var t$3 = t$2.config;
          var t$4 = t$3.programUnits;
          var t$5 = t$4.size();
          if (t$5.$eq$eq(new sk$Int(1.0, 0.0)).__value)
            {
              var t$6 = this;
              var t$7 = t$6.config;
              var t$8 = t$7.programUnits;
              var t$9 = t$8.keys();
              var t$10 = t$9.next();
              var t$11 = t$10.fromSome(undefined);
              return new (sk$Some)(t$11);
            }
          else
            return singleton$None;
        }
      }
      {
        var t$12 = name;
        return new (sk$Some)(t$12);
      }
    }
  }
};

sk$SkipProject$dtProject.prototype.getPathOfReference = function(reference) {
  var t$ = this;
  var t$1 = reference;
  var t$2 = t$1.path;
  return t$.getRelativePath(t$2);
};

sk$SkipProject$dtProject.prototype.getRelativePath = function(referencedPath) {
  var t$ = this;
  var t$1 = t$.dirpath;
  var t$2 = referencedPath;
  return sk$Path$dtjoin(t$1, t$2, undefined);
};

sk$SkipProject$dtProject.prototype.__bases = [
  sk$SkipProject$dtProject
];

var sk$SkipProject$dtSolution = sk.SkipProject$dtSolution = function SkipProject$dtSolution(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtSolution.prototype = Object.create(Object.prototype);

sk$SkipProject$dtSolution.prototype.__constructor = sk$SkipProject$dtSolution;

sk$SkipProject$dtSolution.prototype.__classname = 'SkipProject.Solution';

sk$SkipProject$dtSolution.prototype.$frozen = true;

sk$SkipProject$dtSolution.prototype.__type_switch_id = 301;

sk$SkipProject$dtSolution.prototype.__copy = function() {
  return new (sk$SkipProject$dtSolution)(this);
};

sk$SkipProject$dtSolution.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp116 = __cache.get(this);
  if (_tmp116 === undefined)
    {
      var _tmp116 = this.__copy();
      _tmp116.$frozen = true;
      __cache.set(this, _tmp116);
      _tmp116.projects = skip.deepFreeze(_tmp116.projects, __cache);
      _tmp116.rootProjectPath = skip.deepFreeze(_tmp116.rootProjectPath, __cache);
      _tmp116.programUnits = skip.deepFreeze(_tmp116.programUnits, __cache);
      _tmp116.fileToInfo = skip.deepFreeze(_tmp116.fileToInfo, __cache);
      _tmp116.variables = skip.deepFreeze(_tmp116.variables, __cache);
    }
  return _tmp116;
};

sk$SkipProject$dtSolution.prototype.__init = function(__named_parameters) {
  this.projects = __named_parameters.projects;
  this.rootProjectPath = __named_parameters.rootProjectPath;
  this.programUnits = __named_parameters.programUnits;
  this.fileToInfo = __named_parameters.fileToInfo;
  this.variables = __named_parameters.variables;
};

sk$SkipProject$dtSolution.prototype.containsProgramUnit = function(projectPath, name) {
  var t$ = this;
  var t$1 = projectPath;
  var t$2 = name;
  var t$3 = t$.maybeGetProgramUnit(t$1, t$2);
  return t$3.isSome();
};

sk$SkipProject$dtSolution.prototype.defaultProgramUnitAndBindingsOfFile = function(filename) {
  var t$ = this;
  var defaultBindings = t$.getDefaultBindings();
  var t$1 = this;
  var t$2 = t$1.fileToInfo;
  var t$3 = filename;
  var $var = t$2.maybeGet(t$3);
  var info;
  {
    jumpBlockOuterjumpLab$bg16888:{
      jumpLab$bg16888:{
        jumpLab$bg16887:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg16887;
            
            case 205:
              info = $var.value;
              break jumpLab$bg16888;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.getDefaultOrFirstProgramUnitKey();
          var t$6 = defaultBindings;
          return new (sk$Tuple2)(t$5, t$6);
        }
      }
      {
        var t$7 = info;
        var t$8 = t$7.key;
        var t$9 = info;
        var t$10;
        var var1 = t$9.binding;
        var binding;
        {
          jumpBlockOuterjumpLab$bg16884:{
            jumpLab$bg16884:{
              jumpLab$bg16883:{
                switch (var1.__type_switch_id) {
                  case 204:
                    break jumpLab$bg16883;
                  
                  case 205:
                    binding = var1.value;
                    break jumpLab$bg16884;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              t$10 = defaultBindings;
              break jumpBlockOuterjumpLab$bg16884;
            }
            {
              var t$11 = defaultBindings;
              var bindings = t$11.clone(undefined);
              var t$12 = bindings;
              var t$13 = binding;
              var t$14 = t$13.variable;
              var t$15 = binding;
              var t$16 = t$15.value;
              t$12.set(t$14, t$16);
              t$10 = skip.deepFreeze(bindings, new Map());
            }
            break jumpBlockOuterjumpLab$bg16884;
          }
        }
        var t$17 = t$10;
        return new (sk$Tuple2)(t$8, t$17);
      }
    }
  }
};

sk$SkipProject$dtSolution.prototype.getAllSourceFilesFor = function(programUnitKey, bindings) {
  var t$ = this;
  var t$1 = bindings;
  var bindingErrors = t$.validateBindings(t$1);
  var t$2 = bindingErrors;
  if (t$2.isEmpty().__value)
    {
      var t$3 = this;
      var t$4 = programUnitKey;
      var t$5 = bindings;
      var t$6 = t$3.getFilesForProgramUnitRec(t$4, t$5);
      var files = t$6.collect(sk$Set);
      var t$7 = files;
      sk$SkipProject$dtlog(t$7);
      var t$8 = files;
      return new (sk$Success)(t$8);
    }
  else
    {
      var t$9 = bindingErrors;
      return new (sk$Failure)(t$9);
    }
};

sk$SkipProject$dtSolution.prototype.getDefaultBindings = function() {
  var t$ = this;
  var t$1 = t$.variables;
  return t$1.map(((_, variable) => 
  {
    var t$2 = variable;
    return t$2.$default;
  }));
};

sk$SkipProject$dtSolution.prototype.getDefaultOrFirstProgramUnitKey = function() {
  var t$ = this;
  var t$1 = t$.getRootProject();
  return t$1.getDefaultOrFirstProgramUnitKey();
};

sk$SkipProject$dtSolution.prototype.getFilesForProgramUnit = function(key, bindings) {
  var t$ = this;
  var t$1 = t$.programUnits;
  var t$2 = key;
  var t$3 = t$1.get(t$2);
  var t$4 = bindings;
  return t$3.getFiles(t$4);
};

sk$SkipProject$dtSolution.prototype.getFilesForProgramUnitRec = function(root, bindings) {
  var t$ = this;
  var t$1 = t$.getProgramUnitGraph();
  var t$2 = root;
  var t$3 = t$1.reachableFromDFS(t$2);
  var t$4 = t$3.flatMap(((key) => 
  {
    var t$5 = this;
    var t$6 = key;
    var t$7 = bindings;
    return t$5.getFilesForProgramUnit(t$6, t$7);
  }));
  return t$4.collect(sk$Vector);
};

sk$SkipProject$dtSolution.prototype.getProgramUnit = function(projectPath, name) {
  var t$ = projectPath;
  var t$1 = sk$Path$dtisNormalized(t$);
  sk$invariant(t$1, undefined);
  var t$2 = name;
  if (t$2.isEmpty().__value)
    {
      var t$3 = this;
      var t$4 = t$3.projects;
      var t$5 = projectPath;
      if (t$4.containsKey(t$5).__value)
        {
          var t$6 = this;
          var t$7 = t$6.programUnits;
          var t$8 = this;
          var t$9 = projectPath;
          var t$10 = t$8.getProject(t$9);
          var t$11 = t$10.getDefaultOrFirstProgramUnitKey();
          var t$12 = t$7.get(t$11);
          return new (sk$Success)(t$12);
        }
      else
        {
          var t$13 = projectPath;
          var t$14 = new sk$String(('Directory \'')).toString();
          var t$15 = projectPath;
          var t$16 = t$15.toString();
          var t$17 = new sk$String(('\' does not contain a skip.project.json file.')).toString();
          var t$18 = new sk$String(('')).join(new (sk$Array)([
            t$14,
            t$16,
            t$17
          ]));
          var t$19 = sk$SkipProject$dtcreateError(t$13, t$18, undefined);
          var t$20 = new (sk$Array)([
            t$19
          ]);
          var t$21 = sk$Vector.createFromItems(t$20);
          return new (sk$Failure)(t$21);
        }
    }
  else
    {
      var t$22 = this;
      var t$23 = projectPath;
      var t$24 = name;
      var $var = t$22.maybeGetProgramUnit(t$23, t$24);
      var programUnit;
      {
        jumpBlockOuterjumpLab$bg16964:{
          jumpLab$bg16964:{
            jumpLab$bg16963:{
              switch ($var.__type_switch_id) {
                case 204:
                  break jumpLab$bg16963;
                
                case 205:
                  programUnit = $var.value;
                  break jumpLab$bg16964;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            {
              var t$25 = projectPath;
              var t$26 = new sk$String(('Project does not contain a program unit named \'')).toString();
              var t$27 = name;
              var t$28 = t$27.toString();
              var t$29 = new sk$String(('\'.')).toString();
              var t$30 = new sk$String(('')).join(new (sk$Array)([
                t$26,
                t$28,
                t$29
              ]));
              var t$31 = sk$SkipProject$dtcreateError(t$25, t$30, undefined);
              var t$32 = new (sk$Array)([
                t$31
              ]);
              var t$33 = sk$Vector.createFromItems(t$32);
              return new (sk$Failure)(t$33);
            }
          }
          {
            var t$34 = programUnit;
            return new (sk$Success)(t$34);
          }
        }
      }
    }
};

sk$SkipProject$dtSolution.prototype.getProgramUnitGraph = function() {
  var t$ = this;
  var t$1 = t$.getProgramUnits();
  var t$2 = t$1.map(((unit) => 
  {
    var t$3 = unit;
    var t$4 = t$3.key;
    var t$5 = unit;
    var t$6 = t$5.references;
    return new (sk$Tuple2)(t$4, t$6);
  }));
  return sk$DirectedGraph$dtcreate(t$2);
};

sk$SkipProject$dtSolution.prototype.getProgramUnits = function() {
  var t$ = this;
  var t$1 = t$.programUnits;
  var t$2 = t$1.values();
  return t$2.collect(sk$Vector);
};

sk$SkipProject$dtSolution.prototype.getProject = function(projectPath) {
  var t$ = this;
  var t$1 = t$.projects;
  var t$2 = projectPath;
  return t$1.get(t$2);
};

sk$SkipProject$dtSolution.prototype.getProjectFilesForProgramUnit = function(key) {
  var t$ = this;
  var t$1 = t$.getProgramUnitGraph();
  var t$2 = key;
  var t$3 = t$1.reachableFromDFS(t$2);
  var t$4 = t$3.map(((key1) => 
  {
    var t$5 = key1;
    var t$6 = t$5.projectPath;
    return sk$Path$dtjoin(t$6, (sk$SkipProject$dtPROJECT_FILENAME()), undefined);
  }));
  return t$4.collect(sk$Set);
};

sk$SkipProject$dtSolution.prototype.getRootProject = function() {
  var t$ = this;
  var t$1 = t$.projects;
  var t$2 = this;
  var t$3 = t$2.rootProjectPath;
  return t$1.get(t$3);
};

sk$SkipProject$dtSolution.prototype.maybeGetProgramUnit = function(projectPath, name) {
  var t$ = this;
  var t$1 = t$.programUnits;
  var t$2 = projectPath;
  var t$3 = name;
  var t$4 = sk$SkipProject$dtProgramUnitKey.create(t$2, t$3);
  return t$1.maybeGet(t$4);
};

sk$SkipProject$dtSolution.prototype.validateBindings = function(bindings) {
  var t$ = bindings;
  var t$1 = t$.keys();
  var t$2 = t$1.map(((key) => 
  {
    var t$3 = this;
    var t$4 = t$3.variables;
    var t$5 = key;
    if (t$4.containsKey(t$5).__value)
      return singleton$None;
    else
      {
        var t$6 = this;
        var t$7 = t$6.rootProjectPath;
        var t$8 = new sk$String(('No variable named \'')).toString();
        var t$9 = key;
        var t$10 = t$9.toString();
        var t$11 = new sk$String(('\' in project.')).toString();
        var t$12 = new sk$String(('')).join(new (sk$Array)([
          t$8,
          t$10,
          t$11
        ]));
        var t$13 = sk$SkipProject$dtcreateError(t$7, t$12, undefined);
        return new (sk$Some)(t$13);
      }
  }));
  var t$14 = this;
  var t$15 = t$14.variables;
  var t$16 = t$15.values();
  var t$17 = t$16.map(((variable) => 
  {
    var t$18 = bindings;
    var t$19 = variable;
    var t$20 = t$19.name;
    var $var = t$18.maybeGet(t$20);
    var value;
    {
      jumpBlockOuterjumpLab$bg17072:{
        jumpLab$bg17072:{
          jumpLab$bg17071:{
            switch ($var.__type_switch_id) {
              case 204:
                break jumpLab$bg17071;
              
              case 205:
                value = $var.value;
                break jumpLab$bg17072;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$21 = this;
            var t$22 = t$21.rootProjectPath;
            var t$23 = new sk$String(('Missing binding for variable \'')).toString();
            var t$24 = variable;
            var t$25 = t$24.name;
            var t$26 = t$25.toString();
            var t$27 = new sk$String(('\'')).toString();
            var t$28 = new sk$String(('')).join(new (sk$Array)([
              t$23,
              t$26,
              t$27
            ]));
            var t$29 = variable;
            var t$30 = t$29.project;
            var t$31 = t$30.dirpath;
            var t$32 = new (sk$Array)([
              t$31
            ]);
            var t$33 = sk$Vector.createFromItems(t$32);
            var t$34 = sk$SkipProject$dtcreateError(t$22, t$28, t$33);
            return new (sk$Some)(t$34);
          }
        }
        {
          var t$35 = variable;
          var t$36 = t$35.values;
          var t$37 = value;
          if (t$36.contains(t$37).__value)
            return singleton$None;
          else
            {
              var t$38 = this;
              var t$39 = t$38.rootProjectPath;
              var t$40 = new sk$String(('Invalid value \'')).toString();
              var t$41 = value;
              var t$42 = t$41.toString();
              var t$43 = new sk$String(('\' for variable \'')).toString();
              var t$44 = variable;
              var t$45 = t$44.name;
              var t$46 = t$45.toString();
              var t$47 = new sk$String(('\'. ')).toString();
              var t$48 = new sk$String(('')).join(new (sk$Array)([
                t$40,
                t$42,
                t$43,
                t$46,
                t$47
              ]));
              var t$49 = new sk$String(('Valid values are \'')).toString();
              var t$50 = variable;
              var t$51 = t$50.values;
              var t$52 = t$51.join(new sk$String((', ')));
              var t$53 = t$52.toString();
              var t$54 = new sk$String(('\'.')).toString();
              var t$55 = new sk$String(('')).join(new (sk$Array)([
                t$49,
                t$53,
                t$54
              ]));
              var t$56 = t$48.$pl(t$55);
              var t$57 = variable;
              var t$58 = t$57.project;
              var t$59 = t$58.dirpath;
              var t$60 = new (sk$Array)([
                t$59
              ]);
              var t$61 = sk$Vector.createFromItems(t$60);
              var t$62 = sk$SkipProject$dtcreateError(t$39, t$56, t$61);
              return new (sk$Some)(t$62);
            }
        }
      }
    }
  }));
  var t$63 = t$2.concat(t$17);
  var t$64 = t$63.collect(sk$Vector);
  return t$64.filterNone();
};

sk$SkipProject$dtSolution.prototype.__bases = [
  sk$SkipProject$dtSolution
];

var sk$SkipProject$dtSolutionConfig = sk.SkipProject$dtSolutionConfig = function SkipProject$dtSolutionConfig(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtSolutionConfig.prototype = Object.create(Object.prototype);

sk$SkipProject$dtSolutionConfig.prototype.__constructor = sk$SkipProject$dtSolutionConfig;

sk$SkipProject$dtSolutionConfig.prototype.__classname = 'SkipProject.SolutionConfig';

sk$SkipProject$dtSolutionConfig.prototype.$frozen = true;

sk$SkipProject$dtSolutionConfig.prototype.__type_switch_id = 302;

sk$SkipProject$dtSolutionConfig.prototype.__copy = function() {
  return new (sk$SkipProject$dtSolutionConfig)(this);
};

sk$SkipProject$dtSolutionConfig.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp117 = __cache.get(this);
  if (_tmp117 === undefined)
    {
      var _tmp117 = this.__copy();
      _tmp117.$frozen = true;
      __cache.set(this, _tmp117);
      _tmp117.excludes = skip.deepFreeze(_tmp117.excludes, __cache);
    }
  return _tmp117;
};

sk$SkipProject$dtSolutionConfig.prototype.__init = function(__named_parameters) {
  this.excludes = __named_parameters.excludes === undefined ? ((() => 
  {
    return sk$Vector.createFromItems(new (sk$Array)([
      (sk$SkipProject$dtunixShellGlobbingExcludes())
    ]));
  })()) : __named_parameters.excludes;
};

sk$SkipProject$dtSolutionConfig.prototype.__bases = [
  sk$SkipProject$dtSolutionConfig
];

var sk$SkipProject$dtSolutionLoader = sk.SkipProject$dtSolutionLoader = function SkipProject$dtSolutionLoader(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtSolutionLoader.prototype = Object.create(Object.prototype);

sk$SkipProject$dtSolutionLoader.prototype.__constructor = sk$SkipProject$dtSolutionLoader;

sk$SkipProject$dtSolutionLoader.prototype.__classname = 'SkipProject.SolutionLoader';

sk$SkipProject$dtSolutionLoader.prototype.$frozen = false;

sk$SkipProject$dtSolutionLoader.prototype.__type_switch_id = 303;

sk$SkipProject$dtSolutionLoader.prototype.__copy = function() {
  return new (sk$SkipProject$dtSolutionLoader)(this);
};

sk$SkipProject$dtSolutionLoader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp118 = __cache.get(this);
  if (_tmp118 === undefined)
    {
      var _tmp118 = this.__copy();
      _tmp118.$frozen = true;
      __cache.set(this, _tmp118);
      _tmp118.solutionConfig = skip.deepFreeze(_tmp118.solutionConfig, __cache);
      _tmp118.rootProjectPath = skip.deepFreeze(_tmp118.rootProjectPath, __cache);
      _tmp118.projects = skip.deepFreeze(_tmp118.projects, __cache);
      _tmp118.variables = skip.deepFreeze(_tmp118.variables, __cache);
      _tmp118.loadingPath = skip.deepFreeze(_tmp118.loadingPath, __cache);
      _tmp118.errors = skip.deepFreeze(_tmp118.errors, __cache);
      _tmp118.filesByPath = skip.deepFreeze(_tmp118.filesByPath, __cache);
      _tmp118.fileToInfo = skip.deepFreeze(_tmp118.fileToInfo, __cache);
      _tmp118.programUnits = skip.deepFreeze(_tmp118.programUnits, __cache);
    }
  return _tmp118;
};

sk$SkipProject$dtSolutionLoader.prototype.__init = function(__named_parameters) {
  this.solutionConfig = __named_parameters.solutionConfig === undefined ? ((() => 
  {
    return new (sk$SkipProject$dtSolutionConfig)({
      excludes: undefined
    });
  })()) : __named_parameters.solutionConfig;
  this.rootProjectPath = __named_parameters.rootProjectPath;
  this.projects = __named_parameters.projects === undefined ? ((() => 
  {
    return sk$Map.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.projects;
  this.variables = __named_parameters.variables === undefined ? ((() => 
  {
    return sk$Map.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.variables;
  this.loadingPath = __named_parameters.loadingPath === undefined ? ((() => 
  {
    return sk$Vector.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.loadingPath;
  this.errors = __named_parameters.errors === undefined ? ((() => 
  {
    return sk$Vector.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.errors;
  this.filesByPath = __named_parameters.filesByPath === undefined ? ((() => 
  {
    return sk$Map.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.filesByPath;
  this.fileToInfo = __named_parameters.fileToInfo === undefined ? ((() => 
  {
    return sk$Map.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.fileToInfo;
  this.programUnits = __named_parameters.programUnits === undefined ? ((() => 
  {
    return sk$Map.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.programUnits;
};

sk$SkipProject$dtSolutionLoader.prototype.addError = function(projectDir, message) {
  var t$ = this;
  var t$1 = projectDir;
  var t$2 = message;
  var t$3 = this;
  var t$4 = t$3.getLoadingPaths();
  return t$.addErrorWithRelatedProjects(t$1, t$2, t$4);
};

sk$SkipProject$dtSolutionLoader.prototype.addErrorWithPosition = function(projectDir, position, message) {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = projectDir;
  var t$3 = position;
  var t$4 = message;
  var t$5 = this;
  var t$6 = t$5.getLoadingPaths();
  var t$7 = sk$SkipProject$dtcreateErrorWithPosition(t$2, t$3, t$4, t$6);
  return t$1.push(t$7);
};

sk$SkipProject$dtSolutionLoader.prototype.addErrorWithRelatedProjects = function(projectDir, message, relatedProjects) {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = projectDir;
  var t$3 = message;
  var t$4 = relatedProjects;
  var t$5 = sk$SkipProject$dtcreateError(t$2, t$3, t$4);
  return t$1.push(t$5);
};

sk$SkipProject$dtSolutionLoader.prototype.checkForProgramUnitCycles = function() {
  sk$SkipProject$dtlog(new sk$String(('checking for program unit cycles')));
  var t$ = this;
  var t$1 = t$.programUnits;
  var t$2 = t$1.values();
  var t$3 = t$2.map(((unit) => 
  {
    var t$4 = unit;
    var t$5 = t$4.key;
    var t$6 = unit;
    var t$7 = t$6.references;
    return new (sk$Tuple2)(t$5, t$7);
  }));
  var t$8 = t$3.collect(sk$Vector);
  var programUnitGraph = sk$DirectedGraph$dtcreate(t$8);
  var errorOfCycle = ((cycle) => 
  {
    var t$9 = this;
    var t$10 = t$9.programUnits;
    var t$11 = cycle;
    var t$12 = t$11.get(new sk$Int(0.0, 0.0));
    var t$13 = t$10.get(t$12);
    var t$14 = t$13.project;
    var firstProjectPath = t$14.dirpath;
    var t$15 = firstProjectPath;
    var t$16 = new sk$String(('Cycle in program unit definitions.')).toString();
    var t$17 = t$16;
    var t$18 = sk$SkipProject$dtgetTraceForDirectoryMessage(t$15, t$17);
    var t$19 = cycle;
    var t$20 = t$19.map(((unitKey) => 
    {
      var t$21 = this;
      var t$22 = t$21.projects;
      var t$23 = unitKey;
      var t$24 = t$23.projectPath;
      var project = t$22.get(t$24);
      var t$25 = project;
      var t$26 = t$25.dirpath;
      var t$27 = new sk$String(('Cycle includes \'')).toString();
      var t$28 = unitKey;
      var t$29 = t$28.name;
      var t$30 = t$29.toString();
      var t$31 = new sk$String(('\' in project \'')).toString();
      var t$32 = project;
      var t$33 = t$32.dirpath;
      var t$34 = sk$SkipProject$dtprojectFilenameOfDirectory(t$33);
      var t$35 = t$34.toString();
      var t$36 = new sk$String(('.\'')).toString();
      var t$37 = new sk$String(('')).join(new (sk$Array)([
        t$27,
        t$30,
        t$31,
        t$35,
        t$36
      ]));
      return sk$SkipProject$dtgetTraceForDirectoryMessage(t$26, t$37);
    }));
    var t$38 = sk$List.createFromItems(t$20);
    var t$39 = new (sk$List$dtCons)(t$18, t$38);
    return new (sk$SkipError$dtError)({
      fix: singleton$None,
      traces: t$39
    });
  });
  var t$40 = programUnitGraph;
  var t$41 = t$40.getSmallestStronglyConnectedComponent();
  var t$42 = errorOfCycle;
  var t$43 = t$41.map(t$42);
  var t$44 = this;
  var t$45 = t$44.errors;
  var t$46 = t$45;
  return t$43.each(((_tmp17143) => 
  {
    return t$46.push(_tmp17143);
  }));
};

sk$SkipProject$dtSolutionLoader.prototype.checkForProjectCycles = function() {
  sk$SkipProject$dtlog(new sk$String(('checking for project cycles')));
  var t$ = this;
  var t$1 = t$.getProjectGraph();
  var t$2 = t$1.getSmallestStronglyConnectedComponent();
  return t$2.each(((cycle) => 
  {
    var t$3 = this;
    var t$4 = cycle;
    var t$5 = t$4.get(new sk$Int(0.0, 0.0));
    var t$6 = new sk$String(('Cycle in project definitions')).toString();
    var t$7 = t$6;
    var t$8 = cycle;
    var t$9 = cycle;
    var t$10 = t$9.size();
    var t$11 = t$8.slice(new sk$Int(1.0, 0.0), t$10);
    return t$3.addErrorWithRelatedProjects(t$5, t$7, t$11);
  }));
};

sk$SkipProject$dtSolutionLoader.prototype.excludesToFilter = function(key, excludes) {
  var excludeToRegexOption = ((exclude) => 
  {
    try {
      {
        var t$ = exclude;
        var t$1 = sk$Regex.create(t$, undefined);
        return new (sk$Some)(t$1);
      }
    }catch ($var){
      {
        var e;
        {
          jumpBlockOuterjumpLab$bg17189:{
            jumpLab$bg17189:{
              {
                e = $var;
                break jumpLab$bg17189;
              }
            }
            {
              var t$2 = this;
              var t$3 = key;
              var t$4 = t$3.projectPath;
              var t$5 = new sk$String(('Regular expression \'')).toString();
              var t$6 = exclude;
              var t$7 = t$6.toString();
              var t$8 = new sk$String(('\' in excludes of program unit \'')).toString();
              var t$9 = key;
              var t$10 = t$9.name;
              var t$11 = t$10.toString();
              var t$12 = new sk$String(('\' is invalid. ')).toString();
              var t$13 = e;
              var t$14 = t$13.getMessage();
              var t$15 = t$14.toString();
              var t$16 = new sk$String(('')).join(new (sk$Array)([
                t$5,
                t$7,
                t$8,
                t$11,
                t$12,
                t$15
              ]));
              t$2.addError(t$4, t$16);
              return singleton$None;
            }
          }
        }
      }
    }
  });
  var t$17 = excludes;
  var t$18 = this;
  var t$19 = t$18.solutionConfig;
  var t$20 = t$19.excludes;
  var t$21 = t$17.concat(t$20);
  var t$22 = excludeToRegexOption;
  var t$23 = t$21.map(t$22);
  var t$24 = t$23.filterNone();
  var regexps = t$24;
  var t$25 = regexps;
  if (t$25.isEmpty().__value)
    return singleton$None;
  else
    return new (sk$Some)(((path) => 
    {
      var t$26 = regexps;
      var t$27 = t$26.any(((regexp) => 
      {
        var t$28 = path;
        var t$29 = regexp;
        return t$28.matches(t$29);
      }));
      return t$27.$bg();
    }));
};

sk$SkipProject$dtSolutionLoader.prototype.getLoadingPaths = function() {
  var t$ = this;
  var t$1 = t$.loadingPath;
  return skip.deepFreeze(t$1.map(((project) => 
  {
    var t$2 = project;
    return t$2.dirpath;
  })), new Map());
};

sk$SkipProject$dtSolutionLoader.prototype.getProjectGraph = function() {
  var t$ = this;
  var t$1 = t$.projects;
  var t$2 = t$1.values();
  var t$3 = t$2.map(((project) => 
  {
    var t$4 = project;
    var t$5 = t$4.dirpath;
    var t$6 = project;
    var t$7 = t$6.allReferencedProjects();
    var t$8 = t$7.collect(sk$Vector);
    return new (sk$Tuple2)(t$5, t$8);
  }));
  var t$9 = t$3.collect(sk$Vector);
  return sk$DirectedGraph$dtcreate(t$9);
};

sk$SkipProject$dtSolutionLoader.prototype.hadErrors = function() {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = t$1.isEmpty();
  return t$2.$bg();
};

sk$SkipProject$dtSolutionLoader.load = function(rootProjectPath) {
  var t$ = rootProjectPath;
  var t$1 = sk$Path$dtisNormalized(t$);
  sk$invariant(t$1, new sk$String(('Expected normalized project path')));
  var t$2 = rootProjectPath;
  var loader = new (sk$SkipProject$dtSolutionLoader)({
    errors: undefined,
    fileToInfo: undefined,
    filesByPath: undefined,
    loadingPath: undefined,
    programUnits: undefined,
    projects: undefined,
    rootProjectPath: t$2,
    solutionConfig: undefined,
    variables: undefined
  });
  var t$3 = loader;
  t$3.loadProjects();
  var t$4 = loader;
  var t$5 = t$4.hadErrors();
  if (t$5.$bg().__value)
    {
      var t$6 = loader;
      t$6.loadProgramUnits();
    }
  else
    {}
  var t$7 = loader;
  var t$8 = t$7.hadErrors();
  if (t$8.$bg().__value)
    {
      var t$9 = loader;
      var t$10 = skip.deepFreeze(t$9.projects, new Map());
      var t$11 = rootProjectPath;
      var t$12 = loader;
      var t$13 = skip.deepFreeze(t$12.programUnits, new Map());
      var t$14 = loader;
      var t$15 = skip.deepFreeze(t$14.fileToInfo, new Map());
      var t$16 = loader;
      var t$17 = skip.deepFreeze(t$16.variables, new Map());
      var solution = new (sk$SkipProject$dtSolution)({
        fileToInfo: t$15,
        programUnits: t$13,
        projects: t$10,
        rootProjectPath: t$11,
        variables: t$17
      });
      var t$18 = solution;
      sk$SkipProject$dtlog(t$18);
      var t$19 = solution;
      return new (sk$Success)(t$19);
    }
  else
    {
      var t$20 = loader;
      var t$21 = skip.deepFreeze(t$20.errors, new Map());
      return new (sk$Failure)(t$21);
    }
};

sk$SkipProject$dtSolutionLoader.prototype.loadParameterValue = function(key, variable, valueToSources, valueName) {
  var t$ = key;
  var projectPath = t$.projectPath;
  var t$1 = key;
  var programUnitName = t$1.name;
  var t$2 = variable;
  var parameterName = t$2.name;
  var t$3 = valueToSources;
  var t$4 = valueName;
  if (t$3.containsKey(t$4).__value)
    {
      var t$5 = this;
      var t$6 = projectPath;
      var t$7 = new sk$String(('Duplicate value \'')).toString();
      var t$8 = valueName;
      var t$9 = t$8.toString();
      var t$10 = new sk$String(('\' for variable \'')).toString();
      var t$11 = parameterName;
      var t$12 = t$11.toString();
      var t$13 = new sk$String(('\' in program unit \'')).toString();
      var t$14 = programUnitName;
      var t$15 = t$14.toString();
      var t$16 = new sk$String(('\'.')).toString();
      var t$17 = new sk$String(('')).join(new (sk$Array)([
        t$7,
        t$9,
        t$10,
        t$12,
        t$13,
        t$15,
        t$16
      ]));
      t$5.addError(t$6, t$17);
      return new sk$Bool((false));
    }
  else
    {}
  var t$18 = variable;
  var t$19 = t$18.values;
  var t$20 = valueName;
  var t$21 = t$19.contains(t$20);
  if (t$21.$bg().__value)
    {
      var t$22 = this;
      var t$23 = projectPath;
      var t$24 = new sk$String(('Value \'')).toString();
      var t$25 = valueName;
      var t$26 = t$25.toString();
      var t$27 = new sk$String(('\' is not a valid value for variable \'')).toString();
      var t$28 = parameterName;
      var t$29 = t$28.toString();
      var t$30 = new sk$String(('\' in program unit \'')).toString();
      var t$31 = programUnitName;
      var t$32 = t$31.toString();
      var t$33 = new sk$String(('\'.')).toString();
      var t$34 = new sk$String(('')).join(new (sk$Array)([
        t$24,
        t$26,
        t$27,
        t$29,
        t$30,
        t$32,
        t$33
      ]));
      t$22.addError(t$23, t$34);
      return new sk$Bool((false));
    }
  else
    {}
  var t$35 = valueToSources;
  var t$36 = valueName;
  if (t$35.containsKey(t$36).__value)
    {
      var t$37 = this;
      var t$38 = projectPath;
      var t$39 = new sk$String(('Duplicate value \'')).toString();
      var t$40 = valueName;
      var t$41 = t$40.toString();
      var t$42 = new sk$String(('\' for variable \'')).toString();
      var t$43 = parameterName;
      var t$44 = t$43.toString();
      var t$45 = new sk$String(('\' in program unit \'')).toString();
      var t$46 = programUnitName;
      var t$47 = t$46.toString();
      var t$48 = new sk$String(('\'.')).toString();
      var t$49 = new sk$String(('')).join(new (sk$Array)([
        t$39,
        t$41,
        t$42,
        t$44,
        t$45,
        t$47,
        t$48
      ]));
      t$37.addError(t$38, t$49);
      return new sk$Bool((false));
    }
  else
    {}
  return new sk$Bool((true));
};

sk$SkipProject$dtSolutionLoader.prototype.loadProgramUnit = function(project, name, config, isDefault) {
  var t$ = project;
  var projectPath = t$.dirpath;
  var t$1 = projectPath;
  var t$2 = name;
  var key = sk$SkipProject$dtProgramUnitKey.create(t$1, t$2);
  var t$3 = this;
  var t$4 = t$3.programUnits;
  var t$5 = key;
  if (t$4.containsKey(t$5).__value)
    {
      var t$6 = this;
      var t$7 = projectPath;
      var t$8 = new sk$String(('Project file contains duplicate program unit \'')).toString();
      var t$9 = name;
      var t$10 = t$9.toString();
      var t$11 = new sk$String(('\'.')).toString();
      var t$12 = new sk$String(('')).join(new (sk$Array)([
        t$8,
        t$10,
        t$11
      ]));
      t$6.addError(t$7, t$12);
      return sk.__.$void;
    }
  else
    {}
  var t$13 = this;
  var t$14 = key;
  var t$15 = config;
  var t$16 = t$15.excludes;
  var excludes = t$13.excludesToFilter(t$14, t$16);
  var t$17 = this;
  var t$18 = key;
  var t$19 = excludes;
  var t$20 = config;
  var t$21 = t$20.sources;
  var files = t$17.loadSourceList(t$18, t$19, t$21, singleton$None);
  var t$22 = config;
  var t$23 = t$22.references;
  var t$24 = t$23.map(((reference) => 
  {
    var t$25 = this;
    var t$26 = project;
    var t$27 = reference;
    return t$25.maybeCreateReference(t$26, t$27);
  }));
  var references = t$24.filterNone();
  var t$28 = config;
  var t$29 = t$28.parameters;
  var t$30 = t$29.items();
  var t$31 = t$30.map(((nameValues) => 
  {
    var t$32 = this;
    var t$33 = key;
    var t$34 = nameValues;
    var t$35 = t$34.i0;
    var t$36 = nameValues;
    var t$37 = t$36.i1;
    return t$32.maybeLoadParameter(t$33, t$35, t$37);
  }));
  var t$38 = t$31.collect(sk$Vector);
  var parameters = t$38.filterNone();
  var t$39 = key;
  var t$40 = config;
  var t$41 = t$40.kind;
  var t$42 = isDefault;
  var t$43 = project;
  var t$44 = files;
  var t$45 = references;
  var t$46 = parameters;
  var unit = new (sk$SkipProject$dtProgramUnit)({
    files: t$44,
    isDefault: t$42,
    key: t$39,
    kind: t$41,
    parameters: t$46,
    project: t$43,
    references: t$45
  });
  sk$SkipProject$dtlog(new sk$String(('loaded program unit ...')));
  var t$47 = unit;
  sk$SkipProject$dtlog(t$47);
  var t$48 = this;
  var t$49 = t$48.programUnits;
  var t$50 = key;
  var t$51 = unit;
  return t$49.add(t$50, t$51);
};

sk$SkipProject$dtSolutionLoader.prototype.loadProgramUnits = function() {
  sk$SkipProject$dtlog(new sk$String(('loading program units')));
  var t$ = this;
  var t$1 = t$.getProjectGraph();
  var t$2 = t$1.dfsOrderAll();
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg17347:{
      break$bg17347:{
        dowhile_else$bg17346:{
          do
            {
              jumpBlockOuterdowhile_cond$bg17348:{
                dowhile_cond$bg17348:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var projectPath;
                    {
                      jumpBlockOuterjumpLab$bg17392:{
                        jumpLab$bg17392:{
                          jumpLab$bg17391:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg17391;
                              
                              case 205:
                                projectPath = var2.value;
                                break jumpLab$bg17392;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg17348;
                          }
                        }
                        {
                          var t$4 = this;
                          var t$5 = t$4.projects;
                          var t$6 = projectPath;
                          var project = t$5.get(t$6);
                          var t$7 = project;
                          var defaultProgramUnitName = t$7.getDefaultProgramUnitName();
                          var t$8 = project;
                          var t$9 = t$8.config;
                          var t$10 = t$9.programUnits;
                          var var3 = t$10.items();
                          var var4 = new sk$Bool((true));
                          var break_val;
                          {
                            jumpBlockOuterbreak$bg17361:{
                              break$bg17361:{
                                dowhile_else$bg17360:{
                                  do
                                    {
                                      jumpBlockOuterdowhile_cond$bg17362:{
                                        dowhile_cond$bg17362:{
                                          {
                                            var t$11 = var3;
                                            var var5 = t$11.next();
                                            var programUnit;
                                            var name;
                                            {
                                              jumpBlockOuterjumpLab$bg17387:{
                                                jumpLab$bg17387:{
                                                  jumpLab$bg17386:{
                                                    jumpLab$bg17388:{
                                                      switch (var5.__type_switch_id) {
                                                        case 204:
                                                          break jumpLab$bg17386;
                                                        
                                                        case 205:
                                                          break jumpLab$bg17388;
                                                        
                                                        default:
                                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                                      }
                                                    }
                                                    switch (var5.value.__type_switch_id) {
                                                      case 392:
                                                        name = var5.value.i0;
                                                        programUnit = var5.value.i1;
                                                        break jumpLab$bg17387;
                                                      
                                                      default:
                                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                                    }
                                                  }
                                                  {
                                                    var4 = new sk$Bool((false));
                                                    break dowhile_cond$bg17362;
                                                  }
                                                }
                                                {
                                                  var t$12 = defaultProgramUnitName;
                                                  var t$13 = name;
                                                  var t$14 = new (sk$Some)(t$13);
                                                  var isDefault = t$12.$eq$eq(t$14);
                                                  var t$15 = this;
                                                  var t$16 = project;
                                                  var t$17 = name;
                                                  var t$18 = programUnit;
                                                  var t$19 = isDefault;
                                                  t$15.loadProgramUnit(t$16, t$17, t$18, t$19);
                                                }
                                                break jumpBlockOuterjumpLab$bg17387;
                                              }
                                            }
                                            break dowhile_cond$bg17362;
                                          }
                                        }
                                        if (var4.__value)
                                          {}
                                        else
                                          break dowhile_else$bg17360;
                                        break jumpBlockOuterdowhile_cond$bg17362;
                                      }
                                    }
                                  while (true);
                                }
                                break_val = sk.__.$void;
                                break jumpBlockOuterbreak$bg17361;
                              }
                              {}
                              break jumpBlockOuterbreak$bg17361;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg17392;
                      }
                    }
                    break dowhile_cond$bg17348;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg17346;
                break jumpBlockOuterdowhile_cond$bg17348;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg17347;
      }
      {}
      break jumpBlockOuterbreak$bg17347;
    }
  }
  var t$20 = this;
  if (t$20.hadErrors().__value)
    return sk.__.$void;
  else
    {}
  var t$21 = this;
  var t$22 = t$21.programUnits;
  var t$23 = t$22.values();
  var t$24 = this;
  var t$25 = t$24;
  t$23.each(((_tmp17381) => 
  {
    return t$25.validateProgramUnitReferences(_tmp17381);
  }));
  var t$26 = this;
  if (t$26.hadErrors().__value)
    return sk.__.$void;
  else
    {}
  var t$27 = this;
  return t$27.checkForProgramUnitCycles();
};

sk$SkipProject$dtSolutionLoader.prototype.loadProject = function(dirname) {
  var t$ = dirname;
  var t$1 = sk$Path$dtisNormalized(t$);
  sk$invariant(t$1, undefined);
  var t$2 = this;
  var t$3 = t$2.projects;
  var t$4 = dirname;
  if (t$3.containsKey(t$4).__value)
    return sk.__.$void;
  else
    {}
  var t$5 = dirname;
  var projectFilename = sk$SkipProject$dtprojectFilenameOfDirectory(t$5);
  var t$6;
  try {
    {
      var t$7 = projectFilename;
      t$6 = sk$FileSystem$dtreadTextFile(t$7);
    }
  }catch ($var){
    {
      var e;
      {
        jumpBlockOuterjumpLab$bg17453:{
          jumpLab$bg17453:{
            {
              e = $var;
              break jumpLab$bg17453;
            }
          }
          {
            var t$8 = this;
            var t$9 = dirname;
            var t$10 = new sk$String(('Unable to read project file \'')).toString();
            var t$11 = projectFilename;
            var t$12 = t$11.toString();
            var t$13 = new sk$String(('\'. ')).toString();
            var t$14 = e;
            var t$15 = t$14.getMessage();
            var t$16 = t$15.toString();
            var t$17 = new sk$String(('')).join(new (sk$Array)([
              t$10,
              t$12,
              t$13,
              t$16
            ]));
            t$8.addError(t$9, t$17);
            return sk.__.$void;
          }
        }
      }
    }
  }
  var fileContents = t$6;
  var t$18 = fileContents;
  var result = sk$JSON$dtdeserialize(t$18, sk$SkipProjectConfig$dtProject.meta);
  var t$19;
  var e1;
  var message;
  var s;
  var position;
  {
    jumpBlockOuterjumpLab$bg17457:{
      jumpLab$bg17457:{
        jumpLab$bg17456:{
          jumpLab$bg17455:{
            jumpLab$bg17458:{
              switch (result.__type_switch_id) {
                case 259:
                  s = result.value;
                  break jumpLab$bg17455;
                
                case 258:
                  break jumpLab$bg17458;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch (result.error.__type_switch_id) {
              case 48:
                message = result.error.message;
                position = result.error.position;
                break jumpLab$bg17456;
              
              default:
                e1 = result.error;
                break jumpLab$bg17457;

            }
          }
          t$19 = s;
          break jumpBlockOuterjumpLab$bg17457;
        }
        {
          var t$20 = this;
          var t$21 = dirname;
          var t$22 = position;
          var t$23 = new sk$String(('JSON syntax error. ')).toString();
          var t$24 = message;
          var t$25 = t$24.toString();
          var t$26 = new sk$String(('')).join(new (sk$Array)([
            t$23,
            t$25
          ]));
          t$20.addErrorWithPosition(t$21, t$22, t$26);
          return sk.__.$void;
        }
      }
      {
        var t$27 = this;
        var t$28 = dirname;
        var t$29 = new sk$String(('Is not a valid project config because \'')).toString();
        var t$30 = e1;
        var t$31 = t$30.getMessage();
        var t$32 = t$31.toString();
        var t$33 = new sk$String(('\'')).toString();
        var t$34 = new sk$String(('')).join(new (sk$Array)([
          t$29,
          t$32,
          t$33
        ]));
        t$27.addError(t$28, t$34);
        return sk.__.$void;
      }
    }
  }
  var config = t$19;
  var t$35 = config;
  var t$36 = t$35.skipVersion;
  if (t$36.$bg$eq((sk$SkipProjectConfig$dtCURRENT_VERSION())).__value)
    {
      var t$37 = this;
      var t$38 = dirname;
      var t$39 = new sk$String(('Invalid skipVersion \'')).toString();
      var t$40 = config;
      var t$41 = t$40.skipVersion;
      var t$42 = t$41.toString();
      var t$43 = new sk$String(('\'.')).toString();
      var t$44 = new sk$String(('')).join(new (sk$Array)([
        t$39,
        t$42,
        t$43
      ]));
      t$37.addError(t$38, t$44);
      return sk.__.$void;
    }
  else
    {}
  var t$45 = dirname;
  var t$46 = config;
  var project = new (sk$SkipProject$dtProject)({
    config: t$46,
    dirpath: t$45
  });
  sk$SkipProject$dtlog(new sk$String(('loaded project ...')));
  var t$47 = project;
  sk$SkipProject$dtlog(t$47);
  var t$48 = this;
  var t$49 = t$48.projects;
  var t$50 = dirname;
  var t$51 = project;
  t$49.add(t$50, t$51);
  var t$52 = this;
  var t$53 = project;
  t$52.validateProjectVariables(t$53);
  var t$54 = this;
  var t$55 = project;
  return t$54.loadReferencedProjects(t$55);
};

sk$SkipProject$dtSolutionLoader.prototype.loadProjects = function() {
  sk$SkipProject$dtlog(new sk$String(('loading projects')));
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.rootProjectPath;
  t$.loadProject(t$2);
  var t$3 = this;
  if (t$3.hadErrors().__value)
    return sk.__.$void;
  else
    {}
  var t$4 = this;
  return t$4.checkForProjectCycles();
};

sk$SkipProject$dtSolutionLoader.prototype.loadReferencedProjects = function(project) {
  var t$ = this;
  var t$1 = t$.loadingPath;
  var t$2 = project;
  t$1.push(t$2);
  var t$3 = project;
  var t$4 = t$3.allReferencedProjects();
  var t$5 = this;
  var t$6 = t$5;
  t$4.each(((_tmp17475) => 
  {
    return t$6.loadProject(_tmp17475);
  }));
  var t$7 = this;
  var t$8 = t$7.loadingPath;
  var poppedProject = t$8.pop();
  var t$9 = project;
  var t$10 = poppedProject;
  var t$11 = t$9.$eq$eq(t$10);
  return sk$invariant(t$11, undefined);
};

sk$SkipProject$dtSolutionLoader.prototype.loadSourceList = function(key, excludes, sourceList, binding) {
  var t$ = key;
  var projectPath = t$.projectPath;
  var t$1 = key;
  var name = t$1.name;
  var t$2 = sourceList;
  var t$3 = t$2.flatMap(((source) => 
  {
    var t$4 = this;
    var t$5 = projectPath;
    var t$6 = source;
    var t$7 = excludes;
    var t$8 = name;
    return t$4.loadSources(t$5, t$6, t$7, t$8);
  }));
  var files = t$3.collect(sk$Set);
  var t$9 = key;
  var t$10 = binding;
  var fileInfo = new (sk$SkipProject$dtFileInfo)({
    binding: t$10,
    key: t$9
  });
  var t$11 = files;
  var $var = t$11.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg17495:{
      break$bg17495:{
        dowhile_else$bg17494:{
          do
            {
              jumpBlockOuterdowhile_cond$bg17496:{
                dowhile_cond$bg17496:{
                  {
                    var t$12 = $var;
                    var var2 = t$12.next();
                    var file;
                    {
                      jumpBlockOuterjumpLab$bg17577:{
                        jumpLab$bg17577:{
                          jumpLab$bg17576:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg17576;
                              
                              case 205:
                                file = var2.value;
                                break jumpLab$bg17577;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg17496;
                          }
                        }
                        {
                          var t$13 = this;
                          var t$14 = t$13.fileToInfo;
                          var t$15 = file;
                          var var3 = t$14.maybeGet(t$15);
                          var existingInfo;
                          {
                            jumpBlockOuterjumpLab$bg17573:{
                              jumpLab$bg17573:{
                                jumpLab$bg17572:{
                                  switch (var3.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg17572;
                                    
                                    case 205:
                                      existingInfo = var3.value;
                                      break jumpLab$bg17573;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.fileToInfo;
                                  var t$18 = file;
                                  var t$19 = fileInfo;
                                  t$17.add(t$18, t$19);
                                }
                                break jumpBlockOuterjumpLab$bg17573;
                              }
                              {
                                var t$20 = existingInfo;
                                var existingKey = t$20.key;
                                var t$21 = existingInfo;
                                var existingBinding = t$21.binding;
                                var t$22 = existingKey;
                                var t$23 = key;
                                var t$24;
                                if (t$22.$bg$eq(t$23).__value)
                                  {
                                    var t$25 = this;
                                    var t$26 = projectPath;
                                    var t$27 = new sk$String(('File \'')).toString();
                                    var t$28 = file;
                                    var t$29 = t$28.toString();
                                    var t$30 = new sk$String(('\' contained in \'')).toString();
                                    var t$31 = name;
                                    var t$32 = t$31.toString();
                                    var t$33 = new sk$String(('\' is also contained in program unit \'')).toString();
                                    var t$34 = existingKey;
                                    var t$35 = t$34.name;
                                    var t$36 = t$35.toString();
                                    var t$37 = new sk$String(('\' in project \'')).toString();
                                    var t$38 = existingKey;
                                    var t$39 = t$38.projectPath;
                                    var t$40 = sk$SkipProject$dtprojectFilenameOfDirectory(t$39);
                                    var t$41 = t$40.toString();
                                    var t$42 = new sk$String(('\'.')).toString();
                                    var t$43 = new sk$String(('')).join(new (sk$Array)([
                                      t$27,
                                      t$29,
                                      t$30,
                                      t$32,
                                      t$33,
                                      t$36,
                                      t$37,
                                      t$41,
                                      t$42
                                    ]));
                                    t$24 = t$25.addError(t$26, t$43);
                                  }
                                else
                                  {
                                    var t$44 = existingBinding;
                                    var t$45 = binding;
                                    var t$46;
                                    var var4 = new (sk$Tuple2)(t$44, t$45);
                                    var b1;
                                    var b2;
                                    var b;
                                    {
                                      jumpBlockOuterjumpLab$bg17566:{
                                        jumpLab$bg17566:{
                                          jumpLab$bg17565:{
                                            jumpLab$bg17564:{
                                              jumpLab$bg17567:{
                                                jumpLab$bg17568:{
                                                  jumpLab$bg17569:{
                                                    switch (var4.__type_switch_id) {
                                                      case 392:
                                                        break jumpLab$bg17569;
                                                      
                                                      default:
                                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                                    }
                                                  }
                                                  switch (var4.i0.__type_switch_id) {
                                                    case 205:
                                                      break jumpLab$bg17567;
                                                    
                                                    case 204:
                                                      break jumpLab$bg17568;
                                                    
                                                    default:
                                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                                  }
                                                }
                                                switch (var4.i1.__type_switch_id) {
                                                  case 205:
                                                    b = var4.i1.value;
                                                    break jumpLab$bg17565;
                                                  
                                                  case 204:
                                                    break jumpLab$bg17566;
                                                  
                                                  default:
                                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                                }
                                              }
                                              switch (var4.i1.__type_switch_id) {
                                                case 205:
                                                  b1 = var4.i0.value;
                                                  b2 = var4.i1.value;
                                                  break jumpLab$bg17564;
                                                
                                                case 204:
                                                  b = var4.i0.value;
                                                  break jumpLab$bg17565;
                                                
                                                default:
                                                  skip.throwException(sk, new Error('Unmatched Branch'));

                                              }
                                            }
                                            {
                                              var t$47 = this;
                                              var t$48 = projectPath;
                                              var t$49 = new sk$String(('File \'')).toString();
                                              var t$50 = file;
                                              var t$51 = t$50.toString();
                                              var t$52 = new sk$String(('\' contained in \'')).toString();
                                              var t$53 = name;
                                              var t$54 = t$53.toString();
                                              var t$55 = new sk$String(('\' is included with binding \'')).toString();
                                              var t$56 = b1;
                                              var t$57 = t$56.toString();
                                              var t$58 = new sk$String(('\' as well as with binding \'')).toString();
                                              var t$59 = b2;
                                              var t$60 = t$59.toString();
                                              var t$61 = new sk$String(('\'.')).toString();
                                              var t$62 = new sk$String(('')).join(new (sk$Array)([
                                                t$49,
                                                t$51,
                                                t$52,
                                                t$54,
                                                t$55,
                                                t$57,
                                                t$58,
                                                t$60,
                                                t$61
                                              ]));
                                              t$46 = t$47.addError(t$48, t$62);
                                            }
                                            break jumpBlockOuterjumpLab$bg17566;
                                          }
                                          {
                                            var t$63 = this;
                                            var t$64 = projectPath;
                                            var t$65 = new sk$String(('File \'')).toString();
                                            var t$66 = file;
                                            var t$67 = t$66.toString();
                                            var t$68 = new sk$String(('\' contained in \'')).toString();
                                            var t$69 = name;
                                            var t$70 = t$69.toString();
                                            var t$71 = new sk$String(('\' is included both with no variable bindings and with binding \'')).toString();
                                            var t$72 = b;
                                            var t$73 = t$72.toString();
                                            var t$74 = new sk$String(('\'.')).toString();
                                            var t$75 = new sk$String(('')).join(new (sk$Array)([
                                              t$65,
                                              t$67,
                                              t$68,
                                              t$70,
                                              t$71,
                                              t$73,
                                              t$74
                                            ]));
                                            t$46 = t$63.addError(t$64, t$75);
                                          }
                                          break jumpBlockOuterjumpLab$bg17566;
                                        }
                                        t$46 = sk$invariant_violation(new sk$String(('No bindings should have been caught above')));
                                        break jumpBlockOuterjumpLab$bg17566;
                                      }
                                    }
                                    t$24 = t$46;
                                  }
                              }
                              break jumpBlockOuterjumpLab$bg17573;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg17577;
                      }
                    }
                    break dowhile_cond$bg17496;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg17494;
                break jumpBlockOuterdowhile_cond$bg17496;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg17495;
      }
      {}
      break jumpBlockOuterbreak$bg17495;
    }
  }
  return files;
};

sk$SkipProject$dtSolutionLoader.prototype.loadSources = function(projectPath, sourcePath, excludes, programUnitName) {
  var t$ = projectPath;
  var t$1 = sourcePath;
  var resolvedPath = sk$Path$dtjoin(t$, t$1, undefined);
  var t$2 = excludes;
  var t$3;
  if (t$2.isSome().__value)
    t$3 = new sk$Bool((true));
  else
    {
      var t$4 = this;
      var t$5 = t$4.filesByPath;
      var t$6 = resolvedPath;
      var t$7 = t$5.containsKey(t$6);
      t$3 = t$7.$bg();
    }
  if (t$3.__value)
    {
      var t$8 = resolvedPath;
      var t$9 = sk$Path$dtisNormalized(t$8);
      sk$invariant(t$9, undefined);
      var t$10;
      var excludesFilter;
      {
        jumpBlockOuterjumpLab$bg17641:{
          jumpLab$bg17641:{
            jumpLab$bg17640:{
              switch (excludes.__type_switch_id) {
                case 204:
                  break jumpLab$bg17640;
                
                case 205:
                  excludesFilter = excludes.value;
                  break jumpLab$bg17641;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            t$10 = ((_tmp17591) => 
            {
              return sk$SkipProject$dtisSkipFile(_tmp17591);
            });
            break jumpBlockOuterjumpLab$bg17641;
          }
          t$10 = ((path) => 
          {
            var t$11 = path;
            if (sk$SkipProject$dtisSkipFile(t$11).__value)
              {
                var t$12 = excludesFilter;
                var t$13 = path;
                return t$12(t$13);
              }
            else
              return new sk$Bool((false));
          });
          break jumpBlockOuterjumpLab$bg17641;
        }
      }
      var fileFilter = t$10;
      var t$14 = excludes;
      var directoryFilter = t$14.$default(((_) => 
      {
        return new sk$Bool((true));
      }));
      var t$15 = resolvedPath;
      var t$16;
      if (t$15.endsWith(new sk$String(('**'))).__value)
        {
          var t$17 = resolvedPath;
          var t$18 = resolvedPath;
          var t$19 = t$18.length();
          var t$20 = t$19.$mi(new sk$Int(2.0, 0.0));
          var t$21 = t$17.sub(new sk$Int(0.0, 0.0), t$20);
          var recursiveDir = sk$Path$dtnormalize(t$21);
          var t$22 = recursiveDir;
          var t$23 = sk$FileSystem$dtisDirectory(t$22);
          var t$24;
          if (t$23.$bg().__value)
            {
              var t$25 = this;
              var t$26 = projectPath;
              var t$27 = new sk$String(('Recursive source \'')).toString();
              var t$28 = recursiveDir;
              var t$29 = t$28.toString();
              var t$30 = new sk$String(('\' in program unit \'')).toString();
              var t$31 = programUnitName;
              var t$32 = t$31.toString();
              var t$33 = new sk$String(('\' is not a directory.')).toString();
              var t$34 = new sk$String(('')).join(new (sk$Array)([
                t$27,
                t$29,
                t$30,
                t$32,
                t$33
              ]));
              t$25.addError(t$26, t$34);
              t$24 = sk$Vector.createFromItems(new (sk$Array)([]));
            }
          else
            {
              var t$35 = recursiveDir;
              var t$36 = fileFilter;
              var t$37 = directoryFilter;
              t$24 = sk$FileSystem$dtreadFilesRecursive(t$35, t$36, t$37);
            }
          t$16 = t$24;
        }
      else
        {
          var t$38 = resolvedPath;
          var t$39;
          if (sk$FileSystem$dtisDirectory(t$38).__value)
            {
              var t$40 = resolvedPath;
              var t$41 = sk$FileSystem$dtreadDirectory(t$40);
              var t$42 = t$41.collect(sk$Vector);
              var t$43 = fileFilter;
              var t$44 = t$42.filter(t$43);
              t$39 = t$44.map(((file) => 
              {
                var t$45 = resolvedPath;
                var t$46 = file;
                return sk$Path$dtjoin(t$45, t$46, undefined);
              }));
            }
          else
            {
              var t$47 = resolvedPath;
              var t$48 = new (sk$Array)([
                t$47
              ]);
              t$39 = sk$Vector.createFromItems(t$48);
            }
          t$16 = t$39;
        }
      var files = t$16;
      var t$49 = excludes;
      if (t$49.isNone().__value)
        {
          var t$50 = this;
          var t$51 = t$50.filesByPath;
          var t$52 = resolvedPath;
          var t$53 = files;
          t$51.set(t$52, t$53);
        }
      else
        {}
      return files;
    }
  else
    {
      var t$54 = this;
      var t$55 = t$54.filesByPath;
      var t$56 = resolvedPath;
      return t$55.get(t$56);
    }
};

sk$SkipProject$dtSolutionLoader.prototype.maybeCreateReference = function(sourceProject, reference) {
  var t$ = sourceProject;
  var sourceProjectPath = t$.dirpath;
  var t$1 = sourceProject;
  var t$2 = reference;
  var destinationPath = t$1.getPathOfReference(t$2);
  var t$3 = this;
  var t$4 = t$3.projects;
  var t$5 = destinationPath;
  var $var = t$4.maybeGet(t$5);
  var destinationProject;
  {
    jumpBlockOuterjumpLab$bg17674:{
      jumpLab$bg17674:{
        jumpLab$bg17673:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg17673;
            
            case 205:
              destinationProject = $var.value;
              break jumpLab$bg17674;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return singleton$None;
      }
      {
        var t$6 = reference;
        var t$7;
        var var1 = t$6.name;
        var name;
        {
          jumpBlockOuterjumpLab$bg17670:{
            jumpLab$bg17670:{
              jumpLab$bg17669:{
                switch (var1.__type_switch_id) {
                  case 204:
                    break jumpLab$bg17669;
                  
                  case 205:
                    name = var1.value;
                    break jumpLab$bg17670;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$8 = destinationProject;
                var t$9;
                var var2 = t$8.getDefaultProgramUnitName();
                var name1;
                {
                  jumpBlockOuterjumpLab$bg17666:{
                    jumpLab$bg17666:{
                      jumpLab$bg17665:{
                        switch (var2.__type_switch_id) {
                          case 204:
                            break jumpLab$bg17665;
                          
                          case 205:
                            name1 = var2.value;
                            break jumpLab$bg17666;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var t$10 = this;
                        var t$11 = sourceProjectPath;
                        var t$12 = new sk$String(('Referenced project \'')).toString();
                        var t$13 = destinationPath;
                        var t$14 = t$13.toString();
                        var t$15 = new sk$String(('\' does not have a default program unit.')).toString();
                        var t$16 = new sk$String(('')).join(new (sk$Array)([
                          t$12,
                          t$14,
                          t$15
                        ]));
                        t$10.addError(t$11, t$16);
                        return singleton$None;
                      }
                    }
                    t$9 = name1;
                    break jumpBlockOuterjumpLab$bg17666;
                  }
                }
                t$7 = t$9;
              }
              break jumpBlockOuterjumpLab$bg17670;
            }
            t$7 = name;
            break jumpBlockOuterjumpLab$bg17670;
          }
        }
        var destinationName = t$7;
        var t$17 = destinationPath;
        var t$18 = destinationName;
        var t$19 = sk$SkipProject$dtProgramUnitKey.create(t$17, t$18);
        return new (sk$Some)(t$19);
      }
    }
  }
};

sk$SkipProject$dtSolutionLoader.prototype.maybeLoadParameter = function(key, parameterName, values) {
  var t$ = key;
  var projectPath = t$.projectPath;
  var t$1 = key;
  var programUnitName = t$1.name;
  var t$2 = this;
  var t$3 = t$2.variables;
  var t$4 = parameterName;
  var t$5;
  var $var = t$3.maybeGet(t$4);
  var var1;
  {
    jumpBlockOuterjumpLab$bg17757:{
      jumpLab$bg17757:{
        jumpLab$bg17756:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg17756;
            
            case 205:
              var1 = $var.value;
              break jumpLab$bg17757;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$6 = this;
          var t$7 = projectPath;
          var t$8 = new sk$String(('Variable \'')).toString();
          var t$9 = parameterName;
          var t$10 = t$9.toString();
          var t$11 = new sk$String(('\' referenced in program unit \'')).toString();
          var t$12 = programUnitName;
          var t$13 = t$12.toString();
          var t$14 = new sk$String(('\' not found.')).toString();
          var t$15 = new sk$String(('')).join(new (sk$Array)([
            t$8,
            t$10,
            t$11,
            t$13,
            t$14
          ]));
          t$6.addError(t$7, t$15);
          return singleton$None;
        }
      }
      t$5 = var1;
      break jumpBlockOuterjumpLab$bg17757;
    }
  }
  var variable = t$5;
  var valueToSources = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$16 = values;
  var var2 = t$16.items();
  var var3 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg17696:{
      break$bg17696:{
        dowhile_else$bg17695:{
          do
            {
              jumpBlockOuterdowhile_cond$bg17697:{
                dowhile_cond$bg17697:{
                  {
                    var t$17 = var2;
                    var var4 = t$17.next();
                    var value;
                    var valueSources;
                    {
                      jumpBlockOuterjumpLab$bg17761:{
                        jumpLab$bg17761:{
                          jumpLab$bg17760:{
                            jumpLab$bg17762:{
                              switch (var4.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg17760;
                                
                                case 205:
                                  break jumpLab$bg17762;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var4.value.__type_switch_id) {
                              case 392:
                                value = var4.value.i0;
                                valueSources = var4.value.i1;
                                break jumpLab$bg17761;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var3 = new sk$Bool((false));
                            break dowhile_cond$bg17697;
                          }
                        }
                        {
                          var t$18 = this;
                          var t$19 = key;
                          var t$20 = variable;
                          var t$21 = valueToSources;
                          var t$22 = value;
                          if (t$18.loadParameterValue(t$19, t$20, t$21, t$22).__value)
                            {
                              var t$23 = this;
                              var t$24 = key;
                              var t$25 = valueSources;
                              var t$26 = t$25.excludes;
                              var excludes = t$23.excludesToFilter(t$24, t$26);
                              var t$27 = variable;
                              var t$28 = t$27.name;
                              var t$29 = value;
                              var t$30 = new (sk$SkipProject$dtBinding)({
                                value: t$29,
                                variable: t$28
                              });
                              var binding = new (sk$Some)(t$30);
                              var t$31 = this;
                              var t$32 = key;
                              var t$33 = excludes;
                              var t$34 = valueSources;
                              var t$35 = t$34.sources;
                              var t$36 = binding;
                              var sources = t$31.loadSourceList(t$32, t$33, t$35, t$36);
                              var t$37 = valueToSources;
                              var t$38 = value;
                              var t$39 = sources;
                              t$37.add(t$38, t$39);
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg17761;
                      }
                    }
                    break dowhile_cond$bg17697;
                  }
                }
                if (var3.__value)
                  {}
                else
                  break dowhile_else$bg17695;
                break jumpBlockOuterdowhile_cond$bg17697;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg17696;
      }
      {}
      break jumpBlockOuterbreak$bg17696;
    }
  }
  var t$40 = variable;
  var t$41 = t$40.values;
  var t$42 = valueToSources;
  var t$43 = t$42.keys();
  var t$44 = t$43.collect(sk$Set);
  var missingValues = t$41.difference(t$44);
  var t$45 = missingValues;
  var t$46 = t$45.isEmpty();
  if (t$46.$bg().__value)
    {
      var t$47 = missingValues;
      var var5 = t$47.values();
      var var6 = new sk$Bool((true));
      {
        jumpBlockOuterbreak$bg17734:{
          break$bg17734:{
            dowhile_else$bg17733:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg17735:{
                    dowhile_cond$bg17735:{
                      {
                        var t$48 = var5;
                        var var7 = t$48.next();
                        var missingValue;
                        {
                          jumpBlockOuterjumpLab$bg17766:{
                            jumpLab$bg17766:{
                              jumpLab$bg17765:{
                                switch (var7.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg17765;
                                  
                                  case 205:
                                    missingValue = var7.value;
                                    break jumpLab$bg17766;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var6 = new sk$Bool((false));
                                break dowhile_cond$bg17735;
                              }
                            }
                            {
                              var t$49 = this;
                              var t$50 = projectPath;
                              var t$51 = new sk$String(('Missing value \'')).toString();
                              var t$52 = missingValue;
                              var t$53 = t$52.toString();
                              var t$54 = new sk$String(('\' for variable \'')).toString();
                              var t$55 = parameterName;
                              var t$56 = t$55.toString();
                              var t$57 = new sk$String(('\' in program unit \'')).toString();
                              var t$58 = programUnitName;
                              var t$59 = t$58.toString();
                              var t$60 = new sk$String(('\'.')).toString();
                              var t$61 = new sk$String(('')).join(new (sk$Array)([
                                t$51,
                                t$53,
                                t$54,
                                t$56,
                                t$57,
                                t$59,
                                t$60
                              ]));
                              t$49.addError(t$50, t$61);
                            }
                            break jumpBlockOuterjumpLab$bg17766;
                          }
                        }
                        break dowhile_cond$bg17735;
                      }
                    }
                    if (var6.__value)
                      {}
                    else
                      break dowhile_else$bg17733;
                    break jumpBlockOuterdowhile_cond$bg17735;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg17734;
          }
          {}
          break jumpBlockOuterbreak$bg17734;
        }
      }
    }
  else
    {}
  var t$62 = parameterName;
  var t$63 = skip.deepFreeze(valueToSources, new Map());
  var t$64 = new (sk$SkipProject$dtParameter)({
    name: t$62,
    valueToSources: t$63
  });
  return new (sk$Some)(t$64);
};

sk$SkipProject$dtSolutionLoader.prototype.validateProgramUnitReferences = function(programUnit) {
  var t$ = programUnit;
  var t$1 = t$.references;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg17773:{
      break$bg17773:{
        dowhile_else$bg17772:{
          do
            {
              jumpBlockOuterdowhile_cond$bg17774:{
                dowhile_cond$bg17774:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var key;
                    {
                      jumpBlockOuterjumpLab$bg17824:{
                        jumpLab$bg17824:{
                          jumpLab$bg17823:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg17823;
                              
                              case 205:
                                key = var2.value;
                                break jumpLab$bg17824;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg17774;
                          }
                        }
                        {
                          var t$3 = this;
                          var t$4 = t$3.programUnits;
                          var t$5 = key;
                          var t$6 = t$4.containsKey(t$5);
                          if (t$6.$bg().__value)
                            {
                              var t$7 = this;
                              var t$8 = programUnit;
                              var t$9 = t$8.project;
                              var t$10 = t$9.dirpath;
                              var t$11 = new sk$String(('Referenced project \'')).toString();
                              var t$12 = key;
                              var t$13 = t$12.projectPath;
                              var t$14 = sk$SkipProject$dtprojectFilenameOfDirectory(t$13);
                              var t$15 = t$14.toString();
                              var t$16 = new sk$String(('\' does not contain program unit \'')).toString();
                              var t$17 = key;
                              var t$18 = t$17.name;
                              var t$19 = t$18.toString();
                              var t$20 = new sk$String(('\'.')).toString();
                              var t$21 = new sk$String(('')).join(new (sk$Array)([
                                t$11,
                                t$15,
                                t$16,
                                t$19,
                                t$20
                              ]));
                              t$7.addError(t$10, t$21);
                            }
                          else
                            {
                              var t$22 = this;
                              var t$23 = t$22.programUnits;
                              var t$24 = key;
                              var t$25 = t$23.get(t$24);
                              var t$26 = t$25.kind;
                              var t$27 = t$26.isLibrary();
                              if (t$27.$bg().__value)
                                {
                                  var t$28 = this;
                                  var t$29 = programUnit;
                                  var t$30 = t$29.project;
                                  var t$31 = t$30.dirpath;
                                  var t$32 = new sk$String(('Program unit \'')).toString();
                                  var t$33 = key;
                                  var t$34 = t$33.name;
                                  var t$35 = t$34.toString();
                                  var t$36 = new sk$String(('\' in project \'')).toString();
                                  var t$37 = key;
                                  var t$38 = t$37.projectPath;
                                  var t$39 = sk$SkipProject$dtprojectFilenameOfDirectory(t$38);
                                  var t$40 = t$39.toString();
                                  var t$41 = new sk$String(('\' referenced from \'')).toString();
                                  var t$42 = programUnit;
                                  var t$43 = t$42.name();
                                  var t$44 = t$43.toString();
                                  var t$45 = new sk$String(('\' is not a library.')).toString();
                                  var t$46 = new sk$String(('')).join(new (sk$Array)([
                                    t$32,
                                    t$35,
                                    t$36,
                                    t$40,
                                    t$41,
                                    t$44,
                                    t$45
                                  ]));
                                  t$28.addError(t$31, t$46);
                                }
                              else
                                {}
                            }
                        }
                        break jumpBlockOuterjumpLab$bg17824;
                      }
                    }
                    break dowhile_cond$bg17774;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg17772;
                break jumpBlockOuterdowhile_cond$bg17774;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg17773;
      }
      {}
      break jumpBlockOuterbreak$bg17773;
    }
  }
  return break_val;
};

sk$SkipProject$dtSolutionLoader.prototype.validateProjectVariables = function(project) {
  var t$ = project;
  var t$1 = t$.config;
  var t$2 = t$1.variables;
  var $var = t$2.items();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg17832:{
      break$bg17832:{
        dowhile_else$bg17831:{
          do
            {
              jumpBlockOuterdowhile_cond$bg17833:{
                dowhile_cond$bg17833:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var variable;
                    var name;
                    {
                      jumpBlockOuterjumpLab$bg17910:{
                        jumpLab$bg17910:{
                          jumpLab$bg17909:{
                            jumpLab$bg17911:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg17909;
                                
                                case 205:
                                  break jumpLab$bg17911;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                name = var2.value.i0;
                                variable = var2.value.i1;
                                break jumpLab$bg17910;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg17833;
                          }
                        }
                        {
                          var t$4 = this;
                          var t$5 = t$4.variables;
                          var t$6 = name;
                          if (t$5.containsKey(t$6).__value)
                            {
                              var t$7 = this;
                              var t$8 = project;
                              var t$9 = t$8.dirpath;
                              var t$10 = new sk$String(('Duplicate variable name \'')).toString();
                              var t$11 = name;
                              var t$12 = t$11.toString();
                              var t$13 = new sk$String(('\'.')).toString();
                              var t$14 = new sk$String(('')).join(new (sk$Array)([
                                t$10,
                                t$12,
                                t$13
                              ]));
                              var t$15 = this;
                              var t$16 = t$15.variables;
                              var t$17 = name;
                              var t$18 = t$16.get(t$17);
                              var t$19 = t$18.project;
                              var t$20 = t$19.dirpath;
                              var t$21 = new (sk$Array)([
                                t$20
                              ]);
                              var t$22 = sk$Vector.createFromItems(t$21);
                              t$7.addErrorWithRelatedProjects(t$9, t$14, t$22);
                            }
                          else
                            {
                              var values = sk$Set.mcreateFromItems(new (sk$Array)([]));
                              var t$23 = variable;
                              var t$24 = t$23.values;
                              var var3 = t$24.values();
                              var var4 = new sk$Bool((true));
                              var break_val1;
                              {
                                jumpBlockOuterbreak$bg17860:{
                                  break$bg17860:{
                                    dowhile_else$bg17859:{
                                      do
                                        {
                                          jumpBlockOuterdowhile_cond$bg17861:{
                                            dowhile_cond$bg17861:{
                                              {
                                                var t$25 = var3;
                                                var var5 = t$25.next();
                                                var value;
                                                {
                                                  jumpBlockOuterjumpLab$bg17906:{
                                                    jumpLab$bg17906:{
                                                      jumpLab$bg17905:{
                                                        switch (var5.__type_switch_id) {
                                                          case 204:
                                                            break jumpLab$bg17905;
                                                          
                                                          case 205:
                                                            value = var5.value;
                                                            break jumpLab$bg17906;
                                                          
                                                          default:
                                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                                        }
                                                      }
                                                      {
                                                        var4 = new sk$Bool((false));
                                                        break dowhile_cond$bg17861;
                                                      }
                                                    }
                                                    {
                                                      var t$26 = values;
                                                      var t$27 = value;
                                                      if (t$26.contains(t$27).__value)
                                                        {
                                                          var t$28 = this;
                                                          var t$29 = project;
                                                          var t$30 = t$29.dirpath;
                                                          var t$31 = new sk$String(('Variable \'')).toString();
                                                          var t$32 = name;
                                                          var t$33 = t$32.toString();
                                                          var t$34 = new sk$String(('\' contains duplicate value \'')).toString();
                                                          var t$35 = value;
                                                          var t$36 = t$35.toString();
                                                          var t$37 = new sk$String(('\'.')).toString();
                                                          var t$38 = new sk$String(('')).join(new (sk$Array)([
                                                            t$31,
                                                            t$33,
                                                            t$34,
                                                            t$36,
                                                            t$37
                                                          ]));
                                                          t$28.addError(t$30, t$38);
                                                        }
                                                      else
                                                        {
                                                          var t$39 = values;
                                                          var t$40 = value;
                                                          t$39.add(t$40);
                                                        }
                                                    }
                                                    break jumpBlockOuterjumpLab$bg17906;
                                                  }
                                                }
                                                break dowhile_cond$bg17861;
                                              }
                                            }
                                            if (var4.__value)
                                              {}
                                            else
                                              break dowhile_else$bg17859;
                                            break jumpBlockOuterdowhile_cond$bg17861;
                                          }
                                        }
                                      while (true);
                                    }
                                    break_val1 = sk.__.$void;
                                    break jumpBlockOuterbreak$bg17860;
                                  }
                                  {}
                                  break jumpBlockOuterbreak$bg17860;
                                }
                              }
                              var t$41 = variable;
                              var $default = t$41.$default;
                              var t$42 = values;
                              var t$43 = $default;
                              var t$44 = t$42.contains(t$43);
                              var t$45;
                              if (t$44.$bg().__value)
                                {
                                  var t$46 = this;
                                  var t$47 = project;
                                  var t$48 = t$47.dirpath;
                                  var t$49 = new sk$String(('Default value \'')).toString();
                                  var t$50 = $default;
                                  var t$51 = t$50.toString();
                                  var t$52 = new sk$String(('\' is not a valid value for variable \'')).toString();
                                  var t$53 = name;
                                  var t$54 = t$53.toString();
                                  var t$55 = new sk$String(('\'.')).toString();
                                  var t$56 = new sk$String(('')).join(new (sk$Array)([
                                    t$49,
                                    t$51,
                                    t$52,
                                    t$54,
                                    t$55
                                  ]));
                                  t$45 = t$46.addError(t$48, t$56);
                                }
                              else
                                t$45 = sk.__.$void;
                              var t$57 = this;
                              var t$58 = t$57.variables;
                              var t$59 = name;
                              var t$60 = name;
                              var t$61 = project;
                              var t$62 = skip.deepFreeze(values, new Map());
                              var t$63 = $default;
                              var t$64 = new (sk$SkipProject$dtVariable)({
                                $default: t$63,
                                name: t$60,
                                project: t$61,
                                values: t$62
                              });
                              t$58.add(t$59, t$64);
                            }
                        }
                        break jumpBlockOuterjumpLab$bg17910;
                      }
                    }
                    break dowhile_cond$bg17833;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg17831;
                break jumpBlockOuterdowhile_cond$bg17833;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg17832;
      }
      {}
      break jumpBlockOuterbreak$bg17832;
    }
  }
  return break_val;
};

sk$SkipProject$dtSolutionLoader.prototype.__bases = [
  sk$SkipProject$dtSolutionLoader
];

var sk$SkipProject$dtTargetArgument = sk.SkipProject$dtTargetArgument = function SkipProject$dtTargetArgument() {};

sk$SkipProject$dtTargetArgument.prototype = Object.create(Object.prototype);

sk$SkipProject$dtTargetArgument.prototype.__constructor = sk$SkipProject$dtTargetArgument;

sk$SkipProject$dtTargetArgument.prototype.__classname = 'SkipProject.TargetArgument';

sk$SkipProject$dtTargetArgument.prototype.$frozen = undefined;

sk$SkipProject$dtTargetArgument.prototype.__type_switch_id = -1;

sk$SkipProject$dtTargetArgument.prototype.__copy = function() {};

sk$SkipProject$dtTargetArgument.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp119 = __cache.get(this);
  if (_tmp119 === undefined)
    {
      var _tmp119 = this.__copy();
      _tmp119.$frozen = true;
      __cache.set(this, _tmp119);
    }
  return _tmp119;
};

sk$SkipProject$dtTargetArgument.prototype.__init = function(__named_parameters) {};

sk$SkipProject$dtTargetArgument.parse = function(argument) {
  var t$ = argument;
  if (sk$SkipProject$dtisTarget(t$).__value)
    {
      var t$1 = argument;
      var $var = sk$SkipProject$dttargetToProjectProgramUnit(t$1);
      var var1;
      var var2;
      {
        jumpBlockOuterjumpLab$bg17947:{
          jumpLab$bg17947:{
            switch ($var.__type_switch_id) {
              case 392:
                var1 = $var.i0;
                var2 = $var.i1;
                break jumpLab$bg17947;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var programUnitName = var2;
            var projectPath = var1;
            var t$2 = projectPath;
            var t$3 = programUnitName;
            var t$4 = sk$SkipProject$dtProgramUnitArgument.create(t$2, t$3);
            return new (sk$Some)(t$4);
          }
        }
      }
    }
  else
    {
      var t$5 = argument;
      if (sk$FileSystem$dtisDirectory(t$5).__value)
        {
          var t$6 = argument;
          var t$7 = sk$SkipProject$dtProgramUnitArgument.create(t$6, new sk$String(('')));
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = argument;
          if (sk$FileSystem$dtexists(t$8).__value)
            {
              var t$9 = argument;
              var t$10 = new (sk$SkipProject$dtSourceFileArgument)({
                filename: t$9
              });
              return new (sk$Some)(t$10);
            }
          else
            {
              var t$11 = sk$SkipProject$dtprojectFilenameOfDirectory((sk$Path$dtcurrentDirectory()));
              if (sk$FileSystem$dtexists(t$11).__value)
                {
                  var t$12 = argument;
                  var t$13 = sk$SkipProject$dtProgramUnitArgument.create((sk$Path$dtcurrentDirectory()), t$12);
                  return new (sk$Some)(t$13);
                }
              else
                return singleton$None;
            }
        }
    }
};

sk$SkipProject$dtTargetArgument.prototype.__bases = [
  sk$SkipProject$dtTargetArgument
];

var sk$SkipProject$dtVariable = sk.SkipProject$dtVariable = function SkipProject$dtVariable(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProject$dtVariable.prototype = Object.create(Object.prototype);

sk$SkipProject$dtVariable.prototype.__constructor = sk$SkipProject$dtVariable;

sk$SkipProject$dtVariable.prototype.__classname = 'SkipProject.Variable';

sk$SkipProject$dtVariable.prototype.$frozen = true;

sk$SkipProject$dtVariable.prototype.__type_switch_id = 306;

sk$SkipProject$dtVariable.prototype.__copy = function() {
  return new (sk$SkipProject$dtVariable)(this);
};

sk$SkipProject$dtVariable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp120 = __cache.get(this);
  if (_tmp120 === undefined)
    {
      var _tmp120 = this.__copy();
      _tmp120.$frozen = true;
      __cache.set(this, _tmp120);
      _tmp120.name = skip.deepFreeze(_tmp120.name, __cache);
      _tmp120.project = skip.deepFreeze(_tmp120.project, __cache);
      _tmp120.values = skip.deepFreeze(_tmp120.values, __cache);
      _tmp120.$default = skip.deepFreeze(_tmp120.$default, __cache);
    }
  return _tmp120;
};

sk$SkipProject$dtVariable.prototype.__init = function(__named_parameters) {
  this.name = __named_parameters.name;
  this.project = __named_parameters.project;
  this.values = __named_parameters.values;
  this.$default = __named_parameters.$default;
};

sk$SkipProject$dtVariable.prototype.__bases = [
  sk$SkipProject$dtVariable
];

var sk$SkipProjectConfig$dtParameterValue = sk.SkipProjectConfig$dtParameterValue = function SkipProjectConfig$dtParameterValue(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProjectConfig$dtParameterValue.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtParameterValue.prototype.__constructor = sk$SkipProjectConfig$dtParameterValue;

sk$SkipProjectConfig$dtParameterValue.prototype.__classname = 'SkipProjectConfig.ParameterValue';

sk$SkipProjectConfig$dtParameterValue.prototype.$frozen = true;

sk$SkipProjectConfig$dtParameterValue.prototype.__type_switch_id = 307;

sk$SkipProjectConfig$dtParameterValue.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtParameterValue)(this);
};

sk$SkipProjectConfig$dtParameterValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp121 = __cache.get(this);
  if (_tmp121 === undefined)
    {
      var _tmp121 = this.__copy();
      _tmp121.$frozen = true;
      __cache.set(this, _tmp121);
      _tmp121.sources = skip.deepFreeze(_tmp121.sources, __cache);
      _tmp121.excludes = skip.deepFreeze(_tmp121.excludes, __cache);
    }
  return _tmp121;
};

sk$SkipProjectConfig$dtParameterValue.prototype.__init = function(__named_parameters) {
  this.sources = __named_parameters.sources;
  this.excludes = __named_parameters.excludes;
};

sk$SkipProjectConfig$dtParameterValue.prototype.__bases = [
  sk$SkipProjectConfig$dtParameterValue
];

Object.defineProperty(sk$SkipProjectConfig$dtParameterValue, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtParameterValueMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtParameterValue, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtProgramUnit = sk.SkipProjectConfig$dtProgramUnit = function SkipProjectConfig$dtProgramUnit(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProjectConfig$dtProgramUnit.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgramUnit.prototype.__constructor = sk$SkipProjectConfig$dtProgramUnit;

sk$SkipProjectConfig$dtProgramUnit.prototype.__classname = 'SkipProjectConfig.ProgramUnit';

sk$SkipProjectConfig$dtProgramUnit.prototype.$frozen = true;

sk$SkipProjectConfig$dtProgramUnit.prototype.__type_switch_id = 308;

sk$SkipProjectConfig$dtProgramUnit.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgramUnit)(this);
};

sk$SkipProjectConfig$dtProgramUnit.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp122 = __cache.get(this);
  if (_tmp122 === undefined)
    {
      var _tmp122 = this.__copy();
      _tmp122.$frozen = true;
      __cache.set(this, _tmp122);
      _tmp122.sources = skip.deepFreeze(_tmp122.sources, __cache);
      _tmp122.excludes = skip.deepFreeze(_tmp122.excludes, __cache);
      _tmp122.kind = skip.deepFreeze(_tmp122.kind, __cache);
      _tmp122.references = skip.deepFreeze(_tmp122.references, __cache);
      _tmp122.parameters = skip.deepFreeze(_tmp122.parameters, __cache);
    }
  return _tmp122;
};

sk$SkipProjectConfig$dtProgramUnit.prototype.__init = function(__named_parameters) {
  this.sources = __named_parameters.sources;
  this.excludes = __named_parameters.excludes;
  this.kind = __named_parameters.kind;
  this.references = __named_parameters.references;
  this.parameters = __named_parameters.parameters;
};

sk$SkipProjectConfig$dtProgramUnit.prototype.__bases = [
  sk$SkipProjectConfig$dtProgramUnit
];

Object.defineProperty(sk$SkipProjectConfig$dtProgramUnit, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtProgramUnitMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtProgramUnit, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtProgramUnitKind = sk.SkipProjectConfig$dtProgramUnitKind = function SkipProjectConfig$dtProgramUnitKind() {};

sk$SkipProjectConfig$dtProgramUnitKind.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__constructor = sk$SkipProjectConfig$dtProgramUnitKind;

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__classname = 'SkipProjectConfig.ProgramUnitKind';

sk$SkipProjectConfig$dtProgramUnitKind.prototype.$frozen = undefined;

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__type_switch_id = -1;

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgramUnitKind)();
};

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp123 = __cache.get(this);
  if (_tmp123 === undefined)
    {
      var _tmp123 = this.__copy();
      _tmp123.$frozen = true;
      __cache.set(this, _tmp123);
    }
  return _tmp123;
};

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtProgramUnitKind.prototype.__bases = [
  sk$SkipProjectConfig$dtProgramUnitKind
];

Object.defineProperty(sk$SkipProjectConfig$dtProgramUnitKind, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtProgramUnitKindMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtProgramUnitKind, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtProgramUnitReference = sk.SkipProjectConfig$dtProgramUnitReference = function SkipProjectConfig$dtProgramUnitReference(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProjectConfig$dtProgramUnitReference.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__constructor = sk$SkipProjectConfig$dtProgramUnitReference;

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__classname = 'SkipProjectConfig.ProgramUnitReference';

sk$SkipProjectConfig$dtProgramUnitReference.prototype.$frozen = true;

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__type_switch_id = 311;

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgramUnitReference)(this);
};

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp124 = __cache.get(this);
  if (_tmp124 === undefined)
    {
      var _tmp124 = this.__copy();
      _tmp124.$frozen = true;
      __cache.set(this, _tmp124);
      _tmp124.path = skip.deepFreeze(_tmp124.path, __cache);
      _tmp124.name = skip.deepFreeze(_tmp124.name, __cache);
    }
  return _tmp124;
};

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__init = function(__named_parameters) {
  this.path = __named_parameters.path;
  this.name = __named_parameters.name;
};

sk$SkipProjectConfig$dtProgramUnitReference.prototype.__bases = [
  sk$SkipProjectConfig$dtProgramUnitReference
];

Object.defineProperty(sk$SkipProjectConfig$dtProgramUnitReference, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtProgramUnitReferenceMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtProgramUnitReference, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtProject = sk.SkipProjectConfig$dtProject = function SkipProjectConfig$dtProject(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProjectConfig$dtProject.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProject.prototype.__constructor = sk$SkipProjectConfig$dtProject;

sk$SkipProjectConfig$dtProject.prototype.__classname = 'SkipProjectConfig.Project';

sk$SkipProjectConfig$dtProject.prototype.$frozen = true;

sk$SkipProjectConfig$dtProject.prototype.__type_switch_id = 312;

sk$SkipProjectConfig$dtProject.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProject)(this);
};

sk$SkipProjectConfig$dtProject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp125 = __cache.get(this);
  if (_tmp125 === undefined)
    {
      var _tmp125 = this.__copy();
      _tmp125.$frozen = true;
      __cache.set(this, _tmp125);
      _tmp125.skipVersion = skip.deepFreeze(_tmp125.skipVersion, __cache);
      _tmp125.programUnits = skip.deepFreeze(_tmp125.programUnits, __cache);
      _tmp125.$default = skip.deepFreeze(_tmp125.$default, __cache);
      _tmp125.variables = skip.deepFreeze(_tmp125.variables, __cache);
    }
  return _tmp125;
};

sk$SkipProjectConfig$dtProject.prototype.__init = function(__named_parameters) {
  this.skipVersion = __named_parameters.skipVersion;
  this.programUnits = __named_parameters.programUnits;
  this.$default = __named_parameters.$default;
  this.variables = __named_parameters.variables;
};

sk$SkipProjectConfig$dtProject.prototype.__bases = [
  sk$SkipProjectConfig$dtProject
];

Object.defineProperty(sk$SkipProjectConfig$dtProject, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtProjectMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtProject, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtVariable = sk.SkipProjectConfig$dtVariable = function SkipProjectConfig$dtVariable(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SkipProjectConfig$dtVariable.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtVariable.prototype.__constructor = sk$SkipProjectConfig$dtVariable;

sk$SkipProjectConfig$dtVariable.prototype.__classname = 'SkipProjectConfig.Variable';

sk$SkipProjectConfig$dtVariable.prototype.$frozen = true;

sk$SkipProjectConfig$dtVariable.prototype.__type_switch_id = 313;

sk$SkipProjectConfig$dtVariable.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtVariable)(this);
};

sk$SkipProjectConfig$dtVariable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp126 = __cache.get(this);
  if (_tmp126 === undefined)
    {
      var _tmp126 = this.__copy();
      _tmp126.$frozen = true;
      __cache.set(this, _tmp126);
      _tmp126.values = skip.deepFreeze(_tmp126.values, __cache);
      _tmp126.$default = skip.deepFreeze(_tmp126.$default, __cache);
    }
  return _tmp126;
};

sk$SkipProjectConfig$dtVariable.prototype.__init = function(__named_parameters) {
  this.values = __named_parameters.values;
  this.$default = __named_parameters.$default;
};

sk$SkipProjectConfig$dtVariable.prototype.__bases = [
  sk$SkipProjectConfig$dtVariable
];

Object.defineProperty(sk$SkipProjectConfig$dtVariable, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtVariableMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtVariable, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SortedMap = sk.SortedMap = function SortedMap() {};

sk$SortedMap.prototype = Object.create(Object.prototype);

sk$SortedMap.prototype.__constructor = sk$SortedMap;

sk$SortedMap.prototype.__classname = 'SortedMap';

sk$SortedMap.prototype.$frozen = undefined;

sk$SortedMap.prototype.__type_switch_id = -1;

sk$SortedMap.prototype.__copy = function() {};

sk$SortedMap.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp127 = __cache.get(this);
  if (_tmp127 === undefined)
    {
      var _tmp127 = this.__copy();
      _tmp127.$frozen = true;
      __cache.set(this, _tmp127);
    }
  return _tmp127;
};

sk$SortedMap.prototype.__init = function(__named_parameters) {};

sk$SortedMap.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SortedMap.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$SortedMap.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$SortedMap.prototype.$eq$eq = function(other) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = sk$SortedMap$dtItemsIterator.make(t$1);
  var t$3 = other;
  var t$4 = sk$SortedMap$dtItemsIterator.make(t$3);
  return t$.eqLoop(t$2, t$4);
};

sk$SortedMap.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$SortedMap.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$SortedMap.prototype.add = function(key, value) {
  var t$ = this;
  var t$1 = key;
  var t$2 = value;
  return t$.setWith(t$1, t$2, ((_, _1) => 
  {
    skip.throwException(sk, singleton$Duplicate);
  }));
};

sk$SortedMap.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.all(((kv) => 
  {
    var t$2 = p;
    var t$3 = kv;
    var t$4 = t$3.i0;
    var t$5 = kv;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$SortedMap.prototype.any = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.any(((kv) => 
  {
    var t$2 = p;
    var t$3 = kv;
    var t$4 = t$3.i0;
    var t$5 = kv;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$SortedMap.balance = function(k, v, l, r) {
  var t$ = l;
  var hl = t$.height();
  var t$1 = r;
  var hr = t$1.height();
  var t$2 = hl;
  var t$3 = hr;
  var t$4 = t$3.$pl(new sk$Int(2.0, 0.0));
  if (t$2.$gt(t$4).__value)
    {
      var lr;
      var ll;
      var lv;
      var lk;
      {
        jumpBlockOuterjumpLab$bg18448:{
          jumpLab$bg18448:{
            jumpLab$bg18447:{
              switch (l.__type_switch_id) {
                case 314:
                  break jumpLab$bg18447;
                
                case 315:
                  lk = l.key;
                  ll = l.left;
                  lr = l.right;
                  lv = l.value;
                  break jumpLab$bg18448;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            return sk$invariant_violation(new sk$String(('SortedMap::balance: empty left tree')));
          }
          {
            var t$5 = ll;
            var t$6 = t$5.height();
            var t$7 = lr;
            var t$8 = t$7.height();
            if (t$6.$gt$eq(t$8).__value)
              {
                var t$9 = this;
                var t$10 = lk;
                var t$11 = lv;
                var t$12 = ll;
                var t$13 = this;
                var t$14 = k;
                var t$15 = v;
                var t$16 = lr;
                var t$17 = r;
                var t$18 = t$13.node(t$14, t$15, t$16, t$17);
                return t$9.node(t$10, t$11, t$12, t$18);
              }
            else
              {
                var lrv;
                var lrl;
                var lrr;
                var lrk;
                {
                  jumpBlockOuterjumpLab$bg18445:{
                    jumpLab$bg18445:{
                      jumpLab$bg18444:{
                        switch (lr.__type_switch_id) {
                          case 314:
                            break jumpLab$bg18444;
                          
                          case 315:
                            lrk = lr.key;
                            lrl = lr.left;
                            lrr = lr.right;
                            lrv = lr.value;
                            break jumpLab$bg18445;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      return sk$invariant_violation(new sk$String(('SortedMap::balance: empty l.right tree')));
                    }
                    {
                      var t$19 = this;
                      var t$20 = lrk;
                      var t$21 = lrv;
                      var t$22 = this;
                      var t$23 = lk;
                      var t$24 = lv;
                      var t$25 = ll;
                      var t$26 = lrl;
                      var t$27 = t$22.node(t$23, t$24, t$25, t$26);
                      var t$28 = this;
                      var t$29 = k;
                      var t$30 = v;
                      var t$31 = lrr;
                      var t$32 = r;
                      var t$33 = t$28.node(t$29, t$30, t$31, t$32);
                      return t$19.node(t$20, t$21, t$27, t$33);
                    }
                  }
                }
              }
          }
        }
      }
    }
  else
    {
      var t$34 = hr;
      var t$35 = hl;
      var t$36 = t$35.$pl(new sk$Int(2.0, 0.0));
      if (t$34.$gt(t$36).__value)
        {
          var rr;
          var rl;
          var rk;
          var rv;
          {
            jumpBlockOuterjumpLab$bg18454:{
              jumpLab$bg18454:{
                jumpLab$bg18453:{
                  switch (r.__type_switch_id) {
                    case 314:
                      break jumpLab$bg18453;
                    
                    case 315:
                      rk = r.key;
                      rl = r.left;
                      rr = r.right;
                      rv = r.value;
                      break jumpLab$bg18454;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                return sk$invariant_violation(new sk$String(('SortedMap::balance empty right tree')));
              }
              {
                var t$37 = rr;
                var t$38 = t$37.height();
                var t$39 = rl;
                var t$40 = t$39.height();
                if (t$38.$gt$eq(t$40).__value)
                  {
                    var t$41 = this;
                    var t$42 = rk;
                    var t$43 = rv;
                    var t$44 = this;
                    var t$45 = k;
                    var t$46 = v;
                    var t$47 = l;
                    var t$48 = rl;
                    var t$49 = t$44.node(t$45, t$46, t$47, t$48);
                    var t$50 = rr;
                    return t$41.node(t$42, t$43, t$49, t$50);
                  }
                else
                  {
                    var rlv;
                    var rlk;
                    var rlr;
                    var rll;
                    {
                      jumpBlockOuterjumpLab$bg18451:{
                        jumpLab$bg18451:{
                          jumpLab$bg18450:{
                            switch (rl.__type_switch_id) {
                              case 314:
                                break jumpLab$bg18450;
                              
                              case 315:
                                rlk = rl.key;
                                rll = rl.left;
                                rlr = rl.right;
                                rlv = rl.value;
                                break jumpLab$bg18451;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          return sk$invariant_violation(new sk$String(('SortedMap::balance empty r.left tree')));
                        }
                        {
                          var t$51 = this;
                          var t$52 = rlk;
                          var t$53 = rlv;
                          var t$54 = this;
                          var t$55 = k;
                          var t$56 = v;
                          var t$57 = l;
                          var t$58 = rll;
                          var t$59 = t$54.node(t$55, t$56, t$57, t$58);
                          var t$60 = this;
                          var t$61 = rk;
                          var t$62 = rv;
                          var t$63 = rlr;
                          var t$64 = rr;
                          var t$65 = t$60.node(t$61, t$62, t$63, t$64);
                          return t$51.node(t$52, t$53, t$59, t$65);
                        }
                      }
                    }
                  }
              }
            }
          }
        }
      else
        {
          var t$66 = this;
          var t$67 = k;
          var t$68 = v;
          var t$69 = l;
          var t$70 = r;
          return t$66.node(t$67, t$68, t$69, t$70);
        }
    }
};

sk$SortedMap.prototype.chill = function() {
  return this;
};

sk$SortedMap.prototype.compare = function(other) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = sk$SortedMap$dtItemsIterator.make(t$1);
  var t$3 = other;
  var t$4 = sk$SortedMap$dtItemsIterator.make(t$3);
  return t$.compareLoop(t$2, t$4);
};

sk$SortedMap.compareLoop = function(iter1, iter2) {
  do
    {
      jumpBlockOuterloop_end$bg18485:{
        loop_end$bg18485:{
          {
            var t$ = iter1;
            var $var = t$.next();
            var kv1;
            {
              jumpBlockOuterjumpLab$bg18483:{
                jumpLab$bg18483:{
                  jumpLab$bg18482:{
                    switch ($var.__type_switch_id) {
                      case 204:
                        break jumpLab$bg18482;
                      
                      case 205:
                        kv1 = $var.value;
                        break jumpLab$bg18483;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$1 = iter2;
                    var t$2 = t$1.next();
                    if (t$2.isNone().__value)
                      return singleton$EQ;
                    else
                      return singleton$LT;
                  }
                }
                {
                  var t$3 = iter2;
                  var var1 = t$3.next();
                  var kv2;
                  {
                    jumpBlockOuterjumpLab$bg18479:{
                      jumpLab$bg18479:{
                        jumpLab$bg18478:{
                          switch (var1.__type_switch_id) {
                            case 204:
                              break jumpLab$bg18478;
                            
                            case 205:
                              kv2 = var1.value;
                              break jumpLab$bg18479;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        return singleton$GT;
                      }
                      {
                        var t$4 = kv1;
                        var t$5 = kv2;
                        var var2 = t$4.compare(t$5);
                        var c;
                        {
                          jumpBlockOuterjumpLab$bg18475:{
                            jumpLab$bg18475:{
                              jumpLab$bg18474:{
                                switch (var2.__type_switch_id) {
                                  case 206:
                                    break jumpLab$bg18474;
                                  
                                  default:
                                    c = var2;
                                    break jumpLab$bg18475;

                                }
                              }
                              {
                                var t$6 = this;
                                var t$7 = iter1;
                                var t$8 = iter2;
                                var t$9 = t$7;
                                var t$10 = t$8;
                                iter1 = t$9;
                                iter2 = t$10;
                                break loop_end$bg18485;
                              }
                            }
                            return c;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg18485;
      }
    }
  while (true);
};

sk$SortedMap.concat = function(l, r) {
  jumpBlockOuterjumpLab$bg18503:{
    jumpLab$bg18503:{
      jumpLab$bg18502:{
        switch (l.__type_switch_id) {
          case 314:
            break jumpLab$bg18502;
          
          case 315:
            break jumpLab$bg18503;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      return r;
    }
    {
      var t$ = r;
      var $var = t$.minimum();
      var p;
      {
        jumpBlockOuterjumpLab$bg18500:{
          jumpLab$bg18500:{
            jumpLab$bg18499:{
              switch ($var.__type_switch_id) {
                case 204:
                  break jumpLab$bg18499;
                
                case 205:
                  p = $var.value;
                  break jumpLab$bg18500;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            return l;
          }
          {
            var var1;
            var var2;
            {
              jumpBlockOuterjumpLab$bg18496:{
                jumpLab$bg18496:{
                  switch (p.__type_switch_id) {
                    case 392:
                      var1 = p.i0;
                      var2 = p.i1;
                      break jumpLab$bg18496;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var v = var2;
                  var k = var1;
                  var t$1 = this;
                  var t$2 = k;
                  var t$3 = v;
                  var t$4 = l;
                  var t$5 = r;
                  var t$6 = t$5.removeMin();
                  return t$1.balance(t$2, t$3, t$4, t$6);
                }
              }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap.concatOrJoin = function(k, x, l, r) {
  var v;
  {
    jumpBlockOuterjumpLab$bg18515:{
      jumpLab$bg18515:{
        jumpLab$bg18514:{
          switch (x.__type_switch_id) {
            case 204:
              break jumpLab$bg18514;
            
            case 205:
              v = x.value;
              break jumpLab$bg18515;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = l;
          var t$2 = r;
          return t$.concat(t$1, t$2);
        }
      }
      {
        var t$3 = this;
        var t$4 = k;
        var t$5 = v;
        var t$6 = l;
        var t$7 = r;
        return t$3.mergeImpl(t$4, t$5, t$6, t$7);
      }
    }
  }
};

sk$SortedMap.prototype.containsKey = function(key) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = key;
  return t$.containsKeyImpl(t$1, t$2);
};

sk$SortedMap.containsKeyImpl = function(map, k) {
  do
    {
      jumpBlockOuterloop_end$bg18538:{
        loop_end$bg18538:{
          {
            var right;
            var left;
            var key;
            {
              jumpBlockOuterjumpLab$bg18536:{
                jumpLab$bg18536:{
                  jumpLab$bg18535:{
                    switch (map.__type_switch_id) {
                      case 314:
                        break jumpLab$bg18535;
                      
                      case 315:
                        key = map.key;
                        left = map.left;
                        right = map.right;
                        break jumpLab$bg18536;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return new sk$Bool((false));
                }
                {
                  var t$ = k;
                  var t$1 = key;
                  var $var = sk$compare(t$, t$1);
                  {
                    jumpBlockOuterjumpLab$bg18533:{
                      jumpLab$bg18533:{
                        jumpLab$bg18532:{
                          jumpLab$bg18531:{
                            switch ($var.__type_switch_id) {
                              case 208:
                                break jumpLab$bg18531;
                              
                              case 206:
                                break jumpLab$bg18532;
                              
                              case 207:
                                break jumpLab$bg18533;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var t$2 = this;
                            var t$3 = left;
                            var t$4 = k;
                            var t$5 = t$3;
                            var t$6 = t$4;
                            map = t$5;
                            k = t$6;
                            break loop_end$bg18538;
                          }
                        }
                        return new sk$Bool((true));
                      }
                      {
                        var t$7 = this;
                        var t$8 = right;
                        var t$9 = k;
                        var t$10 = t$8;
                        var t$11 = t$9;
                        map = t$10;
                        k = t$11;
                        break loop_end$bg18538;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg18538;
      }
    }
  while (true);
};

sk$SortedMap.create = function() {
  return singleton$SortedMap$dtNil;
};

sk$SortedMap.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m, p) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg18552:{
        jumpLab$bg18552:{
          switch (p.__type_switch_id) {
            case 392:
              $var = p.i0;
              var1 = p.i1;
              break jumpLab$bg18552;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$3 = m;
          var t$4 = k;
          var t$5 = v;
          return t$3.set(t$4, t$5);
        }
      }
    }
  }), t$2);
};

sk$SortedMap.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m, p) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg18562:{
        jumpLab$bg18562:{
          switch (p.__type_switch_id) {
            case 392:
              $var = p.i0;
              var1 = p.i1;
              break jumpLab$bg18562;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$3 = m;
          var t$4 = k;
          var t$5 = v;
          return t$3.set(t$4, t$5);
        }
      }
    }
  }), t$2);
};

sk$SortedMap.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.each(((i) => 
  {
    var t$2 = f;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$SortedMap.prototype.eqBy = function(other, eq) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = sk$SortedMap$dtItemsIterator.make(t$1);
  var t$3 = other;
  var t$4 = sk$SortedMap$dtItemsIterator.make(t$3);
  var t$5 = eq;
  return t$.eqByLoop(t$2, t$4, t$5);
};

sk$SortedMap.eqByLoop = function(iter1, iter2, eq) {
  do
    {
      jumpBlockOuterloop_end$bg18606:{
        loop_end$bg18606:{
          {
            var t$ = iter1;
            var t$1 = t$.next();
            var t$2 = iter2;
            var t$3 = t$2.next();
            var $var = new (sk$Tuple2)(t$1, t$3);
            var kv2;
            var kv1;
            {
              jumpBlockOuterjumpLab$bg18601:{
                jumpLab$bg18601:{
                  jumpLab$bg18600:{
                    jumpLab$bg18599:{
                      jumpLab$bg18602:{
                        jumpLab$bg18603:{
                          jumpLab$bg18604:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg18604;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 205:
                              break jumpLab$bg18602;
                            
                            case 204:
                              break jumpLab$bg18603;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 204:
                            break jumpLab$bg18600;
                          
                          default:
                            break jumpLab$bg18601;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 205:
                          kv1 = $var.i0.value;
                          kv2 = $var.i1.value;
                          break jumpLab$bg18599;
                        
                        default:
                          break jumpLab$bg18601;

                      }
                    }
                    {
                      var t$4 = kv1;
                      var t$5 = t$4.i0;
                      var t$6 = kv2;
                      var t$7 = t$6.i0;
                      var t$8;
                      if (t$5.$eq$eq(t$7).__value)
                        {
                          var t$9 = eq;
                          var t$10 = kv1;
                          var t$11 = t$10.i1;
                          var t$12 = kv2;
                          var t$13 = t$12.i1;
                          t$8 = t$9(t$11, t$13);
                        }
                      else
                        t$8 = new sk$Bool((false));
                      if (t$8.__value)
                        {
                          var t$14 = this;
                          var t$15 = iter1;
                          var t$16 = iter2;
                          var t$17 = eq;
                          var t$18 = t$15;
                          var t$19 = t$16;
                          var t$20 = t$17;
                          iter1 = t$18;
                          iter2 = t$19;
                          eq = t$20;
                          break loop_end$bg18606;
                        }
                      else
                        return new sk$Bool((false));
                    }
                  }
                  return new sk$Bool((true));
                }
                return new sk$Bool((false));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg18606;
      }
    }
  while (true);
};

sk$SortedMap.eqLoop = function(iter1, iter2) {
  do
    {
      jumpBlockOuterloop_end$bg18636:{
        loop_end$bg18636:{
          {
            var t$ = iter1;
            var t$1 = t$.next();
            var t$2 = iter2;
            var t$3 = t$2.next();
            var $var = new (sk$Tuple2)(t$1, t$3);
            var kv2;
            var kv1;
            {
              jumpBlockOuterjumpLab$bg18631:{
                jumpLab$bg18631:{
                  jumpLab$bg18630:{
                    jumpLab$bg18629:{
                      jumpLab$bg18632:{
                        jumpLab$bg18633:{
                          jumpLab$bg18634:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg18634;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 205:
                              break jumpLab$bg18632;
                            
                            case 204:
                              break jumpLab$bg18633;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 204:
                            break jumpLab$bg18630;
                          
                          default:
                            break jumpLab$bg18631;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 205:
                          kv1 = $var.i0.value;
                          kv2 = $var.i1.value;
                          break jumpLab$bg18629;
                        
                        default:
                          break jumpLab$bg18631;

                      }
                    }
                    {
                      var t$4 = kv1;
                      var t$5 = t$4.i0;
                      var t$6 = kv2;
                      var t$7 = t$6.i0;
                      var t$8;
                      if (t$5.$eq$eq(t$7).__value)
                        {
                          var t$9 = kv1;
                          var t$10 = t$9.i1;
                          var t$11 = kv2;
                          var t$12 = t$11.i1;
                          t$8 = t$10.$eq$eq(t$12);
                        }
                      else
                        t$8 = new sk$Bool((false));
                      if (t$8.__value)
                        {
                          var t$13 = this;
                          var t$14 = iter1;
                          var t$15 = iter2;
                          var t$16 = t$14;
                          var t$17 = t$15;
                          iter1 = t$16;
                          iter2 = t$17;
                          break loop_end$bg18636;
                        }
                      else
                        return new sk$Bool((false));
                    }
                  }
                  return new sk$Bool((true));
                }
                return new sk$Bool((false));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg18636;
      }
    }
  while (true);
};

sk$SortedMap.prototype.filterNone = function() {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i1;
    var t$5 = t$4;
    return t$5.isSome();
  }));
  var t$6 = t$2.map(((i1) => 
  {
    var t$7 = i1;
    var t$8 = t$7.i0;
    var t$9 = i1;
    var t$10 = t$9.i1;
    var t$11 = t$10;
    var t$12 = t$11.fromSome(undefined);
    return new (sk$Tuple2)(t$8, t$12);
  }));
  return sk$SortedMap.createFromIterator(t$6);
};

sk$SortedMap.prototype.find = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.findItem(t$1);
  return t$2.map(((p1) => 
  {
    var t$3 = p1;
    return t$3.i1;
  }));
};

sk$SortedMap.prototype.findItem = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.find(((kv) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg18665:{
        jumpLab$bg18665:{
          switch (kv.__type_switch_id) {
            case 392:
              $var = kv.i0;
              var1 = kv.i1;
              break jumpLab$bg18665;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$2 = p;
          var t$3 = k;
          var t$4 = v;
          return t$2(t$3, t$4);
        }
      }
    }
  }));
};

sk$SortedMap.prototype.get = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.getItem(t$1);
  return t$2.i1;
};

sk$SortedMap.prototype.getItem = function(key) {
  var t$ = this;
  var t$1 = key;
  var $var = t$.maybeGetItem(t$1);
  var p;
  {
    jumpBlockOuterjumpLab$bg18676:{
      jumpLab$bg18676:{
        jumpLab$bg18675:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg18675;
            
            case 205:
              p = $var.value;
              break jumpLab$bg18676;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return sk$throwKeyNotFound();
      }
      return p;
    }
  }
};

sk$SortedMap.prototype.hash = function() {
  var t$ = this;
  return t$.reduce(((h, k, v) => 
  {
    var t$1 = h;
    var t$2 = k;
    var t$3 = t$2.hash();
    var t$4 = sk$Hashable$dtcombine(t$1, t$3);
    var t$5 = v;
    var t$6 = t$5.hash();
    return sk$Hashable$dtcombine(t$4, t$6);
  }), new sk$Int(47.0, 0.0));
};

sk$SortedMap.prototype.head = function() {
  var t$ = this;
  var t$1 = t$.minimum();
  return t$1.map(((p) => 
  {
    var t$2 = p;
    return t$2.i1;
  }));
};

sk$SortedMap.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.size();
  var items = sk$Vector.mcreate(t$1);
  var t$2 = this;
  t$2.each(((key, value) => 
  {
    var t$3 = items;
    var t$4 = key;
    var t$5 = sk$inspect(t$4);
    var t$6 = value;
    var t$7 = sk$inspect(t$6);
    var t$8 = new (sk$Tuple2)(t$5, t$7);
    return t$3.push(t$8);
  }));
  var t$9 = items;
  var t$10 = t$9.toArray();
  return new (sk$InspectMap)(new sk$String(('SortedMap')), t$10);
};

sk$SortedMap.prototype.items = function() {
  var t$ = this;
  return sk$SortedMap$dtItemsIterator.make(t$);
};

sk$SortedMap.prototype.joinKeys = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((k, _) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = k;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$SortedMap.prototype.joinValues = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((_, v) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = v;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$SortedMap.prototype.keys = function() {
  var t$ = this;
  return sk$SortedMap$dtKeysIterator.make(t$);
};

sk$SortedMap.prototype.last = function() {
  var t$ = this;
  var t$1 = t$.maximum();
  return t$1.map(((p) => 
  {
    var t$2 = p;
    return t$2.i1;
  }));
};

sk$SortedMap.prototype.mapItems = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = s;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return sk$SortedMap.createFromIterator(t$2);
};

sk$SortedMap.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.map(((p) => 
  {
    var t$3 = p;
    return t$3.i1;
  }));
};

sk$SortedMap.mergeAll = function(maps) {
  var t$ = maps;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m1, m2) => 
  {
    var t$3 = m1;
    var t$4 = m2;
    return t$3.merge(t$4);
  }), t$2);
};

sk$SortedMap.mergeImpl = function(k, v, l, r) {
  var t$ = l;
  var lh = t$.height();
  var t$1 = r;
  var rh = t$1.height();
  var ln;
  {
    jumpBlockOuterjumpLab$bg18804:{
      jumpLab$bg18804:{
        jumpLab$bg18803:{
          switch (l.__type_switch_id) {
            case 314:
              break jumpLab$bg18803;
            
            case 315:
              ln = l;
              break jumpLab$bg18804;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = r;
          var t$3 = k;
          var t$4 = v;
          return t$2.addMinBinding(t$3, t$4);
        }
      }
      {
        var rn;
        {
          jumpBlockOuterjumpLab$bg18801:{
            jumpLab$bg18801:{
              jumpLab$bg18800:{
                switch (r.__type_switch_id) {
                  case 314:
                    break jumpLab$bg18800;
                  
                  case 315:
                    rn = r;
                    break jumpLab$bg18801;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$5 = l;
                var t$6 = k;
                var t$7 = v;
                return t$5.addMaxBinding(t$6, t$7);
              }
            }
            {
              var t$8 = lh;
              var t$9 = rh;
              var t$10 = t$9.$pl(new sk$Int(2.0, 0.0));
              if (t$8.$gt(t$10).__value)
                {
                  var t$11 = this;
                  var t$12 = ln;
                  var t$13 = t$12.key;
                  var t$14 = ln;
                  var t$15 = t$14.value;
                  var t$16 = ln;
                  var t$17 = t$16.left;
                  var t$18 = this;
                  var t$19 = k;
                  var t$20 = v;
                  var t$21 = ln;
                  var t$22 = t$21.right;
                  var t$23 = r;
                  var t$24 = t$18.mergeImpl(t$19, t$20, t$22, t$23);
                  return t$11.balance(t$13, t$15, t$17, t$24);
                }
              else
                {
                  var t$25 = rh;
                  var t$26 = lh;
                  var t$27 = t$26.$pl(new sk$Int(2.0, 0.0));
                  if (t$25.$gt(t$27).__value)
                    {
                      var t$28 = this;
                      var t$29 = rn;
                      var t$30 = t$29.key;
                      var t$31 = rn;
                      var t$32 = t$31.value;
                      var t$33 = this;
                      var t$34 = k;
                      var t$35 = v;
                      var t$36 = l;
                      var t$37 = rn;
                      var t$38 = t$37.left;
                      var t$39 = t$33.mergeImpl(t$34, t$35, t$36, t$38);
                      var t$40 = rn;
                      var t$41 = t$40.right;
                      return t$28.balance(t$30, t$32, t$39, t$41);
                    }
                  else
                    {
                      var t$42 = this;
                      var t$43 = k;
                      var t$44 = v;
                      var t$45 = l;
                      var t$46 = r;
                      return t$42.node(t$43, t$44, t$45, t$46);
                    }
                }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap.prototype.mergeWith = function(other, f) {
  var t$ = this;
  var t$1 = sk$SortedMap.createFromItems(new (sk$Array)([]));
  var addL = t$.reduce(((result, key, value) => 
  {
    var t$2 = f;
    var t$3 = key;
    var t$4 = value;
    var t$5 = new (sk$Some)(t$4);
    var t$6 = other;
    var t$7 = key;
    var t$8 = t$7;
    var t$9 = t$6.maybeGet(t$8);
    var $var = t$2(t$3, t$5, t$9);
    var resultValue;
    {
      jumpBlockOuterjumpLab$bg18837:{
        jumpLab$bg18837:{
          jumpLab$bg18836:{
            switch ($var.__type_switch_id) {
              case 204:
                break jumpLab$bg18836;
              
              case 205:
                resultValue = $var.value;
                break jumpLab$bg18837;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          return result;
        }
        {
          var t$10 = result;
          var t$11 = key;
          var t$12 = t$11;
          var t$13 = resultValue;
          return t$10.add(t$12, t$13);
        }
      }
    }
  }), t$1);
  var t$14 = other;
  var t$15 = addL;
  return t$14.reduce(((result1, key1, value1) => 
  {
    var t$16 = this;
    var t$17 = key1;
    if (t$16.containsKey(t$17).__value)
      return result1;
    else
      {
        var t$18 = f;
        var t$19 = key1;
        var t$20 = value1;
        var t$21 = new (sk$Some)(t$20);
        var var1 = t$18(t$19, singleton$None, t$21);
        var resultValue1;
        {
          jumpBlockOuterjumpLab$bg18841:{
            jumpLab$bg18841:{
              jumpLab$bg18840:{
                switch (var1.__type_switch_id) {
                  case 204:
                    break jumpLab$bg18840;
                  
                  case 205:
                    resultValue1 = var1.value;
                    break jumpLab$bg18841;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              return result1;
            }
            {
              var t$22 = result1;
              var t$23 = key1;
              var t$24 = resultValue1;
              return t$22.add(t$23, t$24);
            }
          }
        }
      }
  }), t$15);
};

sk$SortedMap.node = function(k, v, l, r) {
  var t$ = l;
  var t$1 = t$.size();
  var t$2 = r;
  var t$3 = t$2.size();
  var t$4 = t$1.$pl(t$3);
  var t$5 = t$4.$pl(new sk$Int(1.0, 0.0));
  var t$6 = l;
  var t$7 = t$6.height();
  var t$8 = r;
  var t$9 = t$8.height();
  var t$10 = sk$max(t$7, t$9);
  var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
  var t$12 = k;
  var t$13 = v;
  var t$14 = l;
  var t$15 = r;
  return new (sk$SortedMap$dtNode)({
    h: t$11,
    key: t$12,
    left: t$14,
    n: t$5,
    right: t$15,
    value: t$13
  });
};

sk$SortedMap.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((k, v) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = k;
    var t$4 = v;
    result = t$1(t$2, t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$SortedMap.prototype.set = function(key, value) {
  var t$ = this;
  var t$1 = key;
  var t$2 = value;
  return t$.setWith(t$1, t$2, ((_, v2) => 
  {
    return v2;
  }));
};

sk$SortedMap.prototype.toString = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new sk$String(('SortedMap{}'));
  else
    {
      var t$1 = this;
      var t$2 = t$1.size();
      var vec = sk$Array.mfill(t$2, new sk$String(('')));
      var t$3 = this;
      var t$4 = vec;
      sk$SortedMap.toStringRecursive(t$3, t$4, new sk$Int(0.0, 0.0));
      var t$5 = vec;
      var t$6 = t$5.join(new sk$String((', ')));
      var t$7 = new sk$String(('SortedMap{')).$pl(t$6);
      return t$7.$pl(new sk$String(('}')));
    }
};

sk$SortedMap.toStringRecursive = function(m, vec, offset) {
  var right;
  var left;
  var key;
  var value;
  {
    jumpBlockOuterjumpLab$bg18905:{
      jumpLab$bg18905:{
        jumpLab$bg18904:{
          switch (m.__type_switch_id) {
            case 314:
              break jumpLab$bg18904;
            
            case 315:
              key = m.key;
              left = m.left;
              right = m.right;
              value = m.value;
              break jumpLab$bg18905;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = new sk$String(('SortedMap::toStringRecursive(): Expected callers')).$pl(new sk$String(('to check size() > 0')));
          return sk$invariant_violation(t$);
        }
      }
      {
        var t$1 = left;
        var t$2 = t$1.isEmpty();
        if (t$2.$bg().__value)
          {
            var t$3 = left;
            var t$4 = vec;
            var t$5 = offset;
            sk$SortedMap.toStringRecursive(t$3, t$4, t$5);
          }
        else
          {}
        var t$6 = offset;
        var t$7 = left;
        var t$8 = t$7.size();
        var t$9 = t$6.$pl(t$8);
        var newOffset = t$9;
        var t$10 = vec;
        var t$11 = newOffset;
        var t$12 = key;
        var t$13 = t$12.toString();
        var t$14 = t$13.$pl(new sk$String((' => ')));
        var t$15 = value;
        var t$16 = t$14.$pl(t$15);
        t$10.set(t$11, t$16);
        var t$17 = right;
        var t$18 = t$17.isEmpty();
        if (t$18.$bg().__value)
          {
            var t$19 = right;
            var t$20 = vec;
            var t$21 = newOffset;
            var t$22 = t$21.$pl(new sk$Int(1.0, 0.0));
            sk$SortedMap.toStringRecursive(t$19, t$20, t$22);
          }
        else
          {}
        return sk.__.$void;
      }
    }
  }
};

sk$SortedMap.prototype.values = function() {
  var t$ = this;
  return sk$SortedMap$dtValuesIterator.make(t$);
};

sk$SortedMap.prototype.__bases = [
  sk$SortedMap
];

var sk$SortedMap$dtLookup = sk.SortedMap$dtLookup = function SortedMap$dtLookup() {};

sk$SortedMap$dtLookup.prototype = Object.create(Object.prototype);

sk$SortedMap$dtLookup.prototype.__constructor = sk$SortedMap$dtLookup;

sk$SortedMap$dtLookup.prototype.__classname = 'SortedMap.Lookup';

sk$SortedMap$dtLookup.prototype.$frozen = undefined;

sk$SortedMap$dtLookup.prototype.__type_switch_id = -1;

sk$SortedMap$dtLookup.prototype.__copy = function() {};

sk$SortedMap$dtLookup.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp128 = __cache.get(this);
  if (_tmp128 === undefined)
    {
      var _tmp128 = this.__copy();
      _tmp128.$frozen = true;
      __cache.set(this, _tmp128);
    }
  return _tmp128;
};

sk$SortedMap$dtLookup.prototype.__init = function(__named_parameters) {};

sk$SortedMap$dtLookup.prototype.__bases = [
  sk$SortedMap$dtLookup
];

var sk$SortedSet = sk.SortedSet = function SortedSet(inner) {
  this.inner = inner;
};

sk$SortedSet.prototype = Object.create(Object.prototype);

sk$SortedSet.prototype.__constructor = sk$SortedSet;

sk$SortedSet.prototype.__classname = 'SortedSet';

sk$SortedSet.prototype.$frozen = true;

sk$SortedSet.prototype.__type_switch_id = 318;

sk$SortedSet.prototype.__copy = function() {
  return new (sk$SortedSet)(this.inner);
};

sk$SortedSet.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp129 = __cache.get(this);
  if (_tmp129 === undefined)
    {
      var _tmp129 = this.__copy();
      _tmp129.$frozen = true;
      __cache.set(this, _tmp129);
      _tmp129.inner = skip.deepFreeze(_tmp129.inner, __cache);
    }
  return _tmp129;
};

sk$SortedSet.prototype.__init = function(__named_parameters) {};

sk$SortedSet.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = other;
  var t$3 = t$2.inner;
  return t$1.$bg$eq(t$3);
};

sk$SortedSet.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = other;
  var t$3 = t$2.inner;
  return t$1.$eq$eq(t$3);
};

sk$SortedSet.prototype.add = function(s) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = s;
  var t$3 = t$1.add(t$2, sk.__.$void);
  return new (sk$SortedSet)(t$3);
};

sk$SortedSet.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = p;
  return t$1.all(t$2);
};

sk$SortedSet.prototype.any = function(p) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = p;
  return t$1.any(t$2);
};

sk$SortedSet.prototype.collect = function(cls) {
  var t$ = cls;
  var t$1 = this;
  var t$2 = t$1.iterator();
  return t$.createFromIterator(t$2);
};

sk$SortedSet.prototype.contains = function(s) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = s;
  return t$1.containsKey(t$2);
};

sk$SortedSet.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.createFromItems(new (sk$Array)([]));
  var t$3 = t$1.foldl(((map, i) => 
  {
    var t$4 = map;
    var t$5 = i;
    return t$4.set(t$5, sk.__.$void);
  }), t$2);
  return new (sk$SortedSet)(t$3);
};

sk$SortedSet.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = i;
    return new (sk$Tuple2)(t$3, sk.__.$void);
  }));
  var t$4 = sk$SortedMap.createFromIterator(t$2);
  return new (sk$SortedSet)(t$4);
};

sk$SortedSet.prototype.difference = function(other) {
  var t$ = other;
  var t$1 = this;
  var t$2 = t$1;
  return t$.reduce(((result, element) => 
  {
    var t$3 = result;
    var t$4 = element;
    return t$3.remove(t$4);
  }), t$2);
};

sk$SortedSet.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.keys();
  var t$3 = f;
  return t$2.each(t$3);
};

sk$SortedSet.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = t$2.filter(((k, _void) => 
  {
    var t$4 = p;
    var t$5 = k;
    return t$4(t$5);
  }));
  return ((() => 
  {
    var _tmp130 = t$.__copy();
    _tmp130.inner = t$3;
    return _tmp130;
  })());
};

sk$SortedSet.prototype.find = function(p) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.keys();
  var t$3 = p;
  return t$2.find(t$3);
};

sk$SortedSet.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.hash();
};

sk$SortedSet.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toArray();
  var t$2 = t$1.map(((e) => 
  {
    var t$3 = e;
    return sk$inspect(t$3);
  }));
  return new (sk$InspectVector)(new sk$String(('Set')), t$2);
};

sk$SortedSet.prototype.intersection = function(other) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = t$2.keys();
  var t$4 = t$3.filter(((k) => 
  {
    var t$5 = other;
    var t$6 = k;
    var t$7 = t$6;
    return t$5.contains(t$7);
  }));
  return t$.createFromIterator(t$4);
};

sk$SortedSet.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.isEmpty();
};

sk$SortedSet.prototype.iterator = function() {
  var t$ = this;
  return t$.values();
};

sk$SortedSet.prototype.map = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.mapItems(((k, _void) => 
  {
    var t$3 = f;
    var t$4 = k;
    var t$5 = t$3(t$4);
    return new (sk$Tuple2)(t$5, sk.__.$void);
  }));
  return new (sk$SortedSet)(t$2);
};

sk$SortedSet.prototype.mapAcc = function(f, acc) {
  var t$ = this;
  var $new = t$.map(((x) => 
  {
    var t$1 = f;
    var t$2 = acc;
    var t$3 = x;
    var $var = t$1(t$2, t$3);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg20476:{
        jumpLab$bg20476:{
          switch ($var.__type_switch_id) {
            case 392:
              var1 = $var.i0;
              var2 = $var.i1;
              break jumpLab$bg20476;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var y = var2;
          acc = var1;
          return y;
        }
      }
    }
  }));
  var t$4 = acc;
  var t$5 = $new;
  return new (sk$Tuple2)(t$4, t$5);
};

sk$SortedSet.prototype.mapWithIndex = function(s) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  return t$.map(((item) => 
  {
    var t$1 = index;
    index = t$1.$pl(new sk$Int(1.0, 0.0));
    var t$2 = s;
    var t$3 = index;
    var t$4 = item;
    return t$2(t$3, t$4);
  }));
};

sk$SortedSet.prototype.reduce = function(f, b) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = b;
  return t$1.reduce(((acc, k, _v) => 
  {
    var t$3 = f;
    var t$4 = acc;
    var t$5 = k;
    return t$3(t$4, t$5);
  }), t$2);
};

sk$SortedSet.prototype.remove = function(s) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = s;
  var t$4 = t$2.remove(t$3);
  return ((() => 
  {
    var _tmp131 = t$.__copy();
    _tmp131.inner = t$4;
    return _tmp131;
  })());
};

sk$SortedSet.prototype.set = function(s) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = s;
  var t$3 = t$1.set(t$2, sk.__.$void);
  return new (sk$SortedSet)(t$3);
};

sk$SortedSet.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.size();
};

sk$SortedSet.prototype.toArray = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new (sk$Array)([]);
  else
    {
      var t$1 = this;
      return t$1.collect(sk$Array);
    }
};

sk$SortedSet.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.collect(sk$Vector);
  var t$2 = t$1.join(new sk$String((', ')));
  var t$3 = new sk$String(('SortedSet[')).$pl(t$2);
  return t$3.$pl(new sk$String((']')));
};

sk$SortedSet.prototype.union = function(other) {
  var t$ = this;
  var t$1 = other;
  return t$.reduce(((r, v) => 
  {
    var t$2 = r;
    var t$3 = v;
    var t$4 = t$3;
    return t$2.set(t$4);
  }), t$1);
};

sk$SortedSet.prototype.unzip = function() {
  var t$ = this;
  return t$.unzipWith(((_tmp20519) => 
  {
    return sk$id(_tmp20519);
  }));
};

sk$SortedSet.prototype.unzipWith = function(f) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var v0 = sk$Vector.mcreate(t$1);
  var t$2 = sz;
  var v1 = sk$Vector.mcreate(t$2);
  var t$3 = this;
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg20527:{
      break$bg20527:{
        dowhile_else$bg20526:{
          do
            {
              jumpBlockOuterdowhile_cond$bg20528:{
                dowhile_cond$bg20528:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg20546:{
                        jumpLab$bg20546:{
                          jumpLab$bg20545:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg20545;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg20546;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg20528;
                          }
                        }
                        {
                          var t$5 = f;
                          var t$6 = x;
                          var p = t$5(t$6);
                          var t$7 = v0;
                          var t$8 = p;
                          var t$9 = t$8.i0;
                          t$7.push(t$9);
                          var t$10 = v1;
                          var t$11 = p;
                          var t$12 = t$11.i1;
                          t$10.push(t$12);
                        }
                        break jumpBlockOuterjumpLab$bg20546;
                      }
                    }
                    break dowhile_cond$bg20528;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg20526;
                break jumpBlockOuterdowhile_cond$bg20528;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg20527;
      }
      {}
      break jumpBlockOuterbreak$bg20527;
    }
  }
  var t$13 = v0;
  var t$14 = sk$SortedSet.createFromItems(t$13);
  var t$15 = v1;
  var t$16 = sk$SortedSet.createFromItems(t$15);
  return new (sk$Tuple2)(t$14, t$16);
};

sk$SortedSet.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.keys();
};

sk$SortedSet.prototype.__bases = [
  sk$SortedSet
];

var sk$String = sk.String = function String() {};

sk$String.prototype = Object.create(Object.prototype);

sk$String.prototype.__constructor = sk$String;

sk$String.prototype.__classname = 'String';

sk$String.prototype.$frozen = true;

sk$String.prototype.__type_switch_id = 319;

sk$String.prototype.__init = function(__named_parameters) {};

sk$String.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return t$2.$bg$eq(new sk$Int(0.0, 0.0));
};

sk$String.prototype.$pl = function(s) {
  var t$ = this;
  var t$1 = s;
  var t$2 = t$1.toString();
  return t$.concat(t$2);
};

sk$String.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return t$2.$lt(new sk$Int(0.0, 0.0));
};

sk$String.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return t$2.$lt$eq(new sk$Int(0.0, 0.0));
};

sk$String.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return t$2.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$String.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return t$2.$gt(new sk$Int(0.0, 0.0));
};

sk$String.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return t$2.$gt$eq(new sk$Int(0.0, 0.0));
};

sk$String.prototype.chars = function() {
  var t$ = this;
  var t$1 = t$.getIter();
  return t$1.collect(sk$Vector);
};

sk$String.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare_raw(t$1);
  return sk$compare(t$2, new sk$Int(0.0, 0.0));
};

sk$String.prototype.compare_raw = function(other) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::compare_raw')));
};

sk$String.prototype.concat = function($atparam0) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::concat')));
};

sk$String.prototype.contains = function(search) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::contains')));
};

sk$String.prototype.each = function(f) {
  var t$ = this;
  return t$.foldl(((_, c) => 
  {
    var t$1 = f;
    var t$2 = c;
    return t$1(t$2);
  }), sk.__.$void);
};

sk$String.prototype.endsWith = function(suffix) {
  var static1 = this.__constructor;
  var t$ = this;
  var mySize = t$.length();
  var t$1 = suffix;
  var suffixSize = t$1.length();
  var t$2 = mySize;
  var t$3 = suffixSize;
  if (t$2.$gt$eq(t$3).__value)
    {
      var t$4 = static1;
      var t$5 = suffix;
      var t$6 = t$5.getIter();
      var t$7 = this;
      var t$8 = t$7.getIter();
      var t$9 = mySize;
      var t$10 = suffixSize;
      var t$11 = t$9.$mi(t$10);
      var t$12 = t$8.drop(t$11);
      return t$4.isPrefix(t$6, t$12);
    }
  else
    return new sk$Bool((false));
};

sk$String.find = function(value, substring) {
  var t$ = value;
  var testValue = t$.clone();
  {
    jumpBlockOuterbreak$bg20611:{
      break$bg20611:{
        while_else$bg20610:{
          do
            {
              jumpBlockOutercontinue$bg20612:{
                continue$bg20612:{
                  {
                    var t$1 = testValue;
                    var t$2 = t$1.atEnd();
                    var t$3;
                    if (t$2.$bg().__value)
                      {
                        var t$4 = this;
                        var t$5 = testValue;
                        var t$6 = substring;
                        var t$7 = t$4.iterStartsWith(t$5, t$6);
                        t$3 = t$7.$bg();
                      }
                    else
                      t$3 = new sk$Bool((false));
                    if (t$3.__value)
                      {
                        var t$8 = testValue;
                        t$8.next();
                      }
                    else
                      break while_else$bg20610;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg20612;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg20611;
      }
      {}
      break jumpBlockOuterbreak$bg20611;
    }
  }
  return testValue;
};

sk$String.prototype.foldl = function(f, accum) {
  var result = accum;
  var t$ = this;
  var t$1 = t$.getIter();
  t$1.each(((ch) => 
  {
    var t$2 = f;
    var t$3 = result;
    var t$4 = ch;
    result = t$2(t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$String.prototype.foldlImpl = function(f, accum, offset) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg20643:{
        loop_end$bg20643:{
          {
            var t$1 = offset;
            var t$2 = t$;
            var t$3 = t$2.length();
            if (t$1.$gt$eq(t$3).__value)
              return accum;
            else
              {
                var t$4 = t$;
                var t$5 = f;
                var t$6 = f;
                var t$7 = accum;
                var t$8 = t$;
                var t$9 = offset;
                var t$10 = t$8.get(t$9);
                var t$11 = t$6(t$7, t$10);
                var t$12 = offset;
                var t$13 = t$12.$pl(new sk$Int(1.0, 0.0));
                var t$14 = t$4;
                var t$15 = t$5;
                var t$16 = t$11;
                var t$17 = t$13;
                t$ = t$14;
                f = t$15;
                accum = t$16;
                offset = t$17;
                break loop_end$bg20643;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg20643;
      }
    }
  while (true);
};

sk$String.fromChars = function(chars) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::fromChars')));
};

sk$String.fromUtf8 = function(bytes) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::fromUtf8')));
};

sk$String.generator = function() {
  return singleton$QuickCheck$dtStringGenerator;
};

sk$String.prototype.get = function(x) {
  var t$ = x;
  var t$1 = this;
  var t$2 = t$1.length();
  if (t$.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = x;
  return t$3.unsafe_get(t$4);
};

sk$String.prototype.getClassName = function() {
  return new sk$String(('String'));
};

sk$String.prototype.getIter = function() {
  var t$ = this;
  return sk$String$dtStringIterator.make(t$);
};

sk$String.prototype.hash = function() {
  var t$ = this;
  return t$.foldl(((acc, c) => 
  {
    var t$1 = acc;
    var t$2 = c;
    var t$3 = t$2.hash();
    return sk$Hashable$dtcombine(t$1, t$3);
  }), new sk$Int(37.0, 0.0));
};

sk$String.prototype.index = function(substring, offset) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg20686:{
        loop_end$bg20686:{
          {
            var t$1 = offset;
            var t$2 = t$;
            var t$3 = t$2.length();
            var t$4 = substring;
            var t$5 = t$4.length();
            var t$6 = t$3.$mi(t$5);
            if (t$1.$gt(t$6).__value)
              return singleton$None;
            else
              {
                var t$7 = t$;
                var t$8 = offset;
                var t$9 = substring;
                var t$10 = t$9.length();
                var t$11 = t$7.sub(t$8, t$10);
                var t$12 = substring;
                if (t$11.$eq$eq(t$12).__value)
                  {
                    var t$13 = offset;
                    return new (sk$Some)(t$13);
                  }
                else
                  {
                    var t$14 = t$;
                    var t$15 = substring;
                    var t$16 = offset;
                    var t$17 = t$16.$pl(new sk$Int(1.0, 0.0));
                    var t$18 = t$14;
                    var t$19 = t$15;
                    var t$20 = t$17;
                    t$ = t$18;
                    substring = t$19;
                    offset = t$20;
                    break loop_end$bg20686;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg20686;
      }
    }
  while (true);
};

sk$String.prototype.inspect = function() {
  var t$ = this;
  return new (sk$InspectString)(t$);
};

sk$String.prototype.isEmpty = function() {
  var t$ = this;
  return t$.$eq$eq(new sk$String(('')));
};

sk$String.prototype.isIntish = function() {
  var t$ = this;
  var t$1 = t$.toIntOption();
  return t$1.isSome();
};

sk$String.isPrefix = function(it1, it2) {
  do
    {
      jumpBlockOuterloop_end$bg20716:{
        loop_end$bg20716:{
          {
            var t$ = it1;
            var $var = t$.next();
            var c1;
            {
              jumpBlockOuterjumpLab$bg20714:{
                jumpLab$bg20714:{
                  jumpLab$bg20713:{
                    switch ($var.__type_switch_id) {
                      case 204:
                        break jumpLab$bg20713;
                      
                      case 205:
                        c1 = $var.value;
                        break jumpLab$bg20714;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return new sk$Bool((true));
                }
                {
                  var t$1 = it2;
                  var var1 = t$1.next();
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg20707:{
                      jumpLab$bg20707:{
                        jumpLab$bg20706:{
                          switch (var1.__type_switch_id) {
                            case 205:
                              c2 = var1.value;
                              var var2 = new sk$Bool((false));
                              var t$2 = c1;
                              var t$3 = c2;
                              var2 = t$2.$eq$eq(t$3);
                              if (var2.__value)
                                break jumpLab$bg20706;
                              else
                                break jumpLab$bg20707;
                            
                            default:
                              break jumpLab$bg20707;

                          }
                        }
                        {
                          var t$4 = this;
                          var t$5 = it1;
                          var t$6 = it2;
                          var t$7 = t$5;
                          var t$8 = t$6;
                          it1 = t$7;
                          it2 = t$8;
                          break loop_end$bg20716;
                        }
                      }
                      return new sk$Bool((false));
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg20716;
      }
    }
  while (true);
};

sk$String.iterStartsWith = function(value, prefix) {
  var t$ = value;
  var testValue = t$.clone();
  var t$1 = prefix;
  var testPrefix = t$1.clone();
  var matched = new sk$Bool((false));
  {
    jumpBlockOuterbreak$bg20724:{
      break$bg20724:{
        while_else$bg20723:{
          do
            {
              jumpBlockOutercontinue$bg20725:{
                continue$bg20725:{
                  {
                    var t$2 = testPrefix;
                    var t$3 = t$2.next();
                    var t$4 = testValue;
                    var t$5 = t$4.next();
                    var t$6;
                    var $var = new (sk$Tuple2)(t$3, t$5);
                    var _;
                    var chPrefix;
                    var chCurrent;
                    var _1;
                    {
                      jumpBlockOuterjumpLab$bg20738:{
                        jumpLab$bg20738:{
                          jumpLab$bg20737:{
                            jumpLab$bg20736:{
                              jumpLab$bg20742:{
                                jumpLab$bg20743:{
                                  switch ($var.__type_switch_id) {
                                    case 392:
                                      break jumpLab$bg20743;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 204:
                                    _1 = $var.i1;
                                    break jumpLab$bg20736;
                                  
                                  case 205:
                                    break jumpLab$bg20742;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 205:
                                  chPrefix = $var.i0.value;
                                  chCurrent = $var.i1.value;
                                  var var1 = new sk$Bool((false));
                                  var t$7 = chPrefix;
                                  var t$8 = chCurrent;
                                  var1 = t$7.$eq$eq(t$8);
                                  if (var1.__value)
                                    break jumpLab$bg20737;
                                  else
                                    {
                                      _ = $var;
                                      break jumpLab$bg20738;
                                    }
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg20738;

                              }
                            }
                            {
                              matched = new sk$Bool((true));
                              t$6 = new sk$Bool((false));
                            }
                            break jumpBlockOuterjumpLab$bg20738;
                          }
                          t$6 = new sk$Bool((true));
                          break jumpBlockOuterjumpLab$bg20738;
                        }
                        t$6 = new sk$Bool((false));
                        break jumpBlockOuterjumpLab$bg20738;
                      }
                    }
                    if (t$6.__value)
                      {}
                    else
                      break while_else$bg20723;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg20725;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg20724;
      }
      {}
      break jumpBlockOuterbreak$bg20724;
    }
  }
  return matched;
};

sk$String.prototype.join = function(pieces) {
  var t$ = pieces;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Array);
  var t$3 = this;
  return t$2.join(t$3);
};

Object.defineProperty(sk$String.prototype, 'length', {
  configurable: true,
  enumerable: true,
  writable: true,
  value: function() {
    sk$invariant_violation(new sk$String(('Attempting to call the native function: String::length')));
  }
});

sk$String.prototype.lowercase = function() {
  var t$ = this;
  var t$1 = t$.length();
  var chars = sk$Array.fillBy(t$1, ((index) => 
  {
    var t$2 = this;
    var t$3 = index;
    var t$4 = t$2.unsafe_get(t$3);
    return t$4.uncapitalize();
  }));
  var t$5 = chars;
  return sk$String.fromChars(t$5);
};

sk$String.prototype.lowercaseFirst = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return this;
  else
    {
      var t$1 = this;
      var first = t$1.unsafe_get(new sk$Int(0.0, 0.0));
      var t$2 = first;
      var first_uncapitalize = t$2.uncapitalize();
      var t$3 = first;
      var t$4 = first_uncapitalize;
      if (t$3.$eq$eq(t$4).__value)
        return this;
      else
        {
          var t$5 = first_uncapitalize;
          var t$6 = t$5.toString();
          var t$7 = this;
          var t$8 = t$7.substring(new sk$Int(1.0, 0.0));
          var t$9 = t$8.toString();
          return new sk$String(('')).join(new (sk$Array)([
            t$6,
            t$9
          ]));
        }
    }
};

sk$String.prototype.match = function(regex) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::match')));
};

sk$String.prototype.matchAll = function(regex) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::matchAll')));
};

sk$String.prototype.matches = function(regex) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::matches')));
};

sk$String.prototype.padLeft = function(width, chr) {
  if (chr === undefined)
    chr = ((() => 
    {
      return $makeChar(32);
    })());
  var t$ = this;
  var len = t$.length();
  var t$1 = len;
  var t$2 = width;
  if (t$1.$gt$eq(t$2).__value)
    return this;
  else
    {
      var t$3 = width;
      var t$4 = len;
      var padCount = t$3.$mi(t$4);
      var t$5 = width;
      return sk$String.tabulate(t$5, ((n) => 
      {
        var t$6 = n;
        var t$7 = padCount;
        if (t$6.$lt(t$7).__value)
          return chr;
        else
          {
            var t$8 = this;
            var t$9 = n;
            var t$10 = padCount;
            var t$11 = t$9.$mi(t$10);
            return t$8.get(t$11);
          }
      }));
    }
};

sk$String.prototype.padRight = function(width, chr) {
  if (chr === undefined)
    chr = ((() => 
    {
      return $makeChar(32);
    })());
  var t$ = this;
  var len = t$.length();
  var t$1 = len;
  var t$2 = width;
  if (t$1.$gt$eq(t$2).__value)
    return this;
  else
    {
      var t$3 = width;
      return sk$String.tabulate(t$3, ((n) => 
      {
        var t$4 = n;
        var t$5 = len;
        if (t$4.$lt(t$5).__value)
          {
            var t$6 = this;
            var t$7 = n;
            return t$6.get(t$7);
          }
        else
          return chr;
      }));
    }
};

sk$String.prototype.repeat = function(count) {
  var t$ = count;
  if (t$.$lt$eq(new sk$Int(0.0, 0.0)).__value)
    return new sk$String((''));
  else
    {
      var t$1 = count;
      var t$2 = this;
      var t$3 = t$2.length();
      var t$4 = t$1.$ti(t$3);
      return sk$String.tabulate(t$4, ((i) => 
      {
        var t$5 = this;
        var t$6 = i;
        var t$7 = this;
        var t$8 = t$7.length();
        var t$9 = t$6.$pc(t$8);
        return t$5.get(t$9);
      }));
    }
};

sk$String.prototype.replace = function(search, replacement) {
  var t$ = search;
  var t$1 = t$.length();
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return this;
  else
    {
      var res = this;
      var start = new sk$Int(0.0, 0.0);
      {
        jumpBlockOuterbreak$bg20814:{
          break$bg20814:{
            while_else$bg20813:{
              do
                {
                  jumpBlockOutercontinue$bg20815:{
                    continue$bg20815:{
                      {
                        var t$2 = res;
                        var t$3 = search;
                        var t$4 = start;
                        var index_opt = t$2.index(t$3, t$4);
                        var t$5;
                        var index;
                        {
                          jumpBlockOuterjumpLab$bg20857:{
                            jumpLab$bg20857:{
                              jumpLab$bg20856:{
                                switch (index_opt.__type_switch_id) {
                                  case 205:
                                    index = index_opt.value;
                                    break jumpLab$bg20856;
                                  
                                  case 204:
                                    break jumpLab$bg20857;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var t$6 = index;
                                var t$7 = replacement;
                                var t$8 = t$7.length();
                                start = t$6.$pl(t$8);
                                var t$9 = res;
                                var t$10 = t$9.length();
                                var t$11 = search;
                                var t$12 = t$11.length();
                                var t$13 = t$10.$mi(t$12);
                                var t$14 = replacement;
                                var t$15 = t$14.length();
                                var t$16 = t$13.$pl(t$15);
                                res = sk$String.tabulate(t$16, ((i) => 
                                {
                                  var t$17 = i;
                                  var t$18 = index;
                                  if (t$17.$lt(t$18).__value)
                                    {
                                      var t$19 = res;
                                      var t$20 = i;
                                      return t$19.get(t$20);
                                    }
                                  else
                                    {
                                      var t$21 = i;
                                      var t$22 = index;
                                      var t$23 = replacement;
                                      var t$24 = t$23.length();
                                      var t$25 = t$22.$pl(t$24);
                                      if (t$21.$lt(t$25).__value)
                                        {
                                          var t$26 = replacement;
                                          var t$27 = i;
                                          var t$28 = index;
                                          var t$29 = t$27.$mi(t$28);
                                          return t$26.get(t$29);
                                        }
                                      else
                                        {
                                          var t$30 = res;
                                          var t$31 = i;
                                          var t$32 = replacement;
                                          var t$33 = t$32.length();
                                          var t$34 = t$31.$mi(t$33);
                                          var t$35 = search;
                                          var t$36 = t$35.length();
                                          var t$37 = t$34.$pl(t$36);
                                          return t$30.get(t$37);
                                        }
                                    }
                                }));
                                t$5 = new sk$Bool((true));
                              }
                              break jumpBlockOuterjumpLab$bg20857;
                            }
                            t$5 = new sk$Bool((false));
                            break jumpBlockOuterjumpLab$bg20857;
                          }
                        }
                        if (t$5.__value)
                          {}
                        else
                          break while_else$bg20813;
                      }
                    }
                    {}
                    break jumpBlockOutercontinue$bg20815;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg20814;
          }
          {}
          break jumpBlockOuterbreak$bg20814;
        }
      }
      return res;
    }
};

sk$String.prototype.replaceRegex = function(regex, callback) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::replaceRegex')));
};

sk$String.prototype.rsearch = function(offset, f) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg20874:{
        loop_end$bg20874:{
          {
            var t$1 = offset;
            var t$2 = t$;
            var t$3 = t$2.length();
            if (t$1.uge(t$3).__value)
              return singleton$None;
            else
              {
                var t$4 = f;
                var t$5 = t$;
                var t$6 = offset;
                var t$7 = t$5.unsafe_get(t$6);
                if (t$4(t$7).__value)
                  {
                    var t$8 = offset;
                    return new (sk$Some)(t$8);
                  }
                else
                  {
                    var t$9 = t$;
                    var t$10 = offset;
                    var t$11 = t$10.$mi(new sk$Int(1.0, 0.0));
                    var t$12 = f;
                    var t$13 = t$9;
                    var t$14 = t$11;
                    var t$15 = t$12;
                    t$ = t$13;
                    offset = t$14;
                    f = t$15;
                    break loop_end$bg20874;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg20874;
      }
    }
  while (true);
};

sk$String.prototype.search = function(offset, f) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg20893:{
        loop_end$bg20893:{
          {
            var t$1 = offset;
            var t$2 = t$;
            var t$3 = t$2.length();
            if (t$1.uge(t$3).__value)
              return singleton$None;
            else
              {
                var t$4 = f;
                var t$5 = t$;
                var t$6 = offset;
                var t$7 = t$5.unsafe_get(t$6);
                if (t$4(t$7).__value)
                  {
                    var t$8 = offset;
                    return new (sk$Some)(t$8);
                  }
                else
                  {
                    var t$9 = t$;
                    var t$10 = offset;
                    var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
                    var t$12 = f;
                    var t$13 = t$9;
                    var t$14 = t$11;
                    var t$15 = t$12;
                    t$ = t$13;
                    offset = t$14;
                    f = t$15;
                    break loop_end$bg20893;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg20893;
      }
    }
  while (true);
};

sk$String.prototype.searchIndex = function(offset, f) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg20911:{
        loop_end$bg20911:{
          {
            var t$1 = offset;
            var t$2 = t$;
            var t$3 = t$2.length();
            if (t$1.uge(t$3).__value)
              return new sk$Int(4294967295.0, 4294967295.0);
            else
              {
                var t$4 = f;
                var t$5 = t$;
                var t$6 = offset;
                var t$7 = t$5.unsafe_get(t$6);
                if (t$4(t$7).__value)
                  return offset;
                else
                  {
                    var t$8 = t$;
                    var t$9 = offset;
                    var t$10 = t$9.$pl(new sk$Int(1.0, 0.0));
                    var t$11 = f;
                    var t$12 = t$8;
                    var t$13 = t$10;
                    var t$14 = t$11;
                    t$ = t$12;
                    offset = t$13;
                    f = t$14;
                    break loop_end$bg20911;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg20911;
      }
    }
  while (true);
};

sk$String.prototype.shrink = function(firstShrink) {
  if (firstShrink === undefined)
    firstShrink = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var t$1 = t$.getIter();
  var chars = t$1.collect(sk$Vector);
  var t$2 = chars;
  var t$3 = firstShrink;
  var t$4 = t$2.shrink(t$3);
  return t$4.map(((x) => 
  {
    var t$5 = x;
    var t$6 = t$5.toArray();
    return sk$String.fromChars(t$6);
  }));
};

sk$String.prototype.split = function(delimiter) {
  var static1 = this.__constructor;
  var t$ = delimiter;
  var delimiterLength = t$.length();
  var t$1 = delimiterLength;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$invariant_violation(new sk$String(('String.split: cannot split with empty delimiter')));
  else
    {
      var t$2 = this;
      if (t$2.isEmpty().__value)
        return sk$Vector.createFromItems(new (sk$Array)([
          new sk$String((''))
        ]));
      else
        {
          var vector = sk$Vector.mcreateFromItems(new (sk$Array)([]));
          var t$3 = this;
          var current = t$3.getIter();
          var t$4 = delimiter;
          var delimiterIter = t$4.getIter();
          {
            jumpBlockOuterbreak$bg20933:{
              break$bg20933:{
                while_else$bg20932:{
                  do
                    {
                      jumpBlockOutercontinue$bg20934:{
                        continue$bg20934:{
                          {
                            var t$5 = static1;
                            var t$6 = current;
                            var t$7 = delimiterIter;
                            var end = t$5.find(t$6, t$7);
                            var t$8 = vector;
                            var t$9 = current;
                            var t$10 = end;
                            var t$11 = t$9.substring(t$10);
                            t$8.push(t$11);
                            current = end;
                            var t$12 = current;
                            var t$13 = t$12.atEnd();
                            var t$14;
                            if (t$13.$bg().__value)
                              {
                                var t$15 = current;
                                var t$16 = delimiterLength;
                                t$15.drop(t$16);
                                t$14 = new sk$Bool((true));
                              }
                            else
                              t$14 = new sk$Bool((false));
                            if (t$14.__value)
                              {}
                            else
                              break while_else$bg20932;
                          }
                        }
                        {}
                        break jumpBlockOutercontinue$bg20934;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg20933;
              }
              {}
              break jumpBlockOuterbreak$bg20933;
            }
          }
          return skip.deepFreeze(vector, new Map());
        }
    }
};

sk$String.prototype.splitLast = function(substring) {
  var t$ = this;
  var a = t$.length();
  var t$1 = substring;
  var b = t$1.length();
  var t$2 = a;
  var t$3 = b;
  var $var = new (sk$Tuple2)(t$2, t$3);
  {
    jumpBlockOuterjumpLab$bg20974:{
      jumpLab$bg20974:{
        jumpLab$bg20973:{
          jumpLab$bg20972:{
            jumpLab$bg20971:{
              jumpLab$bg20970:{
                jumpLab$bg20978:{
                  jumpLab$bg20979:{
                    switch ($var.__type_switch_id) {
                      case 392:
                        break jumpLab$bg20979;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var _tmp132 = $var.i0.__getSwitchValue();
                    switch (_tmp132) {
                      case 0:
                        break jumpLab$bg20970;
                      
                      default:
                        break jumpLab$bg20978;

                    }
                  }
                }
                {
                  var _tmp133 = $var.i1.__getSwitchValue();
                  switch (_tmp133) {
                    case 0:
                      break jumpLab$bg20971;
                    
                    case 1:
                      break jumpLab$bg20972;
                    
                    default:
                      {
                        var var1 = new sk$Bool((false));
                        var t$4 = a;
                        var t$5 = b;
                        var1 = t$4.$lt(t$5);
                        if (var1.__value)
                          break jumpLab$bg20973;
                        else
                          break jumpLab$bg20974;
                      }

                  }
                }
              }
              return new (sk$Tuple2)(new sk$String(('')), new sk$String(('')));
            }
            {
              var t$6 = this;
              return new (sk$Tuple2)(t$6, new sk$String(('')));
            }
          }
          {
            var t$7 = this;
            var t$8 = substring;
            var t$9 = t$8.get(new sk$Int(0.0, 0.0));
            var t$10 = a;
            var t$11 = t$10.$mi(new sk$Int(1.0, 0.0));
            return t$7.splitLastCharHelper(t$9, t$11);
          }
        }
        {
          var t$12 = this;
          return new (sk$Tuple2)(new sk$String(('')), t$12);
        }
      }
      {
        var t$13 = this;
        var t$14 = substring;
        var t$15 = a;
        var t$16 = b;
        var t$17 = t$15.$mi(t$16);
        return t$13.splitLastHelper(t$14, t$17);
      }
    }
  }
};

sk$String.prototype.splitLastCharHelper = function(ch, offset) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg21001:{
        loop_end$bg21001:{
          {
            var t$1 = t$;
            var t$2 = offset;
            var t$3 = t$1.unsafe_get(t$2);
            var t$4 = ch;
            if (t$3.$eq$eq(t$4).__value)
              {
                var t$5 = t$;
                var t$6 = offset;
                var t$7 = t$5.sub(new sk$Int(0.0, 0.0), t$6);
                var t$8 = t$;
                var t$9 = offset;
                var t$10 = t$9.$pl(new sk$Int(1.0, 0.0));
                var t$11 = t$8.substring(t$10);
                return new (sk$Tuple2)(t$7, t$11);
              }
            else
              {
                var t$12 = offset;
                if (t$12.$gt(new sk$Int(0.0, 0.0)).__value)
                  {
                    var t$13 = t$;
                    var t$14 = ch;
                    var t$15 = offset;
                    var t$16 = t$15.$mi(new sk$Int(1.0, 0.0));
                    var t$17 = t$13;
                    var t$18 = t$14;
                    var t$19 = t$16;
                    t$ = t$17;
                    ch = t$18;
                    offset = t$19;
                    break loop_end$bg21001;
                  }
                else
                  {
                    var t$20 = t$;
                    return new (sk$Tuple2)(new sk$String(('')), t$20);
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg21001;
      }
    }
  while (true);
};

sk$String.prototype.splitLastHelper = function(substring, offset) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg21029:{
        loop_end$bg21029:{
          {
            var t$1 = t$;
            var t$2 = offset;
            var t$3 = substring;
            var t$4 = t$3.length();
            var t$5 = t$1.sub(t$2, t$4);
            var t$6 = substring;
            if (t$5.$eq$eq(t$6).__value)
              {
                var t$7 = t$;
                var t$8 = offset;
                var t$9 = t$7.sub(new sk$Int(0.0, 0.0), t$8);
                var t$10 = t$;
                var t$11 = offset;
                var t$12 = substring;
                var t$13 = t$12.length();
                var t$14 = t$11.$pl(t$13);
                var t$15 = t$10.substring(t$14);
                return new (sk$Tuple2)(t$9, t$15);
              }
            else
              {
                var t$16 = offset;
                if (t$16.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                  {
                    var t$17 = t$;
                    return new (sk$Tuple2)(new sk$String(('')), t$17);
                  }
                else
                  {
                    var t$18 = t$;
                    var t$19 = substring;
                    var t$20 = offset;
                    var t$21 = t$20.$mi(new sk$Int(1.0, 0.0));
                    var t$22 = t$18;
                    var t$23 = t$19;
                    var t$24 = t$21;
                    t$ = t$22;
                    substring = t$23;
                    offset = t$24;
                    break loop_end$bg21029;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg21029;
      }
    }
  while (true);
};

sk$String.prototype.splitRegex = function(regex) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::splitRegex')));
};

sk$String.prototype.startsWith = function(prefix) {
  var static1 = this.__constructor;
  var t$ = this;
  var mySize = t$.length();
  var t$1 = prefix;
  var prefixSize = t$1.length();
  var t$2 = mySize;
  var t$3 = prefixSize;
  if (t$2.$gt$eq(t$3).__value)
    {
      var t$4 = static1;
      var t$5 = prefix;
      var t$6 = t$5.getIter();
      var t$7 = this;
      var t$8 = t$7.getIter();
      return t$4.isPrefix(t$6, t$8);
    }
  else
    return new sk$Bool((false));
};

sk$String.prototype.stripPrefix = function(prefix) {
  var t$ = this;
  var t$1 = prefix;
  if (t$.startsWith(t$1).__value)
    {
      var t$2 = this;
      var t$3 = prefix;
      var t$4 = t$3.length();
      return t$2.substring(t$4);
    }
  else
    return this;
};

sk$String.prototype.stripSuffix = function(suffix) {
  var t$ = this;
  var t$1 = suffix;
  if (t$.endsWith(t$1).__value)
    {
      var t$2 = this;
      var t$3 = this;
      var t$4 = t$3.length();
      var t$5 = suffix;
      var t$6 = t$5.length();
      var t$7 = t$4.$mi(t$6);
      return t$2.sub(new sk$Int(0.0, 0.0), t$7);
    }
  else
    return this;
};

sk$String.prototype.sub = function(start, len) {
  var static1 = this.__constructor;
  var t$ = this;
  var this_len = t$.length();
  var t$1 = start;
  var t$2;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = len;
      var t$4 = this_len;
      t$2 = t$3.$eq$eq(t$4);
    }
  else
    t$2 = new sk$Bool((false));
  if (t$2.__value)
    return this;
  else
    {
      var t$5 = start;
      var t$6;
      if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
        t$6 = new sk$Bool((true));
      else
        {
          var t$7 = len;
          t$6 = t$7.$lt(new sk$Int(0.0, 0.0));
        }
      var t$8;
      if (t$6.__value)
        t$8 = new sk$Bool((true));
      else
        {
          var t$9 = start;
          var t$10 = len;
          var t$11 = t$9.$pl(t$10);
          var t$12 = this_len;
          t$8 = t$11.ugt(t$12);
        }
      if (t$8.__value)
        sk$throwOutOfBounds();
      else
        {}
      var t$13 = len;
      var v = sk$Array.fillBy(t$13, ((i) => 
      {
        var t$14 = this;
        var t$15 = start;
        var t$16 = i;
        var t$17 = t$15.$pl(t$16);
        return t$14.unsafe_get(t$17);
      }));
      var t$18 = static1;
      var t$19 = v;
      return t$18.fromChars(t$19);
    }
};

sk$String.prototype.substring = function(start) {
  var t$ = this;
  var t$1 = start;
  var t$2 = this;
  var t$3 = t$2.length();
  var t$4 = start;
  var t$5 = t$3.$mi(t$4);
  return t$.sub(t$1, t$5);
};

sk$String.tabulate = function(size, f) {
  var t$ = this;
  var t$1 = size;
  var t$2 = f;
  var t$3 = sk$Array.fillBy(t$1, t$2);
  return t$.fromChars(t$3);
};

sk$String.prototype.toFloat = function() {
  var t$ = this;
  var $var = t$.toFloatOption();
  var f;
  {
    jumpBlockOuterjumpLab$bg21104:{
      jumpLab$bg21104:{
        jumpLab$bg21103:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg21103;
            
            case 205:
              f = $var.value;
              break jumpLab$bg21104;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = this;
          var t$2 = new sk$String(('String.toFloat: parse error on \'')).$pl(t$1);
          var t$3 = t$2.$pl(new sk$String(('\'')));
          return sk$invariant_violation(t$3);
        }
      }
      return f;
    }
  }
};

sk$String.prototype.toFloatOption = function() {
  var t$ = this;
  if (t$.$eq$eq(new sk$String(('inf'))).__value)
    return new (sk$Some)(sk$Float.inf);
  else
    {
      var t$1 = this;
      if (t$1.$eq$eq(new sk$String(('-inf'))).__value)
        {
          var t$2 = sk$Float.inf.negate();
          return new (sk$Some)(t$2);
        }
      else
        {
          var t$3 = this;
          if (t$3.$eq$eq(new sk$String(('nan'))).__value)
            return new (sk$Some)(sk$Float.nan);
          else
            {
              var hasNegative = new sk$Bool((false));
              var hasMantissaDigit = new sk$Bool((false));
              var hasZeroMantissa = new sk$Bool((false));
              var hasDot = new sk$Bool((false));
              var hasFractionalDigit = new sk$Bool((false));
              var hasExponent = new sk$Bool((false));
              var hasExponentSign = new sk$Bool((false));
              var hasExponentDigit = new sk$Bool((false));
              var error = new sk$Bool((false));
              var check = ((c) => 
              {
                var t$4 = c;
                var t$5;
                if (t$4.$eq$eq($makeChar(45)).__value)
                  {
                    var t$6 = hasNegative;
                    t$5 = t$6.$bg();
                  }
                else
                  t$5 = new sk$Bool((false));
                var t$7;
                if (t$5.__value)
                  {
                    var t$8 = hasMantissaDigit;
                    t$7 = t$8.$bg();
                  }
                else
                  t$7 = new sk$Bool((false));
                if (t$7.__value)
                  {
                    hasNegative = new sk$Bool((true));
                    return sk.__.$void;
                  }
                else
                  {
                    var t$9 = c;
                    var t$10;
                    if (t$9.$eq$eq($makeChar(48)).__value)
                      {
                        var t$11 = hasMantissaDigit;
                        t$10 = t$11.$bg();
                      }
                    else
                      t$10 = new sk$Bool((false));
                    if (t$10.__value)
                      {
                        hasZeroMantissa = new sk$Bool((true));
                        hasMantissaDigit = new sk$Bool((true));
                        return sk.__.$void;
                      }
                    else
                      {
                        var t$12 = c;
                        var t$13;
                        if (t$12.$gt$eq($makeChar(48)).__value)
                          {
                            var t$14 = c;
                            t$13 = t$14.$lt$eq($makeChar(57));
                          }
                        else
                          t$13 = new sk$Bool((false));
                        var t$15;
                        if (t$13.__value)
                          {
                            var t$16 = hasDot;
                            t$15 = t$16.$bg();
                          }
                        else
                          t$15 = new sk$Bool((false));
                        var t$17;
                        if (t$15.__value)
                          {
                            var t$18 = hasExponent;
                            t$17 = t$18.$bg();
                          }
                        else
                          t$17 = new sk$Bool((false));
                        var t$19;
                        if (t$17.__value)
                          {
                            var t$20 = hasZeroMantissa;
                            t$19 = t$20.$bg();
                          }
                        else
                          t$19 = new sk$Bool((false));
                        if (t$19.__value)
                          {
                            hasMantissaDigit = new sk$Bool((true));
                            return sk.__.$void;
                          }
                        else
                          {
                            var t$21 = c;
                            var t$22;
                            if (t$21.$gt$eq($makeChar(48)).__value)
                              {
                                var t$23 = c;
                                t$22 = t$23.$lt$eq($makeChar(57));
                              }
                            else
                              t$22 = new sk$Bool((false));
                            var t$24;
                            if (t$22.__value)
                              t$24 = hasDot;
                            else
                              t$24 = new sk$Bool((false));
                            var t$25;
                            if (t$24.__value)
                              {
                                var t$26 = hasExponent;
                                t$25 = t$26.$bg();
                              }
                            else
                              t$25 = new sk$Bool((false));
                            if (t$25.__value)
                              {
                                hasFractionalDigit = new sk$Bool((true));
                                return sk.__.$void;
                              }
                            else
                              {
                                var t$27 = c;
                                var t$28;
                                if (t$27.$gt$eq($makeChar(48)).__value)
                                  {
                                    var t$29 = c;
                                    t$28 = t$29.$lt$eq($makeChar(57));
                                  }
                                else
                                  t$28 = new sk$Bool((false));
                                var t$30;
                                if (t$28.__value)
                                  t$30 = hasExponent;
                                else
                                  t$30 = new sk$Bool((false));
                                if (t$30.__value)
                                  {
                                    hasExponentDigit = new sk$Bool((true));
                                    return sk.__.$void;
                                  }
                                else
                                  {
                                    var t$31 = c;
                                    var t$32;
                                    if (t$31.$eq$eq($makeChar(46)).__value)
                                      {
                                        var t$33 = hasDot;
                                        t$32 = t$33.$bg();
                                      }
                                    else
                                      t$32 = new sk$Bool((false));
                                    var t$34;
                                    if (t$32.__value)
                                      t$34 = hasMantissaDigit;
                                    else
                                      t$34 = new sk$Bool((false));
                                    var t$35;
                                    if (t$34.__value)
                                      {
                                        var t$36 = hasExponent;
                                        t$35 = t$36.$bg();
                                      }
                                    else
                                      t$35 = new sk$Bool((false));
                                    if (t$35.__value)
                                      {
                                        hasDot = new sk$Bool((true));
                                        return sk.__.$void;
                                      }
                                    else
                                      {
                                        var t$37 = c;
                                        var t$38;
                                        if (t$37.$eq$eq($makeChar(101)).__value)
                                          t$38 = new sk$Bool((true));
                                        else
                                          {
                                            var t$39 = c;
                                            t$38 = t$39.$eq$eq($makeChar(69));
                                          }
                                        var t$40;
                                        if (t$38.__value)
                                          t$40 = hasMantissaDigit;
                                        else
                                          t$40 = new sk$Bool((false));
                                        var t$41;
                                        if (t$40.__value)
                                          {
                                            var t$42 = hasExponent;
                                            t$41 = t$42.$bg();
                                          }
                                        else
                                          t$41 = new sk$Bool((false));
                                        if (t$41.__value)
                                          {
                                            hasExponent = new sk$Bool((true));
                                            return sk.__.$void;
                                          }
                                        else
                                          {
                                            var t$43 = c;
                                            var t$44;
                                            if (t$43.$eq$eq($makeChar(45)).__value)
                                              t$44 = new sk$Bool((true));
                                            else
                                              {
                                                var t$45 = c;
                                                t$44 = t$45.$eq$eq($makeChar(43));
                                              }
                                            var t$46;
                                            if (t$44.__value)
                                              t$46 = hasExponent;
                                            else
                                              t$46 = new sk$Bool((false));
                                            var t$47;
                                            if (t$46.__value)
                                              {
                                                var t$48 = hasExponentSign;
                                                t$47 = t$48.$bg();
                                              }
                                            else
                                              t$47 = new sk$Bool((false));
                                            var t$49;
                                            if (t$47.__value)
                                              {
                                                var t$50 = hasExponentDigit;
                                                t$49 = t$50.$bg();
                                              }
                                            else
                                              t$49 = new sk$Bool((false));
                                            if (t$49.__value)
                                              {
                                                hasExponentSign = new sk$Bool((true));
                                                return sk.__.$void;
                                              }
                                            else
                                              {
                                                error = new sk$Bool((true));
                                                return sk.__.$void;
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              });
              var t$51 = this;
              var t$52 = check;
              t$51.each(t$52);
              var t$53;
              if (error.__value)
                t$53 = new sk$Bool((true));
              else
                {
                  var t$54 = hasMantissaDigit;
                  t$53 = t$54.$bg();
                }
              var t$55;
              if (t$53.__value)
                t$55 = new sk$Bool((true));
              else
                {
                  var t$56;
                  if (hasDot.__value)
                    t$56 = new sk$Bool((true));
                  else
                    t$56 = hasExponent;
                  var t$57 = t$56;
                  t$55 = t$57.$bg();
                }
              var t$58;
              if (t$55.__value)
                t$58 = new sk$Bool((true));
              else
                {
                  var t$59;
                  if (hasDot.__value)
                    {
                      var t$60 = hasFractionalDigit;
                      t$59 = t$60.$bg();
                    }
                  else
                    t$59 = new sk$Bool((false));
                  t$58 = t$59;
                }
              var t$61;
              if (t$58.__value)
                t$61 = new sk$Bool((true));
              else
                {
                  var t$62;
                  if (hasExponent.__value)
                    {
                      var t$63 = hasExponentDigit;
                      t$62 = t$63.$bg();
                    }
                  else
                    t$62 = new sk$Bool((false));
                  t$61 = t$62;
                }
              if (t$61.__value)
                return singleton$None;
              else
                {
                  var t$64 = this;
                  var t$65 = t$64.toFloat_raw();
                  return new (sk$Some)(t$65);
                }
            }
        }
    }
};

sk$String.prototype.toFloat_raw = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::toFloat_raw')));
};

sk$String.prototype.toInt = function() {
  var t$ = this;
  var $var = t$.toIntOption();
  var i;
  {
    jumpBlockOuterjumpLab$bg21193:{
      jumpLab$bg21193:{
        jumpLab$bg21192:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg21192;
            
            case 205:
              i = $var.value;
              break jumpLab$bg21193;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = this;
          var t$2 = new sk$String(('String.toInt: parse error on \'')).$pl(t$1);
          var t$3 = t$2.$pl(new sk$String(('\'')));
          return sk$invariant_violation(t$3);
        }
      }
      return i;
    }
  }
};

sk$String.prototype.toIntOption = function() {
  var t$ = this;
  var $var = sk$String$dttoIntOptionHelper(t$);
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg21202:{
      jumpLab$bg21202:{
        switch ($var.__type_switch_id) {
          case 392:
            var1 = $var.i0;
            var2 = $var.i1;
            break jumpLab$bg21202;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var value = var2;
        var valid = var1;
        var t$1 = valid;
        if (t$1.$bg$eq(new sk$Int(0.0, 0.0)).__value)
          {
            var t$2 = value;
            return new (sk$Some)(t$2);
          }
        else
          return singleton$None;
      }
    }
  }
};

sk$String.prototype.toString = function() {
  return this;
};

sk$String.prototype.trim = function() {
  var t$ = this;
  var t$1 = t$.trimLeft();
  return t$1.trimRight();
};

sk$String.prototype.trimLeft = function() {
  var t$ = this;
  var offset = t$.search(new sk$Int(0.0, 0.0), ((ch) => 
  {
    var t$1 = ch;
    var t$2 = sk$String$dtisWhitespace(t$1);
    return t$2.$bg();
  }));
  var t$3 = offset;
  if (t$3.isSome().__value)
    {
      var t$4 = this;
      var t$5 = offset;
      var t$6 = t$5.fromSome(undefined);
      return t$4.substring(t$6);
    }
  else
    return new sk$String((''));
};

sk$String.prototype.trimRight = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.length();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  var offset = t$.rsearch(t$3, ((ch) => 
  {
    var t$4 = ch;
    var t$5 = sk$String$dtisWhitespace(t$4);
    return t$5.$bg();
  }));
  var t$6 = offset;
  if (t$6.isSome().__value)
    {
      var t$7 = this;
      var t$8 = offset;
      var t$9 = t$8.fromSome(undefined);
      var t$10 = t$9.$pl(new sk$Int(1.0, 0.0));
      return t$7.sub(new sk$Int(0.0, 0.0), t$10);
    }
  else
    return new sk$String((''));
};

sk$String.prototype.unsafe_get = function(x) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::unsafe_get')));
};

sk$String.prototype.uppercase = function() {
  var t$ = this;
  var t$1 = t$.length();
  var chars = sk$Array.fillBy(t$1, ((index) => 
  {
    var t$2 = this;
    var t$3 = index;
    var t$4 = t$2.unsafe_get(t$3);
    return t$4.capitalize();
  }));
  var t$5 = chars;
  return sk$String.fromChars(t$5);
};

sk$String.prototype.uppercaseFirst = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return this;
  else
    {
      var t$1 = this;
      var first = t$1.unsafe_get(new sk$Int(0.0, 0.0));
      var t$2 = first;
      var first_capitalize = t$2.capitalize();
      var t$3 = first;
      var t$4 = first_capitalize;
      if (t$3.$eq$eq(t$4).__value)
        return this;
      else
        {
          var t$5 = first_capitalize;
          var t$6 = t$5.toString();
          var t$7 = this;
          var t$8 = t$7.substring(new sk$Int(1.0, 0.0));
          var t$9 = t$8.toString();
          return new sk$String(('')).join(new (sk$Array)([
            t$6,
            t$9
          ]));
        }
    }
};

sk$String.prototype.utf8 = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: String::utf8')));
};

sk$String.prototype.values = function() {
  var t$ = this;
  return sk$String$dtStringIterator.make(t$);
};

sk$String.prototype.__bases = [
  sk$String
];

sk$String = sk.String = skip.initNativeClass(sk, 'String', sk$String);

Object.defineProperty(sk$String, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$StringMetaClass;
    })());
    Object.defineProperty(sk$String, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$String$dtEncoding = sk.String$dtEncoding = function String$dtEncoding() {};

sk$String$dtEncoding.prototype = Object.create(Object.prototype);

sk$String$dtEncoding.prototype.__constructor = sk$String$dtEncoding;

sk$String$dtEncoding.prototype.__classname = 'String.Encoding';

sk$String$dtEncoding.prototype.$frozen = undefined;

sk$String$dtEncoding.prototype.__type_switch_id = -1;

sk$String$dtEncoding.prototype.__copy = function() {};

sk$String$dtEncoding.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp134 = __cache.get(this);
  if (_tmp134 === undefined)
    {
      var _tmp134 = this.__copy();
      _tmp134.$frozen = true;
      __cache.set(this, _tmp134);
    }
  return _tmp134;
};

sk$String$dtEncoding.prototype.__init = function(__named_parameters) {};

sk$String$dtEncoding.prototype.__bases = [
  sk$String$dtEncoding
];

var sk$Subprocess$dtOutput = sk.Subprocess$dtOutput = function Subprocess$dtOutput(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Subprocess$dtOutput.prototype = Object.create(Object.prototype);

sk$Subprocess$dtOutput.prototype.__constructor = sk$Subprocess$dtOutput;

sk$Subprocess$dtOutput.prototype.__classname = 'Subprocess.Output';

sk$Subprocess$dtOutput.prototype.$frozen = true;

sk$Subprocess$dtOutput.prototype.__type_switch_id = 327;

sk$Subprocess$dtOutput.prototype.__copy = function() {
  return new (sk$Subprocess$dtOutput)(this);
};

sk$Subprocess$dtOutput.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp135 = __cache.get(this);
  if (_tmp135 === undefined)
    {
      var _tmp135 = this.__copy();
      _tmp135.$frozen = true;
      __cache.set(this, _tmp135);
      _tmp135.returnCode = skip.deepFreeze(_tmp135.returnCode, __cache);
      _tmp135.stdout = skip.deepFreeze(_tmp135.stdout, __cache);
      _tmp135.stderr = skip.deepFreeze(_tmp135.stderr, __cache);
    }
  return _tmp135;
};

sk$Subprocess$dtOutput.prototype.__init = function(__named_parameters) {
  this.returnCode = __named_parameters.returnCode;
  this.stdout = __named_parameters.stdout;
  this.stderr = __named_parameters.stderr;
};

sk$Subprocess$dtOutput.prototype.__bases = [
  sk$Subprocess$dtOutput
];

var sk$SyntaxError = sk.SyntaxError = function SyntaxError(__named_parameters) {
  this.__init(__named_parameters);
};

sk$SyntaxError.prototype = Object.create(Object.prototype);

sk$SyntaxError.prototype.__constructor = sk$SyntaxError;

sk$SyntaxError.prototype.__classname = 'SyntaxError';

sk$SyntaxError.prototype.$frozen = true;

sk$SyntaxError.prototype.__type_switch_id = 328;

sk$SyntaxError.prototype.__copy = function() {
  return new (sk$SyntaxError)(this);
};

sk$SyntaxError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp136 = __cache.get(this);
  if (_tmp136 === undefined)
    {
      var _tmp136 = this.__copy();
      _tmp136.$frozen = true;
      __cache.set(this, _tmp136);
      _tmp136.errorCode = skip.deepFreeze(_tmp136.errorCode, __cache);
      _tmp136.messages = skip.deepFreeze(_tmp136.messages, __cache);
      _tmp136.fix = skip.deepFreeze(_tmp136.fix, __cache);
    }
  return _tmp136;
};

sk$SyntaxError.prototype.__init = function(__named_parameters) {
  this.errorCode = __named_parameters.errorCode;
  this.messages = __named_parameters.messages;
  this.fix = __named_parameters.fix;
};

sk$SyntaxError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$SyntaxError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg21720:{
      jumpLab$bg21720:{
        jumpLab$bg21719:{
          switch (other.__type_switch_id) {
            case 328:
              otherTyped = other;
              break jumpLab$bg21719;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.errorCode;
          var t$2 = otherTyped;
          var t$3 = t$2.errorCode;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.messages;
          var t$7 = otherTyped;
          var t$8 = t$7.messages;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$10 = this;
          var t$11 = t$10.fix;
          var t$12 = otherTyped;
          var t$13 = t$12.fix;
          var t$14 = sk$isEqual(t$11, t$13);
          if (t$14.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$SyntaxError.prototype.hash = function() {
  var h = new sk$String(('SyntaxError')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.errorCode;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.messages;
  h = sk$Hashable$dtcombine(t$3, t$5);
  var t$6 = h;
  var t$7 = this;
  var t$8 = t$7.fix;
  return sk$Hashable$dtcombine(t$6, t$8);
};

sk$SyntaxError.prototype.toString = function() {
  var t$ = new sk$String(('Error ')).toString();
  var t$1 = this;
  var t$2 = t$1.errorCode;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' @')).toString();
  var t$5 = this;
  var t$6 = t$5.messages;
  var t$7 = t$6.map(((_tmp21738) => 
  {
    return sk$SyntaxError$dtmessageToString(_tmp21738);
  }));
  var t$8 = t$7.join(new sk$String(('\n')));
  var t$9 = t$8.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$9
  ]));
};

sk$SyntaxError.prototype.__bases = [
  sk$SyntaxError
];

var sk$Test$dtMixedScalar = sk.Test$dtMixedScalar = function Test$dtMixedScalar() {};

sk$Test$dtMixedScalar.prototype = Object.create(Object.prototype);

sk$Test$dtMixedScalar.prototype.__constructor = sk$Test$dtMixedScalar;

sk$Test$dtMixedScalar.prototype.__classname = 'Test.MixedScalar';

sk$Test$dtMixedScalar.prototype.$frozen = undefined;

sk$Test$dtMixedScalar.prototype.__type_switch_id = -1;

sk$Test$dtMixedScalar.prototype.__copy = function() {};

sk$Test$dtMixedScalar.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp137 = __cache.get(this);
  if (_tmp137 === undefined)
    {
      var _tmp137 = this.__copy();
      _tmp137.$frozen = true;
      __cache.set(this, _tmp137);
    }
  return _tmp137;
};

sk$Test$dtMixedScalar.prototype.__init = function(__named_parameters) {};

sk$Test$dtMixedScalar.prototype.__bases = [
  sk$Test$dtMixedScalar
];

var sk$TextRange = sk.TextRange = function TextRange(__named_parameters) {
  this.__init(__named_parameters);
};

sk$TextRange.prototype = Object.create(Object.prototype);

sk$TextRange.prototype.__constructor = sk$TextRange;

sk$TextRange.prototype.__classname = 'TextRange';

sk$TextRange.prototype.$frozen = true;

sk$TextRange.prototype.__type_switch_id = 331;

sk$TextRange.prototype.__copy = function() {
  return new (sk$TextRange)(this);
};

sk$TextRange.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp138 = __cache.get(this);
  if (_tmp138 === undefined)
    {
      var _tmp138 = this.__copy();
      _tmp138.$frozen = true;
      __cache.set(this, _tmp138);
      _tmp138.start = skip.deepFreeze(_tmp138.start, __cache);
      _tmp138.end = skip.deepFreeze(_tmp138.end, __cache);
    }
  return _tmp138;
};

sk$TextRange.prototype.__init = function(__named_parameters) {
  this.start = __named_parameters.start;
  this.end = __named_parameters.end;
};

sk$TextRange.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$TextRange.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$TextRange.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$TextRange.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$TextRange.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$TextRange.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$TextRange.prototype.compare = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg21796:{
      jumpLab$bg21796:{
        jumpLab$bg21795:{
          switch (other.__type_switch_id) {
            case 331:
              otherTyped = other;
              break jumpLab$bg21795;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.start;
          var t$2 = otherTyped;
          var t$3 = t$2.start;
          var $var = sk$compare(t$1, t$3);
          var result;
          {
            jumpBlockOuterjumpLab$bg21789:{
              jumpLab$bg21789:{
                jumpLab$bg21788:{
                  switch ($var.__type_switch_id) {
                    case 206:
                      break jumpLab$bg21788;
                    
                    default:
                      result = $var;
                      break jumpLab$bg21789;

                  }
                }
                {}
                break jumpBlockOuterjumpLab$bg21789;
              }
              return result;
            }
          }
          var t$4 = this;
          var t$5 = t$4.end;
          var t$6 = otherTyped;
          var t$7 = t$6.end;
          var var1 = sk$compare(t$5, t$7);
          var result1;
          {
            jumpBlockOuterjumpLab$bg21793:{
              jumpLab$bg21793:{
                jumpLab$bg21792:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg21792;
                    
                    default:
                      result1 = var1;
                      break jumpLab$bg21793;

                  }
                }
                {}
                break jumpBlockOuterjumpLab$bg21793;
              }
              return result1;
            }
          }
          return singleton$EQ;
        }
      }
      {
        var t$8 = this;
        var t$9 = t$8.getClassName();
        var t$10 = other;
        var t$11 = t$10.getClassName();
        return t$9.compare(t$11);
      }
    }
  }
};

sk$TextRange.prototype.contains = function(position) {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = position;
  if (t$1.$lt$eq(t$2).__value)
    {
      var t$3 = this;
      var t$4 = t$3.end;
      var t$5 = position;
      return t$4.$gt(t$5);
    }
  else
    return new sk$Bool((false));
};

sk$TextRange.prototype.containsRange = function(range) {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = range;
  var t$3 = t$2.start;
  if (t$1.$lt$eq(t$3).__value)
    {
      var t$4 = this;
      var t$5 = t$4.end;
      var t$6 = range;
      var t$7 = t$6.end;
      return t$5.$gt$eq(t$7);
    }
  else
    return new sk$Bool((false));
};

sk$TextRange.create = function(start, end) {
  var t$ = start;
  var t$1 = end;
  return new (sk$TextRange)({
    end: t$1,
    start: t$
  });
};

sk$TextRange.prototype.getClassName = function() {
  return new sk$String(('TextRange'));
};

sk$TextRange.prototype.hash = function() {
  var h = new sk$String(('TextRange')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.start;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.end;
  return sk$Hashable$dtcombine(t$3, t$5);
};

sk$TextRange.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toString();
  return new (sk$InspectLiteral)(t$1);
};

sk$TextRange.prototype.isNone = function() {
  var t$ = this;
  return t$.$eq$eq((sk$TextRange$dtnone()));
};

sk$TextRange.prototype.toString = function() {
  var t$ = this;
  if (t$.isNone().__value)
    return new sk$String((''));
  else
    {
      var t$1 = this;
      var t$2 = t$1.start;
      var t$3 = t$2.toString();
      var t$4 = t$3.$pl(new sk$String(('-')));
      var t$5 = this;
      var t$6 = t$5.end;
      return t$4.$pl(t$6);
    }
};

sk$TextRange.prototype.__bases = [
  sk$TextRange
];

var sk$Token$dtComment = sk.Token$dtComment = function Token$dtComment(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Token$dtComment.prototype = Object.create(Object.prototype);

sk$Token$dtComment.prototype.__constructor = sk$Token$dtComment;

sk$Token$dtComment.prototype.__classname = 'Token.Comment';

sk$Token$dtComment.prototype.$frozen = true;

sk$Token$dtComment.prototype.__type_switch_id = 332;

sk$Token$dtComment.prototype.__copy = function() {
  return new (sk$Token$dtComment)(this);
};

sk$Token$dtComment.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp139 = __cache.get(this);
  if (_tmp139 === undefined)
    {
      var _tmp139 = this.__copy();
      _tmp139.$frozen = true;
      __cache.set(this, _tmp139);
      _tmp139.kind = skip.deepFreeze(_tmp139.kind, __cache);
      _tmp139.range = skip.deepFreeze(_tmp139.range, __cache);
      _tmp139.value = skip.deepFreeze(_tmp139.value, __cache);
    }
  return _tmp139;
};

sk$Token$dtComment.prototype.__init = function(__named_parameters) {
  this.kind = __named_parameters.kind;
  this.range = __named_parameters.range;
  this.value = __named_parameters.value;
};

sk$Token$dtComment.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Token$dtComment.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg21863:{
      jumpLab$bg21863:{
        jumpLab$bg21862:{
          switch (other.__type_switch_id) {
            case 332:
              otherTyped = other;
              break jumpLab$bg21862;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.kind;
          var t$2 = otherTyped;
          var t$3 = t$2.kind;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.range;
          var t$7 = otherTyped;
          var t$8 = t$7.range;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$10 = this;
          var t$11 = t$10.value;
          var t$12 = otherTyped;
          var t$13 = t$12.value;
          var t$14 = sk$isEqual(t$11, t$13);
          if (t$14.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Token$dtComment.prototype.hash = function() {
  var h = new sk$String(('Token.Comment')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.kind;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.range;
  h = sk$Hashable$dtcombine(t$3, t$5);
  var t$6 = h;
  var t$7 = this;
  var t$8 = t$7.value;
  return sk$Hashable$dtcombine(t$6, t$8);
};

sk$Token$dtComment.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.kind;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((',')));
  var t$4 = this;
  var t$5 = t$4.value;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.range;
  var t$10 = t$7.$pl(t$9);
  return t$10.$pl(new sk$String((')')));
};

sk$Token$dtComment.prototype.__bases = [
  sk$Token$dtComment
];

var sk$Token$dtCommentKind = sk.Token$dtCommentKind = function Token$dtCommentKind() {};

sk$Token$dtCommentKind.prototype = Object.create(Object.prototype);

sk$Token$dtCommentKind.prototype.__constructor = sk$Token$dtCommentKind;

sk$Token$dtCommentKind.prototype.__classname = 'Token.CommentKind';

sk$Token$dtCommentKind.prototype.$frozen = undefined;

sk$Token$dtCommentKind.prototype.__type_switch_id = -1;

sk$Token$dtCommentKind.prototype.__copy = function() {};

sk$Token$dtCommentKind.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp140 = __cache.get(this);
  if (_tmp140 === undefined)
    {
      var _tmp140 = this.__copy();
      _tmp140.$frozen = true;
      __cache.set(this, _tmp140);
    }
  return _tmp140;
};

sk$Token$dtCommentKind.prototype.__init = function(__named_parameters) {};

sk$Token$dtCommentKind.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Token$dtCommentKind.prototype.__bases = [
  sk$Token$dtCommentKind
];

var sk$Token$dtToken = sk.Token$dtToken = function Token$dtToken(__named_parameters) {
  this.__init(__named_parameters);
};

sk$Token$dtToken.prototype = Object.create(Object.prototype);

sk$Token$dtToken.prototype.__constructor = sk$Token$dtToken;

sk$Token$dtToken.prototype.__classname = 'Token.Token';

sk$Token$dtToken.prototype.$frozen = true;

sk$Token$dtToken.prototype.__type_switch_id = 333;

sk$Token$dtToken.prototype.__copy = function() {
  return new (sk$Token$dtToken)(this);
};

sk$Token$dtToken.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp141 = __cache.get(this);
  if (_tmp141 === undefined)
    {
      var _tmp141 = this.__copy();
      _tmp141.$frozen = true;
      __cache.set(this, _tmp141);
      _tmp141.kind = skip.deepFreeze(_tmp141.kind, __cache);
      _tmp141.range = skip.deepFreeze(_tmp141.range, __cache);
      _tmp141.value = skip.deepFreeze(_tmp141.value, __cache);
      _tmp141.leadingComments = skip.deepFreeze(_tmp141.leadingComments, __cache);
      _tmp141.errors = skip.deepFreeze(_tmp141.errors, __cache);
      _tmp141.trailingComments = skip.deepFreeze(_tmp141.trailingComments, __cache);
    }
  return _tmp141;
};

sk$Token$dtToken.prototype.__init = function(__named_parameters) {
  this.kind = __named_parameters.kind;
  this.range = __named_parameters.range;
  this.value = __named_parameters.value;
  this.leadingComments = __named_parameters.leadingComments;
  this.errors = __named_parameters.errors;
  this.trailingComments = __named_parameters.trailingComments;
};

sk$Token$dtToken.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Token$dtToken.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg21930:{
      jumpLab$bg21930:{
        jumpLab$bg21929:{
          switch (other.__type_switch_id) {
            case 333:
              otherTyped = other;
              break jumpLab$bg21929;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.kind;
          var t$2 = otherTyped;
          var t$3 = t$2.kind;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.range;
          var t$7 = otherTyped;
          var t$8 = t$7.range;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$10 = this;
          var t$11 = t$10.value;
          var t$12 = otherTyped;
          var t$13 = t$12.value;
          var t$14 = sk$isEqual(t$11, t$13);
          if (t$14.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$15 = this;
          var t$16 = t$15.leadingComments;
          var t$17 = otherTyped;
          var t$18 = t$17.leadingComments;
          var t$19 = sk$isEqual(t$16, t$18);
          if (t$19.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$20 = this;
          var t$21 = t$20.errors;
          var t$22 = otherTyped;
          var t$23 = t$22.errors;
          var t$24 = sk$isEqual(t$21, t$23);
          if (t$24.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$25 = this;
          var t$26 = t$25.trailingComments;
          var t$27 = otherTyped;
          var t$28 = t$27.trailingComments;
          var t$29 = sk$isEqual(t$26, t$28);
          if (t$29.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Token$dtToken.prototype.comments = function() {
  var t$ = this;
  var t$1 = t$.leadingComments;
  var t$2 = t$1.values();
  var t$3 = this;
  var t$4 = t$3.trailingComments;
  var t$5 = t$4.values();
  return t$2.concat(t$5);
};

sk$Token$dtToken.prototype.hasError = function() {
  var t$ = this;
  var t$1 = t$.errors;
  var t$2 = t$1.isEmpty();
  return t$2.$bg();
};

sk$Token$dtToken.prototype.hash = function() {
  var h = new sk$String(('Token.Token')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.kind;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.range;
  h = sk$Hashable$dtcombine(t$3, t$5);
  var t$6 = h;
  var t$7 = this;
  var t$8 = t$7.value;
  h = sk$Hashable$dtcombine(t$6, t$8);
  var t$9 = h;
  var t$10 = this;
  var t$11 = t$10.leadingComments;
  h = sk$Hashable$dtcombine(t$9, t$11);
  var t$12 = h;
  var t$13 = this;
  var t$14 = t$13.errors;
  h = sk$Hashable$dtcombine(t$12, t$14);
  var t$15 = h;
  var t$16 = this;
  var t$17 = t$16.trailingComments;
  return sk$Hashable$dtcombine(t$15, t$17);
};

sk$Token$dtToken.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.kind;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((',')));
  var t$4 = this;
  var t$5 = t$4.value;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.range;
  var t$10 = t$7.$pl(t$9);
  return t$10.$pl(new sk$String((')')));
};

sk$Token$dtToken.prototype.__bases = [
  sk$Token$dtToken
];

var sk$TokenKind$dtTokenKind = sk.TokenKind$dtTokenKind = function TokenKind$dtTokenKind() {};

sk$TokenKind$dtTokenKind.prototype = Object.create(Object.prototype);

sk$TokenKind$dtTokenKind.prototype.__constructor = sk$TokenKind$dtTokenKind;

sk$TokenKind$dtTokenKind.prototype.__classname = 'TokenKind.TokenKind';

sk$TokenKind$dtTokenKind.prototype.$frozen = undefined;

sk$TokenKind$dtTokenKind.prototype.__type_switch_id = -1;

sk$TokenKind$dtTokenKind.prototype.__copy = function() {};

sk$TokenKind$dtTokenKind.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp142 = __cache.get(this);
  if (_tmp142 === undefined)
    {
      var _tmp142 = this.__copy();
      _tmp142.$frozen = true;
      __cache.set(this, _tmp142);
    }
  return _tmp142;
};

sk$TokenKind$dtTokenKind.prototype.__init = function(__named_parameters) {};

sk$TokenKind$dtTokenKind.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$TokenKind$dtTokenKind.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$TokenKind$dtTokenKind.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$TokenKind$dtTokenKind.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$TokenKind$dtTokenKind.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$TokenKind$dtTokenKind.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$TokenKind$dtTokenKind.prototype.__bases = [
  sk$TokenKind$dtTokenKind
];

var sk$Tuple$dtC10 = sk.Tuple$dtC10 = function Tuple$dtC10() {};

sk$Tuple$dtC10.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10.prototype.__constructor = sk$Tuple$dtC10;

sk$Tuple$dtC10.prototype.__classname = 'Tuple.C10';

sk$Tuple$dtC10.prototype.$frozen = undefined;

sk$Tuple$dtC10.prototype.__type_switch_id = -1;

sk$Tuple$dtC10.prototype.__copy = function() {};

sk$Tuple$dtC10.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp143 = __cache.get(this);
  if (_tmp143 === undefined)
    {
      var _tmp143 = this.__copy();
      _tmp143.$frozen = true;
      __cache.set(this, _tmp143);
    }
  return _tmp143;
};

sk$Tuple$dtC10.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10.prototype.__bases = [
  sk$Tuple$dtC10
];

var sk$Tuple$dtC2 = sk.Tuple$dtC2 = function Tuple$dtC2() {};

sk$Tuple$dtC2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC2.prototype.__constructor = sk$Tuple$dtC2;

sk$Tuple$dtC2.prototype.__classname = 'Tuple.C2';

sk$Tuple$dtC2.prototype.$frozen = undefined;

sk$Tuple$dtC2.prototype.__type_switch_id = -1;

sk$Tuple$dtC2.prototype.__copy = function() {};

sk$Tuple$dtC2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp144 = __cache.get(this);
  if (_tmp144 === undefined)
    {
      var _tmp144 = this.__copy();
      _tmp144.$frozen = true;
      __cache.set(this, _tmp144);
    }
  return _tmp144;
};

sk$Tuple$dtC2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC2.prototype.__bases = [
  sk$Tuple$dtC2
];

var sk$Tuple$dtC3 = sk.Tuple$dtC3 = function Tuple$dtC3() {};

sk$Tuple$dtC3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC3.prototype.__constructor = sk$Tuple$dtC3;

sk$Tuple$dtC3.prototype.__classname = 'Tuple.C3';

sk$Tuple$dtC3.prototype.$frozen = undefined;

sk$Tuple$dtC3.prototype.__type_switch_id = -1;

sk$Tuple$dtC3.prototype.__copy = function() {};

sk$Tuple$dtC3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp145 = __cache.get(this);
  if (_tmp145 === undefined)
    {
      var _tmp145 = this.__copy();
      _tmp145.$frozen = true;
      __cache.set(this, _tmp145);
    }
  return _tmp145;
};

sk$Tuple$dtC3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC3.prototype.__bases = [
  sk$Tuple$dtC3
];

var sk$Tuple$dtC4 = sk.Tuple$dtC4 = function Tuple$dtC4() {};

sk$Tuple$dtC4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC4.prototype.__constructor = sk$Tuple$dtC4;

sk$Tuple$dtC4.prototype.__classname = 'Tuple.C4';

sk$Tuple$dtC4.prototype.$frozen = undefined;

sk$Tuple$dtC4.prototype.__type_switch_id = -1;

sk$Tuple$dtC4.prototype.__copy = function() {};

sk$Tuple$dtC4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp146 = __cache.get(this);
  if (_tmp146 === undefined)
    {
      var _tmp146 = this.__copy();
      _tmp146.$frozen = true;
      __cache.set(this, _tmp146);
    }
  return _tmp146;
};

sk$Tuple$dtC4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC4.prototype.__bases = [
  sk$Tuple$dtC4
];

var sk$Tuple$dtC5 = sk.Tuple$dtC5 = function Tuple$dtC5() {};

sk$Tuple$dtC5.prototype = Object.create(Object.prototype);

sk$Tuple$dtC5.prototype.__constructor = sk$Tuple$dtC5;

sk$Tuple$dtC5.prototype.__classname = 'Tuple.C5';

sk$Tuple$dtC5.prototype.$frozen = undefined;

sk$Tuple$dtC5.prototype.__type_switch_id = -1;

sk$Tuple$dtC5.prototype.__copy = function() {};

sk$Tuple$dtC5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp147 = __cache.get(this);
  if (_tmp147 === undefined)
    {
      var _tmp147 = this.__copy();
      _tmp147.$frozen = true;
      __cache.set(this, _tmp147);
    }
  return _tmp147;
};

sk$Tuple$dtC5.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC5.prototype.__bases = [
  sk$Tuple$dtC5
];

var sk$Tuple$dtC6 = sk.Tuple$dtC6 = function Tuple$dtC6() {};

sk$Tuple$dtC6.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6.prototype.__constructor = sk$Tuple$dtC6;

sk$Tuple$dtC6.prototype.__classname = 'Tuple.C6';

sk$Tuple$dtC6.prototype.$frozen = undefined;

sk$Tuple$dtC6.prototype.__type_switch_id = -1;

sk$Tuple$dtC6.prototype.__copy = function() {};

sk$Tuple$dtC6.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp148 = __cache.get(this);
  if (_tmp148 === undefined)
    {
      var _tmp148 = this.__copy();
      _tmp148.$frozen = true;
      __cache.set(this, _tmp148);
    }
  return _tmp148;
};

sk$Tuple$dtC6.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6.prototype.__bases = [
  sk$Tuple$dtC6
];

var sk$Tuple$dtC7 = sk.Tuple$dtC7 = function Tuple$dtC7() {};

sk$Tuple$dtC7.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7.prototype.__constructor = sk$Tuple$dtC7;

sk$Tuple$dtC7.prototype.__classname = 'Tuple.C7';

sk$Tuple$dtC7.prototype.$frozen = undefined;

sk$Tuple$dtC7.prototype.__type_switch_id = -1;

sk$Tuple$dtC7.prototype.__copy = function() {};

sk$Tuple$dtC7.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp149 = __cache.get(this);
  if (_tmp149 === undefined)
    {
      var _tmp149 = this.__copy();
      _tmp149.$frozen = true;
      __cache.set(this, _tmp149);
    }
  return _tmp149;
};

sk$Tuple$dtC7.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7.prototype.__bases = [
  sk$Tuple$dtC7
];

var sk$Tuple$dtC8 = sk.Tuple$dtC8 = function Tuple$dtC8() {};

sk$Tuple$dtC8.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8.prototype.__constructor = sk$Tuple$dtC8;

sk$Tuple$dtC8.prototype.__classname = 'Tuple.C8';

sk$Tuple$dtC8.prototype.$frozen = undefined;

sk$Tuple$dtC8.prototype.__type_switch_id = -1;

sk$Tuple$dtC8.prototype.__copy = function() {};

sk$Tuple$dtC8.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp150 = __cache.get(this);
  if (_tmp150 === undefined)
    {
      var _tmp150 = this.__copy();
      _tmp150.$frozen = true;
      __cache.set(this, _tmp150);
    }
  return _tmp150;
};

sk$Tuple$dtC8.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8.prototype.__bases = [
  sk$Tuple$dtC8
];

var sk$Tuple$dtC9 = sk.Tuple$dtC9 = function Tuple$dtC9() {};

sk$Tuple$dtC9.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9.prototype.__constructor = sk$Tuple$dtC9;

sk$Tuple$dtC9.prototype.__classname = 'Tuple.C9';

sk$Tuple$dtC9.prototype.$frozen = undefined;

sk$Tuple$dtC9.prototype.__type_switch_id = -1;

sk$Tuple$dtC9.prototype.__copy = function() {};

sk$Tuple$dtC9.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp151 = __cache.get(this);
  if (_tmp151 === undefined)
    {
      var _tmp151 = this.__copy();
      _tmp151.$frozen = true;
      __cache.set(this, _tmp151);
    }
  return _tmp151;
};

sk$Tuple$dtC9.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9.prototype.__bases = [
  sk$Tuple$dtC9
];

var sk$Tuple10 = sk.Tuple10 = function Tuple10(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
  this.i4 = i4;
  this.i5 = i5;
  this.i6 = i6;
  this.i7 = i7;
  this.i8 = i8;
  this.i9 = i9;
};

sk$Tuple10.prototype = Object.create(Object.prototype);

sk$Tuple10.prototype.__constructor = sk$Tuple10;

sk$Tuple10.prototype.__classname = 'Tuple10';

sk$Tuple10.prototype.$frozen = true;

sk$Tuple10.prototype.__type_switch_id = 391;

sk$Tuple10.prototype.__copy = function() {
  return new (sk$Tuple10)(this.i0, this.i1, this.i2, this.i3, this.i4, this.i5, this.i6, this.i7, this.i8, this.i9);
};

sk$Tuple10.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp152 = __cache.get(this);
  if (_tmp152 === undefined)
    {
      var _tmp152 = this.__copy();
      _tmp152.$frozen = true;
      __cache.set(this, _tmp152);
      _tmp152.i0 = skip.deepFreeze(_tmp152.i0, __cache);
      _tmp152.i1 = skip.deepFreeze(_tmp152.i1, __cache);
      _tmp152.i2 = skip.deepFreeze(_tmp152.i2, __cache);
      _tmp152.i3 = skip.deepFreeze(_tmp152.i3, __cache);
      _tmp152.i4 = skip.deepFreeze(_tmp152.i4, __cache);
      _tmp152.i5 = skip.deepFreeze(_tmp152.i5, __cache);
      _tmp152.i6 = skip.deepFreeze(_tmp152.i6, __cache);
      _tmp152.i7 = skip.deepFreeze(_tmp152.i7, __cache);
      _tmp152.i8 = skip.deepFreeze(_tmp152.i8, __cache);
      _tmp152.i9 = skip.deepFreeze(_tmp152.i9, __cache);
    }
  return _tmp152;
};

sk$Tuple10.prototype.__init = function(__named_parameters) {};

sk$Tuple10.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple10.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple10.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple10.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  var t$14;
  if (t$9.__value)
    {
      var t$15 = this;
      var t$16 = t$15.i3;
      var t$17 = other;
      var t$18 = t$17.i3;
      t$14 = t$16.$eq$eq(t$18);
    }
  else
    t$14 = new sk$Bool((false));
  var t$19;
  if (t$14.__value)
    {
      var t$20 = this;
      var t$21 = t$20.i4;
      var t$22 = other;
      var t$23 = t$22.i4;
      t$19 = t$21.$eq$eq(t$23);
    }
  else
    t$19 = new sk$Bool((false));
  var t$24;
  if (t$19.__value)
    {
      var t$25 = this;
      var t$26 = t$25.i5;
      var t$27 = other;
      var t$28 = t$27.i5;
      t$24 = t$26.$eq$eq(t$28);
    }
  else
    t$24 = new sk$Bool((false));
  var t$29;
  if (t$24.__value)
    {
      var t$30 = this;
      var t$31 = t$30.i6;
      var t$32 = other;
      var t$33 = t$32.i6;
      t$29 = t$31.$eq$eq(t$33);
    }
  else
    t$29 = new sk$Bool((false));
  var t$34;
  if (t$29.__value)
    {
      var t$35 = this;
      var t$36 = t$35.i7;
      var t$37 = other;
      var t$38 = t$37.i7;
      t$34 = t$36.$eq$eq(t$38);
    }
  else
    t$34 = new sk$Bool((false));
  var t$39;
  if (t$34.__value)
    {
      var t$40 = this;
      var t$41 = t$40.i8;
      var t$42 = other;
      var t$43 = t$42.i8;
      t$39 = t$41.$eq$eq(t$43);
    }
  else
    t$39 = new sk$Bool((false));
  if (t$39.__value)
    {
      var t$44 = this;
      var t$45 = t$44.i9;
      var t$46 = other;
      var t$47 = t$46.i9;
      return t$45.$eq$eq(t$47);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple10.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple10.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple10.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg22228:{
      jumpLab$bg22228:{
        jumpLab$bg22227:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg22227;
            
            default:
              c = $var;
              break jumpLab$bg22228;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg22224:{
              jumpLab$bg22224:{
                jumpLab$bg22223:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg22223;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg22224;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg22220:{
                      jumpLab$bg22220:{
                        jumpLab$bg22219:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg22219;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg22220;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          var var3 = t$13.compare(t$15);
                          var c3;
                          {
                            jumpBlockOuterjumpLab$bg22216:{
                              jumpLab$bg22216:{
                                jumpLab$bg22215:{
                                  switch (var3.__type_switch_id) {
                                    case 206:
                                      break jumpLab$bg22215;
                                    
                                    default:
                                      c3 = var3;
                                      break jumpLab$bg22216;

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.i4;
                                  var t$18 = other;
                                  var t$19 = t$18.i4;
                                  var var4 = t$17.compare(t$19);
                                  var c4;
                                  {
                                    jumpBlockOuterjumpLab$bg22212:{
                                      jumpLab$bg22212:{
                                        jumpLab$bg22211:{
                                          switch (var4.__type_switch_id) {
                                            case 206:
                                              break jumpLab$bg22211;
                                            
                                            default:
                                              c4 = var4;
                                              break jumpLab$bg22212;

                                          }
                                        }
                                        {
                                          var t$20 = this;
                                          var t$21 = t$20.i5;
                                          var t$22 = other;
                                          var t$23 = t$22.i5;
                                          var var5 = t$21.compare(t$23);
                                          var c5;
                                          {
                                            jumpBlockOuterjumpLab$bg22208:{
                                              jumpLab$bg22208:{
                                                jumpLab$bg22207:{
                                                  switch (var5.__type_switch_id) {
                                                    case 206:
                                                      break jumpLab$bg22207;
                                                    
                                                    default:
                                                      c5 = var5;
                                                      break jumpLab$bg22208;

                                                  }
                                                }
                                                {
                                                  var t$24 = this;
                                                  var t$25 = t$24.i6;
                                                  var t$26 = other;
                                                  var t$27 = t$26.i6;
                                                  var var6 = t$25.compare(t$27);
                                                  var c6;
                                                  {
                                                    jumpBlockOuterjumpLab$bg22204:{
                                                      jumpLab$bg22204:{
                                                        jumpLab$bg22203:{
                                                          switch (var6.__type_switch_id) {
                                                            case 206:
                                                              break jumpLab$bg22203;
                                                            
                                                            default:
                                                              c6 = var6;
                                                              break jumpLab$bg22204;

                                                          }
                                                        }
                                                        {
                                                          var t$28 = this;
                                                          var t$29 = t$28.i7;
                                                          var t$30 = other;
                                                          var t$31 = t$30.i7;
                                                          var var7 = t$29.compare(t$31);
                                                          var c7;
                                                          {
                                                            jumpBlockOuterjumpLab$bg22200:{
                                                              jumpLab$bg22200:{
                                                                jumpLab$bg22199:{
                                                                  switch (var7.__type_switch_id) {
                                                                    case 206:
                                                                      break jumpLab$bg22199;
                                                                    
                                                                    default:
                                                                      c7 = var7;
                                                                      break jumpLab$bg22200;

                                                                  }
                                                                }
                                                                {
                                                                  var t$32 = this;
                                                                  var t$33 = t$32.i8;
                                                                  var t$34 = other;
                                                                  var t$35 = t$34.i8;
                                                                  var var8 = t$33.compare(t$35);
                                                                  var c8;
                                                                  {
                                                                    jumpBlockOuterjumpLab$bg22196:{
                                                                      jumpLab$bg22196:{
                                                                        jumpLab$bg22195:{
                                                                          switch (var8.__type_switch_id) {
                                                                            case 206:
                                                                              break jumpLab$bg22195;
                                                                            
                                                                            default:
                                                                              c8 = var8;
                                                                              break jumpLab$bg22196;

                                                                          }
                                                                        }
                                                                        {
                                                                          var t$36 = this;
                                                                          var t$37 = t$36.i9;
                                                                          var t$38 = other;
                                                                          var t$39 = t$38.i9;
                                                                          return t$37.compare(t$39);
                                                                        }
                                                                      }
                                                                      return c8;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              return c7;
                                                            }
                                                          }
                                                        }
                                                      }
                                                      return c6;
                                                    }
                                                  }
                                                }
                                              }
                                              return c5;
                                            }
                                          }
                                        }
                                      }
                                      return c4;
                                    }
                                  }
                                }
                              }
                              return c3;
                            }
                          }
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple10.prototype.getClassName = function() {
  return new sk$String(('Tuple10'));
};

sk$Tuple10.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = t$13.hash();
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = t$16.hash();
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = t$19.hash();
  var t$21 = this;
  var t$22 = t$21.i7;
  var t$23 = t$22.hash();
  var t$24 = this;
  var t$25 = t$24.i8;
  var t$26 = t$25.hash();
  var t$27 = this;
  var t$28 = t$27.i9;
  var t$29 = t$28.hash();
  var t$30 = sk$Hashable$dtcombine(t$26, t$29);
  var t$31 = sk$Hashable$dtcombine(t$23, t$30);
  var t$32 = sk$Hashable$dtcombine(t$20, t$31);
  var t$33 = sk$Hashable$dtcombine(t$17, t$32);
  var t$34 = sk$Hashable$dtcombine(t$14, t$33);
  var t$35 = sk$Hashable$dtcombine(t$11, t$34);
  var t$36 = sk$Hashable$dtcombine(t$8, t$35);
  var t$37 = sk$Hashable$dtcombine(t$5, t$36);
  return sk$Hashable$dtcombine(t$2, t$37);
};

sk$Tuple10.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = sk$inspect(t$13);
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = sk$inspect(t$16);
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = sk$inspect(t$19);
  var t$21 = this;
  var t$22 = t$21.i7;
  var t$23 = sk$inspect(t$22);
  var t$24 = this;
  var t$25 = t$24.i8;
  var t$26 = sk$inspect(t$25);
  var t$27 = this;
  var t$28 = t$27.i9;
  var t$29 = sk$inspect(t$28);
  var t$30 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20,
    t$23,
    t$26,
    t$29
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$30);
};

sk$Tuple10.meta = function(class0, class1, class2, class3, class4, class5, class6, class7, class8, class9) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  var t$4 = class4;
  var t$5 = class5;
  var t$6 = class6;
  var t$7 = class7;
  var t$8 = class8;
  var t$9 = class9;
  return new (sk$Tuple10MetaClass)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Tuple10.prototype.parallelMap = function(f0, f1, f2, f3, f4, f5, f6, f7, f8, f9) {
  var res = sk$Parallel$dttabulate(new sk$Int(10.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg22395:{
      jumpLab$bg22395:{
        jumpLab$bg22394:{
          jumpLab$bg22393:{
            jumpLab$bg22392:{
              jumpLab$bg22391:{
                jumpLab$bg22390:{
                  jumpLab$bg22389:{
                    jumpLab$bg22388:{
                      jumpLab$bg22387:{
                        jumpLab$bg22386:{
                          jumpLab$bg22385:{
                            {
                              var _tmp153 = i.__getSwitchValue();
                              switch (_tmp153) {
                                case 0:
                                  break jumpLab$bg22385;
                                
                                case 1:
                                  break jumpLab$bg22386;
                                
                                case 2:
                                  break jumpLab$bg22387;
                                
                                case 3:
                                  break jumpLab$bg22388;
                                
                                case 4:
                                  break jumpLab$bg22389;
                                
                                case 5:
                                  break jumpLab$bg22390;
                                
                                case 6:
                                  break jumpLab$bg22391;
                                
                                case 7:
                                  break jumpLab$bg22392;
                                
                                case 8:
                                  break jumpLab$bg22393;
                                
                                case 9:
                                  break jumpLab$bg22394;
                                
                                default:
                                  break jumpLab$bg22395;

                              }
                            }
                          }
                          {
                            var t$ = f0;
                            var t$1 = this;
                            var t$2 = t$1.i0;
                            var t$3 = t$(t$2);
                            return new (sk$Tuple$dtC10_0)(t$3);
                          }
                        }
                        {
                          var t$4 = f1;
                          var t$5 = this;
                          var t$6 = t$5.i1;
                          var t$7 = t$4(t$6);
                          return new (sk$Tuple$dtC10_1)(t$7);
                        }
                      }
                      {
                        var t$8 = f2;
                        var t$9 = this;
                        var t$10 = t$9.i2;
                        var t$11 = t$8(t$10);
                        return new (sk$Tuple$dtC10_2)(t$11);
                      }
                    }
                    {
                      var t$12 = f3;
                      var t$13 = this;
                      var t$14 = t$13.i3;
                      var t$15 = t$12(t$14);
                      return new (sk$Tuple$dtC10_3)(t$15);
                    }
                  }
                  {
                    var t$16 = f4;
                    var t$17 = this;
                    var t$18 = t$17.i4;
                    var t$19 = t$16(t$18);
                    return new (sk$Tuple$dtC10_4)(t$19);
                  }
                }
                {
                  var t$20 = f5;
                  var t$21 = this;
                  var t$22 = t$21.i5;
                  var t$23 = t$20(t$22);
                  return new (sk$Tuple$dtC10_5)(t$23);
                }
              }
              {
                var t$24 = f6;
                var t$25 = this;
                var t$26 = t$25.i6;
                var t$27 = t$24(t$26);
                return new (sk$Tuple$dtC10_6)(t$27);
              }
            }
            {
              var t$28 = f7;
              var t$29 = this;
              var t$30 = t$29.i7;
              var t$31 = t$28(t$30);
              return new (sk$Tuple$dtC10_7)(t$31);
            }
          }
          {
            var t$32 = f8;
            var t$33 = this;
            var t$34 = t$33.i8;
            var t$35 = t$32(t$34);
            return new (sk$Tuple$dtC10_8)(t$35);
          }
        }
        {
          var t$36 = f9;
          var t$37 = this;
          var t$38 = t$37.i9;
          var t$39 = t$36(t$38);
          return new (sk$Tuple$dtC10_9)(t$39);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$40 = res;
  var t$41;
  var $var = t$40.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg22399:{
      jumpLab$bg22399:{
        jumpLab$bg22398:{
          switch ($var.__type_switch_id) {
            case 337:
              x = $var.$atparam0;
              break jumpLab$bg22398;
            
            default:
              break jumpLab$bg22399;

          }
        }
        t$41 = x;
        break jumpBlockOuterjumpLab$bg22399;
      }
      t$41 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22399;
    }
  }
  var t$42 = t$41;
  var t$43 = res;
  var t$44;
  var var1 = t$43.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg22403:{
      jumpLab$bg22403:{
        jumpLab$bg22402:{
          switch (var1.__type_switch_id) {
            case 338:
              x1 = var1.$atparam0;
              break jumpLab$bg22402;
            
            default:
              break jumpLab$bg22403;

          }
        }
        t$44 = x1;
        break jumpBlockOuterjumpLab$bg22403;
      }
      t$44 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22403;
    }
  }
  var t$45 = t$44;
  var t$46 = res;
  var t$47;
  var var2 = t$46.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg22407:{
      jumpLab$bg22407:{
        jumpLab$bg22406:{
          switch (var2.__type_switch_id) {
            case 339:
              x2 = var2.$atparam0;
              break jumpLab$bg22406;
            
            default:
              break jumpLab$bg22407;

          }
        }
        t$47 = x2;
        break jumpBlockOuterjumpLab$bg22407;
      }
      t$47 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22407;
    }
  }
  var t$48 = t$47;
  var t$49 = res;
  var t$50;
  var var3 = t$49.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg22411:{
      jumpLab$bg22411:{
        jumpLab$bg22410:{
          switch (var3.__type_switch_id) {
            case 340:
              x3 = var3.$atparam0;
              break jumpLab$bg22410;
            
            default:
              break jumpLab$bg22411;

          }
        }
        t$50 = x3;
        break jumpBlockOuterjumpLab$bg22411;
      }
      t$50 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22411;
    }
  }
  var t$51 = t$50;
  var t$52 = res;
  var t$53;
  var var4 = t$52.get(new sk$Int(4.0, 0.0));
  var x4;
  {
    jumpBlockOuterjumpLab$bg22415:{
      jumpLab$bg22415:{
        jumpLab$bg22414:{
          switch (var4.__type_switch_id) {
            case 341:
              x4 = var4.$atparam0;
              break jumpLab$bg22414;
            
            default:
              break jumpLab$bg22415;

          }
        }
        t$53 = x4;
        break jumpBlockOuterjumpLab$bg22415;
      }
      t$53 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22415;
    }
  }
  var t$54 = t$53;
  var t$55 = res;
  var t$56;
  var var5 = t$55.get(new sk$Int(5.0, 0.0));
  var x5;
  {
    jumpBlockOuterjumpLab$bg22419:{
      jumpLab$bg22419:{
        jumpLab$bg22418:{
          switch (var5.__type_switch_id) {
            case 342:
              x5 = var5.$atparam0;
              break jumpLab$bg22418;
            
            default:
              break jumpLab$bg22419;

          }
        }
        t$56 = x5;
        break jumpBlockOuterjumpLab$bg22419;
      }
      t$56 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22419;
    }
  }
  var t$57 = t$56;
  var t$58 = res;
  var t$59;
  var var6 = t$58.get(new sk$Int(6.0, 0.0));
  var x6;
  {
    jumpBlockOuterjumpLab$bg22423:{
      jumpLab$bg22423:{
        jumpLab$bg22422:{
          switch (var6.__type_switch_id) {
            case 343:
              x6 = var6.$atparam0;
              break jumpLab$bg22422;
            
            default:
              break jumpLab$bg22423;

          }
        }
        t$59 = x6;
        break jumpBlockOuterjumpLab$bg22423;
      }
      t$59 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22423;
    }
  }
  var t$60 = t$59;
  var t$61 = res;
  var t$62;
  var var7 = t$61.get(new sk$Int(7.0, 0.0));
  var x7;
  {
    jumpBlockOuterjumpLab$bg22427:{
      jumpLab$bg22427:{
        jumpLab$bg22426:{
          switch (var7.__type_switch_id) {
            case 344:
              x7 = var7.$atparam0;
              break jumpLab$bg22426;
            
            default:
              break jumpLab$bg22427;

          }
        }
        t$62 = x7;
        break jumpBlockOuterjumpLab$bg22427;
      }
      t$62 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22427;
    }
  }
  var t$63 = t$62;
  var t$64 = res;
  var t$65;
  var var8 = t$64.get(new sk$Int(8.0, 0.0));
  var x8;
  {
    jumpBlockOuterjumpLab$bg22431:{
      jumpLab$bg22431:{
        jumpLab$bg22430:{
          switch (var8.__type_switch_id) {
            case 345:
              x8 = var8.$atparam0;
              break jumpLab$bg22430;
            
            default:
              break jumpLab$bg22431;

          }
        }
        t$65 = x8;
        break jumpBlockOuterjumpLab$bg22431;
      }
      t$65 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22431;
    }
  }
  var t$66 = t$65;
  var t$67 = res;
  var t$68;
  var var9 = t$67.get(new sk$Int(9.0, 0.0));
  var x9;
  {
    jumpBlockOuterjumpLab$bg22435:{
      jumpLab$bg22435:{
        jumpLab$bg22434:{
          switch (var9.__type_switch_id) {
            case 346:
              x9 = var9.$atparam0;
              break jumpLab$bg22434;
            
            default:
              break jumpLab$bg22435;

          }
        }
        t$68 = x9;
        break jumpBlockOuterjumpLab$bg22435;
      }
      t$68 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22435;
    }
  }
  var t$69 = t$68;
  return new (sk$Tuple10)(t$42, t$45, t$48, t$51, t$54, t$57, t$60, t$63, t$66, t$69);
};

sk$Tuple10.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  var t$15 = t$14.$pl(new sk$String((', ')));
  var t$16 = this;
  var t$17 = t$16.i4;
  var t$18 = t$15.$pl(t$17);
  var t$19 = t$18.$pl(new sk$String((', ')));
  var t$20 = this;
  var t$21 = t$20.i5;
  var t$22 = t$19.$pl(t$21);
  var t$23 = t$22.$pl(new sk$String((', ')));
  var t$24 = this;
  var t$25 = t$24.i6;
  var t$26 = t$23.$pl(t$25);
  var t$27 = t$26.$pl(new sk$String((', ')));
  var t$28 = this;
  var t$29 = t$28.i7;
  var t$30 = t$27.$pl(t$29);
  var t$31 = t$30.$pl(new sk$String((', ')));
  var t$32 = this;
  var t$33 = t$32.i8;
  var t$34 = t$31.$pl(t$33);
  var t$35 = t$34.$pl(new sk$String((', ')));
  var t$36 = this;
  var t$37 = t$36.i9;
  var t$38 = t$35.$pl(t$37);
  return t$38.$pl(new sk$String((')')));
};

sk$Tuple10.prototype.__bases = [
  sk$Tuple10
];

var sk$Tuple2 = sk.Tuple2 = function Tuple2(i0, i1) {
  this.i0 = i0;
  this.i1 = i1;
};

sk$Tuple2.prototype = Object.create(Object.prototype);

sk$Tuple2.prototype.__constructor = sk$Tuple2;

sk$Tuple2.prototype.__classname = 'Tuple2';

sk$Tuple2.prototype.$frozen = true;

sk$Tuple2.prototype.__type_switch_id = 392;

sk$Tuple2.prototype.__copy = function() {
  return new (sk$Tuple2)(this.i0, this.i1);
};

sk$Tuple2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp154 = __cache.get(this);
  if (_tmp154 === undefined)
    {
      var _tmp154 = this.__copy();
      _tmp154.$frozen = true;
      __cache.set(this, _tmp154);
      _tmp154.i0 = skip.deepFreeze(_tmp154.i0, __cache);
      _tmp154.i1 = skip.deepFreeze(_tmp154.i1, __cache);
    }
  return _tmp154;
};

sk$Tuple2.prototype.__init = function(__named_parameters) {};

sk$Tuple2.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple2.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple2.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple2.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = this;
      var t$5 = t$4.i1;
      var t$6 = other;
      var t$7 = t$6.i1;
      return t$5.$eq$eq(t$7);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple2.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple2.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple2.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg22646:{
      jumpLab$bg22646:{
        jumpLab$bg22645:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg22645;
            
            default:
              c = $var;
              break jumpLab$bg22646;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          return t$5.compare(t$7);
        }
      }
      return c;
    }
  }
};

sk$Tuple2.generator = function(g0, g1) {
  var t$ = g0;
  var t$1 = g1;
  return new (sk$QuickCheck$dtTuple2Generator)(t$, t$1);
};

sk$Tuple2.prototype.getClassName = function() {
  return new sk$String(('Tuple2'));
};

sk$Tuple2.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  return sk$Hashable$dtcombine(t$2, t$5);
};

sk$Tuple2.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = new (sk$Array)([
    t$2,
    t$5
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$6);
};

sk$Tuple2.meta = function(class0, class1) {
  var t$ = class0;
  var t$1 = class1;
  return new (sk$Tuple2MetaClass)(t$, t$1);
};

sk$Tuple2.prototype.parallelMap = function(f0, f1) {
  var res = sk$Parallel$dttabulate(new sk$Int(2.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg22688:{
      jumpLab$bg22688:{
        jumpLab$bg22687:{
          jumpLab$bg22686:{
            {
              var _tmp155 = i.__getSwitchValue();
              switch (_tmp155) {
                case 0:
                  break jumpLab$bg22686;
                
                case 1:
                  break jumpLab$bg22687;
                
                default:
                  break jumpLab$bg22688;

              }
            }
          }
          {
            var t$ = f0;
            var t$1 = this;
            var t$2 = t$1.i0;
            var t$3 = t$(t$2);
            return new (sk$Tuple$dtC2_0)(t$3);
          }
        }
        {
          var t$4 = f1;
          var t$5 = this;
          var t$6 = t$5.i1;
          var t$7 = t$4(t$6);
          return new (sk$Tuple$dtC2_1)(t$7);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$8 = res;
  var t$9;
  var $var = t$8.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg22692:{
      jumpLab$bg22692:{
        jumpLab$bg22691:{
          switch ($var.__type_switch_id) {
            case 347:
              x = $var.$atparam0;
              break jumpLab$bg22691;
            
            default:
              break jumpLab$bg22692;

          }
        }
        t$9 = x;
        break jumpBlockOuterjumpLab$bg22692;
      }
      t$9 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22692;
    }
  }
  var t$10 = t$9;
  var t$11 = res;
  var t$12;
  var var1 = t$11.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg22696:{
      jumpLab$bg22696:{
        jumpLab$bg22695:{
          switch (var1.__type_switch_id) {
            case 348:
              x1 = var1.$atparam0;
              break jumpLab$bg22695;
            
            default:
              break jumpLab$bg22696;

          }
        }
        t$12 = x1;
        break jumpBlockOuterjumpLab$bg22696;
      }
      t$12 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22696;
    }
  }
  var t$13 = t$12;
  return new (sk$Tuple2)(t$10, t$13);
};

sk$Tuple2.prototype.perturb = function(rng) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = rng;
  t$1.perturb(t$2);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = rng;
  return t$4.perturb(t$5);
};

sk$Tuple2.prototype.shrink = function(firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (firstShrink === undefined)
      firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    var t$1 = t$.i0;
    var t$2 = firstShrink;
    var t$3 = t$1.shrink(t$2);
    var $var = t$3.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg22711:{
        break$bg22711:{
          dowhile_else$bg22710:{
            do
              {
                jumpBlockOuterdowhile_cond$bg22712:{
                  dowhile_cond$bg22712:{
                    {
                      var t$4 = $var;
                      var var2 = t$4.next();
                      var i0;
                      {
                        jumpBlockOuterjumpLab$bg22735:{
                          jumpLab$bg22735:{
                            jumpLab$bg22734:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg22734;
                                
                                case 205:
                                  i0 = var2.value;
                                  break jumpLab$bg22735;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg22712;
                            }
                          }
                          {
                            var t$5 = i0;
                            var t$6 = this;
                            var t$7 = t$6.i1;
                            yield new sk$Some(new (sk$Tuple2)(t$5, t$7));
                          }
                          break jumpBlockOuterjumpLab$bg22735;
                        }
                      }
                      break dowhile_cond$bg22712;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg22710;
                  break jumpBlockOuterdowhile_cond$bg22712;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg22711;
        }
        {}
        break jumpBlockOuterbreak$bg22711;
      }
    }
    var t$8 = this;
    var t$9 = t$8.i1;
    var t$10 = firstShrink;
    var t$11 = t$9.shrink(t$10);
    var var3 = t$11.values();
    var var4 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg22725:{
        break$bg22725:{
          dowhile_else$bg22724:{
            do
              {
                jumpBlockOuterdowhile_cond$bg22726:{
                  dowhile_cond$bg22726:{
                    {
                      var t$12 = var3;
                      var var5 = t$12.next();
                      var i1;
                      {
                        jumpBlockOuterjumpLab$bg22739:{
                          jumpLab$bg22739:{
                            jumpLab$bg22738:{
                              switch (var5.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg22738;
                                
                                case 205:
                                  i1 = var5.value;
                                  break jumpLab$bg22739;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var4 = new sk$Bool((false));
                              break dowhile_cond$bg22726;
                            }
                          }
                          {
                            var t$13 = this;
                            var t$14 = t$13.i0;
                            var t$15 = i1;
                            yield new sk$Some(new (sk$Tuple2)(t$14, t$15));
                          }
                          break jumpBlockOuterjumpLab$bg22739;
                        }
                      }
                      break dowhile_cond$bg22726;
                    }
                  }
                  if (var4.__value)
                    {}
                  else
                    break dowhile_else$bg22724;
                  break jumpBlockOuterdowhile_cond$bg22726;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg22725;
        }
        {}
        break jumpBlockOuterbreak$bg22725;
      }
    }
    return undefined;
  });
};

sk$Tuple2.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  return t$6.$pl(new sk$String((')')));
};

sk$Tuple2.prototype.__bases = [
  sk$Tuple2
];

var sk$Tuple3 = sk.Tuple3 = function Tuple3(i0, i1, i2) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
};

sk$Tuple3.prototype = Object.create(Object.prototype);

sk$Tuple3.prototype.__constructor = sk$Tuple3;

sk$Tuple3.prototype.__classname = 'Tuple3';

sk$Tuple3.prototype.$frozen = true;

sk$Tuple3.prototype.__type_switch_id = 393;

sk$Tuple3.prototype.__copy = function() {
  return new (sk$Tuple3)(this.i0, this.i1, this.i2);
};

sk$Tuple3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp156 = __cache.get(this);
  if (_tmp156 === undefined)
    {
      var _tmp156 = this.__copy();
      _tmp156.$frozen = true;
      __cache.set(this, _tmp156);
      _tmp156.i0 = skip.deepFreeze(_tmp156.i0, __cache);
      _tmp156.i1 = skip.deepFreeze(_tmp156.i1, __cache);
      _tmp156.i2 = skip.deepFreeze(_tmp156.i2, __cache);
    }
  return _tmp156;
};

sk$Tuple3.prototype.__init = function(__named_parameters) {};

sk$Tuple3.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple3.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple3.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple3.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  if (t$4.__value)
    {
      var t$9 = this;
      var t$10 = t$9.i2;
      var t$11 = other;
      var t$12 = t$11.i2;
      return t$10.$eq$eq(t$12);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple3.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple3.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple3.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg22837:{
      jumpLab$bg22837:{
        jumpLab$bg22836:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg22836;
            
            default:
              c = $var;
              break jumpLab$bg22837;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg22833:{
              jumpLab$bg22833:{
                jumpLab$bg22832:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg22832;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg22833;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  return t$9.compare(t$11);
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple3.prototype.getClassName = function() {
  return new sk$String(('Tuple3'));
};

sk$Tuple3.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = sk$Hashable$dtcombine(t$5, t$8);
  return sk$Hashable$dtcombine(t$2, t$9);
};

sk$Tuple3.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = new (sk$Array)([
    t$2,
    t$5,
    t$8
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$9);
};

sk$Tuple3.meta = function(class0, class1, class2) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  return new (sk$Tuple3MetaClass)(t$, t$1, t$2);
};

sk$Tuple3.prototype.parallelMap = function(f0, f1, f2) {
  var res = sk$Parallel$dttabulate(new sk$Int(3.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg22892:{
      jumpLab$bg22892:{
        jumpLab$bg22891:{
          jumpLab$bg22890:{
            jumpLab$bg22889:{
              {
                var _tmp157 = i.__getSwitchValue();
                switch (_tmp157) {
                  case 0:
                    break jumpLab$bg22889;
                  
                  case 1:
                    break jumpLab$bg22890;
                  
                  case 2:
                    break jumpLab$bg22891;
                  
                  default:
                    break jumpLab$bg22892;

                }
              }
            }
            {
              var t$ = f0;
              var t$1 = this;
              var t$2 = t$1.i0;
              var t$3 = t$(t$2);
              return new (sk$Tuple$dtC3_0)(t$3);
            }
          }
          {
            var t$4 = f1;
            var t$5 = this;
            var t$6 = t$5.i1;
            var t$7 = t$4(t$6);
            return new (sk$Tuple$dtC3_1)(t$7);
          }
        }
        {
          var t$8 = f2;
          var t$9 = this;
          var t$10 = t$9.i2;
          var t$11 = t$8(t$10);
          return new (sk$Tuple$dtC3_2)(t$11);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$12 = res;
  var t$13;
  var $var = t$12.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg22896:{
      jumpLab$bg22896:{
        jumpLab$bg22895:{
          switch ($var.__type_switch_id) {
            case 349:
              x = $var.$atparam0;
              break jumpLab$bg22895;
            
            default:
              break jumpLab$bg22896;

          }
        }
        t$13 = x;
        break jumpBlockOuterjumpLab$bg22896;
      }
      t$13 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22896;
    }
  }
  var t$14 = t$13;
  var t$15 = res;
  var t$16;
  var var1 = t$15.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg22900:{
      jumpLab$bg22900:{
        jumpLab$bg22899:{
          switch (var1.__type_switch_id) {
            case 350:
              x1 = var1.$atparam0;
              break jumpLab$bg22899;
            
            default:
              break jumpLab$bg22900;

          }
        }
        t$16 = x1;
        break jumpBlockOuterjumpLab$bg22900;
      }
      t$16 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22900;
    }
  }
  var t$17 = t$16;
  var t$18 = res;
  var t$19;
  var var2 = t$18.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg22904:{
      jumpLab$bg22904:{
        jumpLab$bg22903:{
          switch (var2.__type_switch_id) {
            case 351:
              x2 = var2.$atparam0;
              break jumpLab$bg22903;
            
            default:
              break jumpLab$bg22904;

          }
        }
        t$19 = x2;
        break jumpBlockOuterjumpLab$bg22904;
      }
      t$19 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg22904;
    }
  }
  var t$20 = t$19;
  return new (sk$Tuple3)(t$14, t$17, t$20);
};

sk$Tuple3.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  return t$10.$pl(new sk$String((')')));
};

sk$Tuple3.prototype.__bases = [
  sk$Tuple3
];

var sk$Tuple4 = sk.Tuple4 = function Tuple4(i0, i1, i2, i3) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
};

sk$Tuple4.prototype = Object.create(Object.prototype);

sk$Tuple4.prototype.__constructor = sk$Tuple4;

sk$Tuple4.prototype.__classname = 'Tuple4';

sk$Tuple4.prototype.$frozen = true;

sk$Tuple4.prototype.__type_switch_id = 394;

sk$Tuple4.prototype.__copy = function() {
  return new (sk$Tuple4)(this.i0, this.i1, this.i2, this.i3);
};

sk$Tuple4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp158 = __cache.get(this);
  if (_tmp158 === undefined)
    {
      var _tmp158 = this.__copy();
      _tmp158.$frozen = true;
      __cache.set(this, _tmp158);
      _tmp158.i0 = skip.deepFreeze(_tmp158.i0, __cache);
      _tmp158.i1 = skip.deepFreeze(_tmp158.i1, __cache);
      _tmp158.i2 = skip.deepFreeze(_tmp158.i2, __cache);
      _tmp158.i3 = skip.deepFreeze(_tmp158.i3, __cache);
    }
  return _tmp158;
};

sk$Tuple4.prototype.__init = function(__named_parameters) {};

sk$Tuple4.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple4.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple4.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple4.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  if (t$9.__value)
    {
      var t$14 = this;
      var t$15 = t$14.i3;
      var t$16 = other;
      var t$17 = t$16.i3;
      return t$15.$eq$eq(t$17);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple4.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple4.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple4.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg23031:{
      jumpLab$bg23031:{
        jumpLab$bg23030:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg23030;
            
            default:
              c = $var;
              break jumpLab$bg23031;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg23027:{
              jumpLab$bg23027:{
                jumpLab$bg23026:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg23026;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg23027;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg23023:{
                      jumpLab$bg23023:{
                        jumpLab$bg23022:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg23022;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg23023;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          return t$13.compare(t$15);
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple4.prototype.getClassName = function() {
  return new sk$String(('Tuple4'));
};

sk$Tuple4.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = sk$Hashable$dtcombine(t$8, t$11);
  var t$13 = sk$Hashable$dtcombine(t$5, t$12);
  return sk$Hashable$dtcombine(t$2, t$13);
};

sk$Tuple4.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$12);
};

sk$Tuple4.meta = function(class0, class1, class2, class3) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  return new (sk$Tuple4MetaClass)(t$, t$1, t$2, t$3);
};

sk$Tuple4.prototype.parallelMap = function(f0, f1, f2, f3) {
  var res = sk$Parallel$dttabulate(new sk$Int(4.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg23102:{
      jumpLab$bg23102:{
        jumpLab$bg23101:{
          jumpLab$bg23100:{
            jumpLab$bg23099:{
              jumpLab$bg23098:{
                {
                  var _tmp159 = i.__getSwitchValue();
                  switch (_tmp159) {
                    case 0:
                      break jumpLab$bg23098;
                    
                    case 1:
                      break jumpLab$bg23099;
                    
                    case 2:
                      break jumpLab$bg23100;
                    
                    case 3:
                      break jumpLab$bg23101;
                    
                    default:
                      break jumpLab$bg23102;

                  }
                }
              }
              {
                var t$ = f0;
                var t$1 = this;
                var t$2 = t$1.i0;
                var t$3 = t$(t$2);
                return new (sk$Tuple$dtC4_0)(t$3);
              }
            }
            {
              var t$4 = f1;
              var t$5 = this;
              var t$6 = t$5.i1;
              var t$7 = t$4(t$6);
              return new (sk$Tuple$dtC4_1)(t$7);
            }
          }
          {
            var t$8 = f2;
            var t$9 = this;
            var t$10 = t$9.i2;
            var t$11 = t$8(t$10);
            return new (sk$Tuple$dtC4_2)(t$11);
          }
        }
        {
          var t$12 = f3;
          var t$13 = this;
          var t$14 = t$13.i3;
          var t$15 = t$12(t$14);
          return new (sk$Tuple$dtC4_3)(t$15);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$16 = res;
  var t$17;
  var $var = t$16.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg23106:{
      jumpLab$bg23106:{
        jumpLab$bg23105:{
          switch ($var.__type_switch_id) {
            case 352:
              x = $var.$atparam0;
              break jumpLab$bg23105;
            
            default:
              break jumpLab$bg23106;

          }
        }
        t$17 = x;
        break jumpBlockOuterjumpLab$bg23106;
      }
      t$17 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23106;
    }
  }
  var t$18 = t$17;
  var t$19 = res;
  var t$20;
  var var1 = t$19.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg23110:{
      jumpLab$bg23110:{
        jumpLab$bg23109:{
          switch (var1.__type_switch_id) {
            case 353:
              x1 = var1.$atparam0;
              break jumpLab$bg23109;
            
            default:
              break jumpLab$bg23110;

          }
        }
        t$20 = x1;
        break jumpBlockOuterjumpLab$bg23110;
      }
      t$20 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23110;
    }
  }
  var t$21 = t$20;
  var t$22 = res;
  var t$23;
  var var2 = t$22.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg23114:{
      jumpLab$bg23114:{
        jumpLab$bg23113:{
          switch (var2.__type_switch_id) {
            case 354:
              x2 = var2.$atparam0;
              break jumpLab$bg23113;
            
            default:
              break jumpLab$bg23114;

          }
        }
        t$23 = x2;
        break jumpBlockOuterjumpLab$bg23114;
      }
      t$23 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23114;
    }
  }
  var t$24 = t$23;
  var t$25 = res;
  var t$26;
  var var3 = t$25.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg23118:{
      jumpLab$bg23118:{
        jumpLab$bg23117:{
          switch (var3.__type_switch_id) {
            case 355:
              x3 = var3.$atparam0;
              break jumpLab$bg23117;
            
            default:
              break jumpLab$bg23118;

          }
        }
        t$26 = x3;
        break jumpBlockOuterjumpLab$bg23118;
      }
      t$26 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23118;
    }
  }
  var t$27 = t$26;
  return new (sk$Tuple4)(t$18, t$21, t$24, t$27);
};

sk$Tuple4.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  return t$14.$pl(new sk$String((')')));
};

sk$Tuple4.prototype.__bases = [
  sk$Tuple4
];

var sk$Tuple5 = sk.Tuple5 = function Tuple5(i0, i1, i2, i3, i4) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
  this.i4 = i4;
};

sk$Tuple5.prototype = Object.create(Object.prototype);

sk$Tuple5.prototype.__constructor = sk$Tuple5;

sk$Tuple5.prototype.__classname = 'Tuple5';

sk$Tuple5.prototype.$frozen = true;

sk$Tuple5.prototype.__type_switch_id = 395;

sk$Tuple5.prototype.__copy = function() {
  return new (sk$Tuple5)(this.i0, this.i1, this.i2, this.i3, this.i4);
};

sk$Tuple5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp160 = __cache.get(this);
  if (_tmp160 === undefined)
    {
      var _tmp160 = this.__copy();
      _tmp160.$frozen = true;
      __cache.set(this, _tmp160);
      _tmp160.i0 = skip.deepFreeze(_tmp160.i0, __cache);
      _tmp160.i1 = skip.deepFreeze(_tmp160.i1, __cache);
      _tmp160.i2 = skip.deepFreeze(_tmp160.i2, __cache);
      _tmp160.i3 = skip.deepFreeze(_tmp160.i3, __cache);
      _tmp160.i4 = skip.deepFreeze(_tmp160.i4, __cache);
    }
  return _tmp160;
};

sk$Tuple5.prototype.__init = function(__named_parameters) {};

sk$Tuple5.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple5.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple5.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple5.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  var t$14;
  if (t$9.__value)
    {
      var t$15 = this;
      var t$16 = t$15.i3;
      var t$17 = other;
      var t$18 = t$17.i3;
      t$14 = t$16.$eq$eq(t$18);
    }
  else
    t$14 = new sk$Bool((false));
  if (t$14.__value)
    {
      var t$19 = this;
      var t$20 = t$19.i4;
      var t$21 = other;
      var t$22 = t$21.i4;
      return t$20.$eq$eq(t$22);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple5.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple5.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple5.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg23275:{
      jumpLab$bg23275:{
        jumpLab$bg23274:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg23274;
            
            default:
              c = $var;
              break jumpLab$bg23275;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg23271:{
              jumpLab$bg23271:{
                jumpLab$bg23270:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg23270;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg23271;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg23267:{
                      jumpLab$bg23267:{
                        jumpLab$bg23266:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg23266;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg23267;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          var var3 = t$13.compare(t$15);
                          var c3;
                          {
                            jumpBlockOuterjumpLab$bg23263:{
                              jumpLab$bg23263:{
                                jumpLab$bg23262:{
                                  switch (var3.__type_switch_id) {
                                    case 206:
                                      break jumpLab$bg23262;
                                    
                                    default:
                                      c3 = var3;
                                      break jumpLab$bg23263;

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.i4;
                                  var t$18 = other;
                                  var t$19 = t$18.i4;
                                  return t$17.compare(t$19);
                                }
                              }
                              return c3;
                            }
                          }
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple5.prototype.getClassName = function() {
  return new sk$String(('Tuple5'));
};

sk$Tuple5.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = t$13.hash();
  var t$15 = sk$Hashable$dtcombine(t$11, t$14);
  var t$16 = sk$Hashable$dtcombine(t$8, t$15);
  var t$17 = sk$Hashable$dtcombine(t$5, t$16);
  return sk$Hashable$dtcombine(t$2, t$17);
};

sk$Tuple5.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = sk$inspect(t$13);
  var t$15 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$15);
};

sk$Tuple5.meta = function(class0, class1, class2, class3, class4) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  var t$4 = class4;
  return new (sk$Tuple5MetaClass)(t$, t$1, t$2, t$3, t$4);
};

sk$Tuple5.prototype.parallelMap = function(f0, f1, f2, f3, f4) {
  var res = sk$Parallel$dttabulate(new sk$Int(5.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg23362:{
      jumpLab$bg23362:{
        jumpLab$bg23361:{
          jumpLab$bg23360:{
            jumpLab$bg23359:{
              jumpLab$bg23358:{
                jumpLab$bg23357:{
                  {
                    var _tmp161 = i.__getSwitchValue();
                    switch (_tmp161) {
                      case 0:
                        break jumpLab$bg23357;
                      
                      case 1:
                        break jumpLab$bg23358;
                      
                      case 2:
                        break jumpLab$bg23359;
                      
                      case 3:
                        break jumpLab$bg23360;
                      
                      case 4:
                        break jumpLab$bg23361;
                      
                      default:
                        break jumpLab$bg23362;

                    }
                  }
                }
                {
                  var t$ = f0;
                  var t$1 = this;
                  var t$2 = t$1.i0;
                  var t$3 = t$(t$2);
                  return new (sk$Tuple$dtC5_0)(t$3);
                }
              }
              {
                var t$4 = f1;
                var t$5 = this;
                var t$6 = t$5.i1;
                var t$7 = t$4(t$6);
                return new (sk$Tuple$dtC5_1)(t$7);
              }
            }
            {
              var t$8 = f2;
              var t$9 = this;
              var t$10 = t$9.i2;
              var t$11 = t$8(t$10);
              return new (sk$Tuple$dtC5_2)(t$11);
            }
          }
          {
            var t$12 = f3;
            var t$13 = this;
            var t$14 = t$13.i3;
            var t$15 = t$12(t$14);
            return new (sk$Tuple$dtC5_3)(t$15);
          }
        }
        {
          var t$16 = f4;
          var t$17 = this;
          var t$18 = t$17.i4;
          var t$19 = t$16(t$18);
          return new (sk$Tuple$dtC5_4)(t$19);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$20 = res;
  var t$21;
  var $var = t$20.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg23366:{
      jumpLab$bg23366:{
        jumpLab$bg23365:{
          switch ($var.__type_switch_id) {
            case 356:
              x = $var.$atparam0;
              break jumpLab$bg23365;
            
            default:
              break jumpLab$bg23366;

          }
        }
        t$21 = x;
        break jumpBlockOuterjumpLab$bg23366;
      }
      t$21 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23366;
    }
  }
  var t$22 = t$21;
  var t$23 = res;
  var t$24;
  var var1 = t$23.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg23370:{
      jumpLab$bg23370:{
        jumpLab$bg23369:{
          switch (var1.__type_switch_id) {
            case 357:
              x1 = var1.$atparam0;
              break jumpLab$bg23369;
            
            default:
              break jumpLab$bg23370;

          }
        }
        t$24 = x1;
        break jumpBlockOuterjumpLab$bg23370;
      }
      t$24 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23370;
    }
  }
  var t$25 = t$24;
  var t$26 = res;
  var t$27;
  var var2 = t$26.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg23374:{
      jumpLab$bg23374:{
        jumpLab$bg23373:{
          switch (var2.__type_switch_id) {
            case 358:
              x2 = var2.$atparam0;
              break jumpLab$bg23373;
            
            default:
              break jumpLab$bg23374;

          }
        }
        t$27 = x2;
        break jumpBlockOuterjumpLab$bg23374;
      }
      t$27 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23374;
    }
  }
  var t$28 = t$27;
  var t$29 = res;
  var t$30;
  var var3 = t$29.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg23378:{
      jumpLab$bg23378:{
        jumpLab$bg23377:{
          switch (var3.__type_switch_id) {
            case 359:
              x3 = var3.$atparam0;
              break jumpLab$bg23377;
            
            default:
              break jumpLab$bg23378;

          }
        }
        t$30 = x3;
        break jumpBlockOuterjumpLab$bg23378;
      }
      t$30 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23378;
    }
  }
  var t$31 = t$30;
  var t$32 = res;
  var t$33;
  var var4 = t$32.get(new sk$Int(4.0, 0.0));
  var x4;
  {
    jumpBlockOuterjumpLab$bg23382:{
      jumpLab$bg23382:{
        jumpLab$bg23381:{
          switch (var4.__type_switch_id) {
            case 360:
              x4 = var4.$atparam0;
              break jumpLab$bg23381;
            
            default:
              break jumpLab$bg23382;

          }
        }
        t$33 = x4;
        break jumpBlockOuterjumpLab$bg23382;
      }
      t$33 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23382;
    }
  }
  var t$34 = t$33;
  return new (sk$Tuple5)(t$22, t$25, t$28, t$31, t$34);
};

sk$Tuple5.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  var t$15 = t$14.$pl(new sk$String((', ')));
  var t$16 = this;
  var t$17 = t$16.i4;
  var t$18 = t$15.$pl(t$17);
  return t$18.$pl(new sk$String((')')));
};

sk$Tuple5.prototype.__bases = [
  sk$Tuple5
];

var sk$Tuple6 = sk.Tuple6 = function Tuple6(i0, i1, i2, i3, i4, i5) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
  this.i4 = i4;
  this.i5 = i5;
};

sk$Tuple6.prototype = Object.create(Object.prototype);

sk$Tuple6.prototype.__constructor = sk$Tuple6;

sk$Tuple6.prototype.__classname = 'Tuple6';

sk$Tuple6.prototype.$frozen = true;

sk$Tuple6.prototype.__type_switch_id = 396;

sk$Tuple6.prototype.__copy = function() {
  return new (sk$Tuple6)(this.i0, this.i1, this.i2, this.i3, this.i4, this.i5);
};

sk$Tuple6.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp162 = __cache.get(this);
  if (_tmp162 === undefined)
    {
      var _tmp162 = this.__copy();
      _tmp162.$frozen = true;
      __cache.set(this, _tmp162);
      _tmp162.i0 = skip.deepFreeze(_tmp162.i0, __cache);
      _tmp162.i1 = skip.deepFreeze(_tmp162.i1, __cache);
      _tmp162.i2 = skip.deepFreeze(_tmp162.i2, __cache);
      _tmp162.i3 = skip.deepFreeze(_tmp162.i3, __cache);
      _tmp162.i4 = skip.deepFreeze(_tmp162.i4, __cache);
      _tmp162.i5 = skip.deepFreeze(_tmp162.i5, __cache);
    }
  return _tmp162;
};

sk$Tuple6.prototype.__init = function(__named_parameters) {};

sk$Tuple6.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple6.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple6.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple6.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  var t$14;
  if (t$9.__value)
    {
      var t$15 = this;
      var t$16 = t$15.i3;
      var t$17 = other;
      var t$18 = t$17.i3;
      t$14 = t$16.$eq$eq(t$18);
    }
  else
    t$14 = new sk$Bool((false));
  var t$19;
  if (t$14.__value)
    {
      var t$20 = this;
      var t$21 = t$20.i4;
      var t$22 = other;
      var t$23 = t$22.i4;
      t$19 = t$21.$eq$eq(t$23);
    }
  else
    t$19 = new sk$Bool((false));
  if (t$19.__value)
    {
      var t$24 = this;
      var t$25 = t$24.i5;
      var t$26 = other;
      var t$27 = t$26.i5;
      return t$25.$eq$eq(t$27);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple6.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple6.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple6.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg23569:{
      jumpLab$bg23569:{
        jumpLab$bg23568:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg23568;
            
            default:
              c = $var;
              break jumpLab$bg23569;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg23565:{
              jumpLab$bg23565:{
                jumpLab$bg23564:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg23564;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg23565;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg23561:{
                      jumpLab$bg23561:{
                        jumpLab$bg23560:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg23560;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg23561;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          var var3 = t$13.compare(t$15);
                          var c3;
                          {
                            jumpBlockOuterjumpLab$bg23557:{
                              jumpLab$bg23557:{
                                jumpLab$bg23556:{
                                  switch (var3.__type_switch_id) {
                                    case 206:
                                      break jumpLab$bg23556;
                                    
                                    default:
                                      c3 = var3;
                                      break jumpLab$bg23557;

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.i4;
                                  var t$18 = other;
                                  var t$19 = t$18.i4;
                                  var var4 = t$17.compare(t$19);
                                  var c4;
                                  {
                                    jumpBlockOuterjumpLab$bg23553:{
                                      jumpLab$bg23553:{
                                        jumpLab$bg23552:{
                                          switch (var4.__type_switch_id) {
                                            case 206:
                                              break jumpLab$bg23552;
                                            
                                            default:
                                              c4 = var4;
                                              break jumpLab$bg23553;

                                          }
                                        }
                                        {
                                          var t$20 = this;
                                          var t$21 = t$20.i5;
                                          var t$22 = other;
                                          var t$23 = t$22.i5;
                                          return t$21.compare(t$23);
                                        }
                                      }
                                      return c4;
                                    }
                                  }
                                }
                              }
                              return c3;
                            }
                          }
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple6.prototype.getClassName = function() {
  return new sk$String(('Tuple6'));
};

sk$Tuple6.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = t$13.hash();
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = t$16.hash();
  var t$18 = sk$Hashable$dtcombine(t$14, t$17);
  var t$19 = sk$Hashable$dtcombine(t$11, t$18);
  var t$20 = sk$Hashable$dtcombine(t$8, t$19);
  var t$21 = sk$Hashable$dtcombine(t$5, t$20);
  return sk$Hashable$dtcombine(t$2, t$21);
};

sk$Tuple6.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = sk$inspect(t$13);
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = sk$inspect(t$16);
  var t$18 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$18);
};

sk$Tuple6.meta = function(class0, class1, class2, class3, class4, class5) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  var t$4 = class4;
  var t$5 = class5;
  return new (sk$Tuple6MetaClass)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Tuple6.prototype.parallelMap = function(f0, f1, f2, f3, f4, f5) {
  var res = sk$Parallel$dttabulate(new sk$Int(6.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg23672:{
      jumpLab$bg23672:{
        jumpLab$bg23671:{
          jumpLab$bg23670:{
            jumpLab$bg23669:{
              jumpLab$bg23668:{
                jumpLab$bg23667:{
                  jumpLab$bg23666:{
                    {
                      var _tmp163 = i.__getSwitchValue();
                      switch (_tmp163) {
                        case 0:
                          break jumpLab$bg23666;
                        
                        case 1:
                          break jumpLab$bg23667;
                        
                        case 2:
                          break jumpLab$bg23668;
                        
                        case 3:
                          break jumpLab$bg23669;
                        
                        case 4:
                          break jumpLab$bg23670;
                        
                        case 5:
                          break jumpLab$bg23671;
                        
                        default:
                          break jumpLab$bg23672;

                      }
                    }
                  }
                  {
                    var t$ = f0;
                    var t$1 = this;
                    var t$2 = t$1.i0;
                    var t$3 = t$(t$2);
                    return new (sk$Tuple$dtC6_0)(t$3);
                  }
                }
                {
                  var t$4 = f1;
                  var t$5 = this;
                  var t$6 = t$5.i1;
                  var t$7 = t$4(t$6);
                  return new (sk$Tuple$dtC6_1)(t$7);
                }
              }
              {
                var t$8 = f2;
                var t$9 = this;
                var t$10 = t$9.i2;
                var t$11 = t$8(t$10);
                return new (sk$Tuple$dtC6_2)(t$11);
              }
            }
            {
              var t$12 = f3;
              var t$13 = this;
              var t$14 = t$13.i3;
              var t$15 = t$12(t$14);
              return new (sk$Tuple$dtC6_3)(t$15);
            }
          }
          {
            var t$16 = f4;
            var t$17 = this;
            var t$18 = t$17.i4;
            var t$19 = t$16(t$18);
            return new (sk$Tuple$dtC6_4)(t$19);
          }
        }
        {
          var t$20 = f5;
          var t$21 = this;
          var t$22 = t$21.i5;
          var t$23 = t$20(t$22);
          return new (sk$Tuple$dtC6_5)(t$23);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$24 = res;
  var t$25;
  var $var = t$24.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg23676:{
      jumpLab$bg23676:{
        jumpLab$bg23675:{
          switch ($var.__type_switch_id) {
            case 361:
              x = $var.$atparam0;
              break jumpLab$bg23675;
            
            default:
              break jumpLab$bg23676;

          }
        }
        t$25 = x;
        break jumpBlockOuterjumpLab$bg23676;
      }
      t$25 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23676;
    }
  }
  var t$26 = t$25;
  var t$27 = res;
  var t$28;
  var var1 = t$27.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg23680:{
      jumpLab$bg23680:{
        jumpLab$bg23679:{
          switch (var1.__type_switch_id) {
            case 362:
              x1 = var1.$atparam0;
              break jumpLab$bg23679;
            
            default:
              break jumpLab$bg23680;

          }
        }
        t$28 = x1;
        break jumpBlockOuterjumpLab$bg23680;
      }
      t$28 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23680;
    }
  }
  var t$29 = t$28;
  var t$30 = res;
  var t$31;
  var var2 = t$30.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg23684:{
      jumpLab$bg23684:{
        jumpLab$bg23683:{
          switch (var2.__type_switch_id) {
            case 363:
              x2 = var2.$atparam0;
              break jumpLab$bg23683;
            
            default:
              break jumpLab$bg23684;

          }
        }
        t$31 = x2;
        break jumpBlockOuterjumpLab$bg23684;
      }
      t$31 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23684;
    }
  }
  var t$32 = t$31;
  var t$33 = res;
  var t$34;
  var var3 = t$33.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg23688:{
      jumpLab$bg23688:{
        jumpLab$bg23687:{
          switch (var3.__type_switch_id) {
            case 364:
              x3 = var3.$atparam0;
              break jumpLab$bg23687;
            
            default:
              break jumpLab$bg23688;

          }
        }
        t$34 = x3;
        break jumpBlockOuterjumpLab$bg23688;
      }
      t$34 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23688;
    }
  }
  var t$35 = t$34;
  var t$36 = res;
  var t$37;
  var var4 = t$36.get(new sk$Int(4.0, 0.0));
  var x4;
  {
    jumpBlockOuterjumpLab$bg23692:{
      jumpLab$bg23692:{
        jumpLab$bg23691:{
          switch (var4.__type_switch_id) {
            case 365:
              x4 = var4.$atparam0;
              break jumpLab$bg23691;
            
            default:
              break jumpLab$bg23692;

          }
        }
        t$37 = x4;
        break jumpBlockOuterjumpLab$bg23692;
      }
      t$37 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23692;
    }
  }
  var t$38 = t$37;
  var t$39 = res;
  var t$40;
  var var5 = t$39.get(new sk$Int(5.0, 0.0));
  var x5;
  {
    jumpBlockOuterjumpLab$bg23696:{
      jumpLab$bg23696:{
        jumpLab$bg23695:{
          switch (var5.__type_switch_id) {
            case 366:
              x5 = var5.$atparam0;
              break jumpLab$bg23695;
            
            default:
              break jumpLab$bg23696;

          }
        }
        t$40 = x5;
        break jumpBlockOuterjumpLab$bg23696;
      }
      t$40 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg23696;
    }
  }
  var t$41 = t$40;
  return new (sk$Tuple6)(t$26, t$29, t$32, t$35, t$38, t$41);
};

sk$Tuple6.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  var t$15 = t$14.$pl(new sk$String((', ')));
  var t$16 = this;
  var t$17 = t$16.i4;
  var t$18 = t$15.$pl(t$17);
  var t$19 = t$18.$pl(new sk$String((', ')));
  var t$20 = this;
  var t$21 = t$20.i5;
  var t$22 = t$19.$pl(t$21);
  return t$22.$pl(new sk$String((')')));
};

sk$Tuple6.prototype.__bases = [
  sk$Tuple6
];

var sk$Tuple7 = sk.Tuple7 = function Tuple7(i0, i1, i2, i3, i4, i5, i6) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
  this.i4 = i4;
  this.i5 = i5;
  this.i6 = i6;
};

sk$Tuple7.prototype = Object.create(Object.prototype);

sk$Tuple7.prototype.__constructor = sk$Tuple7;

sk$Tuple7.prototype.__classname = 'Tuple7';

sk$Tuple7.prototype.$frozen = true;

sk$Tuple7.prototype.__type_switch_id = 397;

sk$Tuple7.prototype.__copy = function() {
  return new (sk$Tuple7)(this.i0, this.i1, this.i2, this.i3, this.i4, this.i5, this.i6);
};

sk$Tuple7.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp164 = __cache.get(this);
  if (_tmp164 === undefined)
    {
      var _tmp164 = this.__copy();
      _tmp164.$frozen = true;
      __cache.set(this, _tmp164);
      _tmp164.i0 = skip.deepFreeze(_tmp164.i0, __cache);
      _tmp164.i1 = skip.deepFreeze(_tmp164.i1, __cache);
      _tmp164.i2 = skip.deepFreeze(_tmp164.i2, __cache);
      _tmp164.i3 = skip.deepFreeze(_tmp164.i3, __cache);
      _tmp164.i4 = skip.deepFreeze(_tmp164.i4, __cache);
      _tmp164.i5 = skip.deepFreeze(_tmp164.i5, __cache);
      _tmp164.i6 = skip.deepFreeze(_tmp164.i6, __cache);
    }
  return _tmp164;
};

sk$Tuple7.prototype.__init = function(__named_parameters) {};

sk$Tuple7.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple7.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple7.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple7.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  var t$14;
  if (t$9.__value)
    {
      var t$15 = this;
      var t$16 = t$15.i3;
      var t$17 = other;
      var t$18 = t$17.i3;
      t$14 = t$16.$eq$eq(t$18);
    }
  else
    t$14 = new sk$Bool((false));
  var t$19;
  if (t$14.__value)
    {
      var t$20 = this;
      var t$21 = t$20.i4;
      var t$22 = other;
      var t$23 = t$22.i4;
      t$19 = t$21.$eq$eq(t$23);
    }
  else
    t$19 = new sk$Bool((false));
  var t$24;
  if (t$19.__value)
    {
      var t$25 = this;
      var t$26 = t$25.i5;
      var t$27 = other;
      var t$28 = t$27.i5;
      t$24 = t$26.$eq$eq(t$28);
    }
  else
    t$24 = new sk$Bool((false));
  if (t$24.__value)
    {
      var t$29 = this;
      var t$30 = t$29.i6;
      var t$31 = other;
      var t$32 = t$31.i6;
      return t$30.$eq$eq(t$32);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple7.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple7.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple7.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg23913:{
      jumpLab$bg23913:{
        jumpLab$bg23912:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg23912;
            
            default:
              c = $var;
              break jumpLab$bg23913;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg23909:{
              jumpLab$bg23909:{
                jumpLab$bg23908:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg23908;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg23909;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg23905:{
                      jumpLab$bg23905:{
                        jumpLab$bg23904:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg23904;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg23905;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          var var3 = t$13.compare(t$15);
                          var c3;
                          {
                            jumpBlockOuterjumpLab$bg23901:{
                              jumpLab$bg23901:{
                                jumpLab$bg23900:{
                                  switch (var3.__type_switch_id) {
                                    case 206:
                                      break jumpLab$bg23900;
                                    
                                    default:
                                      c3 = var3;
                                      break jumpLab$bg23901;

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.i4;
                                  var t$18 = other;
                                  var t$19 = t$18.i4;
                                  var var4 = t$17.compare(t$19);
                                  var c4;
                                  {
                                    jumpBlockOuterjumpLab$bg23897:{
                                      jumpLab$bg23897:{
                                        jumpLab$bg23896:{
                                          switch (var4.__type_switch_id) {
                                            case 206:
                                              break jumpLab$bg23896;
                                            
                                            default:
                                              c4 = var4;
                                              break jumpLab$bg23897;

                                          }
                                        }
                                        {
                                          var t$20 = this;
                                          var t$21 = t$20.i5;
                                          var t$22 = other;
                                          var t$23 = t$22.i5;
                                          var var5 = t$21.compare(t$23);
                                          var c5;
                                          {
                                            jumpBlockOuterjumpLab$bg23893:{
                                              jumpLab$bg23893:{
                                                jumpLab$bg23892:{
                                                  switch (var5.__type_switch_id) {
                                                    case 206:
                                                      break jumpLab$bg23892;
                                                    
                                                    default:
                                                      c5 = var5;
                                                      break jumpLab$bg23893;

                                                  }
                                                }
                                                {
                                                  var t$24 = this;
                                                  var t$25 = t$24.i6;
                                                  var t$26 = other;
                                                  var t$27 = t$26.i6;
                                                  return t$25.compare(t$27);
                                                }
                                              }
                                              return c5;
                                            }
                                          }
                                        }
                                      }
                                      return c4;
                                    }
                                  }
                                }
                              }
                              return c3;
                            }
                          }
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple7.prototype.getClassName = function() {
  return new sk$String(('Tuple7'));
};

sk$Tuple7.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = t$13.hash();
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = t$16.hash();
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = t$19.hash();
  var t$21 = sk$Hashable$dtcombine(t$17, t$20);
  var t$22 = sk$Hashable$dtcombine(t$14, t$21);
  var t$23 = sk$Hashable$dtcombine(t$11, t$22);
  var t$24 = sk$Hashable$dtcombine(t$8, t$23);
  var t$25 = sk$Hashable$dtcombine(t$5, t$24);
  return sk$Hashable$dtcombine(t$2, t$25);
};

sk$Tuple7.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = sk$inspect(t$13);
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = sk$inspect(t$16);
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = sk$inspect(t$19);
  var t$21 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$21);
};

sk$Tuple7.meta = function(class0, class1, class2, class3, class4, class5, class6) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  var t$4 = class4;
  var t$5 = class5;
  var t$6 = class6;
  return new (sk$Tuple7MetaClass)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Tuple7.prototype.parallelMap = function(f0, f1, f2, f3, f4, f5, f6) {
  var res = sk$Parallel$dttabulate(new sk$Int(7.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg24032:{
      jumpLab$bg24032:{
        jumpLab$bg24031:{
          jumpLab$bg24030:{
            jumpLab$bg24029:{
              jumpLab$bg24028:{
                jumpLab$bg24027:{
                  jumpLab$bg24026:{
                    jumpLab$bg24025:{
                      {
                        var _tmp165 = i.__getSwitchValue();
                        switch (_tmp165) {
                          case 0:
                            break jumpLab$bg24025;
                          
                          case 1:
                            break jumpLab$bg24026;
                          
                          case 2:
                            break jumpLab$bg24027;
                          
                          case 3:
                            break jumpLab$bg24028;
                          
                          case 4:
                            break jumpLab$bg24029;
                          
                          case 5:
                            break jumpLab$bg24030;
                          
                          case 6:
                            break jumpLab$bg24031;
                          
                          default:
                            break jumpLab$bg24032;

                        }
                      }
                    }
                    {
                      var t$ = f0;
                      var t$1 = this;
                      var t$2 = t$1.i0;
                      var t$3 = t$(t$2);
                      return new (sk$Tuple$dtC7_0)(t$3);
                    }
                  }
                  {
                    var t$4 = f1;
                    var t$5 = this;
                    var t$6 = t$5.i1;
                    var t$7 = t$4(t$6);
                    return new (sk$Tuple$dtC7_1)(t$7);
                  }
                }
                {
                  var t$8 = f2;
                  var t$9 = this;
                  var t$10 = t$9.i2;
                  var t$11 = t$8(t$10);
                  return new (sk$Tuple$dtC7_2)(t$11);
                }
              }
              {
                var t$12 = f3;
                var t$13 = this;
                var t$14 = t$13.i3;
                var t$15 = t$12(t$14);
                return new (sk$Tuple$dtC7_3)(t$15);
              }
            }
            {
              var t$16 = f4;
              var t$17 = this;
              var t$18 = t$17.i4;
              var t$19 = t$16(t$18);
              return new (sk$Tuple$dtC7_4)(t$19);
            }
          }
          {
            var t$20 = f5;
            var t$21 = this;
            var t$22 = t$21.i5;
            var t$23 = t$20(t$22);
            return new (sk$Tuple$dtC7_5)(t$23);
          }
        }
        {
          var t$24 = f6;
          var t$25 = this;
          var t$26 = t$25.i6;
          var t$27 = t$24(t$26);
          return new (sk$Tuple$dtC7_6)(t$27);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$28 = res;
  var t$29;
  var $var = t$28.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg24036:{
      jumpLab$bg24036:{
        jumpLab$bg24035:{
          switch ($var.__type_switch_id) {
            case 367:
              x = $var.$atparam0;
              break jumpLab$bg24035;
            
            default:
              break jumpLab$bg24036;

          }
        }
        t$29 = x;
        break jumpBlockOuterjumpLab$bg24036;
      }
      t$29 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24036;
    }
  }
  var t$30 = t$29;
  var t$31 = res;
  var t$32;
  var var1 = t$31.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg24040:{
      jumpLab$bg24040:{
        jumpLab$bg24039:{
          switch (var1.__type_switch_id) {
            case 368:
              x1 = var1.$atparam0;
              break jumpLab$bg24039;
            
            default:
              break jumpLab$bg24040;

          }
        }
        t$32 = x1;
        break jumpBlockOuterjumpLab$bg24040;
      }
      t$32 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24040;
    }
  }
  var t$33 = t$32;
  var t$34 = res;
  var t$35;
  var var2 = t$34.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg24044:{
      jumpLab$bg24044:{
        jumpLab$bg24043:{
          switch (var2.__type_switch_id) {
            case 369:
              x2 = var2.$atparam0;
              break jumpLab$bg24043;
            
            default:
              break jumpLab$bg24044;

          }
        }
        t$35 = x2;
        break jumpBlockOuterjumpLab$bg24044;
      }
      t$35 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24044;
    }
  }
  var t$36 = t$35;
  var t$37 = res;
  var t$38;
  var var3 = t$37.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg24048:{
      jumpLab$bg24048:{
        jumpLab$bg24047:{
          switch (var3.__type_switch_id) {
            case 370:
              x3 = var3.$atparam0;
              break jumpLab$bg24047;
            
            default:
              break jumpLab$bg24048;

          }
        }
        t$38 = x3;
        break jumpBlockOuterjumpLab$bg24048;
      }
      t$38 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24048;
    }
  }
  var t$39 = t$38;
  var t$40 = res;
  var t$41;
  var var4 = t$40.get(new sk$Int(4.0, 0.0));
  var x4;
  {
    jumpBlockOuterjumpLab$bg24052:{
      jumpLab$bg24052:{
        jumpLab$bg24051:{
          switch (var4.__type_switch_id) {
            case 371:
              x4 = var4.$atparam0;
              break jumpLab$bg24051;
            
            default:
              break jumpLab$bg24052;

          }
        }
        t$41 = x4;
        break jumpBlockOuterjumpLab$bg24052;
      }
      t$41 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24052;
    }
  }
  var t$42 = t$41;
  var t$43 = res;
  var t$44;
  var var5 = t$43.get(new sk$Int(5.0, 0.0));
  var x5;
  {
    jumpBlockOuterjumpLab$bg24056:{
      jumpLab$bg24056:{
        jumpLab$bg24055:{
          switch (var5.__type_switch_id) {
            case 372:
              x5 = var5.$atparam0;
              break jumpLab$bg24055;
            
            default:
              break jumpLab$bg24056;

          }
        }
        t$44 = x5;
        break jumpBlockOuterjumpLab$bg24056;
      }
      t$44 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24056;
    }
  }
  var t$45 = t$44;
  var t$46 = res;
  var t$47;
  var var6 = t$46.get(new sk$Int(6.0, 0.0));
  var x6;
  {
    jumpBlockOuterjumpLab$bg24060:{
      jumpLab$bg24060:{
        jumpLab$bg24059:{
          switch (var6.__type_switch_id) {
            case 373:
              x6 = var6.$atparam0;
              break jumpLab$bg24059;
            
            default:
              break jumpLab$bg24060;

          }
        }
        t$47 = x6;
        break jumpBlockOuterjumpLab$bg24060;
      }
      t$47 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24060;
    }
  }
  var t$48 = t$47;
  return new (sk$Tuple7)(t$30, t$33, t$36, t$39, t$42, t$45, t$48);
};

sk$Tuple7.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  var t$15 = t$14.$pl(new sk$String((', ')));
  var t$16 = this;
  var t$17 = t$16.i4;
  var t$18 = t$15.$pl(t$17);
  var t$19 = t$18.$pl(new sk$String((', ')));
  var t$20 = this;
  var t$21 = t$20.i5;
  var t$22 = t$19.$pl(t$21);
  var t$23 = t$22.$pl(new sk$String((', ')));
  var t$24 = this;
  var t$25 = t$24.i6;
  var t$26 = t$23.$pl(t$25);
  return t$26.$pl(new sk$String((')')));
};

sk$Tuple7.prototype.__bases = [
  sk$Tuple7
];

var sk$Tuple8 = sk.Tuple8 = function Tuple8(i0, i1, i2, i3, i4, i5, i6, i7) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
  this.i4 = i4;
  this.i5 = i5;
  this.i6 = i6;
  this.i7 = i7;
};

sk$Tuple8.prototype = Object.create(Object.prototype);

sk$Tuple8.prototype.__constructor = sk$Tuple8;

sk$Tuple8.prototype.__classname = 'Tuple8';

sk$Tuple8.prototype.$frozen = true;

sk$Tuple8.prototype.__type_switch_id = 398;

sk$Tuple8.prototype.__copy = function() {
  return new (sk$Tuple8)(this.i0, this.i1, this.i2, this.i3, this.i4, this.i5, this.i6, this.i7);
};

sk$Tuple8.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp166 = __cache.get(this);
  if (_tmp166 === undefined)
    {
      var _tmp166 = this.__copy();
      _tmp166.$frozen = true;
      __cache.set(this, _tmp166);
      _tmp166.i0 = skip.deepFreeze(_tmp166.i0, __cache);
      _tmp166.i1 = skip.deepFreeze(_tmp166.i1, __cache);
      _tmp166.i2 = skip.deepFreeze(_tmp166.i2, __cache);
      _tmp166.i3 = skip.deepFreeze(_tmp166.i3, __cache);
      _tmp166.i4 = skip.deepFreeze(_tmp166.i4, __cache);
      _tmp166.i5 = skip.deepFreeze(_tmp166.i5, __cache);
      _tmp166.i6 = skip.deepFreeze(_tmp166.i6, __cache);
      _tmp166.i7 = skip.deepFreeze(_tmp166.i7, __cache);
    }
  return _tmp166;
};

sk$Tuple8.prototype.__init = function(__named_parameters) {};

sk$Tuple8.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple8.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple8.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple8.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  var t$14;
  if (t$9.__value)
    {
      var t$15 = this;
      var t$16 = t$15.i3;
      var t$17 = other;
      var t$18 = t$17.i3;
      t$14 = t$16.$eq$eq(t$18);
    }
  else
    t$14 = new sk$Bool((false));
  var t$19;
  if (t$14.__value)
    {
      var t$20 = this;
      var t$21 = t$20.i4;
      var t$22 = other;
      var t$23 = t$22.i4;
      t$19 = t$21.$eq$eq(t$23);
    }
  else
    t$19 = new sk$Bool((false));
  var t$24;
  if (t$19.__value)
    {
      var t$25 = this;
      var t$26 = t$25.i5;
      var t$27 = other;
      var t$28 = t$27.i5;
      t$24 = t$26.$eq$eq(t$28);
    }
  else
    t$24 = new sk$Bool((false));
  var t$29;
  if (t$24.__value)
    {
      var t$30 = this;
      var t$31 = t$30.i6;
      var t$32 = other;
      var t$33 = t$32.i6;
      t$29 = t$31.$eq$eq(t$33);
    }
  else
    t$29 = new sk$Bool((false));
  if (t$29.__value)
    {
      var t$34 = this;
      var t$35 = t$34.i7;
      var t$36 = other;
      var t$37 = t$36.i7;
      return t$35.$eq$eq(t$37);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple8.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple8.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple8.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg24307:{
      jumpLab$bg24307:{
        jumpLab$bg24306:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg24306;
            
            default:
              c = $var;
              break jumpLab$bg24307;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg24303:{
              jumpLab$bg24303:{
                jumpLab$bg24302:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg24302;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg24303;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg24299:{
                      jumpLab$bg24299:{
                        jumpLab$bg24298:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg24298;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg24299;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          var var3 = t$13.compare(t$15);
                          var c3;
                          {
                            jumpBlockOuterjumpLab$bg24295:{
                              jumpLab$bg24295:{
                                jumpLab$bg24294:{
                                  switch (var3.__type_switch_id) {
                                    case 206:
                                      break jumpLab$bg24294;
                                    
                                    default:
                                      c3 = var3;
                                      break jumpLab$bg24295;

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.i4;
                                  var t$18 = other;
                                  var t$19 = t$18.i4;
                                  var var4 = t$17.compare(t$19);
                                  var c4;
                                  {
                                    jumpBlockOuterjumpLab$bg24291:{
                                      jumpLab$bg24291:{
                                        jumpLab$bg24290:{
                                          switch (var4.__type_switch_id) {
                                            case 206:
                                              break jumpLab$bg24290;
                                            
                                            default:
                                              c4 = var4;
                                              break jumpLab$bg24291;

                                          }
                                        }
                                        {
                                          var t$20 = this;
                                          var t$21 = t$20.i5;
                                          var t$22 = other;
                                          var t$23 = t$22.i5;
                                          var var5 = t$21.compare(t$23);
                                          var c5;
                                          {
                                            jumpBlockOuterjumpLab$bg24287:{
                                              jumpLab$bg24287:{
                                                jumpLab$bg24286:{
                                                  switch (var5.__type_switch_id) {
                                                    case 206:
                                                      break jumpLab$bg24286;
                                                    
                                                    default:
                                                      c5 = var5;
                                                      break jumpLab$bg24287;

                                                  }
                                                }
                                                {
                                                  var t$24 = this;
                                                  var t$25 = t$24.i6;
                                                  var t$26 = other;
                                                  var t$27 = t$26.i6;
                                                  var var6 = t$25.compare(t$27);
                                                  var c6;
                                                  {
                                                    jumpBlockOuterjumpLab$bg24283:{
                                                      jumpLab$bg24283:{
                                                        jumpLab$bg24282:{
                                                          switch (var6.__type_switch_id) {
                                                            case 206:
                                                              break jumpLab$bg24282;
                                                            
                                                            default:
                                                              c6 = var6;
                                                              break jumpLab$bg24283;

                                                          }
                                                        }
                                                        {
                                                          var t$28 = this;
                                                          var t$29 = t$28.i7;
                                                          var t$30 = other;
                                                          var t$31 = t$30.i7;
                                                          return t$29.compare(t$31);
                                                        }
                                                      }
                                                      return c6;
                                                    }
                                                  }
                                                }
                                              }
                                              return c5;
                                            }
                                          }
                                        }
                                      }
                                      return c4;
                                    }
                                  }
                                }
                              }
                              return c3;
                            }
                          }
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple8.prototype.getClassName = function() {
  return new sk$String(('Tuple8'));
};

sk$Tuple8.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = t$13.hash();
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = t$16.hash();
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = t$19.hash();
  var t$21 = this;
  var t$22 = t$21.i7;
  var t$23 = t$22.hash();
  var t$24 = sk$Hashable$dtcombine(t$20, t$23);
  var t$25 = sk$Hashable$dtcombine(t$17, t$24);
  var t$26 = sk$Hashable$dtcombine(t$14, t$25);
  var t$27 = sk$Hashable$dtcombine(t$11, t$26);
  var t$28 = sk$Hashable$dtcombine(t$8, t$27);
  var t$29 = sk$Hashable$dtcombine(t$5, t$28);
  return sk$Hashable$dtcombine(t$2, t$29);
};

sk$Tuple8.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = sk$inspect(t$13);
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = sk$inspect(t$16);
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = sk$inspect(t$19);
  var t$21 = this;
  var t$22 = t$21.i7;
  var t$23 = sk$inspect(t$22);
  var t$24 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20,
    t$23
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$24);
};

sk$Tuple8.meta = function(class0, class1, class2, class3, class4, class5, class6, class7) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  var t$4 = class4;
  var t$5 = class5;
  var t$6 = class6;
  var t$7 = class7;
  return new (sk$Tuple8MetaClass)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Tuple8.prototype.parallelMap = function(f0, f1, f2, f3, f4, f5, f6, f7) {
  var res = sk$Parallel$dttabulate(new sk$Int(8.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg24442:{
      jumpLab$bg24442:{
        jumpLab$bg24441:{
          jumpLab$bg24440:{
            jumpLab$bg24439:{
              jumpLab$bg24438:{
                jumpLab$bg24437:{
                  jumpLab$bg24436:{
                    jumpLab$bg24435:{
                      jumpLab$bg24434:{
                        {
                          var _tmp167 = i.__getSwitchValue();
                          switch (_tmp167) {
                            case 0:
                              break jumpLab$bg24434;
                            
                            case 1:
                              break jumpLab$bg24435;
                            
                            case 2:
                              break jumpLab$bg24436;
                            
                            case 3:
                              break jumpLab$bg24437;
                            
                            case 4:
                              break jumpLab$bg24438;
                            
                            case 5:
                              break jumpLab$bg24439;
                            
                            case 6:
                              break jumpLab$bg24440;
                            
                            case 7:
                              break jumpLab$bg24441;
                            
                            default:
                              break jumpLab$bg24442;

                          }
                        }
                      }
                      {
                        var t$ = f0;
                        var t$1 = this;
                        var t$2 = t$1.i0;
                        var t$3 = t$(t$2);
                        return new (sk$Tuple$dtC8_0)(t$3);
                      }
                    }
                    {
                      var t$4 = f1;
                      var t$5 = this;
                      var t$6 = t$5.i1;
                      var t$7 = t$4(t$6);
                      return new (sk$Tuple$dtC8_1)(t$7);
                    }
                  }
                  {
                    var t$8 = f2;
                    var t$9 = this;
                    var t$10 = t$9.i2;
                    var t$11 = t$8(t$10);
                    return new (sk$Tuple$dtC8_2)(t$11);
                  }
                }
                {
                  var t$12 = f3;
                  var t$13 = this;
                  var t$14 = t$13.i3;
                  var t$15 = t$12(t$14);
                  return new (sk$Tuple$dtC8_3)(t$15);
                }
              }
              {
                var t$16 = f4;
                var t$17 = this;
                var t$18 = t$17.i4;
                var t$19 = t$16(t$18);
                return new (sk$Tuple$dtC8_4)(t$19);
              }
            }
            {
              var t$20 = f5;
              var t$21 = this;
              var t$22 = t$21.i5;
              var t$23 = t$20(t$22);
              return new (sk$Tuple$dtC8_5)(t$23);
            }
          }
          {
            var t$24 = f6;
            var t$25 = this;
            var t$26 = t$25.i6;
            var t$27 = t$24(t$26);
            return new (sk$Tuple$dtC8_6)(t$27);
          }
        }
        {
          var t$28 = f7;
          var t$29 = this;
          var t$30 = t$29.i7;
          var t$31 = t$28(t$30);
          return new (sk$Tuple$dtC8_7)(t$31);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$32 = res;
  var t$33;
  var $var = t$32.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg24446:{
      jumpLab$bg24446:{
        jumpLab$bg24445:{
          switch ($var.__type_switch_id) {
            case 374:
              x = $var.$atparam0;
              break jumpLab$bg24445;
            
            default:
              break jumpLab$bg24446;

          }
        }
        t$33 = x;
        break jumpBlockOuterjumpLab$bg24446;
      }
      t$33 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24446;
    }
  }
  var t$34 = t$33;
  var t$35 = res;
  var t$36;
  var var1 = t$35.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg24450:{
      jumpLab$bg24450:{
        jumpLab$bg24449:{
          switch (var1.__type_switch_id) {
            case 375:
              x1 = var1.$atparam0;
              break jumpLab$bg24449;
            
            default:
              break jumpLab$bg24450;

          }
        }
        t$36 = x1;
        break jumpBlockOuterjumpLab$bg24450;
      }
      t$36 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24450;
    }
  }
  var t$37 = t$36;
  var t$38 = res;
  var t$39;
  var var2 = t$38.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg24454:{
      jumpLab$bg24454:{
        jumpLab$bg24453:{
          switch (var2.__type_switch_id) {
            case 376:
              x2 = var2.$atparam0;
              break jumpLab$bg24453;
            
            default:
              break jumpLab$bg24454;

          }
        }
        t$39 = x2;
        break jumpBlockOuterjumpLab$bg24454;
      }
      t$39 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24454;
    }
  }
  var t$40 = t$39;
  var t$41 = res;
  var t$42;
  var var3 = t$41.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg24458:{
      jumpLab$bg24458:{
        jumpLab$bg24457:{
          switch (var3.__type_switch_id) {
            case 377:
              x3 = var3.$atparam0;
              break jumpLab$bg24457;
            
            default:
              break jumpLab$bg24458;

          }
        }
        t$42 = x3;
        break jumpBlockOuterjumpLab$bg24458;
      }
      t$42 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24458;
    }
  }
  var t$43 = t$42;
  var t$44 = res;
  var t$45;
  var var4 = t$44.get(new sk$Int(4.0, 0.0));
  var x4;
  {
    jumpBlockOuterjumpLab$bg24462:{
      jumpLab$bg24462:{
        jumpLab$bg24461:{
          switch (var4.__type_switch_id) {
            case 378:
              x4 = var4.$atparam0;
              break jumpLab$bg24461;
            
            default:
              break jumpLab$bg24462;

          }
        }
        t$45 = x4;
        break jumpBlockOuterjumpLab$bg24462;
      }
      t$45 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24462;
    }
  }
  var t$46 = t$45;
  var t$47 = res;
  var t$48;
  var var5 = t$47.get(new sk$Int(5.0, 0.0));
  var x5;
  {
    jumpBlockOuterjumpLab$bg24466:{
      jumpLab$bg24466:{
        jumpLab$bg24465:{
          switch (var5.__type_switch_id) {
            case 379:
              x5 = var5.$atparam0;
              break jumpLab$bg24465;
            
            default:
              break jumpLab$bg24466;

          }
        }
        t$48 = x5;
        break jumpBlockOuterjumpLab$bg24466;
      }
      t$48 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24466;
    }
  }
  var t$49 = t$48;
  var t$50 = res;
  var t$51;
  var var6 = t$50.get(new sk$Int(6.0, 0.0));
  var x6;
  {
    jumpBlockOuterjumpLab$bg24470:{
      jumpLab$bg24470:{
        jumpLab$bg24469:{
          switch (var6.__type_switch_id) {
            case 380:
              x6 = var6.$atparam0;
              break jumpLab$bg24469;
            
            default:
              break jumpLab$bg24470;

          }
        }
        t$51 = x6;
        break jumpBlockOuterjumpLab$bg24470;
      }
      t$51 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24470;
    }
  }
  var t$52 = t$51;
  var t$53 = res;
  var t$54;
  var var7 = t$53.get(new sk$Int(7.0, 0.0));
  var x7;
  {
    jumpBlockOuterjumpLab$bg24474:{
      jumpLab$bg24474:{
        jumpLab$bg24473:{
          switch (var7.__type_switch_id) {
            case 381:
              x7 = var7.$atparam0;
              break jumpLab$bg24473;
            
            default:
              break jumpLab$bg24474;

          }
        }
        t$54 = x7;
        break jumpBlockOuterjumpLab$bg24474;
      }
      t$54 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24474;
    }
  }
  var t$55 = t$54;
  return new (sk$Tuple8)(t$34, t$37, t$40, t$43, t$46, t$49, t$52, t$55);
};

sk$Tuple8.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  var t$15 = t$14.$pl(new sk$String((', ')));
  var t$16 = this;
  var t$17 = t$16.i4;
  var t$18 = t$15.$pl(t$17);
  var t$19 = t$18.$pl(new sk$String((', ')));
  var t$20 = this;
  var t$21 = t$20.i5;
  var t$22 = t$19.$pl(t$21);
  var t$23 = t$22.$pl(new sk$String((', ')));
  var t$24 = this;
  var t$25 = t$24.i6;
  var t$26 = t$23.$pl(t$25);
  var t$27 = t$26.$pl(new sk$String((', ')));
  var t$28 = this;
  var t$29 = t$28.i7;
  var t$30 = t$27.$pl(t$29);
  return t$30.$pl(new sk$String((')')));
};

sk$Tuple8.prototype.__bases = [
  sk$Tuple8
];

var sk$Tuple9 = sk.Tuple9 = function Tuple9(i0, i1, i2, i3, i4, i5, i6, i7, i8) {
  this.i0 = i0;
  this.i1 = i1;
  this.i2 = i2;
  this.i3 = i3;
  this.i4 = i4;
  this.i5 = i5;
  this.i6 = i6;
  this.i7 = i7;
  this.i8 = i8;
};

sk$Tuple9.prototype = Object.create(Object.prototype);

sk$Tuple9.prototype.__constructor = sk$Tuple9;

sk$Tuple9.prototype.__classname = 'Tuple9';

sk$Tuple9.prototype.$frozen = true;

sk$Tuple9.prototype.__type_switch_id = 399;

sk$Tuple9.prototype.__copy = function() {
  return new (sk$Tuple9)(this.i0, this.i1, this.i2, this.i3, this.i4, this.i5, this.i6, this.i7, this.i8);
};

sk$Tuple9.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp168 = __cache.get(this);
  if (_tmp168 === undefined)
    {
      var _tmp168 = this.__copy();
      _tmp168.$frozen = true;
      __cache.set(this, _tmp168);
      _tmp168.i0 = skip.deepFreeze(_tmp168.i0, __cache);
      _tmp168.i1 = skip.deepFreeze(_tmp168.i1, __cache);
      _tmp168.i2 = skip.deepFreeze(_tmp168.i2, __cache);
      _tmp168.i3 = skip.deepFreeze(_tmp168.i3, __cache);
      _tmp168.i4 = skip.deepFreeze(_tmp168.i4, __cache);
      _tmp168.i5 = skip.deepFreeze(_tmp168.i5, __cache);
      _tmp168.i6 = skip.deepFreeze(_tmp168.i6, __cache);
      _tmp168.i7 = skip.deepFreeze(_tmp168.i7, __cache);
      _tmp168.i8 = skip.deepFreeze(_tmp168.i8, __cache);
    }
  return _tmp168;
};

sk$Tuple9.prototype.__init = function(__named_parameters) {};

sk$Tuple9.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Tuple9.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Tuple9.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Tuple9.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var t$4;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$5 = this;
      var t$6 = t$5.i1;
      var t$7 = other;
      var t$8 = t$7.i1;
      t$4 = t$6.$eq$eq(t$8);
    }
  else
    t$4 = new sk$Bool((false));
  var t$9;
  if (t$4.__value)
    {
      var t$10 = this;
      var t$11 = t$10.i2;
      var t$12 = other;
      var t$13 = t$12.i2;
      t$9 = t$11.$eq$eq(t$13);
    }
  else
    t$9 = new sk$Bool((false));
  var t$14;
  if (t$9.__value)
    {
      var t$15 = this;
      var t$16 = t$15.i3;
      var t$17 = other;
      var t$18 = t$17.i3;
      t$14 = t$16.$eq$eq(t$18);
    }
  else
    t$14 = new sk$Bool((false));
  var t$19;
  if (t$14.__value)
    {
      var t$20 = this;
      var t$21 = t$20.i4;
      var t$22 = other;
      var t$23 = t$22.i4;
      t$19 = t$21.$eq$eq(t$23);
    }
  else
    t$19 = new sk$Bool((false));
  var t$24;
  if (t$19.__value)
    {
      var t$25 = this;
      var t$26 = t$25.i5;
      var t$27 = other;
      var t$28 = t$27.i5;
      t$24 = t$26.$eq$eq(t$28);
    }
  else
    t$24 = new sk$Bool((false));
  var t$29;
  if (t$24.__value)
    {
      var t$30 = this;
      var t$31 = t$30.i6;
      var t$32 = other;
      var t$33 = t$32.i6;
      t$29 = t$31.$eq$eq(t$33);
    }
  else
    t$29 = new sk$Bool((false));
  var t$34;
  if (t$29.__value)
    {
      var t$35 = this;
      var t$36 = t$35.i7;
      var t$37 = other;
      var t$38 = t$37.i7;
      t$34 = t$36.$eq$eq(t$38);
    }
  else
    t$34 = new sk$Bool((false));
  if (t$34.__value)
    {
      var t$39 = this;
      var t$40 = t$39.i8;
      var t$41 = other;
      var t$42 = t$41.i8;
      return t$40.$eq$eq(t$42);
    }
  else
    return new sk$Bool((false));
};

sk$Tuple9.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Tuple9.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Tuple9.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = other;
  var t$3 = t$2.i0;
  var $var = t$1.compare(t$3);
  var c;
  {
    jumpBlockOuterjumpLab$bg24751:{
      jumpLab$bg24751:{
        jumpLab$bg24750:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg24750;
            
            default:
              c = $var;
              break jumpLab$bg24751;

          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.i1;
          var t$6 = other;
          var t$7 = t$6.i1;
          var var1 = t$5.compare(t$7);
          var c1;
          {
            jumpBlockOuterjumpLab$bg24747:{
              jumpLab$bg24747:{
                jumpLab$bg24746:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg24746;
                    
                    default:
                      c1 = var1;
                      break jumpLab$bg24747;

                  }
                }
                {
                  var t$8 = this;
                  var t$9 = t$8.i2;
                  var t$10 = other;
                  var t$11 = t$10.i2;
                  var var2 = t$9.compare(t$11);
                  var c2;
                  {
                    jumpBlockOuterjumpLab$bg24743:{
                      jumpLab$bg24743:{
                        jumpLab$bg24742:{
                          switch (var2.__type_switch_id) {
                            case 206:
                              break jumpLab$bg24742;
                            
                            default:
                              c2 = var2;
                              break jumpLab$bg24743;

                          }
                        }
                        {
                          var t$12 = this;
                          var t$13 = t$12.i3;
                          var t$14 = other;
                          var t$15 = t$14.i3;
                          var var3 = t$13.compare(t$15);
                          var c3;
                          {
                            jumpBlockOuterjumpLab$bg24739:{
                              jumpLab$bg24739:{
                                jumpLab$bg24738:{
                                  switch (var3.__type_switch_id) {
                                    case 206:
                                      break jumpLab$bg24738;
                                    
                                    default:
                                      c3 = var3;
                                      break jumpLab$bg24739;

                                  }
                                }
                                {
                                  var t$16 = this;
                                  var t$17 = t$16.i4;
                                  var t$18 = other;
                                  var t$19 = t$18.i4;
                                  var var4 = t$17.compare(t$19);
                                  var c4;
                                  {
                                    jumpBlockOuterjumpLab$bg24735:{
                                      jumpLab$bg24735:{
                                        jumpLab$bg24734:{
                                          switch (var4.__type_switch_id) {
                                            case 206:
                                              break jumpLab$bg24734;
                                            
                                            default:
                                              c4 = var4;
                                              break jumpLab$bg24735;

                                          }
                                        }
                                        {
                                          var t$20 = this;
                                          var t$21 = t$20.i5;
                                          var t$22 = other;
                                          var t$23 = t$22.i5;
                                          var var5 = t$21.compare(t$23);
                                          var c5;
                                          {
                                            jumpBlockOuterjumpLab$bg24731:{
                                              jumpLab$bg24731:{
                                                jumpLab$bg24730:{
                                                  switch (var5.__type_switch_id) {
                                                    case 206:
                                                      break jumpLab$bg24730;
                                                    
                                                    default:
                                                      c5 = var5;
                                                      break jumpLab$bg24731;

                                                  }
                                                }
                                                {
                                                  var t$24 = this;
                                                  var t$25 = t$24.i6;
                                                  var t$26 = other;
                                                  var t$27 = t$26.i6;
                                                  var var6 = t$25.compare(t$27);
                                                  var c6;
                                                  {
                                                    jumpBlockOuterjumpLab$bg24727:{
                                                      jumpLab$bg24727:{
                                                        jumpLab$bg24726:{
                                                          switch (var6.__type_switch_id) {
                                                            case 206:
                                                              break jumpLab$bg24726;
                                                            
                                                            default:
                                                              c6 = var6;
                                                              break jumpLab$bg24727;

                                                          }
                                                        }
                                                        {
                                                          var t$28 = this;
                                                          var t$29 = t$28.i7;
                                                          var t$30 = other;
                                                          var t$31 = t$30.i7;
                                                          var var7 = t$29.compare(t$31);
                                                          var c7;
                                                          {
                                                            jumpBlockOuterjumpLab$bg24723:{
                                                              jumpLab$bg24723:{
                                                                jumpLab$bg24722:{
                                                                  switch (var7.__type_switch_id) {
                                                                    case 206:
                                                                      break jumpLab$bg24722;
                                                                    
                                                                    default:
                                                                      c7 = var7;
                                                                      break jumpLab$bg24723;

                                                                  }
                                                                }
                                                                {
                                                                  var t$32 = this;
                                                                  var t$33 = t$32.i8;
                                                                  var t$34 = other;
                                                                  var t$35 = t$34.i8;
                                                                  return t$33.compare(t$35);
                                                                }
                                                              }
                                                              return c7;
                                                            }
                                                          }
                                                        }
                                                      }
                                                      return c6;
                                                    }
                                                  }
                                                }
                                              }
                                              return c5;
                                            }
                                          }
                                        }
                                      }
                                      return c4;
                                    }
                                  }
                                }
                              }
                              return c3;
                            }
                          }
                        }
                      }
                      return c2;
                    }
                  }
                }
              }
              return c1;
            }
          }
        }
      }
      return c;
    }
  }
};

sk$Tuple9.prototype.getClassName = function() {
  return new sk$String(('Tuple9'));
};

sk$Tuple9.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = t$1.hash();
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = t$4.hash();
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = t$7.hash();
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = t$10.hash();
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = t$13.hash();
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = t$16.hash();
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = t$19.hash();
  var t$21 = this;
  var t$22 = t$21.i7;
  var t$23 = t$22.hash();
  var t$24 = this;
  var t$25 = t$24.i8;
  var t$26 = t$25.hash();
  var t$27 = sk$Hashable$dtcombine(t$23, t$26);
  var t$28 = sk$Hashable$dtcombine(t$20, t$27);
  var t$29 = sk$Hashable$dtcombine(t$17, t$28);
  var t$30 = sk$Hashable$dtcombine(t$14, t$29);
  var t$31 = sk$Hashable$dtcombine(t$11, t$30);
  var t$32 = sk$Hashable$dtcombine(t$8, t$31);
  var t$33 = sk$Hashable$dtcombine(t$5, t$32);
  return sk$Hashable$dtcombine(t$2, t$33);
};

sk$Tuple9.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = sk$inspect(t$1);
  var t$3 = this;
  var t$4 = t$3.i1;
  var t$5 = sk$inspect(t$4);
  var t$6 = this;
  var t$7 = t$6.i2;
  var t$8 = sk$inspect(t$7);
  var t$9 = this;
  var t$10 = t$9.i3;
  var t$11 = sk$inspect(t$10);
  var t$12 = this;
  var t$13 = t$12.i4;
  var t$14 = sk$inspect(t$13);
  var t$15 = this;
  var t$16 = t$15.i5;
  var t$17 = sk$inspect(t$16);
  var t$18 = this;
  var t$19 = t$18.i6;
  var t$20 = sk$inspect(t$19);
  var t$21 = this;
  var t$22 = t$21.i7;
  var t$23 = sk$inspect(t$22);
  var t$24 = this;
  var t$25 = t$24.i8;
  var t$26 = sk$inspect(t$25);
  var t$27 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20,
    t$23,
    t$26
  ]);
  return new (sk$InspectCall)(new sk$String(('')), t$27);
};

sk$Tuple9.meta = function(class0, class1, class2, class3, class4, class5, class6, class7, class8) {
  var t$ = class0;
  var t$1 = class1;
  var t$2 = class2;
  var t$3 = class3;
  var t$4 = class4;
  var t$5 = class5;
  var t$6 = class6;
  var t$7 = class7;
  var t$8 = class8;
  return new (sk$Tuple9MetaClass)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Tuple9.prototype.parallelMap = function(f0, f1, f2, f3, f4, f5, f6, f7, f8) {
  var res = sk$Parallel$dttabulate(new sk$Int(9.0, 0.0), ((i) => 
  {
    jumpBlockOuterjumpLab$bg24902:{
      jumpLab$bg24902:{
        jumpLab$bg24901:{
          jumpLab$bg24900:{
            jumpLab$bg24899:{
              jumpLab$bg24898:{
                jumpLab$bg24897:{
                  jumpLab$bg24896:{
                    jumpLab$bg24895:{
                      jumpLab$bg24894:{
                        jumpLab$bg24893:{
                          {
                            var _tmp169 = i.__getSwitchValue();
                            switch (_tmp169) {
                              case 0:
                                break jumpLab$bg24893;
                              
                              case 1:
                                break jumpLab$bg24894;
                              
                              case 2:
                                break jumpLab$bg24895;
                              
                              case 3:
                                break jumpLab$bg24896;
                              
                              case 4:
                                break jumpLab$bg24897;
                              
                              case 5:
                                break jumpLab$bg24898;
                              
                              case 6:
                                break jumpLab$bg24899;
                              
                              case 7:
                                break jumpLab$bg24900;
                              
                              case 8:
                                break jumpLab$bg24901;
                              
                              default:
                                break jumpLab$bg24902;

                            }
                          }
                        }
                        {
                          var t$ = f0;
                          var t$1 = this;
                          var t$2 = t$1.i0;
                          var t$3 = t$(t$2);
                          return new (sk$Tuple$dtC9_0)(t$3);
                        }
                      }
                      {
                        var t$4 = f1;
                        var t$5 = this;
                        var t$6 = t$5.i1;
                        var t$7 = t$4(t$6);
                        return new (sk$Tuple$dtC9_1)(t$7);
                      }
                    }
                    {
                      var t$8 = f2;
                      var t$9 = this;
                      var t$10 = t$9.i2;
                      var t$11 = t$8(t$10);
                      return new (sk$Tuple$dtC9_2)(t$11);
                    }
                  }
                  {
                    var t$12 = f3;
                    var t$13 = this;
                    var t$14 = t$13.i3;
                    var t$15 = t$12(t$14);
                    return new (sk$Tuple$dtC9_3)(t$15);
                  }
                }
                {
                  var t$16 = f4;
                  var t$17 = this;
                  var t$18 = t$17.i4;
                  var t$19 = t$16(t$18);
                  return new (sk$Tuple$dtC9_4)(t$19);
                }
              }
              {
                var t$20 = f5;
                var t$21 = this;
                var t$22 = t$21.i5;
                var t$23 = t$20(t$22);
                return new (sk$Tuple$dtC9_5)(t$23);
              }
            }
            {
              var t$24 = f6;
              var t$25 = this;
              var t$26 = t$25.i6;
              var t$27 = t$24(t$26);
              return new (sk$Tuple$dtC9_6)(t$27);
            }
          }
          {
            var t$28 = f7;
            var t$29 = this;
            var t$30 = t$29.i7;
            var t$31 = t$28(t$30);
            return new (sk$Tuple$dtC9_7)(t$31);
          }
        }
        {
          var t$32 = f8;
          var t$33 = this;
          var t$34 = t$33.i8;
          var t$35 = t$32(t$34);
          return new (sk$Tuple$dtC9_8)(t$35);
        }
      }
      return sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
    }
  }));
  var t$36 = res;
  var t$37;
  var $var = t$36.get(new sk$Int(0.0, 0.0));
  var x;
  {
    jumpBlockOuterjumpLab$bg24906:{
      jumpLab$bg24906:{
        jumpLab$bg24905:{
          switch ($var.__type_switch_id) {
            case 382:
              x = $var.$atparam0;
              break jumpLab$bg24905;
            
            default:
              break jumpLab$bg24906;

          }
        }
        t$37 = x;
        break jumpBlockOuterjumpLab$bg24906;
      }
      t$37 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24906;
    }
  }
  var t$38 = t$37;
  var t$39 = res;
  var t$40;
  var var1 = t$39.get(new sk$Int(1.0, 0.0));
  var x1;
  {
    jumpBlockOuterjumpLab$bg24910:{
      jumpLab$bg24910:{
        jumpLab$bg24909:{
          switch (var1.__type_switch_id) {
            case 383:
              x1 = var1.$atparam0;
              break jumpLab$bg24909;
            
            default:
              break jumpLab$bg24910;

          }
        }
        t$40 = x1;
        break jumpBlockOuterjumpLab$bg24910;
      }
      t$40 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24910;
    }
  }
  var t$41 = t$40;
  var t$42 = res;
  var t$43;
  var var2 = t$42.get(new sk$Int(2.0, 0.0));
  var x2;
  {
    jumpBlockOuterjumpLab$bg24914:{
      jumpLab$bg24914:{
        jumpLab$bg24913:{
          switch (var2.__type_switch_id) {
            case 384:
              x2 = var2.$atparam0;
              break jumpLab$bg24913;
            
            default:
              break jumpLab$bg24914;

          }
        }
        t$43 = x2;
        break jumpBlockOuterjumpLab$bg24914;
      }
      t$43 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24914;
    }
  }
  var t$44 = t$43;
  var t$45 = res;
  var t$46;
  var var3 = t$45.get(new sk$Int(3.0, 0.0));
  var x3;
  {
    jumpBlockOuterjumpLab$bg24918:{
      jumpLab$bg24918:{
        jumpLab$bg24917:{
          switch (var3.__type_switch_id) {
            case 385:
              x3 = var3.$atparam0;
              break jumpLab$bg24917;
            
            default:
              break jumpLab$bg24918;

          }
        }
        t$46 = x3;
        break jumpBlockOuterjumpLab$bg24918;
      }
      t$46 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24918;
    }
  }
  var t$47 = t$46;
  var t$48 = res;
  var t$49;
  var var4 = t$48.get(new sk$Int(4.0, 0.0));
  var x4;
  {
    jumpBlockOuterjumpLab$bg24922:{
      jumpLab$bg24922:{
        jumpLab$bg24921:{
          switch (var4.__type_switch_id) {
            case 386:
              x4 = var4.$atparam0;
              break jumpLab$bg24921;
            
            default:
              break jumpLab$bg24922;

          }
        }
        t$49 = x4;
        break jumpBlockOuterjumpLab$bg24922;
      }
      t$49 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24922;
    }
  }
  var t$50 = t$49;
  var t$51 = res;
  var t$52;
  var var5 = t$51.get(new sk$Int(5.0, 0.0));
  var x5;
  {
    jumpBlockOuterjumpLab$bg24926:{
      jumpLab$bg24926:{
        jumpLab$bg24925:{
          switch (var5.__type_switch_id) {
            case 387:
              x5 = var5.$atparam0;
              break jumpLab$bg24925;
            
            default:
              break jumpLab$bg24926;

          }
        }
        t$52 = x5;
        break jumpBlockOuterjumpLab$bg24926;
      }
      t$52 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24926;
    }
  }
  var t$53 = t$52;
  var t$54 = res;
  var t$55;
  var var6 = t$54.get(new sk$Int(6.0, 0.0));
  var x6;
  {
    jumpBlockOuterjumpLab$bg24930:{
      jumpLab$bg24930:{
        jumpLab$bg24929:{
          switch (var6.__type_switch_id) {
            case 388:
              x6 = var6.$atparam0;
              break jumpLab$bg24929;
            
            default:
              break jumpLab$bg24930;

          }
        }
        t$55 = x6;
        break jumpBlockOuterjumpLab$bg24930;
      }
      t$55 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24930;
    }
  }
  var t$56 = t$55;
  var t$57 = res;
  var t$58;
  var var7 = t$57.get(new sk$Int(7.0, 0.0));
  var x7;
  {
    jumpBlockOuterjumpLab$bg24934:{
      jumpLab$bg24934:{
        jumpLab$bg24933:{
          switch (var7.__type_switch_id) {
            case 389:
              x7 = var7.$atparam0;
              break jumpLab$bg24933;
            
            default:
              break jumpLab$bg24934;

          }
        }
        t$58 = x7;
        break jumpBlockOuterjumpLab$bg24934;
      }
      t$58 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24934;
    }
  }
  var t$59 = t$58;
  var t$60 = res;
  var t$61;
  var var8 = t$60.get(new sk$Int(8.0, 0.0));
  var x8;
  {
    jumpBlockOuterjumpLab$bg24938:{
      jumpLab$bg24938:{
        jumpLab$bg24937:{
          switch (var8.__type_switch_id) {
            case 390:
              x8 = var8.$atparam0;
              break jumpLab$bg24937;
            
            default:
              break jumpLab$bg24938;

          }
        }
        t$61 = x8;
        break jumpBlockOuterjumpLab$bg24938;
      }
      t$61 = sk$invariant_violation(new sk$String(('Tuple.parallelMap')));
      break jumpBlockOuterjumpLab$bg24938;
    }
  }
  var t$62 = t$61;
  return new (sk$Tuple9)(t$38, t$41, t$44, t$47, t$50, t$53, t$56, t$59, t$62);
};

sk$Tuple9.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.i0;
  var t$2 = new sk$String(('(')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String((', ')));
  var t$4 = this;
  var t$5 = t$4.i1;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String((', ')));
  var t$8 = this;
  var t$9 = t$8.i2;
  var t$10 = t$7.$pl(t$9);
  var t$11 = t$10.$pl(new sk$String((', ')));
  var t$12 = this;
  var t$13 = t$12.i3;
  var t$14 = t$11.$pl(t$13);
  var t$15 = t$14.$pl(new sk$String((', ')));
  var t$16 = this;
  var t$17 = t$16.i4;
  var t$18 = t$15.$pl(t$17);
  var t$19 = t$18.$pl(new sk$String((', ')));
  var t$20 = this;
  var t$21 = t$20.i5;
  var t$22 = t$19.$pl(t$21);
  var t$23 = t$22.$pl(new sk$String((', ')));
  var t$24 = this;
  var t$25 = t$24.i6;
  var t$26 = t$23.$pl(t$25);
  var t$27 = t$26.$pl(new sk$String((', ')));
  var t$28 = this;
  var t$29 = t$28.i7;
  var t$30 = t$27.$pl(t$29);
  var t$31 = t$30.$pl(new sk$String((', ')));
  var t$32 = this;
  var t$33 = t$32.i8;
  var t$34 = t$31.$pl(t$33);
  return t$34.$pl(new sk$String((')')));
};

sk$Tuple9.prototype.__bases = [
  sk$Tuple9
];

var sk$UInt16 = sk.UInt16 = function UInt16(value) {
  this.value = value;
};

sk$UInt16.prototype = Object.create(Object.prototype);

sk$UInt16.prototype.__constructor = sk$UInt16;

sk$UInt16.prototype.__classname = 'UInt16';

sk$UInt16.prototype.$frozen = true;

sk$UInt16.prototype.__type_switch_id = 400;

sk$UInt16.prototype.__copy = function() {
  return new (sk$UInt16)(this.value);
};

sk$UInt16.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp170 = __cache.get(this);
  if (_tmp170 === undefined)
    {
      var _tmp170 = this.__copy();
      _tmp170.$frozen = true;
      __cache.set(this, _tmp170);
      _tmp170.value = skip.deepFreeze(_tmp170.value, __cache);
    }
  return _tmp170;
};

sk$UInt16.prototype.__init = function(__named_parameters) {};

sk$UInt16.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$UInt16.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$UInt16.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$UInt16.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$UInt16.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$UInt16.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$UInt16.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$UInt16.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$UInt16.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$UInt16.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$UInt16.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$UInt16.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$UInt16.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$UInt16.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$UInt16.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$UInt16.create = function(n) {
  var t$ = this;
  var t$1 = n;
  var x = t$.truncate(t$1);
  var t$2 = n;
  var t$3 = x;
  var t$4 = t$3.toInt();
  if (t$2.$bg$eq(t$4).__value)
    {
      var t$5 = this;
      var t$6 = n;
      t$5.throwOutOfRange(t$6);
    }
  else
    {}
  return x;
};

sk$UInt16.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$UInt16.prototype.getClassName = function() {
  return new sk$String(('UInt16'));
};

sk$UInt16.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$UInt16.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$UInt16.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$UInt16.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$UInt16.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$UInt16.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$UInt16.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$UInt16.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$UInt16.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('UInt16'))));
};

sk$UInt16.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$UInt16.prototype.toInt = function() {
  var t$ = this;
  var t$1 = t$.value;
  return t$1.and(new sk$Int(65535.0, 0.0));
};

sk$UInt16.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$UInt16.truncate = function(n) {
  var t$ = n;
  var t$1 = sk$Int16.truncate(t$);
  return new (sk$UInt16)(t$1);
};

sk$UInt16.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$UInt16.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$UInt16.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$UInt16.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$UInt16.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$UInt16.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$UInt16.prototype.__bases = [
  sk$UInt16
];

Object.defineProperty(sk$UInt16, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$UInt16.truncate(new sk$Int(65535.0, 0.0));
    })());
    Object.defineProperty(sk$UInt16, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$UInt16, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$UInt16.truncate(new sk$Int(0.0, 0.0));
    })());
    Object.defineProperty(sk$UInt16, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$UInt32 = sk.UInt32 = function UInt32(value) {
  this.value = value;
};

sk$UInt32.prototype = Object.create(Object.prototype);

sk$UInt32.prototype.__constructor = sk$UInt32;

sk$UInt32.prototype.__classname = 'UInt32';

sk$UInt32.prototype.$frozen = true;

sk$UInt32.prototype.__type_switch_id = 401;

sk$UInt32.prototype.__copy = function() {
  return new (sk$UInt32)(this.value);
};

sk$UInt32.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp171 = __cache.get(this);
  if (_tmp171 === undefined)
    {
      var _tmp171 = this.__copy();
      _tmp171.$frozen = true;
      __cache.set(this, _tmp171);
      _tmp171.value = skip.deepFreeze(_tmp171.value, __cache);
    }
  return _tmp171;
};

sk$UInt32.prototype.__init = function(__named_parameters) {};

sk$UInt32.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$UInt32.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$UInt32.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$UInt32.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$UInt32.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$UInt32.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$UInt32.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$UInt32.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$UInt32.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$UInt32.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$UInt32.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$UInt32.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$UInt32.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$UInt32.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$UInt32.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$UInt32.create = function(n) {
  var t$ = this;
  var t$1 = n;
  var x = t$.truncate(t$1);
  var t$2 = n;
  var t$3 = x;
  var t$4 = t$3.toInt();
  if (t$2.$bg$eq(t$4).__value)
    {
      var t$5 = this;
      var t$6 = n;
      t$5.throwOutOfRange(t$6);
    }
  else
    {}
  return x;
};

sk$UInt32.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$UInt32.prototype.getClassName = function() {
  return new sk$String(('UInt32'));
};

sk$UInt32.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$UInt32.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$UInt32.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$UInt32.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$UInt32.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$UInt32.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$UInt32.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$UInt32.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$UInt32.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('UInt32'))));
};

sk$UInt32.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$UInt32.prototype.toInt = function() {
  var t$ = this;
  var t$1 = t$.value;
  return t$1.and(new sk$Int(4294967295.0, 0.0));
};

sk$UInt32.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$UInt32.truncate = function(n) {
  var t$ = n;
  var t$1 = sk$Int32.truncate(t$);
  return new (sk$UInt32)(t$1);
};

sk$UInt32.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$UInt32.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$UInt32.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$UInt32.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$UInt32.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$UInt32.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$UInt32.prototype.__bases = [
  sk$UInt32
];

Object.defineProperty(sk$UInt32, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$UInt32.truncate(new sk$Int(4294967295.0, 0.0));
    })());
    Object.defineProperty(sk$UInt32, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$UInt32, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$UInt32.truncate(new sk$Int(0.0, 0.0));
    })());
    Object.defineProperty(sk$UInt32, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$UInt8 = sk.UInt8 = function UInt8(value) {
  this.value = value;
};

sk$UInt8.prototype = Object.create(Object.prototype);

sk$UInt8.prototype.__constructor = sk$UInt8;

sk$UInt8.prototype.__classname = 'UInt8';

sk$UInt8.prototype.$frozen = true;

sk$UInt8.prototype.__type_switch_id = 402;

sk$UInt8.prototype.__copy = function() {
  return new (sk$UInt8)(this.value);
};

sk$UInt8.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp172 = __cache.get(this);
  if (_tmp172 === undefined)
    {
      var _tmp172 = this.__copy();
      _tmp172.$frozen = true;
      __cache.set(this, _tmp172);
      _tmp172.value = skip.deepFreeze(_tmp172.value, __cache);
    }
  return _tmp172;
};

sk$UInt8.prototype.__init = function(__named_parameters) {};

sk$UInt8.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$UInt8.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$UInt8.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$UInt8.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$UInt8.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$UInt8.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$UInt8.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$UInt8.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$UInt8.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$UInt8.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$UInt8.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$UInt8.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$UInt8.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$UInt8.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$UInt8.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$UInt8.create = function(n) {
  var t$ = this;
  var t$1 = n;
  var x = t$.truncate(t$1);
  var t$2 = n;
  var t$3 = x;
  var t$4 = t$3.toInt();
  if (t$2.$bg$eq(t$4).__value)
    {
      var t$5 = this;
      var t$6 = n;
      t$5.throwOutOfRange(t$6);
    }
  else
    {}
  return x;
};

sk$UInt8.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$UInt8.prototype.getClassName = function() {
  return new sk$String(('UInt8'));
};

sk$UInt8.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$UInt8.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$UInt8.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$UInt8.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$UInt8.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$UInt8.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$UInt8.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$UInt8.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$UInt8.throwOutOfRange = function(n) {
  var t$ = n;
  skip.throwException(sk, new (sk$InvalidIntegralCastError)(t$, new sk$String(('UInt8'))));
};

sk$UInt8.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$UInt8.prototype.toInt = function() {
  var t$ = this;
  var t$1 = t$.value;
  return t$1.and(new sk$Int(255.0, 0.0));
};

sk$UInt8.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$UInt8.truncate = function(n) {
  var t$ = n;
  var t$1 = sk$Int8.truncate(t$);
  return new (sk$UInt8)(t$1);
};

sk$UInt8.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$UInt8.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$UInt8.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$UInt8.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$UInt8.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$UInt8.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$UInt8.prototype.__bases = [
  sk$UInt8
];

Object.defineProperty(sk$UInt8, 'max', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$UInt8.truncate(new sk$Int(255.0, 0.0));
    })());
    Object.defineProperty(sk$UInt8, 'max', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

Object.defineProperty(sk$UInt8, 'min', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return sk$UInt8.truncate(new sk$Int(0.0, 0.0));
    })());
    Object.defineProperty(sk$UInt8, 'min', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$UnitTest$dtOptions = sk.UnitTest$dtOptions = function UnitTest$dtOptions(__named_parameters) {
  this.__init(__named_parameters);
};

sk$UnitTest$dtOptions.prototype = Object.create(Object.prototype);

sk$UnitTest$dtOptions.prototype.__constructor = sk$UnitTest$dtOptions;

sk$UnitTest$dtOptions.prototype.__classname = 'UnitTest.Options';

sk$UnitTest$dtOptions.prototype.$frozen = true;

sk$UnitTest$dtOptions.prototype.__type_switch_id = 403;

sk$UnitTest$dtOptions.prototype.__copy = function() {
  return new (sk$UnitTest$dtOptions)(this);
};

sk$UnitTest$dtOptions.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp173 = __cache.get(this);
  if (_tmp173 === undefined)
    {
      var _tmp173 = this.__copy();
      _tmp173.$frozen = true;
      __cache.set(this, _tmp173);
      _tmp173.colorSuccess = skip.deepFreeze(_tmp173.colorSuccess, __cache);
      _tmp173.colorFailure = skip.deepFreeze(_tmp173.colorFailure, __cache);
      _tmp173.colorEnd = skip.deepFreeze(_tmp173.colorEnd, __cache);
    }
  return _tmp173;
};

sk$UnitTest$dtOptions.prototype.__init = function(__named_parameters) {
  this.colorSuccess = __named_parameters.colorSuccess === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.colorSuccess;
  this.colorFailure = __named_parameters.colorFailure === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.colorFailure;
  this.colorEnd = __named_parameters.colorEnd === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.colorEnd;
};

sk$UnitTest$dtOptions.prototype.__bases = [
  sk$UnitTest$dtOptions
];

var sk$UnorderedSet$dtEmptyValue = sk.UnorderedSet$dtEmptyValue = function UnorderedSet$dtEmptyValue() {};

sk$UnorderedSet$dtEmptyValue.prototype = Object.create(Object.prototype);

sk$UnorderedSet$dtEmptyValue.prototype.__constructor = sk$UnorderedSet$dtEmptyValue;

sk$UnorderedSet$dtEmptyValue.prototype.__classname = 'UnorderedSet.EmptyValue';

sk$UnorderedSet$dtEmptyValue.prototype.$frozen = true;

sk$UnorderedSet$dtEmptyValue.prototype.__type_switch_id = 404;

sk$UnorderedSet$dtEmptyValue.prototype.__copy = function() {
  return new (sk$UnorderedSet$dtEmptyValue)();
};

sk$UnorderedSet$dtEmptyValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp174 = __cache.get(this);
  if (_tmp174 === undefined)
    {
      var _tmp174 = this.__copy();
      _tmp174.$frozen = true;
      __cache.set(this, _tmp174);
    }
  return _tmp174;
};

sk$UnorderedSet$dtEmptyValue.prototype.__init = function(__named_parameters) {};

sk$UnorderedSet$dtEmptyValue.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$UnorderedSet$dtEmptyValue.prototype.$eq$eq = function(_other) {
  return new sk$Bool((true));
};

sk$UnorderedSet$dtEmptyValue.prototype.hash = function() {
  return new sk$String(('UnorderedSet.EmptyValue')).hash();
};

sk$UnorderedSet$dtEmptyValue.prototype.__bases = [
  sk$UnorderedSet$dtEmptyValue
];

var sk$Unsafe$dtRawStorage = sk.Unsafe$dtRawStorage = function Unsafe$dtRawStorage() {};

sk$Unsafe$dtRawStorage.prototype = Object.create(Object.prototype);

sk$Unsafe$dtRawStorage.prototype.__constructor = sk$Unsafe$dtRawStorage;

sk$Unsafe$dtRawStorage.prototype.__classname = 'Unsafe.RawStorage';

sk$Unsafe$dtRawStorage.prototype.$frozen = true;

sk$Unsafe$dtRawStorage.prototype.__type_switch_id = 405;

sk$Unsafe$dtRawStorage.prototype.__init = function(__named_parameters) {};

sk$Unsafe$dtRawStorage.prototype.inspect = function() {
  return new (sk$InspectObject)(new sk$String(('RawStorage')), new (sk$Array)([]));
};

sk$Unsafe$dtRawStorage.make = function(value) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Unsafe.RawStorage::make')));
};

sk$Unsafe$dtRawStorage.uninitialized = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Unsafe.RawStorage::uninitialized')));
};

sk$Unsafe$dtRawStorage.unsafeGet = function(value) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Unsafe.RawStorage::unsafeGet')));
};

sk$Unsafe$dtRawStorage.prototype.__bases = [
  sk$Unsafe$dtRawStorage
];

sk$Unsafe$dtRawStorage = sk.Unsafe$dtRawStorage = skip.initNativeClass(sk, 'Unsafe.RawStorage', sk$Unsafe$dtRawStorage);

var sk$Vector$dtVectorIterator = sk.Vector$dtVectorIterator = function Vector$dtVectorIterator(vector, inner, sz, indexMinusGeneration) {
  this.vector = vector;
  this.inner = inner;
  this.sz = sz;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Vector$dtVectorIterator.prototype = Object.create(Object.prototype);

sk$Vector$dtVectorIterator.prototype.__constructor = sk$Vector$dtVectorIterator;

sk$Vector$dtVectorIterator.prototype.__classname = 'Vector.VectorIterator';

sk$Vector$dtVectorIterator.prototype.$frozen = undefined;

sk$Vector$dtVectorIterator.prototype.__type_switch_id = -1;

sk$Vector$dtVectorIterator.prototype.__copy = function() {
  return new (sk$Vector$dtVectorIterator)(this.vector, this.inner, this.sz, this.indexMinusGeneration);
};

sk$Vector$dtVectorIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp175 = __cache.get(this);
  if (_tmp175 === undefined)
    {
      var _tmp175 = this.__copy();
      _tmp175.$frozen = true;
      __cache.set(this, _tmp175);
      _tmp175.vector = skip.deepFreeze(_tmp175.vector, __cache);
      _tmp175.inner = skip.deepFreeze(_tmp175.inner, __cache);
      _tmp175.sz = skip.deepFreeze(_tmp175.sz, __cache);
      _tmp175.indexMinusGeneration = skip.deepFreeze(_tmp175.indexMinusGeneration, __cache);
    }
  return _tmp175;
};

sk$Vector$dtVectorIterator.prototype.__init = function(__named_parameters) {};

sk$Vector$dtVectorIterator.prototype.next = function() {
  var t$ = this;
  var vector = t$.vector;
  var t$1 = this;
  var t$2 = t$1.indexMinusGeneration;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$2.$pl(t$4);
  var t$5 = index;
  var t$6 = this;
  var t$7 = t$6.sz;
  if (t$5.uge(t$7).__value)
    {
      var t$8 = index;
      if (t$8.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
        sk$throwContainerChanged();
      else
        {}
      return singleton$None;
    }
  else
    {
      var $var = this;
      var t$9 = $var;
      var t$10 = this;
      var t$11 = t$10.indexMinusGeneration;
      var t$12 = t$9;
      t$12.indexMinusGeneration = t$11.$pl(new sk$Int(1.0, 0.0));
      var t$13 = this;
      var t$14 = index;
      var t$15 = t$13.getItemValue(t$14);
      return new (sk$Some)(t$15);
    }
};

sk$Vector$dtVectorIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var sz = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = sz;
  return new (sk$Some)(t$9);
};

sk$Vector$dtVectorIterator.prototype.__bases = [
  sk$Vector$dtVectorIterator
];

var sk$Void = sk.Void = function Void() {};

sk$Void.prototype = Object.create(Object.prototype);

sk$Void.prototype.__constructor = sk$Void;

sk$Void.prototype.__classname = 'Void';

sk$Void.prototype.$frozen = true;

sk$Void.prototype.__type_switch_id = 406;

sk$Void.prototype.__init = function(__named_parameters) {};

sk$Void.prototype.$bg$eq = function($atparam0) {
  return new sk$Bool((false));
};

sk$Void.prototype.$lt = function($atparam0) {
  return new sk$Bool((false));
};

sk$Void.prototype.$lt$eq = function($atparam0) {
  return new sk$Bool((true));
};

sk$Void.prototype.$eq$eq = function($atparam0) {
  return new sk$Bool((true));
};

sk$Void.prototype.$gt = function($atparam0) {
  return new sk$Bool((false));
};

sk$Void.prototype.$gt$eq = function($atparam0) {
  return new sk$Bool((true));
};

sk$Void.prototype.compare = function($0) {
  return singleton$EQ;
};

sk$Void.prototype.getClassName = function() {
  return new sk$String(('Void'));
};

sk$Void.prototype.hash = function() {
  return new sk$Int(0.0, 0.0);
};

sk$Void.prototype.inspect = function() {
  return new (sk$InspectLiteral)(new sk$String(('void')));
};

sk$Void.prototype.toString = function() {
  return new sk$String(('void'));
};

sk$Void.prototype.__bases = [
  sk$Void
];

sk$Void = sk.Void = skip.initNativeClass(sk, 'Void', sk$Void);

var sk$ArgumentParser$dtArgumentError = sk.ArgumentParser$dtArgumentError = function ArgumentParser$dtArgumentError() {};

sk$ArgumentParser$dtArgumentError.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtArgumentError.prototype.__constructor = sk$ArgumentParser$dtArgumentError;

sk$ArgumentParser$dtArgumentError.prototype.__classname = 'ArgumentParser.ArgumentError';

sk$ArgumentParser$dtArgumentError.prototype.$frozen = undefined;

sk$ArgumentParser$dtArgumentError.prototype.__type_switch_id = -1;

sk$ArgumentParser$dtArgumentError.prototype.__copy = function() {};

sk$ArgumentParser$dtArgumentError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp176 = __cache.get(this);
  if (_tmp176 === undefined)
    {
      var _tmp176 = this.__copy();
      _tmp176.$frozen = true;
      __cache.set(this, _tmp176);
    }
  return _tmp176;
};

sk$ArgumentParser$dtArgumentError.prototype.__init = function(__named_parameters) {};

sk$ArgumentParser$dtArgumentError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$ArgumentParser$dtArgumentError.prototype.__bases = [
  sk$ArgumentParser$dtArgumentError,
  sk$Exception
];

var sk$ArgumentParser$dtBoolParam = sk.ArgumentParser$dtBoolParam = function ArgumentParser$dtBoolParam(__named_parameters) {
  sk$ArgumentParser$dtParam.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtBoolParam.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtBoolParam.prototype.__constructor = sk$ArgumentParser$dtBoolParam;

sk$ArgumentParser$dtBoolParam.prototype.__classname = 'ArgumentParser.BoolParam';

sk$ArgumentParser$dtBoolParam.prototype.$frozen = true;

sk$ArgumentParser$dtBoolParam.prototype.__type_switch_id = 0;

sk$ArgumentParser$dtBoolParam.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtBoolParam)(this);
};

sk$ArgumentParser$dtBoolParam.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp177 = __cache.get(this);
  if (_tmp177 === undefined)
    {
      var _tmp177 = this.__copy();
      _tmp177.$frozen = true;
      __cache.set(this, _tmp177);
      _tmp177.value = skip.deepFreeze(_tmp177.value, __cache);
      _tmp177.negatable = skip.deepFreeze(_tmp177.negatable, __cache);
      _tmp177.name = skip.deepFreeze(_tmp177.name, __cache);
      _tmp177.help = skip.deepFreeze(_tmp177.help, __cache);
    }
  return _tmp177;
};

sk$ArgumentParser$dtBoolParam.prototype.__init = function(__named_parameters) {
  this.value = __named_parameters.value === undefined ? ((() => 
  {
    return new sk$Bool((true));
  })()) : __named_parameters.value;
  this.negatable = __named_parameters.negatable === undefined ? ((() => 
  {
    return new sk$Bool((true));
  })()) : __named_parameters.negatable;
  this.name = __named_parameters.name;
  this.help = __named_parameters.help === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.help;
};

sk$ArgumentParser$dtBoolParam.prototype.__bases = [
  sk$ArgumentParser$dtBoolParam,
  sk$ArgumentParser$dtParam
];

var sk$ArgumentParser$dtBoolValue = sk.ArgumentParser$dtBoolValue = function ArgumentParser$dtBoolValue(__named_parameters) {
  sk$ArgumentParser$dtValue.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtBoolValue.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtBoolValue.prototype.__constructor = sk$ArgumentParser$dtBoolValue;

sk$ArgumentParser$dtBoolValue.prototype.__classname = 'ArgumentParser.BoolValue';

sk$ArgumentParser$dtBoolValue.prototype.$frozen = false;

sk$ArgumentParser$dtBoolValue.prototype.__type_switch_id = 5;

sk$ArgumentParser$dtBoolValue.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtBoolValue)(this);
};

sk$ArgumentParser$dtBoolValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp178 = __cache.get(this);
  if (_tmp178 === undefined)
    {
      var _tmp178 = this.__copy();
      _tmp178.$frozen = true;
      __cache.set(this, _tmp178);
      _tmp178.value = skip.deepFreeze(_tmp178.value, __cache);
      _tmp178.name = skip.deepFreeze(_tmp178.name, __cache);
    }
  return _tmp178;
};

sk$ArgumentParser$dtBoolValue.prototype.__init = function(__named_parameters) {
  this.value = __named_parameters.value;
  this.name = __named_parameters.name;
};

sk$ArgumentParser$dtBoolValue.prototype.toString = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = new sk$String(('boolean value: ')).toString();
  var t$3 = name;
  var t$4 = t$3.toString();
  var t$5 = new sk$String(('=')).toString();
  var t$6 = value;
  var t$7 = t$6.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$4,
    t$5,
    t$7
  ]));
};

sk$ArgumentParser$dtBoolValue.prototype.__bases = [
  sk$ArgumentParser$dtBoolValue,
  sk$ArgumentParser$dtValue
];

var sk$ArgumentParser$dtIntParam = sk.ArgumentParser$dtIntParam = function ArgumentParser$dtIntParam(__named_parameters) {
  sk$ArgumentParser$dtParam.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtIntParam.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtIntParam.prototype.__constructor = sk$ArgumentParser$dtIntParam;

sk$ArgumentParser$dtIntParam.prototype.__classname = 'ArgumentParser.IntParam';

sk$ArgumentParser$dtIntParam.prototype.$frozen = true;

sk$ArgumentParser$dtIntParam.prototype.__type_switch_id = 1;

sk$ArgumentParser$dtIntParam.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtIntParam)(this);
};

sk$ArgumentParser$dtIntParam.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp179 = __cache.get(this);
  if (_tmp179 === undefined)
    {
      var _tmp179 = this.__copy();
      _tmp179.$frozen = true;
      __cache.set(this, _tmp179);
      _tmp179.required = skip.deepFreeze(_tmp179.required, __cache);
      _tmp179.$default = skip.deepFreeze(_tmp179.$default, __cache);
      _tmp179.validate = skip.deepFreeze(_tmp179.validate, __cache);
      _tmp179.name = skip.deepFreeze(_tmp179.name, __cache);
      _tmp179.help = skip.deepFreeze(_tmp179.help, __cache);
    }
  return _tmp179;
};

sk$ArgumentParser$dtIntParam.prototype.__init = function(__named_parameters) {
  this.required = __named_parameters.required === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.required;
  this.$default = __named_parameters.$default === undefined ? ((() => 
  {
    return singleton$None;
  })()) : __named_parameters.$default;
  this.validate = __named_parameters.validate === undefined ? ((() => 
  {
    return ((_) => 
    {
      return new (sk$Success)(sk.__.$void);
    });
  })()) : __named_parameters.validate;
  this.name = __named_parameters.name;
  this.help = __named_parameters.help === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.help;
};

sk$ArgumentParser$dtIntParam.prototype.__bases = [
  sk$ArgumentParser$dtIntParam,
  sk$ArgumentParser$dtParam
];

var sk$ArgumentParser$dtIntValue = sk.ArgumentParser$dtIntValue = function ArgumentParser$dtIntValue(__named_parameters) {
  sk$ArgumentParser$dtValue.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtIntValue.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtIntValue.prototype.__constructor = sk$ArgumentParser$dtIntValue;

sk$ArgumentParser$dtIntValue.prototype.__classname = 'ArgumentParser.IntValue';

sk$ArgumentParser$dtIntValue.prototype.$frozen = false;

sk$ArgumentParser$dtIntValue.prototype.__type_switch_id = 6;

sk$ArgumentParser$dtIntValue.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtIntValue)(this);
};

sk$ArgumentParser$dtIntValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp180 = __cache.get(this);
  if (_tmp180 === undefined)
    {
      var _tmp180 = this.__copy();
      _tmp180.$frozen = true;
      __cache.set(this, _tmp180);
      _tmp180.value = skip.deepFreeze(_tmp180.value, __cache);
      _tmp180.name = skip.deepFreeze(_tmp180.name, __cache);
    }
  return _tmp180;
};

sk$ArgumentParser$dtIntValue.prototype.__init = function(__named_parameters) {
  this.value = __named_parameters.value;
  this.name = __named_parameters.name;
};

sk$ArgumentParser$dtIntValue.prototype.toString = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = new sk$String(('integer value: ')).toString();
  var t$3 = name;
  var t$4 = t$3.toString();
  var t$5 = new sk$String(('=')).toString();
  var t$6 = value;
  var t$7 = t$6.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$4,
    t$5,
    t$7
  ]));
};

sk$ArgumentParser$dtIntValue.prototype.__bases = [
  sk$ArgumentParser$dtIntValue,
  sk$ArgumentParser$dtValue
];

var sk$ArgumentParser$dtMissingValue = sk.ArgumentParser$dtMissingValue = function ArgumentParser$dtMissingValue(__named_parameters) {
  sk$ArgumentParser$dtValue.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtMissingValue.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtMissingValue.prototype.__constructor = sk$ArgumentParser$dtMissingValue;

sk$ArgumentParser$dtMissingValue.prototype.__classname = 'ArgumentParser.MissingValue';

sk$ArgumentParser$dtMissingValue.prototype.$frozen = false;

sk$ArgumentParser$dtMissingValue.prototype.__type_switch_id = 7;

sk$ArgumentParser$dtMissingValue.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtMissingValue)(this);
};

sk$ArgumentParser$dtMissingValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp181 = __cache.get(this);
  if (_tmp181 === undefined)
    {
      var _tmp181 = this.__copy();
      _tmp181.$frozen = true;
      __cache.set(this, _tmp181);
      _tmp181.param = skip.deepFreeze(_tmp181.param, __cache);
      _tmp181.name = skip.deepFreeze(_tmp181.name, __cache);
    }
  return _tmp181;
};

sk$ArgumentParser$dtMissingValue.prototype.__init = function(__named_parameters) {
  this.param = __named_parameters.param;
  this.name = __named_parameters.name;
};

sk$ArgumentParser$dtMissingValue.prototype.toString = function() {
  return new sk$String(('(no value)'));
};

sk$ArgumentParser$dtMissingValue.prototype.__bases = [
  sk$ArgumentParser$dtMissingValue,
  sk$ArgumentParser$dtValue
];

var sk$ArgumentParser$dtStringArrayParam = sk.ArgumentParser$dtStringArrayParam = function ArgumentParser$dtStringArrayParam(__named_parameters) {
  sk$ArgumentParser$dtParam.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtStringArrayParam.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtStringArrayParam.prototype.__constructor = sk$ArgumentParser$dtStringArrayParam;

sk$ArgumentParser$dtStringArrayParam.prototype.__classname = 'ArgumentParser.StringArrayParam';

sk$ArgumentParser$dtStringArrayParam.prototype.$frozen = true;

sk$ArgumentParser$dtStringArrayParam.prototype.__type_switch_id = 2;

sk$ArgumentParser$dtStringArrayParam.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtStringArrayParam)(this);
};

sk$ArgumentParser$dtStringArrayParam.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp182 = __cache.get(this);
  if (_tmp182 === undefined)
    {
      var _tmp182 = this.__copy();
      _tmp182.$frozen = true;
      __cache.set(this, _tmp182);
      _tmp182.required = skip.deepFreeze(_tmp182.required, __cache);
      _tmp182.$default = skip.deepFreeze(_tmp182.$default, __cache);
      _tmp182.validate = skip.deepFreeze(_tmp182.validate, __cache);
      _tmp182.name = skip.deepFreeze(_tmp182.name, __cache);
      _tmp182.help = skip.deepFreeze(_tmp182.help, __cache);
    }
  return _tmp182;
};

sk$ArgumentParser$dtStringArrayParam.prototype.__init = function(__named_parameters) {
  this.required = __named_parameters.required === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.required;
  this.$default = __named_parameters.$default === undefined ? ((() => 
  {
    return singleton$None;
  })()) : __named_parameters.$default;
  this.validate = __named_parameters.validate === undefined ? ((() => 
  {
    return ((_) => 
    {
      return new (sk$Success)(sk.__.$void);
    });
  })()) : __named_parameters.validate;
  this.name = __named_parameters.name;
  this.help = __named_parameters.help === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.help;
};

sk$ArgumentParser$dtStringArrayParam.prototype.__bases = [
  sk$ArgumentParser$dtStringArrayParam,
  sk$ArgumentParser$dtParam
];

var sk$ArgumentParser$dtStringArrayValue = sk.ArgumentParser$dtStringArrayValue = function ArgumentParser$dtStringArrayValue(__named_parameters) {
  sk$ArgumentParser$dtValue.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtStringArrayValue.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtStringArrayValue.prototype.__constructor = sk$ArgumentParser$dtStringArrayValue;

sk$ArgumentParser$dtStringArrayValue.prototype.__classname = 'ArgumentParser.StringArrayValue';

sk$ArgumentParser$dtStringArrayValue.prototype.$frozen = false;

sk$ArgumentParser$dtStringArrayValue.prototype.__type_switch_id = 8;

sk$ArgumentParser$dtStringArrayValue.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtStringArrayValue)(this);
};

sk$ArgumentParser$dtStringArrayValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp183 = __cache.get(this);
  if (_tmp183 === undefined)
    {
      var _tmp183 = this.__copy();
      _tmp183.$frozen = true;
      __cache.set(this, _tmp183);
      _tmp183.value = skip.deepFreeze(_tmp183.value, __cache);
      _tmp183.name = skip.deepFreeze(_tmp183.name, __cache);
    }
  return _tmp183;
};

sk$ArgumentParser$dtStringArrayValue.prototype.__init = function(__named_parameters) {
  this.value = __named_parameters.value;
  this.name = __named_parameters.name;
};

sk$ArgumentParser$dtStringArrayValue.prototype.toString = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = new sk$String(('string array value: ')).toString();
  var t$3 = name;
  var t$4 = t$3.toString();
  var t$5 = new sk$String(('=[')).toString();
  var t$6 = value;
  var t$7 = t$6.map(((s) => 
  {
    var t$8 = new sk$String(('\'')).toString();
    var t$9 = s;
    var t$10 = t$9.toString();
    var t$11 = new sk$String(('\'')).toString();
    return new sk$String(('')).join(new (sk$Array)([
      t$8,
      t$10,
      t$11
    ]));
  }));
  var t$12 = t$7.join(new sk$String((', ')));
  var t$13 = t$12.toString();
  var t$14 = new sk$String((']')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$4,
    t$5,
    t$13,
    t$14
  ]));
};

sk$ArgumentParser$dtStringArrayValue.prototype.__bases = [
  sk$ArgumentParser$dtStringArrayValue,
  sk$ArgumentParser$dtValue
];

var sk$ArgumentParser$dtStringParam = sk.ArgumentParser$dtStringParam = function ArgumentParser$dtStringParam(__named_parameters) {
  sk$ArgumentParser$dtParam.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtStringParam.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtStringParam.prototype.__constructor = sk$ArgumentParser$dtStringParam;

sk$ArgumentParser$dtStringParam.prototype.__classname = 'ArgumentParser.StringParam';

sk$ArgumentParser$dtStringParam.prototype.$frozen = true;

sk$ArgumentParser$dtStringParam.prototype.__type_switch_id = 3;

sk$ArgumentParser$dtStringParam.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtStringParam)(this);
};

sk$ArgumentParser$dtStringParam.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp184 = __cache.get(this);
  if (_tmp184 === undefined)
    {
      var _tmp184 = this.__copy();
      _tmp184.$frozen = true;
      __cache.set(this, _tmp184);
      _tmp184.required = skip.deepFreeze(_tmp184.required, __cache);
      _tmp184.$default = skip.deepFreeze(_tmp184.$default, __cache);
      _tmp184.validate = skip.deepFreeze(_tmp184.validate, __cache);
      _tmp184.name = skip.deepFreeze(_tmp184.name, __cache);
      _tmp184.help = skip.deepFreeze(_tmp184.help, __cache);
    }
  return _tmp184;
};

sk$ArgumentParser$dtStringParam.prototype.__init = function(__named_parameters) {
  this.required = __named_parameters.required === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : __named_parameters.required;
  this.$default = __named_parameters.$default === undefined ? ((() => 
  {
    return singleton$None;
  })()) : __named_parameters.$default;
  this.validate = __named_parameters.validate === undefined ? ((() => 
  {
    return ((_) => 
    {
      return new (sk$Success)(sk.__.$void);
    });
  })()) : __named_parameters.validate;
  this.name = __named_parameters.name;
  this.help = __named_parameters.help === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.help;
};

sk$ArgumentParser$dtStringParam.prototype.__bases = [
  sk$ArgumentParser$dtStringParam,
  sk$ArgumentParser$dtParam
];

var sk$ArgumentParser$dtStringValue = sk.ArgumentParser$dtStringValue = function ArgumentParser$dtStringValue(__named_parameters) {
  sk$ArgumentParser$dtValue.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ArgumentParser$dtStringValue.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtStringValue.prototype.__constructor = sk$ArgumentParser$dtStringValue;

sk$ArgumentParser$dtStringValue.prototype.__classname = 'ArgumentParser.StringValue';

sk$ArgumentParser$dtStringValue.prototype.$frozen = false;

sk$ArgumentParser$dtStringValue.prototype.__type_switch_id = 9;

sk$ArgumentParser$dtStringValue.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtStringValue)(this);
};

sk$ArgumentParser$dtStringValue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp185 = __cache.get(this);
  if (_tmp185 === undefined)
    {
      var _tmp185 = this.__copy();
      _tmp185.$frozen = true;
      __cache.set(this, _tmp185);
      _tmp185.value = skip.deepFreeze(_tmp185.value, __cache);
      _tmp185.name = skip.deepFreeze(_tmp185.name, __cache);
    }
  return _tmp185;
};

sk$ArgumentParser$dtStringValue.prototype.__init = function(__named_parameters) {
  this.value = __named_parameters.value;
  this.name = __named_parameters.name;
};

sk$ArgumentParser$dtStringValue.prototype.toString = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = new sk$String(('string value: ')).toString();
  var t$3 = name;
  var t$4 = t$3.toString();
  var t$5 = new sk$String(('=\'')).toString();
  var t$6 = value;
  var t$7 = t$6.toString();
  var t$8 = new sk$String(('\'')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$4,
    t$5,
    t$7,
    t$8
  ]));
};

sk$ArgumentParser$dtStringValue.prototype.__bases = [
  sk$ArgumentParser$dtStringValue,
  sk$ArgumentParser$dtValue
];

var sk$Arguments$dtHelp = sk.Arguments$dtHelp = function Arguments$dtHelp($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Arguments$dtHelp.prototype = Object.create(Object.prototype);

sk$Arguments$dtHelp.prototype.__constructor = sk$Arguments$dtHelp;

sk$Arguments$dtHelp.prototype.__classname = 'Arguments.Help';

sk$Arguments$dtHelp.prototype.$frozen = true;

sk$Arguments$dtHelp.prototype.__type_switch_id = 10;

sk$Arguments$dtHelp.prototype.__copy = function() {
  return new (sk$Arguments$dtHelp)(this.$atparam0);
};

sk$Arguments$dtHelp.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp186 = __cache.get(this);
  if (_tmp186 === undefined)
    {
      var _tmp186 = this.__copy();
      _tmp186.$frozen = true;
      __cache.set(this, _tmp186);
      _tmp186.$atparam0 = skip.deepFreeze(_tmp186.$atparam0, __cache);
    }
  return _tmp186;
};

sk$Arguments$dtHelp.prototype.__init = function(__named_parameters) {};

sk$Arguments$dtHelp.prototype.__bases = [
  sk$Arguments$dtHelp,
  sk$Arguments$dtSpec
];

var sk$Arguments$dtSetBool = sk.Arguments$dtSetBool = function Arguments$dtSetBool(f) {
  this.f = f;
};

sk$Arguments$dtSetBool.prototype = Object.create(Object.prototype);

sk$Arguments$dtSetBool.prototype.__constructor = sk$Arguments$dtSetBool;

sk$Arguments$dtSetBool.prototype.__classname = 'Arguments.SetBool';

sk$Arguments$dtSetBool.prototype.$frozen = true;

sk$Arguments$dtSetBool.prototype.__type_switch_id = 11;

sk$Arguments$dtSetBool.prototype.__copy = function() {
  return new (sk$Arguments$dtSetBool)(this.f);
};

sk$Arguments$dtSetBool.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp187 = __cache.get(this);
  if (_tmp187 === undefined)
    {
      var _tmp187 = this.__copy();
      _tmp187.$frozen = true;
      __cache.set(this, _tmp187);
      _tmp187.f = skip.deepFreeze(_tmp187.f, __cache);
    }
  return _tmp187;
};

sk$Arguments$dtSetBool.prototype.__init = function(__named_parameters) {};

sk$Arguments$dtSetBool.prototype.__bases = [
  sk$Arguments$dtSetBool,
  sk$Arguments$dtSpec
];

var sk$Arguments$dtSetString = sk.Arguments$dtSetString = function Arguments$dtSetString(f) {
  this.f = f;
};

sk$Arguments$dtSetString.prototype = Object.create(Object.prototype);

sk$Arguments$dtSetString.prototype.__constructor = sk$Arguments$dtSetString;

sk$Arguments$dtSetString.prototype.__classname = 'Arguments.SetString';

sk$Arguments$dtSetString.prototype.$frozen = true;

sk$Arguments$dtSetString.prototype.__type_switch_id = 12;

sk$Arguments$dtSetString.prototype.__copy = function() {
  return new (sk$Arguments$dtSetString)(this.f);
};

sk$Arguments$dtSetString.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp188 = __cache.get(this);
  if (_tmp188 === undefined)
    {
      var _tmp188 = this.__copy();
      _tmp188.$frozen = true;
      __cache.set(this, _tmp188);
      _tmp188.f = skip.deepFreeze(_tmp188.f, __cache);
    }
  return _tmp188;
};

sk$Arguments$dtSetString.prototype.__init = function(__named_parameters) {};

sk$Arguments$dtSetString.prototype.__bases = [
  sk$Arguments$dtSetString,
  sk$Arguments$dtSpec
];

var sk$Arguments$dtSetTrue = sk.Arguments$dtSetTrue = function Arguments$dtSetTrue(f) {
  this.f = f;
};

sk$Arguments$dtSetTrue.prototype = Object.create(Object.prototype);

sk$Arguments$dtSetTrue.prototype.__constructor = sk$Arguments$dtSetTrue;

sk$Arguments$dtSetTrue.prototype.__classname = 'Arguments.SetTrue';

sk$Arguments$dtSetTrue.prototype.$frozen = true;

sk$Arguments$dtSetTrue.prototype.__type_switch_id = 13;

sk$Arguments$dtSetTrue.prototype.__copy = function() {
  return new (sk$Arguments$dtSetTrue)(this.f);
};

sk$Arguments$dtSetTrue.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp189 = __cache.get(this);
  if (_tmp189 === undefined)
    {
      var _tmp189 = this.__copy();
      _tmp189.$frozen = true;
      __cache.set(this, _tmp189);
      _tmp189.f = skip.deepFreeze(_tmp189.f, __cache);
    }
  return _tmp189;
};

sk$Arguments$dtSetTrue.prototype.__init = function(__named_parameters) {};

sk$Arguments$dtSetTrue.prototype.__bases = [
  sk$Arguments$dtSetTrue,
  sk$Arguments$dtSpec
];

var sk$Array = sk.Array = function Array() {};

sk$Array.prototype = Object.create(Object.prototype);

sk$Array.prototype.__constructor = sk$Array;

sk$Array.prototype.__classname = 'Array';

sk$Array.prototype.$frozen = false;

sk$Array.prototype.__type_switch_id = 273;

sk$Array.prototype.__init = function(__named_parameters) {};

sk$Array.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Array.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Array.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Array.prototype.$eq$eq = function(other) {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = other;
  var t$3 = t$2.size();
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = size;
      var t$5 = new (sk$Range)(new sk$Int(0.0, 0.0), t$4);
      var $var = t$5.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg298:{
          break$bg298:{
            dowhile_else$bg297:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg299:{
                    dowhile_cond$bg299:{
                      {
                        var t$6 = $var;
                        var var2 = t$6.next();
                        var i;
                        {
                          jumpBlockOuterjumpLab$bg312:{
                            jumpLab$bg312:{
                              jumpLab$bg311:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg311;
                                  
                                  case 205:
                                    i = var2.value;
                                    break jumpLab$bg312;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg299;
                              }
                            }
                            {
                              var t$7 = this;
                              var t$8 = i;
                              var t$9 = t$7.unsafe_get(t$8);
                              var t$10 = t$9;
                              var t$11 = other;
                              var t$12 = i;
                              var t$13 = t$11.unsafe_get(t$12);
                              if (t$10.$bg$eq(t$13).__value)
                                {
                                  break_val = new sk$Bool((false));
                                  break break$bg298;
                                }
                              else
                                {}
                            }
                            break jumpBlockOuterjumpLab$bg312;
                          }
                        }
                        break dowhile_cond$bg299;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg297;
                    break jumpBlockOuterdowhile_cond$bg299;
                  }
                }
              while (true);
            }
            break_val = new sk$Bool((true));
            break jumpBlockOuterbreak$bg298;
          }
          {}
          break jumpBlockOuterbreak$bg298;
        }
      }
      return break_val;
    }
  else
    return new sk$Bool((false));
};

sk$Array.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Array.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Array.prototype.all = function(p) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg326:{
      break$bg326:{
        dowhile_else$bg325:{
          do
            {
              jumpBlockOuterdowhile_cond$bg327:{
                dowhile_cond$bg327:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg336:{
                        jumpLab$bg336:{
                          jumpLab$bg335:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg335;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg336;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg327;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = x;
                          var t$4 = t$2(t$3);
                          if (t$4.$bg().__value)
                            {
                              break_val = new sk$Bool((false));
                              break break$bg326;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg336;
                      }
                    }
                    break dowhile_cond$bg327;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg325;
                break jumpBlockOuterdowhile_cond$bg327;
              }
            }
          while (true);
        }
        break_val = new sk$Bool((true));
        break jumpBlockOuterbreak$bg326;
      }
      {}
      break jumpBlockOuterbreak$bg326;
    }
  }
  return break_val;
};

sk$Array.prototype.any = function(p) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg342:{
      break$bg342:{
        dowhile_else$bg341:{
          do
            {
              jumpBlockOuterdowhile_cond$bg343:{
                dowhile_cond$bg343:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg351:{
                        jumpLab$bg351:{
                          jumpLab$bg350:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg350;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg351;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg343;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = x;
                          if (t$2(t$3).__value)
                            {
                              break_val = new sk$Bool((true));
                              break break$bg342;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg351;
                      }
                    }
                    break dowhile_cond$bg343;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg341;
                break jumpBlockOuterdowhile_cond$bg343;
              }
            }
          while (true);
        }
        break_val = new sk$Bool((false));
        break jumpBlockOuterbreak$bg342;
      }
      {}
      break jumpBlockOuterbreak$bg342;
    }
  }
  return break_val;
};

sk$Array.prototype.chill = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Array::chill')));
};

sk$Array.prototype.clone = function() {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = t$1.size();
  return t$.mfillBy(t$2, ((i) => 
  {
    var t$3 = this;
    var t$4 = i;
    return t$3.unsafe_get(t$4);
  }));
};

sk$Array.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = other;
  var t$4 = t$3.size();
  var t$5 = sk$min(t$2, t$4);
  var t$6 = other;
  var $var = t$.compareLoop(new sk$Int(0.0, 0.0), t$5, t$6);
  var c;
  {
    jumpBlockOuterjumpLab$bg374:{
      jumpLab$bg374:{
        jumpLab$bg373:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg373;
            
            default:
              c = $var;
              break jumpLab$bg374;

          }
        }
        {
          var t$7 = this;
          var t$8 = t$7.size();
          var t$9 = other;
          var t$10 = t$9.size();
          return sk$compare(t$8, t$10);
        }
      }
      return c;
    }
  }
};

sk$Array.prototype.compareLoop = function(i, size, other) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg396:{
        loop_end$bg396:{
          {
            var t$1 = i;
            var t$2 = size;
            if (t$1.$eq$eq(t$2).__value)
              return singleton$EQ;
            else
              {
                var t$3 = t$;
                var t$4 = i;
                var t$5 = t$3.unsafe_get(t$4);
                var t$6 = other;
                var t$7 = i;
                var t$8 = t$6.unsafe_get(t$7);
                var $var = sk$compare(t$5, t$8);
                var c;
                {
                  jumpBlockOuterjumpLab$bg394:{
                    jumpLab$bg394:{
                      jumpLab$bg393:{
                        switch ($var.__type_switch_id) {
                          case 206:
                            break jumpLab$bg393;
                          
                          default:
                            c = $var;
                            break jumpLab$bg394;

                        }
                      }
                      {
                        var t$9 = t$;
                        var t$10 = i;
                        var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
                        var t$12 = size;
                        var t$13 = other;
                        var t$14 = t$9;
                        var t$15 = t$11;
                        var t$16 = t$12;
                        var t$17 = t$13;
                        t$ = t$14;
                        i = t$15;
                        size = t$16;
                        other = t$17;
                        break loop_end$bg396;
                      }
                    }
                    return c;
                  }
                }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg396;
      }
    }
  while (true);
};

sk$Array.prototype.concat = function(other) {
  var static1 = this.__constructor;
  var t$ = this;
  var n = t$.size();
  var t$1 = other;
  var m = t$1.size();
  var t$2 = static1;
  var t$3 = t$2;
  var t$4 = n;
  var t$5 = m;
  var t$6 = t$4.$pl(t$5);
  return t$3.fillBy(t$6, ((i) => 
  {
    var t$7 = i;
    var t$8 = n;
    if (t$7.$lt(t$8).__value)
      {
        var t$9 = this;
        var t$10 = t$9;
        var t$11 = i;
        return t$10.get(t$11);
      }
    else
      {
        var t$12 = other;
        var t$13 = i;
        var t$14 = n;
        var t$15 = t$13.$mi(t$14);
        return t$12.get(t$15);
      }
  }));
};

sk$Array.prototype.contains = function(v) {
  var t$ = this;
  var t$1 = v;
  var t$2 = t$.indexOf(t$1);
  return t$2.isSome();
};

sk$Array.createFromItems = function(items) {
  var t$ = items;
  var t$1 = sk$Array.mcreateFromItems(t$);
  return t$1;
};

sk$Array.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Vector);
  return t$2.toArray();
};

sk$Array.prototype.drop = function(num) {
  var static1 = this.__constructor;
  var t$ = num;
  num = sk$max(new sk$Int(0.0, 0.0), t$);
  var t$1 = num;
  var t$2 = this;
  var t$3 = t$2.size();
  if (t$1.$gt$eq(t$3).__value)
    return new (sk$Array)([]);
  else
    {
      var t$4 = static1;
      var t$5 = this;
      var t$6 = t$5.size();
      var t$7 = num;
      var t$8 = t$6.$mi(t$7);
      return t$4.fillBy(t$8, ((i) => 
      {
        var t$9 = this;
        var t$10 = num;
        var t$11 = i;
        var t$12 = t$10.$pl(t$11);
        return t$9.get(t$12);
      }));
    }
};

sk$Array.prototype.each = function(f) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg447:{
      break$bg447:{
        dowhile_else$bg446:{
          do
            {
              jumpBlockOuterdowhile_cond$bg448:{
                dowhile_cond$bg448:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg456:{
                        jumpLab$bg456:{
                          jumpLab$bg455:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg455;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg456;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg448;
                          }
                        }
                        {
                          var t$2 = f;
                          var t$3 = x;
                          t$2(t$3);
                        }
                        break jumpBlockOuterjumpLab$bg456;
                      }
                    }
                    break dowhile_cond$bg448;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg446;
                break jumpBlockOuterdowhile_cond$bg448;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg447;
      }
      {}
      break jumpBlockOuterbreak$bg447;
    }
  }
  return break_val;
};

sk$Array.prototype.eachWithIndex = function(f) {
  var t$ = this;
  var t$1 = t$.items();
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg463:{
      break$bg463:{
        dowhile_else$bg462:{
          do
            {
              jumpBlockOuterdowhile_cond$bg464:{
                dowhile_cond$bg464:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg475:{
                        jumpLab$bg475:{
                          jumpLab$bg474:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg474;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg475;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg464;
                          }
                        }
                        {
                          var t$3 = f;
                          var t$4 = x;
                          var t$5 = t$4.i0;
                          var t$6 = x;
                          var t$7 = t$6.i1;
                          t$3(t$5, t$7);
                        }
                        break jumpBlockOuterjumpLab$bg475;
                      }
                    }
                    break dowhile_cond$bg464;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg462;
                break jumpBlockOuterdowhile_cond$bg464;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg463;
      }
      {}
      break jumpBlockOuterbreak$bg463;
    }
  }
  return break_val;
};

sk$Array.prototype.eqBy = function(other, eq) {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = other;
  var t$3 = t$2.size();
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = size;
      var t$5 = new (sk$Range)(new sk$Int(0.0, 0.0), t$4);
      var $var = t$5.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg487:{
          break$bg487:{
            dowhile_else$bg486:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg488:{
                    dowhile_cond$bg488:{
                      {
                        var t$6 = $var;
                        var var2 = t$6.next();
                        var i;
                        {
                          jumpBlockOuterjumpLab$bg502:{
                            jumpLab$bg502:{
                              jumpLab$bg501:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg501;
                                  
                                  case 205:
                                    i = var2.value;
                                    break jumpLab$bg502;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg488;
                              }
                            }
                            {
                              var t$7 = eq;
                              var t$8 = this;
                              var t$9 = i;
                              var t$10 = t$8.unsafe_get(t$9);
                              var t$11 = other;
                              var t$12 = i;
                              var t$13 = t$11.unsafe_get(t$12);
                              var t$14 = t$7(t$10, t$13);
                              if (t$14.$bg().__value)
                                {
                                  break_val = new sk$Bool((false));
                                  break break$bg487;
                                }
                              else
                                {}
                            }
                            break jumpBlockOuterjumpLab$bg502;
                          }
                        }
                        break dowhile_cond$bg488;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg486;
                    break jumpBlockOuterdowhile_cond$bg488;
                  }
                }
              while (true);
            }
            break_val = new sk$Bool((true));
            break jumpBlockOuterbreak$bg487;
          }
          {}
          break jumpBlockOuterbreak$bg487;
        }
      }
      return break_val;
    }
  else
    return new sk$Bool((false));
};

sk$Array.fill = function(count, filler) {
  var t$ = count;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called Array::fill with negative count.')));
  var t$2 = this;
  var t$3 = count;
  return t$2.fillBy(t$3, ((_) => 
  {
    return filler;
  }));
};

sk$Array.fillBy = function(size, f) {
  var t$ = this;
  var t$1 = size;
  var t$2 = f;
  var t$3 = t$.mfillBy(t$1, t$2);
  return t$3;
};

sk$Array.prototype.filter = function(p) {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.size();
  var v = sk$Array.mfillBy(t$1, ((_) => 
  {
    return new sk$Int(0.0, 0.0);
  }));
  var t$2 = this;
  var t$3 = p;
  var t$4 = v;
  var $var = t$2.packIndex(t$3, t$4, new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg527:{
      jumpLab$bg527:{
        switch ($var.__type_switch_id) {
          case 392:
            var2 = $var.i0;
            var1 = $var.i1;
            break jumpLab$bg527;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var count = var1;
        var indices = var2;
        var t$5 = static1;
        var t$6 = count;
        return t$5.fillBy(t$6, ((i) => 
        {
          var t$7 = this;
          var t$8 = indices;
          var t$9 = i;
          var t$10 = t$8.get(t$9);
          return t$7.get(t$10);
        }));
      }
    }
  }
};

sk$Array.prototype.filterNone = function() {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var x;
    {
      jumpBlockOuterjumpLab$bg535:{
        jumpLab$bg535:{
          jumpLab$bg534:{
            switch (value.__type_switch_id) {
              case 205:
                x = value.value;
                break jumpLab$bg534;
              
              case 204:
                break jumpLab$bg535;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$1 = result;
            var t$2 = x;
            return t$1.push(t$2);
          }
        }
        return sk.__.$void;
      }
    }
  }));
  var t$3 = result;
  return t$3.toArray();
};

sk$Array.prototype.find = function(p) {
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg542:{
      break$bg542:{
        dowhile_else$bg541:{
          do
            {
              jumpBlockOuterdowhile_cond$bg543:{
                dowhile_cond$bg543:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg555:{
                        jumpLab$bg555:{
                          jumpLab$bg554:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg554;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg555;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg543;
                          }
                        }
                        {
                          var t$4 = this;
                          var t$5 = i;
                          var x = t$4.unsafe_get(t$5);
                          var t$6 = p;
                          var t$7 = x;
                          var t$8;
                          if (t$6(t$7).__value)
                            {
                              var t$9 = x;
                              break_val = new (sk$Some)(t$9);
                              break break$bg542;
                            }
                          else
                            t$8 = sk.__.$void;
                        }
                        break jumpBlockOuterjumpLab$bg555;
                      }
                    }
                    break dowhile_cond$bg543;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg541;
                break jumpBlockOuterdowhile_cond$bg543;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg542;
      }
      {}
      break jumpBlockOuterbreak$bg542;
    }
  }
  return break_val;
};

sk$Array.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$Array.prototype.flatMap = function(s) {
  var t$ = this;
  var t$1 = s;
  var t$2 = t$.map(t$1);
  return t$2.flatten();
};

sk$Array.prototype.flatten = function() {
  var t$ = this;
  var sz = t$.reduce(((acc, items) => 
  {
    var t$1 = acc;
    var t$2 = items;
    var t$3 = t$2;
    var t$4 = t$3.size();
    return t$1.$pl(t$4);
  }), new sk$Int(0.0, 0.0));
  var t$5 = sz;
  var t$6 = sk$Array.unsafe_make(t$5);
  var result = t$6;
  var index = new sk$Int(0.0, 0.0);
  var t$7 = this;
  t$7.each(((items1) => 
  {
    var t$8 = items1;
    var t$9 = t$8;
    return t$9.each(((item) => 
    {
      var t$10 = index;
      var t$11 = sz;
      var t$12 = t$10.ult(t$11);
      sk$invariant(t$12, new sk$String(('Array.flatten(): Expected each sequence to yield exactly size() items.')));
      var t$13 = result;
      var t$14 = index;
      var t$15 = item;
      t$13.unsafe_set(t$14, t$15);
      var t$16 = index;
      index = t$16.$pl(new sk$Int(1.0, 0.0));
      return sk.__.$void;
    }));
  }));
  var t$17 = result;
  return t$17;
};

sk$Array.prototype.foldl = function(f, init) {
  var t$ = this;
  var t$1 = init;
  return t$.foldlImpl(((res, _, v) => 
  {
    var t$2 = f;
    var t$3 = res;
    var t$4 = v;
    return t$2(t$3, t$4);
  }), t$1, new sk$Int(0.0, 0.0));
};

sk$Array.prototype.foldlImpl = function(f, init, i) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg602:{
        loop_end$bg602:{
          {
            var t$1 = i;
            var t$2 = t$;
            var t$3 = t$2.size();
            if (t$1.uge(t$3).__value)
              return init;
            else
              {
                var t$4 = t$;
                var t$5 = f;
                var t$6 = f;
                var t$7 = init;
                var t$8 = i;
                var t$9 = t$;
                var t$10 = i;
                var t$11 = t$9.unsafe_get(t$10);
                var t$12 = t$6(t$7, t$8, t$11);
                var t$13 = i;
                var t$14 = t$13.$pl(new sk$Int(1.0, 0.0));
                var t$15 = t$4;
                var t$16 = t$5;
                var t$17 = t$12;
                var t$18 = t$14;
                t$ = t$15;
                f = t$16;
                init = t$17;
                i = t$18;
                break loop_end$bg602;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg602;
      }
    }
  while (true);
};

sk$Array.prototype.gen = skip.asyncToGenerator(function*() {
  var t$ = this;
  var t$1 = t$.size();
  var handles = sk$List.tabulate(t$1, ((index) => 
  {
    var t$2 = this;
    var t$3 = index;
    return t$2.unsafe_get(t$3);
  }));
  var t$4 = handles;
  var t$5 = (yield t$4.genReverse());
  var result = sk$Array.mcreateFromItems(t$5);
  var t$6 = result;
  t$6.reverse();
  var t$7 = result;
  return t$7;
});

sk$Array.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = p;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.unsafe_get(t$4);
    return t$2(t$5);
  })));
  var t$6 = predicates;
  var nextSz = t$6.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$7 = sum;
        return t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var t$8 = nextSz;
  var result = sk$Unsafe$dtarray_make(t$8);
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg628:{
      break$bg628:{
        while_else$bg627:{
          do
            {
              jumpBlockOutercontinue$bg629:{
                continue$bg629:{
                  {
                    var t$9 = toIndex;
                    var t$10 = nextSz;
                    if (t$9.ult(t$10).__value)
                      {
                        var t$11 = predicates;
                        var t$12 = fromIndex;
                        var t$13;
                        if (t$11.unsafe_get(t$12).__value)
                          {
                            var t$14 = result;
                            var t$15 = toIndex;
                            var t$16 = this;
                            var t$17 = fromIndex;
                            var t$18 = t$16.unsafe_get(t$17);
                            t$14.unsafe_set(t$15, t$18);
                            var t$19 = toIndex;
                            toIndex = t$19.$pl(new sk$Int(1.0, 0.0));
                            t$13 = sk.__.$void;
                          }
                        else
                          t$13 = sk.__.$void;
                        var t$20 = fromIndex;
                        fromIndex = t$20.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg627;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg629;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg628;
      }
      {}
      break jumpBlockOuterbreak$bg628;
    }
  }
  var t$21 = result;
  return t$21;
});

sk$Array.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var t$1 = t$.size();
  return (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = s;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.unsafe_get(t$4);
    return t$2(t$5);
  })));
});

sk$Array.prototype.get = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = index;
  return t$3.unsafe_get(t$4);
};

sk$Array.prototype.getClassName = function() {
  return new sk$String(('Array'));
};

sk$Array.prototype.hash = function() {
  var t$ = this;
  return t$.foldl(((seed, v) => 
  {
    var t$1 = seed;
    var t$2 = v;
    var t$3 = t$2.hash();
    return sk$Hashable$dtcombine(t$1, t$3);
  }), new sk$Int(4294967295.0, 4294967295.0));
};

sk$Array.prototype.hashBy = function(hash, seed) {
  var t$ = this;
  var t$1 = seed;
  return t$.foldl(((seed1, v) => 
  {
    var t$2 = seed1;
    var t$3 = hash;
    var t$4 = v;
    var t$5 = t$3(t$4);
    return sk$Hashable$dtcombine(t$2, t$5);
  }), t$1);
};

sk$Array.prototype.indexOf = function(v) {
  var t$ = this;
  var t$1 = v;
  var t$2 = this;
  var t$3 = t$2.size();
  return t$.indexOfLoop(t$1, new sk$Int(0.0, 0.0), t$3);
};

sk$Array.prototype.indexOfLoop = function(v, i, sz) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg689:{
        loop_end$bg689:{
          {
            var t$1 = i;
            var t$2 = sz;
            if (t$1.$gt$eq(t$2).__value)
              return singleton$None;
            else
              {
                var t$3 = v;
                var t$4 = t$;
                var t$5 = i;
                var t$6 = t$4.unsafe_get(t$5);
                if (t$3.$eq$eq(t$6).__value)
                  {
                    var t$7 = i;
                    return new (sk$Some)(t$7);
                  }
                else
                  {
                    var t$8 = t$;
                    var t$9 = v;
                    var t$10 = i;
                    var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
                    var t$12 = sz;
                    var t$13 = t$8;
                    var t$14 = t$9;
                    var t$15 = t$11;
                    var t$16 = t$12;
                    t$ = t$13;
                    v = t$14;
                    i = t$15;
                    sz = t$16;
                    break loop_end$bg689;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg689;
      }
    }
  while (true);
};

sk$Array.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.map(((e) => 
  {
    var t$2 = e;
    return sk$inspect(t$2);
  }));
  return new (sk$InspectVector)(new sk$String(('Array')), t$1);
};

sk$Array.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.sizeImpl();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Array.prototype.items = function() {
  var t$ = this;
  return sk$Array$dtItemsIterator.make(t$);
};

sk$Array.prototype.join = function(separator) {
  var t$ = this;
  var $var = t$.size();
  var size;
  {
    jumpBlockOuterjumpLab$bg726:{
      jumpLab$bg726:{
        jumpLab$bg725:{
          jumpLab$bg724:{
            {
              var _tmp190 = $var.__getSwitchValue();
              switch (_tmp190) {
                case 0:
                  break jumpLab$bg724;
                
                case 1:
                  break jumpLab$bg725;
                
                default:
                  {
                    size = $var;
                    break jumpLab$bg726;
                  }

              }
            }
          }
          return new sk$String((''));
        }
        {
          var t$1 = this;
          var t$2 = t$1.unsafe_get(new sk$Int(0.0, 0.0));
          return t$2.toString();
        }
      }
      {
        var t$3 = separator;
        var t$4;
        if (t$3.isEmpty().__value)
          {
            var t$5 = this;
            t$4 = t$5.map(((x) => 
            {
              var t$6 = x;
              return t$6.toString();
            }));
          }
        else
          {
            var t$7 = size;
            var t$8 = t$7.$ti(new sk$Int(2.0, 0.0));
            var t$9 = t$8.$mi(new sk$Int(1.0, 0.0));
            t$4 = sk$Array.fillBy(t$9, ((i) => 
            {
              var t$10 = i;
              var t$11 = t$10.and(new sk$Int(1.0, 0.0));
              if (t$11.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                {
                  var t$12 = this;
                  var t$13 = i;
                  var t$14 = t$13.ushr(new sk$Int(1.0, 0.0));
                  var t$15 = t$12.unsafe_get(t$14);
                  return t$15.toString();
                }
              else
                return separator;
            }));
          }
        var t$16 = t$4;
        return sk$Array$dtconcatStringArray(t$16);
      }
    }
  }
};

sk$Array.prototype.keys = function() {
  var t$ = this;
  return sk$Array$dtKeysIterator.make(t$);
};

sk$Array.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$Array.prototype.map = function(f) {
  var t$ = this;
  var t$1 = t$.size();
  return sk$Array.fillBy(t$1, ((i) => 
  {
    var t$2 = f;
    var t$3 = this;
    var t$4 = i;
    var t$5 = t$3.unsafe_get(t$4);
    return t$2(t$5);
  }));
};

sk$Array.prototype.mapAcc = function(f, acc) {
  var t$ = this;
  var t$1 = t$.size();
  var $new = sk$Array.fillBy(t$1, ((i) => 
  {
    var t$2 = f;
    var t$3 = acc;
    var t$4 = this;
    var t$5 = i;
    var t$6 = t$4.unsafe_get(t$5);
    var $var = t$2(t$3, t$6);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg752:{
        jumpLab$bg752:{
          switch ($var.__type_switch_id) {
            case 392:
              var2 = $var.i0;
              var1 = $var.i1;
              break jumpLab$bg752;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var u = var1;
          acc = var2;
          return u;
        }
      }
    }
  }));
  var t$7 = acc;
  var t$8 = $new;
  return new (sk$Tuple2)(t$7, t$8);
};

sk$Array.prototype.mapWithIndex = function(f) {
  var t$ = this;
  var t$1 = t$.size();
  return sk$Array.fillBy(t$1, ((i) => 
  {
    var t$2 = f;
    var t$3 = i;
    var t$4 = this;
    var t$5 = i;
    var t$6 = t$4.unsafe_get(t$5);
    return t$2(t$3, t$6);
  }));
};

sk$Array.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$Array.prototype.maybeGet = function(i) {
  var t$ = i;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = i;
      var t$5 = t$3.unsafe_get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$Array.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$Array.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = t$1.size();
  var result = sk$Array.unsafe_make(t$2);
  var t$3 = items;
  var t$4 = t$3;
  t$4.eachWithIndex(((index, element) => 
  {
    var t$5 = result;
    var t$6 = index;
    var t$7 = element;
    return t$5.unsafe_set(t$6, t$7);
  }));
  return result;
};

sk$Array.mcreateFromIterator = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = sk$Vector.mcreateFromIterator(t$1);
  return t$.mcreateFromItems(t$2);
};

sk$Array.meta = function(itemClass) {
  var t$ = itemClass;
  return new (sk$ArrayMetaClass)(t$);
};

sk$Array.mfill = function(count, filler) {
  var t$ = count;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called Array::mfill with negative count.')));
  var t$2 = this;
  var t$3 = count;
  return t$2.mfillBy(t$3, ((_) => 
  {
    return filler;
  }));
};

sk$Array.mfillBy = function(size, f) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called Array::mfillBy with negative number')));
  var t$2 = size;
  var vec = sk$Array.unsafe_make(t$2);
  var t$3 = size;
  var t$4 = new (sk$Range)(new sk$Int(0.0, 0.0), t$3);
  var $var = t$4.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg801:{
      break$bg801:{
        dowhile_else$bg800:{
          do
            {
              jumpBlockOuterdowhile_cond$bg802:{
                dowhile_cond$bg802:{
                  {
                    var t$5 = $var;
                    var var2 = t$5.next();
                    var idx;
                    {
                      jumpBlockOuterjumpLab$bg813:{
                        jumpLab$bg813:{
                          jumpLab$bg812:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg812;
                              
                              case 205:
                                idx = var2.value;
                                break jumpLab$bg813;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg802;
                          }
                        }
                        {
                          var t$6 = vec;
                          var t$7 = idx;
                          var t$8 = f;
                          var t$9 = idx;
                          var t$10 = t$8(t$9);
                          t$6.unsafe_set(t$7, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg813;
                      }
                    }
                    break dowhile_cond$bg802;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg800;
                break jumpBlockOuterdowhile_cond$bg802;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg801;
      }
      {}
      break jumpBlockOuterbreak$bg801;
    }
  }
  return vec;
};

sk$Array.prototype.packIndex = function(p, indices, i, count) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg843:{
        loop_end$bg843:{
          {
            var t$1 = i;
            var t$2 = t$;
            var t$3 = t$2.size();
            if (t$1.$gt$eq(t$3).__value)
              {
                var t$4 = skip.deepFreeze(indices, new Map());
                var t$5 = count;
                return new (sk$Tuple2)(t$4, t$5);
              }
            else
              {
                var t$6 = p;
                var t$7 = t$;
                var t$8 = i;
                var t$9 = t$7.get(t$8);
                if (t$6(t$9).__value)
                  {
                    var t$10 = indices;
                    var t$11 = count;
                    var t$12 = i;
                    t$10.set(t$11, t$12);
                    var t$13 = t$;
                    var t$14 = p;
                    var t$15 = indices;
                    var t$16 = i;
                    var t$17 = t$16.$pl(new sk$Int(1.0, 0.0));
                    var t$18 = count;
                    var t$19 = t$18.$pl(new sk$Int(1.0, 0.0));
                    var t$20 = t$13;
                    var t$21 = t$14;
                    var t$22 = t$15;
                    var t$23 = t$17;
                    var t$24 = t$19;
                    t$ = t$20;
                    p = t$21;
                    indices = t$22;
                    i = t$23;
                    count = t$24;
                    break loop_end$bg843;
                  }
                else
                  {
                    var t$25 = t$;
                    var t$26 = p;
                    var t$27 = indices;
                    var t$28 = i;
                    var t$29 = t$28.$pl(new sk$Int(1.0, 0.0));
                    var t$30 = count;
                    var t$31 = t$25;
                    var t$32 = t$26;
                    var t$33 = t$27;
                    var t$34 = t$29;
                    var t$35 = t$30;
                    t$ = t$31;
                    p = t$32;
                    indices = t$33;
                    i = t$34;
                    count = t$35;
                    break loop_end$bg843;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg843;
      }
    }
  while (true);
};

sk$Array.prototype.parallelMap = function(f) {
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = sk$Parallel$dttabulate(t$1, ((i) => 
  {
    var t$3 = f;
    var t$4 = this;
    var t$5 = i;
    var t$6 = t$4.unsafe_get(t$5);
    return t$3(t$6);
  }));
  return t$2;
};

sk$Array.prototype.reverse = function() {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = t$1.ushr(new sk$Int(1.0, 0.0));
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg868:{
      break$bg868:{
        dowhile_else$bg867:{
          do
            {
              jumpBlockOuterdowhile_cond$bg869:{
                dowhile_cond$bg869:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var leftIndex;
                    {
                      jumpBlockOuterjumpLab$bg888:{
                        jumpLab$bg888:{
                          jumpLab$bg887:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg887;
                              
                              case 205:
                                leftIndex = var2.value;
                                break jumpLab$bg888;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg869;
                          }
                        }
                        {
                          var t$5 = size;
                          var t$6 = t$5.$mi(new sk$Int(1.0, 0.0));
                          var t$7 = leftIndex;
                          var rightIndex = t$6.$mi(t$7);
                          var t$8 = this;
                          var t$9 = leftIndex;
                          var leftValue = t$8.unsafe_get(t$9);
                          var t$10 = this;
                          var t$11 = rightIndex;
                          var rightValue = t$10.unsafe_get(t$11);
                          var t$12 = this;
                          var t$13 = leftIndex;
                          var t$14 = rightValue;
                          t$12.unsafe_set(t$13, t$14);
                          var t$15 = this;
                          var t$16 = rightIndex;
                          var t$17 = leftValue;
                          t$15.unsafe_set(t$16, t$17);
                        }
                        break jumpBlockOuterjumpLab$bg888;
                      }
                    }
                    break dowhile_cond$bg869;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg867;
                break jumpBlockOuterdowhile_cond$bg869;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg868;
      }
      {}
      break jumpBlockOuterbreak$bg868;
    }
  }
  return break_val;
};

sk$Array.prototype.reversed = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var size = t$.size();
  var t$1 = static1;
  var t$2 = size;
  return t$1.fillBy(t$2, ((i) => 
  {
    var t$3 = this;
    var t$4 = size;
    var t$5 = i;
    var t$6 = t$4.$mi(t$5);
    var t$7 = t$6.$mi(new sk$Int(1.0, 0.0));
    return t$3.unsafe_get(t$7);
  }));
};

sk$Array.prototype.reversedValues = function() {
  var t$ = this;
  return sk$Array$dtReversedValuesIterator.make(t$);
};

sk$Array.prototype.set = function(i, value) {
  var t$ = i;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = i;
  var t$5 = value;
  return t$3.unsafe_set(t$4, t$5);
};

sk$Array.prototype.size = function() {
  var t$ = this;
  return t$.sizeImpl();
};

sk$Array.prototype.sizeImpl = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Array::sizeImpl')));
};

sk$Array.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var static1 = this.__constructor;
  var t$ = this;
  var sz = t$.size();
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return new (sk$Array)([]);
  else
    {
      var t$15 = end;
      var t$16 = start;
      var capacity = t$15.$mi(t$16);
      var t$17 = static1;
      var t$18 = capacity;
      return t$17.fillBy(t$18, ((i) => 
      {
        var t$19 = this;
        var t$20 = start;
        var t$21 = i;
        var t$22 = t$20.$pl(t$21);
        return t$19.unsafe_get(t$22);
      }));
    }
};

sk$Array.prototype.sort = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortBy(((_tmp939) => 
  {
    return sk$id(_tmp939);
  }), t$1);
};

sk$Array.prototype.sortBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var static1 = this.__constructor;
  var t$ = this;
  var sz = t$.size();
  var dest = this;
  var t$1 = static1;
  var t$2 = sz;
  var src = t$1.unsafe_make(t$2);
  var t$3 = dest;
  var t$4 = sz;
  var t$5 = src;
  t$3.unsafeMoveSlice(new sk$Int(0.0, 0.0), t$4, t$5, new sk$Int(0.0, 0.0));
  var t$6 = this;
  var t$7 = selector;
  var t$8 = compare;
  var t$9 = src;
  var t$10 = sz;
  var t$11 = dest;
  return t$6.sortSplit(t$7, t$8, t$9, new sk$Int(0.0, 0.0), t$10, t$11);
};

sk$Array.prototype.sortMerge = function(selector, compare, src, start, middle, end, dest) {
  var left = start;
  var right = middle;
  var index = start;
  var break_val;
  {
    jumpBlockOuterbreak$bg961:{
      break$bg961:{
        while_else$bg960:{
          do
            {
              jumpBlockOutercontinue$bg962:{
                continue$bg962:{
                  {
                    var t$ = left;
                    var t$1 = middle;
                    var t$2;
                    if (t$.$gt$eq(t$1).__value)
                      {
                        var t$3 = src;
                        var t$4 = right;
                        var t$5 = end;
                        var t$6 = dest;
                        var t$7 = index;
                        t$3.unsafeMoveSlice(t$4, t$5, t$6, t$7);
                        t$2 = new sk$Bool((false));
                      }
                    else
                      {
                        var t$8 = right;
                        var t$9 = end;
                        var t$10;
                        if (t$8.$gt$eq(t$9).__value)
                          {
                            var t$11 = src;
                            var t$12 = left;
                            var t$13 = middle;
                            var t$14 = dest;
                            var t$15 = index;
                            t$11.unsafeMoveSlice(t$12, t$13, t$14, t$15);
                            t$10 = new sk$Bool((false));
                          }
                        else
                          {
                            var t$16 = src;
                            var t$17 = left;
                            var leftValue = t$16.unsafe_get(t$17);
                            var t$18 = selector;
                            var t$19 = leftValue;
                            var leftKey = t$18(t$19);
                            var t$20 = src;
                            var t$21 = right;
                            var rightValue = t$20.unsafe_get(t$21);
                            var t$22 = selector;
                            var t$23 = rightValue;
                            var rightKey = t$22(t$23);
                            var t$24 = compare;
                            var t$25 = leftKey;
                            var t$26 = rightKey;
                            var t$27 = t$24(t$25, t$26);
                            var lte = t$27.isLTE();
                            var t$28;
                            if (lte.__value)
                              {
                                var t$29 = dest;
                                var t$30 = index;
                                var t$31 = leftValue;
                                t$29.unsafe_set(t$30, t$31);
                                var t$32 = left;
                                left = t$32.$pl(new sk$Int(1.0, 0.0));
                                t$28 = sk.__.$void;
                              }
                            else
                              {
                                var t$33 = dest;
                                var t$34 = index;
                                var t$35 = rightValue;
                                t$33.unsafe_set(t$34, t$35);
                                var t$36 = right;
                                right = t$36.$pl(new sk$Int(1.0, 0.0));
                                t$28 = sk.__.$void;
                              }
                            var t$37 = index;
                            index = t$37.$pl(new sk$Int(1.0, 0.0));
                            var t$38 = index;
                            var t$39 = end;
                            t$10 = t$38.ult(t$39);
                          }
                        t$2 = t$10;
                      }
                    if (t$2.__value)
                      {}
                    else
                      break while_else$bg960;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg962;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg961;
      }
      {}
      break jumpBlockOuterbreak$bg961;
    }
  }
  return break_val;
};

sk$Array.prototype.sortSplit = function(selector, compare, src, start, end, dest) {
  var t$ = end;
  var t$1 = start;
  var t$2 = t$.$mi(t$1);
  if (t$2.$gt(new sk$Int(1.0, 0.0)).__value)
    {
      var t$3 = end;
      var t$4 = start;
      var t$5 = t$3.$pl(t$4);
      var middle = t$5.ushr(new sk$Int(1.0, 0.0));
      var t$6 = this;
      var t$7 = selector;
      var t$8 = compare;
      var t$9 = dest;
      var t$10 = start;
      var t$11 = middle;
      var t$12 = src;
      t$6.sortSplit(t$7, t$8, t$9, t$10, t$11, t$12);
      var t$13 = this;
      var t$14 = selector;
      var t$15 = compare;
      var t$16 = dest;
      var t$17 = middle;
      var t$18 = end;
      var t$19 = src;
      t$13.sortSplit(t$14, t$15, t$16, t$17, t$18, t$19);
      var t$20 = this;
      var t$21 = selector;
      var t$22 = compare;
      var t$23 = src;
      var t$24 = start;
      var t$25 = middle;
      var t$26 = end;
      var t$27 = dest;
      return t$20.sortMerge(t$21, t$22, t$23, t$24, t$25, t$26, t$27);
    }
  else
    return sk.__.$void;
};

sk$Array.prototype.sorted = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortedBy(((_tmp1037) => 
  {
    return sk$id(_tmp1037);
  }), t$1);
};

sk$Array.prototype.sortedBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var static1 = this.__constructor;
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new (sk$Array)([]);
  else
    {
      var t$2 = sz;
      if (t$2.$eq$eq(new sk$Int(1.0, 0.0)).__value)
        {
          var t$3 = this;
          var t$4 = t$3.get(new sk$Int(0.0, 0.0));
          return new (sk$Array)([
            t$4
          ]);
        }
      else
        {
          var t$5 = static1;
          var t$6 = sz;
          var src = t$5.unsafe_make(t$6);
          var t$7 = this;
          var t$8 = sz;
          var t$9 = src;
          t$7.unsafeMoveSlice(new sk$Int(0.0, 0.0), t$8, t$9, new sk$Int(0.0, 0.0));
          var t$10 = src;
          var dest = t$10.clone();
          var t$11 = this;
          var t$12 = selector;
          var t$13 = compare;
          var t$14 = src;
          var t$15 = sz;
          var t$16 = dest;
          t$11.sortSplit(t$12, t$13, t$14, new sk$Int(0.0, 0.0), t$15, t$16);
          var t$17 = dest;
          return t$17;
        }
    }
};

sk$Array.prototype.split = function(num) {
  var t$ = this;
  var t$1 = num;
  var t$2 = t$.take(t$1);
  var t$3 = this;
  var t$4 = num;
  var t$5 = t$3.drop(t$4);
  return new (sk$Tuple2)(t$2, t$5);
};

sk$Array.prototype.take = function(num) {
  var static1 = this.__constructor;
  var t$ = num;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = sk$min(t$, t$2);
  num = sk$max(new sk$Int(0.0, 0.0), t$3);
  var t$4 = static1;
  var t$5 = num;
  return t$4.fillBy(t$5, ((i) => 
  {
    var t$6 = this;
    var t$7 = i;
    return t$6.get(t$7);
  }));
};

sk$Array.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.join(new sk$String((', ')));
  var t$2 = new sk$String(('Array[')).$pl(t$1);
  return t$2.$pl(new sk$String((']')));
};

sk$Array.prototype.unsafeMoveSlice = function(srcStart, srcEnd, dest, destStart) {
  var t$ = destStart;
  var t$1 = srcStart;
  var shift = t$.$mi(t$1);
  var t$2 = shift;
  if (t$2.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = srcEnd;
      var srcBase = t$3.$mi(new sk$Int(1.0, 0.0));
      var t$4 = srcBase;
      var t$5 = shift;
      var destBase = t$4.$pl(t$5);
      var t$6 = srcEnd;
      var t$7 = srcStart;
      var t$8 = t$6.$mi(t$7);
      var t$9 = new (sk$Range)(new sk$Int(0.0, 0.0), t$8);
      var $var = t$9.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg1097:{
          break$bg1097:{
            dowhile_else$bg1096:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg1098:{
                    dowhile_cond$bg1098:{
                      {
                        var t$10 = $var;
                        var var2 = t$10.next();
                        var offset;
                        {
                          jumpBlockOuterjumpLab$bg1133:{
                            jumpLab$bg1133:{
                              jumpLab$bg1132:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg1132;
                                  
                                  case 205:
                                    offset = var2.value;
                                    break jumpLab$bg1133;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg1098;
                              }
                            }
                            {
                              var t$11 = this;
                              var t$12 = srcBase;
                              var t$13 = offset;
                              var t$14 = t$12.$mi(t$13);
                              var v = t$11.unsafe_get(t$14);
                              var t$15 = dest;
                              var t$16 = destBase;
                              var t$17 = offset;
                              var t$18 = t$16.$mi(t$17);
                              var t$19 = v;
                              t$15.unsafe_set(t$18, t$19);
                            }
                            break jumpBlockOuterjumpLab$bg1133;
                          }
                        }
                        break dowhile_cond$bg1098;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg1096;
                    break jumpBlockOuterdowhile_cond$bg1098;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg1097;
          }
          {}
          break jumpBlockOuterbreak$bg1097;
        }
      }
      return break_val;
    }
  else
    {
      var t$20 = srcEnd;
      var t$21 = srcStart;
      var t$22 = t$20.$mi(t$21);
      var t$23 = new (sk$Range)(new sk$Int(0.0, 0.0), t$22);
      var var3 = t$23.values();
      var var4 = new sk$Bool((true));
      var break_val1;
      {
        jumpBlockOuterbreak$bg1117:{
          break$bg1117:{
            dowhile_else$bg1116:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg1118:{
                    dowhile_cond$bg1118:{
                      {
                        var t$24 = var3;
                        var var5 = t$24.next();
                        var offset1;
                        {
                          jumpBlockOuterjumpLab$bg1137:{
                            jumpLab$bg1137:{
                              jumpLab$bg1136:{
                                switch (var5.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg1136;
                                  
                                  case 205:
                                    offset1 = var5.value;
                                    break jumpLab$bg1137;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var4 = new sk$Bool((false));
                                break dowhile_cond$bg1118;
                              }
                            }
                            {
                              var t$25 = this;
                              var t$26 = srcStart;
                              var t$27 = offset1;
                              var t$28 = t$26.$pl(t$27);
                              var v1 = t$25.unsafe_get(t$28);
                              var t$29 = dest;
                              var t$30 = destStart;
                              var t$31 = offset1;
                              var t$32 = t$30.$pl(t$31);
                              var t$33 = v1;
                              t$29.unsafe_set(t$32, t$33);
                            }
                            break jumpBlockOuterjumpLab$bg1137;
                          }
                        }
                        break dowhile_cond$bg1118;
                      }
                    }
                    if (var4.__value)
                      {}
                    else
                      break dowhile_else$bg1116;
                    break jumpBlockOuterdowhile_cond$bg1118;
                  }
                }
              while (true);
            }
            break_val1 = sk.__.$void;
            break jumpBlockOuterbreak$bg1117;
          }
          {}
          break jumpBlockOuterbreak$bg1117;
        }
      }
      return break_val1;
    }
};

sk$Array.prototype.unsafe_get = function(index) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Array::unsafe_get')));
};

sk$Array.unsafe_make = function($atparam0) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Array::unsafe_make')));
};

sk$Array.prototype.unsafe_set = function($atparam0, $atparam1) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Array::unsafe_set')));
};

sk$Array.prototype.unzip = function() {
  var t$ = this;
  return t$.unzipWith(((_tmp1144) => 
  {
    return sk$id(_tmp1144);
  }));
};

sk$Array.prototype.unzipWith = function(f) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var v0 = sk$Vector.mcreate(t$1);
  var t$2 = sz;
  var v1 = sk$Vector.mcreate(t$2);
  var t$3 = this;
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg1152:{
      break$bg1152:{
        dowhile_else$bg1151:{
          do
            {
              jumpBlockOuterdowhile_cond$bg1153:{
                dowhile_cond$bg1153:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg1171:{
                        jumpLab$bg1171:{
                          jumpLab$bg1170:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg1170;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg1171;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg1153;
                          }
                        }
                        {
                          var t$5 = f;
                          var t$6 = x;
                          var p = t$5(t$6);
                          var t$7 = v0;
                          var t$8 = p;
                          var t$9 = t$8.i0;
                          t$7.push(t$9);
                          var t$10 = v1;
                          var t$11 = p;
                          var t$12 = t$11.i1;
                          t$10.push(t$12);
                        }
                        break jumpBlockOuterjumpLab$bg1171;
                      }
                    }
                    break dowhile_cond$bg1153;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg1151;
                break jumpBlockOuterdowhile_cond$bg1153;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg1152;
      }
      {}
      break jumpBlockOuterbreak$bg1152;
    }
  }
  var t$13 = v0;
  var t$14 = t$13.toArray();
  var t$15 = v1;
  var t$16 = t$15.toArray();
  return new (sk$Tuple2)(t$14, t$16);
};

sk$Array.prototype.values = function() {
  var t$ = this;
  return sk$Array$dtValuesIterator.make(t$);
};

sk$Array.prototype.zip = function(second) {
  var t$ = this;
  var t$1 = second;
  return t$.zipWith(t$1, ((v1, v2) => 
  {
    var t$2 = v1;
    var t$3 = v2;
    return new (sk$Tuple2)(t$2, t$3);
  }));
};

sk$Array.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Array.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Array.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Array.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Array.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Array.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Array.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Array.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Array.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Array.prototype.zipWith = function(second, s) {
  var t$ = second;
  var t$1 = t$;
  var iterator = t$1.values();
  var t$2 = this;
  var t$3 = t$2.size();
  var t$4 = second;
  var t$5 = t$4;
  var t$6 = t$5.size();
  var t$7 = sk$min(t$3, t$6);
  return sk$Array.fillBy(t$7, ((i) => 
  {
    var t$8 = s;
    var t$9 = this;
    var t$10 = i;
    var t$11 = t$9.unsafe_get(t$10);
    var t$12 = iterator;
    var t$13 = t$12.next();
    var t$14 = t$13.fromSome(new sk$String(('Expected sequence values() to yield size() items')));
    return t$8(t$11, t$14);
  }));
};

sk$Array.prototype.__bases = [
  sk$Array,
  sk$Sequence
];

sk$Array = sk.Array = skip.initNativeClass(sk, 'Array', sk$Array);

var sk$Array$dtItemsIterator = sk.Array$dtItemsIterator = function Array$dtItemsIterator(v, i, sz) {
  this.v = v;
  this.i = i;
  this.sz = sz;
};

sk$Array$dtItemsIterator.prototype = Object.create(Object.prototype);

sk$Array$dtItemsIterator.prototype.__constructor = sk$Array$dtItemsIterator;

sk$Array$dtItemsIterator.prototype.__classname = 'Array.ItemsIterator';

sk$Array$dtItemsIterator.prototype.$frozen = false;

sk$Array$dtItemsIterator.prototype.__type_switch_id = 126;

sk$Array$dtItemsIterator.prototype.__copy = function() {
  return new (sk$Array$dtItemsIterator)(this.v, this.i, this.sz);
};

sk$Array$dtItemsIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp191 = __cache.get(this);
  if (_tmp191 === undefined)
    {
      var _tmp191 = this.__copy();
      _tmp191.$frozen = true;
      __cache.set(this, _tmp191);
      _tmp191.v = skip.deepFreeze(_tmp191.v, __cache);
      _tmp191.i = skip.deepFreeze(_tmp191.i, __cache);
      _tmp191.sz = skip.deepFreeze(_tmp191.sz, __cache);
    }
  return _tmp191;
};

sk$Array$dtItemsIterator.prototype.__init = function(__named_parameters) {};

sk$Array$dtItemsIterator.prototype.getItemValue = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.v;
  var t$3 = index;
  var t$4 = sk$Unsafe$dtarray_get(t$2, t$3);
  return new (sk$Tuple2)(t$, t$4);
};

sk$Array$dtItemsIterator.make = function(v) {
  var t$ = v;
  var t$1 = v;
  var t$2 = t$1.size();
  return new (sk$Array$dtItemsIterator)(t$, new sk$Int(0.0, 0.0), t$2);
};

sk$Array$dtItemsIterator.prototype.next = function() {
  var t$ = this;
  var i = t$.i;
  var t$1 = i;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.ult(t$3).__value)
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = i;
      var t$6 = t$4;
      t$6.i = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$7 = this;
      var t$8 = i;
      var t$9 = t$7.getItemValue(t$8);
      return new (sk$Some)(t$9);
    }
  else
    return singleton$None;
};

sk$Array$dtItemsIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$Array$dtItemsIterator.prototype.__bases = [
  sk$Array$dtItemsIterator,
  sk$Iterator
];

var sk$Array$dtKeysIterator = sk.Array$dtKeysIterator = function Array$dtKeysIterator(v, i, sz) {
  this.v = v;
  this.i = i;
  this.sz = sz;
};

sk$Array$dtKeysIterator.prototype = Object.create(Object.prototype);

sk$Array$dtKeysIterator.prototype.__constructor = sk$Array$dtKeysIterator;

sk$Array$dtKeysIterator.prototype.__classname = 'Array.KeysIterator';

sk$Array$dtKeysIterator.prototype.$frozen = false;

sk$Array$dtKeysIterator.prototype.__type_switch_id = 127;

sk$Array$dtKeysIterator.prototype.__copy = function() {
  return new (sk$Array$dtKeysIterator)(this.v, this.i, this.sz);
};

sk$Array$dtKeysIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp192 = __cache.get(this);
  if (_tmp192 === undefined)
    {
      var _tmp192 = this.__copy();
      _tmp192.$frozen = true;
      __cache.set(this, _tmp192);
      _tmp192.v = skip.deepFreeze(_tmp192.v, __cache);
      _tmp192.i = skip.deepFreeze(_tmp192.i, __cache);
      _tmp192.sz = skip.deepFreeze(_tmp192.sz, __cache);
    }
  return _tmp192;
};

sk$Array$dtKeysIterator.prototype.__init = function(__named_parameters) {};

sk$Array$dtKeysIterator.prototype.getItemValue = function(index) {
  return index;
};

sk$Array$dtKeysIterator.make = function(v) {
  var t$ = v;
  var t$1 = v;
  var t$2 = t$1.size();
  return new (sk$Array$dtKeysIterator)(t$, new sk$Int(0.0, 0.0), t$2);
};

sk$Array$dtKeysIterator.prototype.next = function() {
  var t$ = this;
  var i = t$.i;
  var t$1 = i;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.ult(t$3).__value)
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = i;
      var t$6 = t$4;
      t$6.i = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$7 = this;
      var t$8 = i;
      var t$9 = t$7.getItemValue(t$8);
      return new (sk$Some)(t$9);
    }
  else
    return singleton$None;
};

sk$Array$dtKeysIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$Array$dtKeysIterator.prototype.__bases = [
  sk$Array$dtKeysIterator,
  sk$Iterator
];

var sk$Array$dtReversedValuesIterator = sk.Array$dtReversedValuesIterator = function Array$dtReversedValuesIterator(v, i, sz) {
  this.v = v;
  this.i = i;
  this.sz = sz;
};

sk$Array$dtReversedValuesIterator.prototype = Object.create(Object.prototype);

sk$Array$dtReversedValuesIterator.prototype.__constructor = sk$Array$dtReversedValuesIterator;

sk$Array$dtReversedValuesIterator.prototype.__classname = 'Array.ReversedValuesIterator';

sk$Array$dtReversedValuesIterator.prototype.$frozen = false;

sk$Array$dtReversedValuesIterator.prototype.__type_switch_id = 128;

sk$Array$dtReversedValuesIterator.prototype.__copy = function() {
  return new (sk$Array$dtReversedValuesIterator)(this.v, this.i, this.sz);
};

sk$Array$dtReversedValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp193 = __cache.get(this);
  if (_tmp193 === undefined)
    {
      var _tmp193 = this.__copy();
      _tmp193.$frozen = true;
      __cache.set(this, _tmp193);
      _tmp193.v = skip.deepFreeze(_tmp193.v, __cache);
      _tmp193.i = skip.deepFreeze(_tmp193.i, __cache);
      _tmp193.sz = skip.deepFreeze(_tmp193.sz, __cache);
    }
  return _tmp193;
};

sk$Array$dtReversedValuesIterator.prototype.__init = function(__named_parameters) {};

sk$Array$dtReversedValuesIterator.prototype.getItemValue = function(index) {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = index;
  var t$3 = t$1.$mi(t$2);
  index = t$3.$mi(new sk$Int(1.0, 0.0));
  var t$4 = this;
  var t$5 = t$4.v;
  var t$6 = index;
  return sk$Unsafe$dtarray_get(t$5, t$6);
};

sk$Array$dtReversedValuesIterator.make = function(v) {
  var t$ = v;
  var t$1 = v;
  var t$2 = t$1.size();
  return new (sk$Array$dtReversedValuesIterator)(t$, new sk$Int(0.0, 0.0), t$2);
};

sk$Array$dtReversedValuesIterator.prototype.next = function() {
  var t$ = this;
  var i = t$.i;
  var t$1 = i;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.ult(t$3).__value)
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = i;
      var t$6 = t$4;
      t$6.i = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$7 = this;
      var t$8 = i;
      var t$9 = t$7.getItemValue(t$8);
      return new (sk$Some)(t$9);
    }
  else
    return singleton$None;
};

sk$Array$dtReversedValuesIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$Array$dtReversedValuesIterator.prototype.__bases = [
  sk$Array$dtReversedValuesIterator,
  sk$Iterator
];

var sk$Array$dtValuesIterator = sk.Array$dtValuesIterator = function Array$dtValuesIterator(v, i, sz) {
  this.v = v;
  this.i = i;
  this.sz = sz;
};

sk$Array$dtValuesIterator.prototype = Object.create(Object.prototype);

sk$Array$dtValuesIterator.prototype.__constructor = sk$Array$dtValuesIterator;

sk$Array$dtValuesIterator.prototype.__classname = 'Array.ValuesIterator';

sk$Array$dtValuesIterator.prototype.$frozen = false;

sk$Array$dtValuesIterator.prototype.__type_switch_id = 129;

sk$Array$dtValuesIterator.prototype.__copy = function() {
  return new (sk$Array$dtValuesIterator)(this.v, this.i, this.sz);
};

sk$Array$dtValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp194 = __cache.get(this);
  if (_tmp194 === undefined)
    {
      var _tmp194 = this.__copy();
      _tmp194.$frozen = true;
      __cache.set(this, _tmp194);
      _tmp194.v = skip.deepFreeze(_tmp194.v, __cache);
      _tmp194.i = skip.deepFreeze(_tmp194.i, __cache);
      _tmp194.sz = skip.deepFreeze(_tmp194.sz, __cache);
    }
  return _tmp194;
};

sk$Array$dtValuesIterator.prototype.__init = function(__named_parameters) {};

sk$Array$dtValuesIterator.prototype.getItemValue = function(index) {
  var t$ = this;
  var t$1 = t$.v;
  var t$2 = index;
  return sk$Unsafe$dtarray_get(t$1, t$2);
};

sk$Array$dtValuesIterator.make = function(v) {
  var t$ = v;
  var t$1 = v;
  var t$2 = t$1.size();
  return new (sk$Array$dtValuesIterator)(t$, new sk$Int(0.0, 0.0), t$2);
};

sk$Array$dtValuesIterator.prototype.next = function() {
  var t$ = this;
  var i = t$.i;
  var t$1 = i;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.ult(t$3).__value)
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = i;
      var t$6 = t$4;
      t$6.i = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$7 = this;
      var t$8 = i;
      var t$9 = t$7.getItemValue(t$8);
      return new (sk$Some)(t$9);
    }
  else
    return singleton$None;
};

sk$Array$dtValuesIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$Array$dtValuesIterator.prototype.__bases = [
  sk$Array$dtValuesIterator,
  sk$Iterator
];

var sk$ArrayMetaClass = sk.ArrayMetaClass = function ArrayMetaClass(itemClass) {
  this.itemClass = itemClass;
};

sk$ArrayMetaClass.prototype = Object.create(Object.prototype);

sk$ArrayMetaClass.prototype.__constructor = sk$ArrayMetaClass;

sk$ArrayMetaClass.prototype.__classname = 'ArrayMetaClass';

sk$ArrayMetaClass.prototype.$frozen = true;

sk$ArrayMetaClass.prototype.__type_switch_id = 176;

sk$ArrayMetaClass.prototype.__copy = function() {
  return new (sk$ArrayMetaClass)(this.itemClass);
};

sk$ArrayMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp195 = __cache.get(this);
  if (_tmp195 === undefined)
    {
      var _tmp195 = this.__copy();
      _tmp195.$frozen = true;
      __cache.set(this, _tmp195);
      _tmp195.itemClass = skip.deepFreeze(_tmp195.itemClass, __cache);
    }
  return _tmp195;
};

sk$ArrayMetaClass.prototype.__init = function(__named_parameters) {};

sk$ArrayMetaClass.prototype.description = function() {
  var t$ = new sk$String(('Array<')).toString();
  var t$1 = this;
  var t$2 = t$1.itemClass;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6
  ]));
};

sk$ArrayMetaClass.prototype.deserialize = function(reader) {
  var t$ = this;
  var itemClass = t$.itemClass;
  var t$1 = reader;
  var t$2 = itemClass;
  var t$3 = t$1.readSequence(t$2);
  var sequence = t$3;
  var t$4 = sequence;
  var t$5 = t$4.sizeHint();
  var sizeHint = t$5.$default(new sk$Int(0.0, 0.0));
  var t$6 = sizeHint;
  var vector = sk$Vector.mcreate(t$6);
  var break_val;
  {
    jumpBlockOuterbreak$bg1400:{
      break$bg1400:{
        do
          {
            jumpBlockOutercontinue$bg1401:{
              continue$bg1401:{
                {
                  var t$7 = sequence;
                  var $var = t$7.readValue();
                  var item;
                  {
                    jumpBlockOuterjumpLab$bg1411:{
                      jumpLab$bg1411:{
                        jumpLab$bg1410:{
                          switch ($var.__type_switch_id) {
                            case 205:
                              item = $var.value;
                              break jumpLab$bg1410;
                            
                            case 204:
                              break jumpLab$bg1411;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$8 = vector;
                          var t$9 = item;
                          t$8.push(t$9);
                        }
                        break jumpBlockOuterjumpLab$bg1411;
                      }
                      {
                        break_val = sk.__.$void;
                        break break$bg1400;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg1401;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg1400;
    }
  }
  var t$10 = sequence;
  t$10.end();
  var t$11 = vector;
  return sk$Array.createFromItems(t$11);
};

sk$ArrayMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$ArrayMetaClass.prototype.serialize = function(value, writer) {
  var t$ = this;
  var itemClass = t$.itemClass;
  var t$1 = writer;
  var t$2 = itemClass;
  var t$3 = value;
  var t$4 = t$3.size();
  var t$5 = new (sk$Some)(t$4);
  var sequence = t$1.writeSequence(t$2, t$5);
  var t$6 = value;
  var $var = t$6.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg1425:{
      break$bg1425:{
        dowhile_else$bg1424:{
          do
            {
              jumpBlockOuterdowhile_cond$bg1426:{
                dowhile_cond$bg1426:{
                  {
                    var t$7 = $var;
                    var var2 = t$7.next();
                    var item;
                    {
                      jumpBlockOuterjumpLab$bg1435:{
                        jumpLab$bg1435:{
                          jumpLab$bg1434:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg1434;
                              
                              case 205:
                                item = var2.value;
                                break jumpLab$bg1435;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg1426;
                          }
                        }
                        {
                          var t$8 = sequence;
                          var t$9 = item;
                          t$8.writeValue(t$9);
                        }
                        break jumpBlockOuterjumpLab$bg1435;
                      }
                    }
                    break dowhile_cond$bg1426;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg1424;
                break jumpBlockOuterdowhile_cond$bg1426;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg1425;
      }
      {}
      break jumpBlockOuterbreak$bg1425;
    }
  }
  var t$10 = sequence;
  return t$10.end();
};

sk$ArrayMetaClass.prototype.__bases = [
  sk$ArrayMetaClass,
  sk$MetaClass
];

var sk$Assert$dtInternalError = sk.Assert$dtInternalError = function Assert$dtInternalError(pos, msg) {
  this.pos = pos;
  this.msg = msg;
};

sk$Assert$dtInternalError.prototype = Object.create(Object.prototype);

sk$Assert$dtInternalError.prototype.__constructor = sk$Assert$dtInternalError;

sk$Assert$dtInternalError.prototype.__classname = 'Assert.InternalError';

sk$Assert$dtInternalError.prototype.$frozen = true;

sk$Assert$dtInternalError.prototype.__type_switch_id = 64;

sk$Assert$dtInternalError.prototype.__copy = function() {
  return new (sk$Assert$dtInternalError)(this.pos, this.msg);
};

sk$Assert$dtInternalError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp196 = __cache.get(this);
  if (_tmp196 === undefined)
    {
      var _tmp196 = this.__copy();
      _tmp196.$frozen = true;
      __cache.set(this, _tmp196);
      _tmp196.pos = skip.deepFreeze(_tmp196.pos, __cache);
      _tmp196.msg = skip.deepFreeze(_tmp196.msg, __cache);
    }
  return _tmp196;
};

sk$Assert$dtInternalError.prototype.__init = function(__named_parameters) {};

sk$Assert$dtInternalError.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.pos;
  var t$2 = t$1.$pl(new sk$String((': Internal error: ')));
  var t$3 = this;
  var t$4 = t$3.msg;
  return t$2.$pl(t$4);
};

sk$Assert$dtInternalError.prototype.__bases = [
  sk$Assert$dtInternalError,
  sk$Exception
];

var sk$AssertionFailure = sk.AssertionFailure = function AssertionFailure(message, expected, actual) {
  this.message = message;
  this.expected = expected;
  this.actual = actual;
};

sk$AssertionFailure.prototype = Object.create(Object.prototype);

sk$AssertionFailure.prototype.__constructor = sk$AssertionFailure;

sk$AssertionFailure.prototype.__classname = 'AssertionFailure';

sk$AssertionFailure.prototype.$frozen = true;

sk$AssertionFailure.prototype.__type_switch_id = 65;

sk$AssertionFailure.prototype.__copy = function() {
  return new (sk$AssertionFailure)(this.message, this.expected, this.actual);
};

sk$AssertionFailure.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp197 = __cache.get(this);
  if (_tmp197 === undefined)
    {
      var _tmp197 = this.__copy();
      _tmp197.$frozen = true;
      __cache.set(this, _tmp197);
      _tmp197.message = skip.deepFreeze(_tmp197.message, __cache);
      _tmp197.expected = skip.deepFreeze(_tmp197.expected, __cache);
      _tmp197.actual = skip.deepFreeze(_tmp197.actual, __cache);
    }
  return _tmp197;
};

sk$AssertionFailure.prototype.__init = function(__named_parameters) {};

sk$AssertionFailure.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.message;
  var t$2 = new sk$String(('AssertionFailure: ')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String(('\n  expected: ')));
  var t$4 = this;
  var t$5 = t$4.expected;
  var t$6 = t$3.$pl(t$5);
  var t$7 = t$6.$pl(new sk$String(('\n  actual: ')));
  var t$8 = this;
  var t$9 = t$8.actual;
  return t$7.$pl(t$9);
};

sk$AssertionFailure.prototype.__bases = [
  sk$AssertionFailure,
  sk$Exception
];

var sk$Base = sk.Base = function Base() {};

sk$Base.prototype = Object.create(Object.prototype);

sk$Base.prototype.__constructor = sk$Base;

sk$Base.prototype.__classname = 'Base';

sk$Base.prototype.$frozen = true;

sk$Base.prototype.__type_switch_id = 19;

sk$Base.prototype.__copy = function() {};

sk$Base.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp198 = __cache.get(this);
  if (_tmp198 === undefined)
    {
      var _tmp198 = this.__copy();
      _tmp198.$frozen = true;
      __cache.set(this, _tmp198);
    }
  return _tmp198;
};

sk$Base.prototype.__init = function(__named_parameters) {};

sk$Base.prototype.__bases = [
  sk$Base,
  sk$Class
];

var sk$Bencher$dtBenchmarkStatsMetaClass = sk.Bencher$dtBenchmarkStatsMetaClass = function Bencher$dtBenchmarkStatsMetaClass() {};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype = Object.create(Object.prototype);

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__constructor = sk$Bencher$dtBenchmarkStatsMetaClass;

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__classname = 'Bencher.BenchmarkStatsMetaClass';

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.$frozen = true;

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__type_switch_id = 177;

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__copy = function() {
  return new (sk$Bencher$dtBenchmarkStatsMetaClass)();
};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp199 = __cache.get(this);
  if (_tmp199 === undefined)
    {
      var _tmp199 = this.__copy();
      _tmp199.$frozen = true;
      __cache.set(this, _tmp199);
    }
  return _tmp199;
};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__init = function(__named_parameters) {};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.description = function() {
  return new sk$String(('BenchmarkStats')).toString();
};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('average')),
    new sk$String(('median')),
    new sk$String(('standardDeviation')),
    new sk$String(('min')),
    new sk$String(('max')),
    new sk$String(('samples'))
  ]));
  var tempMaybe0 = singleton$None;
  var tempMaybe1 = singleton$None;
  var tempMaybe2 = singleton$None;
  var tempMaybe3 = singleton$None;
  var tempMaybe4 = singleton$None;
  var tempMaybe5 = singleton$None;
  var break_val;
  {
    jumpBlockOuterbreak$bg1534:{
      break$bg1534:{
        do
          {
            jumpBlockOutercontinue$bg1535:{
              continue$bg1535:{
                {
                  var t$1 = record;
                  var $var = t$1.readKey();
                  var string;
                  {
                    jumpBlockOuterjumpLab$bg1575:{
                      jumpLab$bg1575:{
                        jumpLab$bg1574:{
                          jumpLab$bg1573:{
                            jumpLab$bg1572:{
                              jumpLab$bg1571:{
                                jumpLab$bg1570:{
                                  jumpLab$bg1569:{
                                    jumpLab$bg1568:{
                                      jumpLab$bg1576:{
                                        switch ($var.__type_switch_id) {
                                          case 204:
                                            break jumpLab$bg1574;
                                          
                                          case 205:
                                            break jumpLab$bg1576;
                                          
                                          default:
                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                        }
                                      }
                                      {
                                        var _tmp200 = $var.value.__getSwitchValue();
                                        switch (_tmp200) {
                                          case 'average':
                                            break jumpLab$bg1568;
                                          
                                          case 'median':
                                            break jumpLab$bg1569;
                                          
                                          case 'standardDeviation':
                                            break jumpLab$bg1570;
                                          
                                          case 'min':
                                            break jumpLab$bg1571;
                                          
                                          case 'max':
                                            break jumpLab$bg1572;
                                          
                                          case 'samples':
                                            break jumpLab$bg1573;
                                          
                                          default:
                                            {
                                              string = $var.value;
                                              break jumpLab$bg1575;
                                            }

                                        }
                                      }
                                    }
                                    {
                                      var t$2 = record;
                                      var t$3 = t$2.readValue(sk$Int.meta);
                                      tempMaybe0 = new (sk$Some)(t$3);
                                    }
                                    break jumpBlockOuterjumpLab$bg1575;
                                  }
                                  {
                                    var t$4 = record;
                                    var t$5 = t$4.readValue(sk$Int.meta);
                                    tempMaybe1 = new (sk$Some)(t$5);
                                  }
                                  break jumpBlockOuterjumpLab$bg1575;
                                }
                                {
                                  var t$6 = record;
                                  var t$7 = t$6.readValue(sk$Int.meta);
                                  tempMaybe2 = new (sk$Some)(t$7);
                                }
                                break jumpBlockOuterjumpLab$bg1575;
                              }
                              {
                                var t$8 = record;
                                var t$9 = t$8.readValue(sk$Int.meta);
                                tempMaybe3 = new (sk$Some)(t$9);
                              }
                              break jumpBlockOuterjumpLab$bg1575;
                            }
                            {
                              var t$10 = record;
                              var t$11 = t$10.readValue(sk$Int.meta);
                              tempMaybe4 = new (sk$Some)(t$11);
                            }
                            break jumpBlockOuterjumpLab$bg1575;
                          }
                          {
                            var t$12 = record;
                            var t$13 = sk$Array.meta(sk$Int.meta);
                            var t$14 = t$12.readValue(t$13);
                            tempMaybe5 = new (sk$Some)(t$14);
                          }
                          break jumpBlockOuterjumpLab$bg1575;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg1534;
                        }
                      }
                      {
                        var t$15 = string;
                        skip.throwException(sk, new (sk$Serialization$dtFieldNotInClassError)(t$15, new (sk$Array)([
                          new sk$String(('average')),
                          new sk$String(('max')),
                          new sk$String(('median')),
                          new sk$String(('min')),
                          new sk$String(('samples')),
                          new sk$String(('standardDeviation'))
                        ])));
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg1535;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg1534;
    }
  }
  var t$16 = record;
  t$16.end();
  var t$17 = tempMaybe0;
  var t$18 = tempMaybe1;
  var t$19 = tempMaybe2;
  var t$20 = tempMaybe3;
  var t$21 = tempMaybe4;
  var t$22 = tempMaybe5;
  var var1 = new (sk$Tuple6)(t$17, t$18, t$19, t$20, t$21, t$22);
  var temp3;
  var temp0;
  var temp5;
  var temp1;
  var temp2;
  var temp4;
  {
    jumpBlockOuterjumpLab$bg1585:{
      jumpLab$bg1585:{
        jumpLab$bg1584:{
          jumpLab$bg1583:{
            jumpLab$bg1582:{
              jumpLab$bg1581:{
                jumpLab$bg1580:{
                  jumpLab$bg1579:{
                    jumpLab$bg1586:{
                      jumpLab$bg1587:{
                        jumpLab$bg1588:{
                          jumpLab$bg1589:{
                            jumpLab$bg1590:{
                              jumpLab$bg1591:{
                                switch (var1.__type_switch_id) {
                                  case 396:
                                    break jumpLab$bg1591;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch (var1.i0.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg1590;
                                
                                case 204:
                                  break jumpLab$bg1580;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var1.i1.__type_switch_id) {
                              case 205:
                                break jumpLab$bg1589;
                              
                              case 204:
                                break jumpLab$bg1581;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch (var1.i2.__type_switch_id) {
                            case 205:
                              break jumpLab$bg1588;
                            
                            case 204:
                              break jumpLab$bg1582;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch (var1.i3.__type_switch_id) {
                          case 205:
                            break jumpLab$bg1587;
                          
                          case 204:
                            break jumpLab$bg1583;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      switch (var1.i4.__type_switch_id) {
                        case 205:
                          break jumpLab$bg1586;
                        
                        case 204:
                          break jumpLab$bg1584;
                        
                        default:
                          skip.throwException(sk, new Error('Unmatched Branch'));

                      }
                    }
                    switch (var1.i5.__type_switch_id) {
                      case 205:
                        temp0 = var1.i0.value;
                        temp1 = var1.i1.value;
                        temp2 = var1.i2.value;
                        temp3 = var1.i3.value;
                        temp4 = var1.i4.value;
                        temp5 = var1.i5.value;
                        break jumpLab$bg1579;
                      
                      case 204:
                        break jumpLab$bg1585;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$23 = temp0;
                    var t$24 = temp1;
                    var t$25 = temp2;
                    var t$26 = temp3;
                    var t$27 = temp4;
                    var t$28 = temp5;
                    return new (sk$Bencher$dtBenchmarkStats)({
                      average: t$23,
                      max: t$27,
                      median: t$24,
                      min: t$26,
                      samples: t$28,
                      standardDeviation: t$25
                    });
                  }
                }
                skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('BenchmarkStats')), new sk$String(('average'))));
              }
              skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('BenchmarkStats')), new sk$String(('median'))));
            }
            skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('BenchmarkStats')), new sk$String(('standardDeviation'))));
          }
          skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('BenchmarkStats')), new sk$String(('min'))));
        }
        skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('BenchmarkStats')), new sk$String(('max'))));
      }
      skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('BenchmarkStats')), new sk$String(('samples'))));
    }
  }
};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.serialize = function(_value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('average')),
    new sk$String(('median')),
    new sk$String(('standardDeviation')),
    new sk$String(('min')),
    new sk$String(('max')),
    new sk$String(('samples'))
  ]));
  var t$1 = record;
  var t$2 = _value;
  var t$3 = t$2.average;
  t$1.writeItem(new sk$String(('average')), t$3, sk$Int.meta);
  var t$4 = record;
  var t$5 = _value;
  var t$6 = t$5.median;
  t$4.writeItem(new sk$String(('median')), t$6, sk$Int.meta);
  var t$7 = record;
  var t$8 = _value;
  var t$9 = t$8.standardDeviation;
  t$7.writeItem(new sk$String(('standardDeviation')), t$9, sk$Int.meta);
  var t$10 = record;
  var t$11 = _value;
  var t$12 = t$11.min;
  t$10.writeItem(new sk$String(('min')), t$12, sk$Int.meta);
  var t$13 = record;
  var t$14 = _value;
  var t$15 = t$14.max;
  t$13.writeItem(new sk$String(('max')), t$15, sk$Int.meta);
  var t$16 = record;
  var t$17 = _value;
  var t$18 = t$17.samples;
  var t$19 = sk$Array.meta(sk$Int.meta);
  t$16.writeItem(new sk$String(('samples')), t$18, t$19);
  var t$20 = record;
  return t$20.end();
};

sk$Bencher$dtBenchmarkStatsMetaClass.prototype.__bases = [
  sk$Bencher$dtBenchmarkStatsMetaClass,
  sk$MetaClass
];

var sk$BoolMetaClass = sk.BoolMetaClass = function BoolMetaClass() {};

sk$BoolMetaClass.prototype = Object.create(Object.prototype);

sk$BoolMetaClass.prototype.__constructor = sk$BoolMetaClass;

sk$BoolMetaClass.prototype.__classname = 'BoolMetaClass';

sk$BoolMetaClass.prototype.$frozen = true;

sk$BoolMetaClass.prototype.__type_switch_id = 178;

sk$BoolMetaClass.prototype.__copy = function() {
  return new (sk$BoolMetaClass)();
};

sk$BoolMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp201 = __cache.get(this);
  if (_tmp201 === undefined)
    {
      var _tmp201 = this.__copy();
      _tmp201.$frozen = true;
      __cache.set(this, _tmp201);
    }
  return _tmp201;
};

sk$BoolMetaClass.prototype.__init = function(__named_parameters) {};

sk$BoolMetaClass.prototype.description = function() {
  return new sk$String(('Bool')).toString();
};

sk$BoolMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  return t$.readBool();
};

sk$BoolMetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var t$1 = value;
  return t$.writeBool(t$1);
};

sk$BoolMetaClass.prototype.__bases = [
  sk$BoolMetaClass,
  sk$MetaClass
];

var sk$Box = sk.Box = function Box(value) {
  this.value = value;
};

sk$Box.prototype = Object.create(Object.prototype);

sk$Box.prototype.__constructor = sk$Box;

sk$Box.prototype.__classname = 'Box';

sk$Box.prototype.$frozen = true;

sk$Box.prototype.__type_switch_id = 202;

sk$Box.prototype.__copy = function() {
  return new (sk$Box)(this.value);
};

sk$Box.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp202 = __cache.get(this);
  if (_tmp202 === undefined)
    {
      var _tmp202 = this.__copy();
      _tmp202.$frozen = true;
      __cache.set(this, _tmp202);
      _tmp202.value = skip.deepFreeze(_tmp202.value, __cache);
    }
  return _tmp202;
};

sk$Box.prototype.__init = function(__named_parameters) {};

sk$Box.prototype.$eq$eq = function(other) {
  var t$ = this;
  var x = t$.value;
  var y;
  {
    jumpBlockOuterjumpLab$bg1663:{
      jumpLab$bg1663:{
        jumpLab$bg1662:{
          switch (other.__type_switch_id) {
            case 202:
              y = other.value;
              break jumpLab$bg1662;
            
            case 203:
              break jumpLab$bg1663;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = x;
          var t$2 = y;
          return t$1.$eq$eq(t$2);
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Box.prototype.$default = function(x) {
  var t$ = this;
  return t$.value;
};

sk$Box.prototype.each = function(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  return t$1(t$2);
};

sk$Box.prototype.flatMap = function(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  return t$1(t$2);
};

sk$Box.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var option = this;
  var t$ = this;
  var x = t$.value;
  var t$1 = p;
  var t$2 = x;
  if ((yield t$1(t$2)).__value)
    return option;
  else
    return singleton$Null;
});

sk$Box.prototype.genMap = skip.asyncToGenerator(function*(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  var t$3 = (yield t$1(t$2));
  return new (sk$Box)(t$3);
});

sk$Box.prototype.getx = function() {
  var t$ = this;
  return t$.value;
};

sk$Box.prototype.isBox = function() {
  return new sk$Bool((true));
};

sk$Box.prototype.isNull = function() {
  return new sk$Bool((false));
};

sk$Box.prototype.map = function(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  var t$3 = t$1(t$2);
  return new (sk$Box)(t$3);
};

sk$Box.prototype.test = function(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  return t$1(t$2);
};

sk$Box.prototype.toString = function() {
  var t$ = this;
  var x = t$.value;
  var t$1 = x;
  var t$2 = new sk$String(('Box(')).$pl(t$1);
  return t$2.$pl(new sk$String((')')));
};

sk$Box.prototype.__bases = [
  sk$Box,
  sk$Nullable
];

var sk$Concrete = sk.Concrete = function Concrete() {};

sk$Concrete.prototype = Object.create(Object.prototype);

sk$Concrete.prototype.__constructor = sk$Concrete;

sk$Concrete.prototype.__classname = 'Concrete';

sk$Concrete.prototype.$frozen = true;

sk$Concrete.prototype.__type_switch_id = 20;

sk$Concrete.prototype.__copy = function() {};

sk$Concrete.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp203 = __cache.get(this);
  if (_tmp203 === undefined)
    {
      var _tmp203 = this.__copy();
      _tmp203.$frozen = true;
      __cache.set(this, _tmp203);
    }
  return _tmp203;
};

sk$Concrete.prototype.__init = function(__named_parameters) {};

sk$Concrete.prototype.__bases = [
  sk$Concrete,
  sk$Class
];

var sk$ContainerChanged = sk.ContainerChanged = function ContainerChanged() {};

sk$ContainerChanged.prototype = Object.create(Object.prototype);

sk$ContainerChanged.prototype.__constructor = sk$ContainerChanged;

sk$ContainerChanged.prototype.__classname = 'ContainerChanged';

sk$ContainerChanged.prototype.$frozen = true;

sk$ContainerChanged.prototype.__type_switch_id = 66;

sk$ContainerChanged.prototype.__copy = function() {
  return new (sk$ContainerChanged)();
};

sk$ContainerChanged.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp204 = __cache.get(this);
  if (_tmp204 === undefined)
    {
      var _tmp204 = this.__copy();
      _tmp204.$frozen = true;
      __cache.set(this, _tmp204);
    }
  return _tmp204;
};

sk$ContainerChanged.prototype.__init = function(__named_parameters) {};

sk$ContainerChanged.prototype.getMessage = function() {
  return new sk$String(('Container changed during iteration'));
};

sk$ContainerChanged.prototype.__bases = [
  sk$ContainerChanged,
  sk$Exception
];

var sk$Cycle$dtDone = sk.Cycle$dtDone = function Cycle$dtDone($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Cycle$dtDone.prototype = Object.create(Object.prototype);

sk$Cycle$dtDone.prototype.__constructor = sk$Cycle$dtDone;

sk$Cycle$dtDone.prototype.__classname = 'Cycle.Done';

sk$Cycle$dtDone.prototype.$frozen = true;

sk$Cycle$dtDone.prototype.__type_switch_id = 21;

sk$Cycle$dtDone.prototype.__copy = function() {
  return new (sk$Cycle$dtDone)(this.$atparam0);
};

sk$Cycle$dtDone.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp205 = __cache.get(this);
  if (_tmp205 === undefined)
    {
      var _tmp205 = this.__copy();
      _tmp205.$frozen = true;
      __cache.set(this, _tmp205);
      _tmp205.$atparam0 = skip.deepFreeze(_tmp205.$atparam0, __cache);
    }
  return _tmp205;
};

sk$Cycle$dtDone.prototype.__init = function(__named_parameters) {};

sk$Cycle$dtDone.prototype.__bases = [
  sk$Cycle$dtDone,
  sk$Cycle$dtState
];

var sk$Cycle$dtNext = sk.Cycle$dtNext = function Cycle$dtNext($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Cycle$dtNext.prototype = Object.create(Object.prototype);

sk$Cycle$dtNext.prototype.__constructor = sk$Cycle$dtNext;

sk$Cycle$dtNext.prototype.__classname = 'Cycle.Next';

sk$Cycle$dtNext.prototype.$frozen = true;

sk$Cycle$dtNext.prototype.__type_switch_id = 22;

sk$Cycle$dtNext.prototype.__copy = function() {
  return new (sk$Cycle$dtNext)(this.$atparam0);
};

sk$Cycle$dtNext.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp206 = __cache.get(this);
  if (_tmp206 === undefined)
    {
      var _tmp206 = this.__copy();
      _tmp206.$frozen = true;
      __cache.set(this, _tmp206);
      _tmp206.$atparam0 = skip.deepFreeze(_tmp206.$atparam0, __cache);
    }
  return _tmp206;
};

sk$Cycle$dtNext.prototype.__init = function(__named_parameters) {};

sk$Cycle$dtNext.prototype.__bases = [
  sk$Cycle$dtNext,
  sk$Cycle$dtState
];

var sk$Debug$dtDebugBox = sk.Debug$dtDebugBox = function Debug$dtDebugBox(value) {
  this.value = value;
};

sk$Debug$dtDebugBox.prototype = Object.create(Object.prototype);

sk$Debug$dtDebugBox.prototype.__constructor = sk$Debug$dtDebugBox;

sk$Debug$dtDebugBox.prototype.__classname = 'Debug.DebugBox';

sk$Debug$dtDebugBox.prototype.$frozen = true;

sk$Debug$dtDebugBox.prototype.__type_switch_id = 24;

sk$Debug$dtDebugBox.prototype.__copy = function() {
  return new (sk$Debug$dtDebugBox)(this.value);
};

sk$Debug$dtDebugBox.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp207 = __cache.get(this);
  if (_tmp207 === undefined)
    {
      var _tmp207 = this.__copy();
      _tmp207.$frozen = true;
      __cache.set(this, _tmp207);
      _tmp207.value = skip.deepFreeze(_tmp207.value, __cache);
    }
  return _tmp207;
};

sk$Debug$dtDebugBox.prototype.__init = function(__named_parameters) {};

sk$Debug$dtDebugBox.prototype.__bases = [
  sk$Debug$dtDebugBox,
  sk$Debug$dtDebugBoxBase
];

var sk$DivisionByZeroException = sk.DivisionByZeroException = function DivisionByZeroException() {};

sk$DivisionByZeroException.prototype = Object.create(Object.prototype);

sk$DivisionByZeroException.prototype.__constructor = sk$DivisionByZeroException;

sk$DivisionByZeroException.prototype.__classname = 'DivisionByZeroException';

sk$DivisionByZeroException.prototype.$frozen = true;

sk$DivisionByZeroException.prototype.__type_switch_id = 67;

sk$DivisionByZeroException.prototype.__copy = function() {
  return new (sk$DivisionByZeroException)();
};

sk$DivisionByZeroException.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp208 = __cache.get(this);
  if (_tmp208 === undefined)
    {
      var _tmp208 = this.__copy();
      _tmp208.$frozen = true;
      __cache.set(this, _tmp208);
    }
  return _tmp208;
};

sk$DivisionByZeroException.prototype.__init = function(__named_parameters) {};

sk$DivisionByZeroException.prototype.getMessage = function() {
  return new sk$String(('Division by zero'));
};

sk$DivisionByZeroException.prototype.__bases = [
  sk$DivisionByZeroException,
  sk$Exception
];

var sk$Doc$dtAlign = sk.Doc$dtAlign = function Doc$dtAlign(n, contents) {
  this.n = n;
  this.contents = contents;
};

sk$Doc$dtAlign.prototype = Object.create(Object.prototype);

sk$Doc$dtAlign.prototype.__constructor = sk$Doc$dtAlign;

sk$Doc$dtAlign.prototype.__classname = 'Doc.Align';

sk$Doc$dtAlign.prototype.$frozen = true;

sk$Doc$dtAlign.prototype.__type_switch_id = 29;

sk$Doc$dtAlign.prototype.__copy = function() {
  return new (sk$Doc$dtAlign)(this.n, this.contents);
};

sk$Doc$dtAlign.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp209 = __cache.get(this);
  if (_tmp209 === undefined)
    {
      var _tmp209 = this.__copy();
      _tmp209.$frozen = true;
      __cache.set(this, _tmp209);
      _tmp209.n = skip.deepFreeze(_tmp209.n, __cache);
      _tmp209.contents = skip.deepFreeze(_tmp209.contents, __cache);
    }
  return _tmp209;
};

sk$Doc$dtAlign.prototype.__init = function(__named_parameters) {};

sk$Doc$dtAlign.prototype.__bases = [
  sk$Doc$dtAlign,
  sk$Doc
];

var sk$Doc$dtBreak = sk.Doc$dtBreak = function Doc$dtBreak() {};

sk$Doc$dtBreak.prototype = Object.create(Object.prototype);

sk$Doc$dtBreak.prototype.__constructor = sk$Doc$dtBreak;

sk$Doc$dtBreak.prototype.__classname = 'Doc.Break';

sk$Doc$dtBreak.prototype.$frozen = true;

sk$Doc$dtBreak.prototype.__type_switch_id = 42;

sk$Doc$dtBreak.prototype.__copy = function() {
  return new (sk$Doc$dtBreak)();
};

sk$Doc$dtBreak.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp210 = __cache.get(this);
  if (_tmp210 === undefined)
    {
      var _tmp210 = this.__copy();
      _tmp210.$frozen = true;
      __cache.set(this, _tmp210);
    }
  return _tmp210;
};

sk$Doc$dtBreak.prototype.__init = function(__named_parameters) {};

sk$Doc$dtBreak.prototype.__bases = [
  sk$Doc$dtBreak,
  sk$Doc$dtMode
];

var sk$Doc$dtConcat = sk.Doc$dtConcat = function Doc$dtConcat(parts) {
  this.parts = parts;
};

sk$Doc$dtConcat.prototype = Object.create(Object.prototype);

sk$Doc$dtConcat.prototype.__constructor = sk$Doc$dtConcat;

sk$Doc$dtConcat.prototype.__classname = 'Doc.Concat';

sk$Doc$dtConcat.prototype.$frozen = true;

sk$Doc$dtConcat.prototype.__type_switch_id = 30;

sk$Doc$dtConcat.prototype.__copy = function() {
  return new (sk$Doc$dtConcat)(this.parts);
};

sk$Doc$dtConcat.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp211 = __cache.get(this);
  if (_tmp211 === undefined)
    {
      var _tmp211 = this.__copy();
      _tmp211.$frozen = true;
      __cache.set(this, _tmp211);
      _tmp211.parts = skip.deepFreeze(_tmp211.parts, __cache);
    }
  return _tmp211;
};

sk$Doc$dtConcat.prototype.__init = function(__named_parameters) {};

sk$Doc$dtConcat.createFromItems = function(elements) {
  var t$ = elements;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Vector);
  return new (sk$Doc$dtConcat)(t$2);
};

sk$Doc$dtConcat.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.parts;
  var t$2 = t$1.map(((_tmp2083) => 
  {
    return sk$inspect(_tmp2083);
  }));
  var t$3 = t$2.toArray();
  return new (sk$InspectVector)(new sk$String(('Doc.Concat')), t$3);
};

sk$Doc$dtConcat.prototype.__bases = [
  sk$Doc$dtConcat,
  sk$Doc
];

var sk$Doc$dtEmpty = sk.Doc$dtEmpty = function Doc$dtEmpty() {};

sk$Doc$dtEmpty.prototype = Object.create(Object.prototype);

sk$Doc$dtEmpty.prototype.__constructor = sk$Doc$dtEmpty;

sk$Doc$dtEmpty.prototype.__classname = 'Doc.Empty';

sk$Doc$dtEmpty.prototype.$frozen = true;

sk$Doc$dtEmpty.prototype.__type_switch_id = 31;

sk$Doc$dtEmpty.prototype.__copy = function() {
  return new (sk$Doc$dtEmpty)();
};

sk$Doc$dtEmpty.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp212 = __cache.get(this);
  if (_tmp212 === undefined)
    {
      var _tmp212 = this.__copy();
      _tmp212.$frozen = true;
      __cache.set(this, _tmp212);
    }
  return _tmp212;
};

sk$Doc$dtEmpty.prototype.__init = function(__named_parameters) {};

sk$Doc$dtEmpty.prototype.__bases = [
  sk$Doc$dtEmpty,
  sk$Doc
];

var sk$Doc$dtFill = sk.Doc$dtFill = function Doc$dtFill(parts) {
  this.parts = parts;
};

sk$Doc$dtFill.prototype = Object.create(Object.prototype);

sk$Doc$dtFill.prototype.__constructor = sk$Doc$dtFill;

sk$Doc$dtFill.prototype.__classname = 'Doc.Fill';

sk$Doc$dtFill.prototype.$frozen = true;

sk$Doc$dtFill.prototype.__type_switch_id = 32;

sk$Doc$dtFill.prototype.__copy = function() {
  return new (sk$Doc$dtFill)(this.parts);
};

sk$Doc$dtFill.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp213 = __cache.get(this);
  if (_tmp213 === undefined)
    {
      var _tmp213 = this.__copy();
      _tmp213.$frozen = true;
      __cache.set(this, _tmp213);
      _tmp213.parts = skip.deepFreeze(_tmp213.parts, __cache);
    }
  return _tmp213;
};

sk$Doc$dtFill.prototype.__init = function(__named_parameters) {};

sk$Doc$dtFill.prototype.__bases = [
  sk$Doc$dtFill,
  sk$Doc
];

var sk$Doc$dtFlat = sk.Doc$dtFlat = function Doc$dtFlat() {};

sk$Doc$dtFlat.prototype = Object.create(Object.prototype);

sk$Doc$dtFlat.prototype.__constructor = sk$Doc$dtFlat;

sk$Doc$dtFlat.prototype.__classname = 'Doc.Flat';

sk$Doc$dtFlat.prototype.$frozen = true;

sk$Doc$dtFlat.prototype.__type_switch_id = 43;

sk$Doc$dtFlat.prototype.__copy = function() {
  return new (sk$Doc$dtFlat)();
};

sk$Doc$dtFlat.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp214 = __cache.get(this);
  if (_tmp214 === undefined)
    {
      var _tmp214 = this.__copy();
      _tmp214.$frozen = true;
      __cache.set(this, _tmp214);
    }
  return _tmp214;
};

sk$Doc$dtFlat.prototype.__init = function(__named_parameters) {};

sk$Doc$dtFlat.prototype.__bases = [
  sk$Doc$dtFlat,
  sk$Doc$dtMode
];

var sk$Doc$dtGenericLine = sk.Doc$dtGenericLine = function Doc$dtGenericLine() {};

sk$Doc$dtGenericLine.prototype = Object.create(Object.prototype);

sk$Doc$dtGenericLine.prototype.__constructor = sk$Doc$dtGenericLine;

sk$Doc$dtGenericLine.prototype.__classname = 'Doc.GenericLine';

sk$Doc$dtGenericLine.prototype.$frozen = undefined;

sk$Doc$dtGenericLine.prototype.__type_switch_id = -1;

sk$Doc$dtGenericLine.prototype.__copy = function() {
  return new (sk$Doc$dtGenericLine)();
};

sk$Doc$dtGenericLine.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp215 = __cache.get(this);
  if (_tmp215 === undefined)
    {
      var _tmp215 = this.__copy();
      _tmp215.$frozen = true;
      __cache.set(this, _tmp215);
    }
  return _tmp215;
};

sk$Doc$dtGenericLine.prototype.__init = function(__named_parameters) {};

sk$Doc$dtGenericLine.prototype.__bases = [
  sk$Doc$dtGenericLine,
  sk$Doc
];

var sk$Doc$dtGroup = sk.Doc$dtGroup = function Doc$dtGroup(contents, breakLine, marker) {
  this.contents = contents;
  this.breakLine = breakLine === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : breakLine;
  this.marker = marker === undefined ? ((() => 
  {
    return singleton$None;
  })()) : marker;
};

sk$Doc$dtGroup.prototype = Object.create(Object.prototype);

sk$Doc$dtGroup.prototype.__constructor = sk$Doc$dtGroup;

sk$Doc$dtGroup.prototype.__classname = 'Doc.Group';

sk$Doc$dtGroup.prototype.$frozen = true;

sk$Doc$dtGroup.prototype.__type_switch_id = 33;

sk$Doc$dtGroup.prototype.__copy = function() {
  return new (sk$Doc$dtGroup)(this.contents, this.breakLine, this.marker);
};

sk$Doc$dtGroup.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp216 = __cache.get(this);
  if (_tmp216 === undefined)
    {
      var _tmp216 = this.__copy();
      _tmp216.$frozen = true;
      __cache.set(this, _tmp216);
      _tmp216.contents = skip.deepFreeze(_tmp216.contents, __cache);
      _tmp216.breakLine = skip.deepFreeze(_tmp216.breakLine, __cache);
      _tmp216.marker = skip.deepFreeze(_tmp216.marker, __cache);
    }
  return _tmp216;
};

sk$Doc$dtGroup.prototype.__init = function(__named_parameters) {};

sk$Doc$dtGroup.createFromItems = function(elements) {
  var t$ = elements;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Vector);
  var t$3 = new (sk$Doc$dtConcat)(t$2);
  return new (sk$Doc$dtGroup)(t$3, undefined, undefined);
};

sk$Doc$dtGroup.prototype.inspect = function() {
  var parts;
  {
    jumpBlockOuterjumpLab$bg2108:{
      jumpLab$bg2108:{
        jumpLab$bg2107:{
          jumpLab$bg2109:{
            jumpLab$bg2110:{
              jumpLab$bg2111:{
                switch (this.__type_switch_id) {
                  case 33:
                    break jumpLab$bg2111;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              if (this.breakLine.__value)
                break jumpLab$bg2108;
              else
                break jumpLab$bg2110;
            }
            switch (this.marker.__type_switch_id) {
              case 204:
                break jumpLab$bg2109;
              
              default:
                break jumpLab$bg2108;

            }
          }
          switch (this.contents.__type_switch_id) {
            case 30:
              parts = this.contents.parts;
              break jumpLab$bg2107;
            
            default:
              break jumpLab$bg2108;

          }
        }
        {
          var t$ = parts;
          var t$1 = t$.map(((_tmp2094) => 
          {
            return sk$inspect(_tmp2094);
          }));
          var t$2 = t$1.toArray();
          return new (sk$InspectVector)(new sk$String(('Doc.Group')), t$2);
        }
      }
      {
        var t$3 = this;
        var t$4 = t$3.contents;
        var t$5 = sk$inspect(t$4);
        var t$6 = this;
        var t$7 = t$6.breakLine;
        var t$8 = sk$inspect(t$7);
        var t$9 = this;
        var t$10 = t$9.marker;
        var t$11 = sk$inspect(t$10);
        var t$12 = new (sk$Array)([
          t$5,
          t$8,
          t$11
        ]);
        return new (sk$InspectCall)(new sk$String(('Doc.Group')), t$12);
      }
    }
  }
};

sk$Doc$dtGroup.prototype.__bases = [
  sk$Doc$dtGroup,
  sk$Doc
];

var sk$Doc$dtIfBreak = sk.Doc$dtIfBreak = function Doc$dtIfBreak(breakContents, flatContents) {
  this.breakContents = breakContents;
  this.flatContents = flatContents === undefined ? ((() => 
  {
    return singleton$Doc$dtEmpty;
  })()) : flatContents;
};

sk$Doc$dtIfBreak.prototype = Object.create(Object.prototype);

sk$Doc$dtIfBreak.prototype.__constructor = sk$Doc$dtIfBreak;

sk$Doc$dtIfBreak.prototype.__classname = 'Doc.IfBreak';

sk$Doc$dtIfBreak.prototype.$frozen = true;

sk$Doc$dtIfBreak.prototype.__type_switch_id = 34;

sk$Doc$dtIfBreak.prototype.__copy = function() {
  return new (sk$Doc$dtIfBreak)(this.breakContents, this.flatContents);
};

sk$Doc$dtIfBreak.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp217 = __cache.get(this);
  if (_tmp217 === undefined)
    {
      var _tmp217 = this.__copy();
      _tmp217.$frozen = true;
      __cache.set(this, _tmp217);
      _tmp217.breakContents = skip.deepFreeze(_tmp217.breakContents, __cache);
      _tmp217.flatContents = skip.deepFreeze(_tmp217.flatContents, __cache);
    }
  return _tmp217;
};

sk$Doc$dtIfBreak.prototype.__init = function(__named_parameters) {};

sk$Doc$dtIfBreak.prototype.__bases = [
  sk$Doc$dtIfBreak,
  sk$Doc
];

var sk$Doc$dtIndent = sk.Doc$dtIndent = function Doc$dtIndent(contents) {
  this.contents = contents;
};

sk$Doc$dtIndent.prototype = Object.create(Object.prototype);

sk$Doc$dtIndent.prototype.__constructor = sk$Doc$dtIndent;

sk$Doc$dtIndent.prototype.__classname = 'Doc.Indent';

sk$Doc$dtIndent.prototype.$frozen = true;

sk$Doc$dtIndent.prototype.__type_switch_id = 35;

sk$Doc$dtIndent.prototype.__copy = function() {
  return new (sk$Doc$dtIndent)(this.contents);
};

sk$Doc$dtIndent.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp218 = __cache.get(this);
  if (_tmp218 === undefined)
    {
      var _tmp218 = this.__copy();
      _tmp218.$frozen = true;
      __cache.set(this, _tmp218);
      _tmp218.contents = skip.deepFreeze(_tmp218.contents, __cache);
    }
  return _tmp218;
};

sk$Doc$dtIndent.prototype.__init = function(__named_parameters) {};

sk$Doc$dtIndent.createFromItems = function(elements) {
  var t$ = elements;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Vector);
  var t$3 = new (sk$Doc$dtConcat)(t$2);
  return new (sk$Doc$dtIndent)(t$3);
};

sk$Doc$dtIndent.prototype.inspect = function() {
  var t$ = this;
  var $var = t$.contents;
  var contents;
  var parts;
  {
    jumpBlockOuterjumpLab$bg2130:{
      jumpLab$bg2130:{
        jumpLab$bg2129:{
          switch ($var.__type_switch_id) {
            case 30:
              parts = $var.parts;
              break jumpLab$bg2129;
            
            default:
              contents = $var;
              break jumpLab$bg2130;

          }
        }
        {
          var t$1 = parts;
          var t$2 = t$1.map(((_tmp2122) => 
          {
            return sk$inspect(_tmp2122);
          }));
          var t$3 = t$2.toArray();
          return new (sk$InspectVector)(new sk$String(('Doc.Indent')), t$3);
        }
      }
      {
        var t$4 = contents;
        var t$5 = sk$inspect(t$4);
        var t$6 = new (sk$Array)([
          t$5
        ]);
        return new (sk$InspectCall)(new sk$String(('Doc.Indent')), t$6);
      }
    }
  }
};

sk$Doc$dtIndent.prototype.__bases = [
  sk$Doc$dtIndent,
  sk$Doc
];

var sk$Doc$dtLineSuffix = sk.Doc$dtLineSuffix = function Doc$dtLineSuffix(contents) {
  this.contents = contents;
};

sk$Doc$dtLineSuffix.prototype = Object.create(Object.prototype);

sk$Doc$dtLineSuffix.prototype.__constructor = sk$Doc$dtLineSuffix;

sk$Doc$dtLineSuffix.prototype.__classname = 'Doc.LineSuffix';

sk$Doc$dtLineSuffix.prototype.$frozen = true;

sk$Doc$dtLineSuffix.prototype.__type_switch_id = 36;

sk$Doc$dtLineSuffix.prototype.__copy = function() {
  return new (sk$Doc$dtLineSuffix)(this.contents);
};

sk$Doc$dtLineSuffix.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp219 = __cache.get(this);
  if (_tmp219 === undefined)
    {
      var _tmp219 = this.__copy();
      _tmp219.$frozen = true;
      __cache.set(this, _tmp219);
      _tmp219.contents = skip.deepFreeze(_tmp219.contents, __cache);
    }
  return _tmp219;
};

sk$Doc$dtLineSuffix.prototype.__init = function(__named_parameters) {};

sk$Doc$dtLineSuffix.prototype.__bases = [
  sk$Doc$dtLineSuffix,
  sk$Doc
];

var sk$Doc$dtLineSuffixBoundary = sk.Doc$dtLineSuffixBoundary = function Doc$dtLineSuffixBoundary() {};

sk$Doc$dtLineSuffixBoundary.prototype = Object.create(Object.prototype);

sk$Doc$dtLineSuffixBoundary.prototype.__constructor = sk$Doc$dtLineSuffixBoundary;

sk$Doc$dtLineSuffixBoundary.prototype.__classname = 'Doc.LineSuffixBoundary';

sk$Doc$dtLineSuffixBoundary.prototype.$frozen = true;

sk$Doc$dtLineSuffixBoundary.prototype.__type_switch_id = 37;

sk$Doc$dtLineSuffixBoundary.prototype.__copy = function() {
  return new (sk$Doc$dtLineSuffixBoundary)();
};

sk$Doc$dtLineSuffixBoundary.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp220 = __cache.get(this);
  if (_tmp220 === undefined)
    {
      var _tmp220 = this.__copy();
      _tmp220.$frozen = true;
      __cache.set(this, _tmp220);
    }
  return _tmp220;
};

sk$Doc$dtLineSuffixBoundary.prototype.__init = function(__named_parameters) {};

sk$Doc$dtLineSuffixBoundary.prototype.__bases = [
  sk$Doc$dtLineSuffixBoundary,
  sk$Doc
];

var sk$Doc$dtMarker = sk.Doc$dtMarker = function Doc$dtMarker(id) {
  this.id = id;
};

sk$Doc$dtMarker.prototype = Object.create(Object.prototype);

sk$Doc$dtMarker.prototype.__constructor = sk$Doc$dtMarker;

sk$Doc$dtMarker.prototype.__classname = 'Doc.Marker';

sk$Doc$dtMarker.prototype.$frozen = true;

sk$Doc$dtMarker.prototype.__type_switch_id = 38;

sk$Doc$dtMarker.prototype.__copy = function() {
  return new (sk$Doc$dtMarker)(this.id);
};

sk$Doc$dtMarker.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp221 = __cache.get(this);
  if (_tmp221 === undefined)
    {
      var _tmp221 = this.__copy();
      _tmp221.$frozen = true;
      __cache.set(this, _tmp221);
      _tmp221.id = skip.deepFreeze(_tmp221.id, __cache);
    }
  return _tmp221;
};

sk$Doc$dtMarker.prototype.__init = function(__named_parameters) {};

sk$Doc$dtMarker.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Doc$dtMarker.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg2144:{
      jumpLab$bg2144:{
        jumpLab$bg2143:{
          switch (other.__type_switch_id) {
            case 38:
              otherTyped = other;
              break jumpLab$bg2143;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.id;
          var t$2 = otherTyped;
          var t$3 = t$2.id;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Doc$dtMarker.prototype.__bases = [
  sk$Doc$dtMarker,
  sk$Doc
];

var sk$Doc$dtStr = sk.Doc$dtStr = function Doc$dtStr(str) {
  this.str = str;
};

sk$Doc$dtStr.prototype = Object.create(Object.prototype);

sk$Doc$dtStr.prototype.__constructor = sk$Doc$dtStr;

sk$Doc$dtStr.prototype.__classname = 'Doc.Str';

sk$Doc$dtStr.prototype.$frozen = true;

sk$Doc$dtStr.prototype.__type_switch_id = 39;

sk$Doc$dtStr.prototype.__copy = function() {
  return new (sk$Doc$dtStr)(this.str);
};

sk$Doc$dtStr.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp222 = __cache.get(this);
  if (_tmp222 === undefined)
    {
      var _tmp222 = this.__copy();
      _tmp222.$frozen = true;
      __cache.set(this, _tmp222);
      _tmp222.str = skip.deepFreeze(_tmp222.str, __cache);
    }
  return _tmp222;
};

sk$Doc$dtStr.prototype.__init = function(__named_parameters) {};

sk$Doc$dtStr.prototype.__bases = [
  sk$Doc$dtStr,
  sk$Doc
];

var sk$Duplicate = sk.Duplicate = function Duplicate() {};

sk$Duplicate.prototype = Object.create(Object.prototype);

sk$Duplicate.prototype.__constructor = sk$Duplicate;

sk$Duplicate.prototype.__classname = 'Duplicate';

sk$Duplicate.prototype.$frozen = true;

sk$Duplicate.prototype.__type_switch_id = 68;

sk$Duplicate.prototype.__copy = function() {
  return new (sk$Duplicate)();
};

sk$Duplicate.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp223 = __cache.get(this);
  if (_tmp223 === undefined)
    {
      var _tmp223 = this.__copy();
      _tmp223.$frozen = true;
      __cache.set(this, _tmp223);
    }
  return _tmp223;
};

sk$Duplicate.prototype.__init = function(__named_parameters) {};

sk$Duplicate.prototype.getMessage = function() {
  return new sk$String(('Duplicate element'));
};

sk$Duplicate.prototype.__bases = [
  sk$Duplicate,
  sk$Exception
];

var sk$EQ = sk.EQ = function EQ() {};

sk$EQ.prototype = Object.create(Object.prototype);

sk$EQ.prototype.__constructor = sk$EQ;

sk$EQ.prototype.__classname = 'EQ';

sk$EQ.prototype.$frozen = true;

sk$EQ.prototype.__type_switch_id = 206;

sk$EQ.prototype.__copy = function() {
  return new (sk$EQ)();
};

sk$EQ.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp224 = __cache.get(this);
  if (_tmp224 === undefined)
    {
      var _tmp224 = this.__copy();
      _tmp224.$frozen = true;
      __cache.set(this, _tmp224);
    }
  return _tmp224;
};

sk$EQ.prototype.__init = function(__named_parameters) {};

sk$EQ.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$EQ.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$EQ.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$EQ.prototype.$eq$eq = function(x) {
  jumpBlockOuterjumpLab$bg2158:{
    jumpLab$bg2158:{
      jumpLab$bg2157:{
        switch (x.__type_switch_id) {
          case 206:
            break jumpLab$bg2157;
          
          default:
            break jumpLab$bg2158;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$EQ.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$EQ.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$EQ.generator = function() {
  return singleton$QuickCheck$dtOrderGenerator;
};

sk$EQ.prototype.getClassName = function() {
  return new sk$String(('EQ'));
};

sk$EQ.prototype.hash = function() {
  return new sk$String(('EQ')).hash();
};

sk$EQ.prototype.isEQ = function() {
  return new sk$Bool((true));
};

sk$EQ.prototype.isGT = function() {
  return new sk$Bool((false));
};

sk$EQ.prototype.isGTE = function() {
  return new sk$Bool((true));
};

sk$EQ.prototype.isLT = function() {
  return new sk$Bool((false));
};

sk$EQ.prototype.isLTE = function() {
  return new sk$Bool((true));
};

sk$EQ.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    yield new sk$Some(singleton$LT);
    return undefined;
  });
};

sk$EQ.prototype.toString = function() {
  return new sk$String(('equal to'));
};

sk$EQ.prototype.typeOrder = function() {
  return new sk$Int(1.0, 0.0);
};

sk$EQ.prototype.__bases = [
  sk$EQ,
  sk$Order
];

var sk$Failure = sk.Failure = function Failure(error) {
  this.error = error;
};

sk$Failure.prototype = Object.create(Object.prototype);

sk$Failure.prototype.__constructor = sk$Failure;

sk$Failure.prototype.__classname = 'Failure';

sk$Failure.prototype.$frozen = true;

sk$Failure.prototype.__type_switch_id = 258;

sk$Failure.prototype.__copy = function() {
  return new (sk$Failure)(this.error);
};

sk$Failure.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp225 = __cache.get(this);
  if (_tmp225 === undefined)
    {
      var _tmp225 = this.__copy();
      _tmp225.$frozen = true;
      __cache.set(this, _tmp225);
      _tmp225.error = skip.deepFreeze(_tmp225.error, __cache);
    }
  return _tmp225;
};

sk$Failure.prototype.__init = function(__named_parameters) {};

sk$Failure.prototype.compare = function(other) {
  var t$ = this;
  var error1 = t$.error;
  var error2;
  {
    jumpBlockOuterjumpLab$bg2185:{
      jumpLab$bg2185:{
        jumpLab$bg2184:{
          switch (other.__type_switch_id) {
            case 258:
              error2 = other.error;
              break jumpLab$bg2184;
            
            default:
              break jumpLab$bg2185;

          }
        }
        {
          var t$1 = error1;
          var t$2 = error2;
          return sk$compare(t$1, t$2);
        }
      }
      return singleton$LT;
    }
  }
};

sk$Failure.prototype.flatMap = function(f) {
  var t$ = this;
  var error = t$.error;
  var t$1 = error;
  return new (sk$Failure)(t$1);
};

sk$Failure.prototype.fromFailure = function(message) {
  if (message === undefined)
    message = ((() => 
    {
      return new sk$String(('fromFailure() called on Success'));
    })());
  var t$ = this;
  return t$.error;
};

sk$Failure.prototype.fromSuccess = function(message) {
  if (message === undefined)
    message = ((() => 
    {
      return new sk$String(('fromSuccess() called on Failure'));
    })());
  var t$ = message;
  return sk$invariant_violation(t$);
};

sk$Failure.generator = function(successGenerator, failureGenerator) {
  var t$ = successGenerator;
  var t$1 = failureGenerator;
  return new (sk$QuickCheck$dtResultGenerator)(t$, t$1);
};

sk$Failure.guard = function(f) {
  try {
    {
      var t$ = f;
      var t$1 = t$();
      return new (sk$Success)(t$1);
    }
  }catch ($var){
    {
      var exn;
      {
        jumpBlockOuterjumpLab$bg2202:{
          jumpLab$bg2202:{
            {
              exn = $var;
              break jumpLab$bg2202;
            }
          }
          {
            var t$2 = exn;
            return new (sk$Failure)(t$2);
          }
        }
      }
    }
  }
};

sk$Failure.prototype.isFailure = function() {
  return new sk$Bool((true));
};

sk$Failure.prototype.isSuccess = function() {
  return new sk$Bool((false));
};

sk$Failure.prototype.map = function(f) {
  var t$ = this;
  var error = t$.error;
  var t$1 = error;
  return new (sk$Failure)(t$1);
};

sk$Failure.prototype.maybeFailure = function() {
  var t$ = this;
  var error = t$.error;
  var t$1 = error;
  return new (sk$Some)(t$1);
};

sk$Failure.prototype.maybeSuccess = function() {
  return singleton$None;
};

sk$Failure.prototype.perturb = function(rng) {
  var t$ = this;
  var f = t$.error;
  var t$1 = rng;
  t$1.perturb(new sk$Int(1.0, 0.0));
  var t$2 = f;
  var t$3 = rng;
  return t$2.perturb(t$3);
};

sk$Failure.prototype.property = function() {
  var t$ = this;
  var f = t$.error;
  var t$1 = f;
  var t$2 = t$1.toString();
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var t$4 = sk$Vector.createFromItems(t$3);
  var t$5 = new (sk$QuickCheck$dtTestFailure)(new sk$Int(0.0, 0.0), t$4);
  return new (sk$QuickCheck$dtTestResultProperty)(t$5);
};

sk$Failure.prototype.shrink = function(firstShrink) {
  if (firstShrink === undefined)
    firstShrink = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var f = t$.error;
  var t$1 = f;
  var t$2 = firstShrink;
  var t$3 = t$1.shrink(t$2);
  return t$3.map(((f2) => 
  {
    var t$4 = f2;
    var t$5 = new (sk$Failure)(t$4);
    return t$5;
  }));
};

sk$Failure.prototype.__bases = [
  sk$Failure,
  sk$Result
];

var sk$FileRange = sk.FileRange = function FileRange(__named_parameters) {
  sk$Pos.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$FileRange.prototype = Object.create(Object.prototype);

sk$FileRange.prototype.__constructor = sk$FileRange;

sk$FileRange.prototype.__classname = 'FileRange';

sk$FileRange.prototype.$frozen = true;

sk$FileRange.prototype.__type_switch_id = 223;

sk$FileRange.prototype.__copy = function() {
  return new (sk$FileRange)(this);
};

sk$FileRange.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp226 = __cache.get(this);
  if (_tmp226 === undefined)
    {
      var _tmp226 = this.__copy();
      _tmp226.$frozen = true;
      __cache.set(this, _tmp226);
      _tmp226.filename = skip.deepFreeze(_tmp226.filename, __cache);
      _tmp226.range = skip.deepFreeze(_tmp226.range, __cache);
    }
  return _tmp226;
};

sk$FileRange.prototype.__init = function(__named_parameters) {
  this.filename = __named_parameters.filename;
  this.range = __named_parameters.range;
};

sk$FileRange.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$FileRange.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$FileRange.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$FileRange.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$FileRange.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$FileRange.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$FileRange.prototype.compare = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg2338:{
      jumpLab$bg2338:{
        jumpLab$bg2337:{
          switch (other.__type_switch_id) {
            case 223:
              otherTyped = other;
              break jumpLab$bg2337;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.filename;
          var t$2 = otherTyped;
          var t$3 = t$2.filename;
          var $var = sk$compare(t$1, t$3);
          var result;
          {
            jumpBlockOuterjumpLab$bg2331:{
              jumpLab$bg2331:{
                jumpLab$bg2330:{
                  switch ($var.__type_switch_id) {
                    case 206:
                      break jumpLab$bg2330;
                    
                    default:
                      result = $var;
                      break jumpLab$bg2331;

                  }
                }
                {}
                break jumpBlockOuterjumpLab$bg2331;
              }
              return result;
            }
          }
          var t$4 = this;
          var t$5 = t$4.range;
          var t$6 = otherTyped;
          var t$7 = t$6.range;
          var var1 = sk$compare(t$5, t$7);
          var result1;
          {
            jumpBlockOuterjumpLab$bg2335:{
              jumpLab$bg2335:{
                jumpLab$bg2334:{
                  switch (var1.__type_switch_id) {
                    case 206:
                      break jumpLab$bg2334;
                    
                    default:
                      result1 = var1;
                      break jumpLab$bg2335;

                  }
                }
                {}
                break jumpBlockOuterjumpLab$bg2335;
              }
              return result1;
            }
          }
          return singleton$EQ;
        }
      }
      {
        var t$8 = this;
        var t$9 = t$8.getClassName();
        var t$10 = other;
        var t$11 = t$10.getClassName();
        return t$9.compare(t$11);
      }
    }
  }
};

sk$FileRange.create = function(filename, range) {
  var t$ = filename;
  var t$1 = range;
  return new (sk$FileRange)({
    filename: t$,
    range: t$1
  });
};

sk$FileRange.prototype.die = function(msg) {
  var t$ = this;
  var t$1 = msg;
  return sk$Assert$dtfail(t$, t$1);
};

sk$FileRange.fromStartEnd = function(start, end) {
  var t$ = start;
  var t$1 = t$.filename;
  var t$2 = start;
  var t$3 = t$2.position;
  var t$4 = end;
  var t$5 = t$4.position;
  var t$6 = sk$TextRange$dtcreate(t$3, t$5);
  return sk$FileRange$dtcreate(t$1, t$6);
};

sk$FileRange.prototype.getClassName = function() {
  return new sk$String(('FileRange'));
};

sk$FileRange.prototype.hash = function() {
  var h = new sk$String(('FileRange')).hash();
  var t$ = h;
  var t$1 = this;
  var t$2 = t$1.filename;
  h = sk$Hashable$dtcombine(t$, t$2);
  var t$3 = h;
  var t$4 = this;
  var t$5 = t$4.range;
  return sk$Hashable$dtcombine(t$3, t$5);
};

sk$FileRange.prototype.__bases = [
  sk$FileRange,
  sk$Pos
];

var sk$FloatMetaClass = sk.FloatMetaClass = function FloatMetaClass() {};

sk$FloatMetaClass.prototype = Object.create(Object.prototype);

sk$FloatMetaClass.prototype.__constructor = sk$FloatMetaClass;

sk$FloatMetaClass.prototype.__classname = 'FloatMetaClass';

sk$FloatMetaClass.prototype.$frozen = true;

sk$FloatMetaClass.prototype.__type_switch_id = 179;

sk$FloatMetaClass.prototype.__copy = function() {
  return new (sk$FloatMetaClass)();
};

sk$FloatMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp227 = __cache.get(this);
  if (_tmp227 === undefined)
    {
      var _tmp227 = this.__copy();
      _tmp227.$frozen = true;
      __cache.set(this, _tmp227);
    }
  return _tmp227;
};

sk$FloatMetaClass.prototype.__init = function(__named_parameters) {};

sk$FloatMetaClass.prototype.description = function() {
  return new sk$String(('Float')).toString();
};

sk$FloatMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  return t$.readFloat();
};

sk$FloatMetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var t$1 = value;
  return t$.writeFloat(t$1);
};

sk$FloatMetaClass.prototype.__bases = [
  sk$FloatMetaClass,
  sk$MetaClass
];

var sk$GT = sk.GT = function GT() {};

sk$GT.prototype = Object.create(Object.prototype);

sk$GT.prototype.__constructor = sk$GT;

sk$GT.prototype.__classname = 'GT';

sk$GT.prototype.$frozen = true;

sk$GT.prototype.__type_switch_id = 207;

sk$GT.prototype.__copy = function() {
  return new (sk$GT)();
};

sk$GT.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp228 = __cache.get(this);
  if (_tmp228 === undefined)
    {
      var _tmp228 = this.__copy();
      _tmp228.$frozen = true;
      __cache.set(this, _tmp228);
    }
  return _tmp228;
};

sk$GT.prototype.__init = function(__named_parameters) {};

sk$GT.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$GT.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$GT.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$GT.prototype.$eq$eq = function(x) {
  jumpBlockOuterjumpLab$bg2449:{
    jumpLab$bg2449:{
      jumpLab$bg2448:{
        switch (x.__type_switch_id) {
          case 207:
            break jumpLab$bg2448;
          
          default:
            break jumpLab$bg2449;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$GT.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$GT.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$GT.generator = function() {
  return singleton$QuickCheck$dtOrderGenerator;
};

sk$GT.prototype.getClassName = function() {
  return new sk$String(('GT'));
};

sk$GT.prototype.hash = function() {
  return new sk$String(('GT')).hash();
};

sk$GT.prototype.isEQ = function() {
  return new sk$Bool((false));
};

sk$GT.prototype.isGT = function() {
  return new sk$Bool((true));
};

sk$GT.prototype.isGTE = function() {
  return new sk$Bool((true));
};

sk$GT.prototype.isLT = function() {
  return new sk$Bool((false));
};

sk$GT.prototype.isLTE = function() {
  return new sk$Bool((false));
};

sk$GT.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    yield new sk$Some(singleton$EQ);
    yield new sk$Some(singleton$LT);
    return undefined;
  });
};

sk$GT.prototype.toString = function() {
  return new sk$String(('greater than'));
};

sk$GT.prototype.typeOrder = function() {
  return new sk$Int(2.0, 0.0);
};

sk$GT.prototype.__bases = [
  sk$GT,
  sk$Order
];

var sk$Glob$dtGlobStateCharClassEscape = sk.Glob$dtGlobStateCharClassEscape = function Glob$dtGlobStateCharClassEscape() {};

sk$Glob$dtGlobStateCharClassEscape.prototype = Object.create(Object.prototype);

sk$Glob$dtGlobStateCharClassEscape.prototype.__constructor = sk$Glob$dtGlobStateCharClassEscape;

sk$Glob$dtGlobStateCharClassEscape.prototype.__classname = 'Glob.GlobStateCharClassEscape';

sk$Glob$dtGlobStateCharClassEscape.prototype.$frozen = true;

sk$Glob$dtGlobStateCharClassEscape.prototype.__type_switch_id = 82;

sk$Glob$dtGlobStateCharClassEscape.prototype.__copy = function() {
  return new (sk$Glob$dtGlobStateCharClassEscape)();
};

sk$Glob$dtGlobStateCharClassEscape.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp229 = __cache.get(this);
  if (_tmp229 === undefined)
    {
      var _tmp229 = this.__copy();
      _tmp229.$frozen = true;
      __cache.set(this, _tmp229);
    }
  return _tmp229;
};

sk$Glob$dtGlobStateCharClassEscape.prototype.__init = function(__named_parameters) {};

sk$Glob$dtGlobStateCharClassEscape.prototype.__bases = [
  sk$Glob$dtGlobStateCharClassEscape,
  sk$Glob$dtGlobState
];

var sk$Glob$dtGlobStateCharClassFirst = sk.Glob$dtGlobStateCharClassFirst = function Glob$dtGlobStateCharClassFirst() {};

sk$Glob$dtGlobStateCharClassFirst.prototype = Object.create(Object.prototype);

sk$Glob$dtGlobStateCharClassFirst.prototype.__constructor = sk$Glob$dtGlobStateCharClassFirst;

sk$Glob$dtGlobStateCharClassFirst.prototype.__classname = 'Glob.GlobStateCharClassFirst';

sk$Glob$dtGlobStateCharClassFirst.prototype.$frozen = true;

sk$Glob$dtGlobStateCharClassFirst.prototype.__type_switch_id = 83;

sk$Glob$dtGlobStateCharClassFirst.prototype.__copy = function() {
  return new (sk$Glob$dtGlobStateCharClassFirst)();
};

sk$Glob$dtGlobStateCharClassFirst.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp230 = __cache.get(this);
  if (_tmp230 === undefined)
    {
      var _tmp230 = this.__copy();
      _tmp230.$frozen = true;
      __cache.set(this, _tmp230);
    }
  return _tmp230;
};

sk$Glob$dtGlobStateCharClassFirst.prototype.__init = function(__named_parameters) {};

sk$Glob$dtGlobStateCharClassFirst.prototype.__bases = [
  sk$Glob$dtGlobStateCharClassFirst,
  sk$Glob$dtGlobState
];

var sk$Glob$dtGlobStateCharClassRest = sk.Glob$dtGlobStateCharClassRest = function Glob$dtGlobStateCharClassRest() {};

sk$Glob$dtGlobStateCharClassRest.prototype = Object.create(Object.prototype);

sk$Glob$dtGlobStateCharClassRest.prototype.__constructor = sk$Glob$dtGlobStateCharClassRest;

sk$Glob$dtGlobStateCharClassRest.prototype.__classname = 'Glob.GlobStateCharClassRest';

sk$Glob$dtGlobStateCharClassRest.prototype.$frozen = true;

sk$Glob$dtGlobStateCharClassRest.prototype.__type_switch_id = 84;

sk$Glob$dtGlobStateCharClassRest.prototype.__copy = function() {
  return new (sk$Glob$dtGlobStateCharClassRest)();
};

sk$Glob$dtGlobStateCharClassRest.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp231 = __cache.get(this);
  if (_tmp231 === undefined)
    {
      var _tmp231 = this.__copy();
      _tmp231.$frozen = true;
      __cache.set(this, _tmp231);
    }
  return _tmp231;
};

sk$Glob$dtGlobStateCharClassRest.prototype.__init = function(__named_parameters) {};

sk$Glob$dtGlobStateCharClassRest.prototype.__bases = [
  sk$Glob$dtGlobStateCharClassRest,
  sk$Glob$dtGlobState
];

var sk$Glob$dtGlobStateEscape = sk.Glob$dtGlobStateEscape = function Glob$dtGlobStateEscape() {};

sk$Glob$dtGlobStateEscape.prototype = Object.create(Object.prototype);

sk$Glob$dtGlobStateEscape.prototype.__constructor = sk$Glob$dtGlobStateEscape;

sk$Glob$dtGlobStateEscape.prototype.__classname = 'Glob.GlobStateEscape';

sk$Glob$dtGlobStateEscape.prototype.$frozen = true;

sk$Glob$dtGlobStateEscape.prototype.__type_switch_id = 85;

sk$Glob$dtGlobStateEscape.prototype.__copy = function() {
  return new (sk$Glob$dtGlobStateEscape)();
};

sk$Glob$dtGlobStateEscape.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp232 = __cache.get(this);
  if (_tmp232 === undefined)
    {
      var _tmp232 = this.__copy();
      _tmp232.$frozen = true;
      __cache.set(this, _tmp232);
    }
  return _tmp232;
};

sk$Glob$dtGlobStateEscape.prototype.__init = function(__named_parameters) {};

sk$Glob$dtGlobStateEscape.prototype.__bases = [
  sk$Glob$dtGlobStateEscape,
  sk$Glob$dtGlobState
];

var sk$Glob$dtGlobStateNormal = sk.Glob$dtGlobStateNormal = function Glob$dtGlobStateNormal() {};

sk$Glob$dtGlobStateNormal.prototype = Object.create(Object.prototype);

sk$Glob$dtGlobStateNormal.prototype.__constructor = sk$Glob$dtGlobStateNormal;

sk$Glob$dtGlobStateNormal.prototype.__classname = 'Glob.GlobStateNormal';

sk$Glob$dtGlobStateNormal.prototype.$frozen = true;

sk$Glob$dtGlobStateNormal.prototype.__type_switch_id = 86;

sk$Glob$dtGlobStateNormal.prototype.__copy = function() {
  return new (sk$Glob$dtGlobStateNormal)();
};

sk$Glob$dtGlobStateNormal.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp233 = __cache.get(this);
  if (_tmp233 === undefined)
    {
      var _tmp233 = this.__copy();
      _tmp233.$frozen = true;
      __cache.set(this, _tmp233);
    }
  return _tmp233;
};

sk$Glob$dtGlobStateNormal.prototype.__init = function(__named_parameters) {};

sk$Glob$dtGlobStateNormal.prototype.__bases = [
  sk$Glob$dtGlobStateNormal,
  sk$Glob$dtGlobState
];

var sk$HH$dtArraykeylike = sk.HH$dtArraykeylike = function HH$dtArraykeylike() {};

sk$HH$dtArraykeylike.prototype = Object.create(Object.prototype);

sk$HH$dtArraykeylike.prototype.__constructor = sk$HH$dtArraykeylike;

sk$HH$dtArraykeylike.prototype.__classname = 'HH.Arraykeylike';

sk$HH$dtArraykeylike.prototype.$frozen = undefined;

sk$HH$dtArraykeylike.prototype.__type_switch_id = -1;

sk$HH$dtArraykeylike.prototype.__copy = function() {};

sk$HH$dtArraykeylike.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp234 = __cache.get(this);
  if (_tmp234 === undefined)
    {
      var _tmp234 = this.__copy();
      _tmp234.$frozen = true;
      __cache.set(this, _tmp234);
    }
  return _tmp234;
};

sk$HH$dtArraykeylike.prototype.__init = function(__named_parameters) {};

sk$HH$dtArraykeylike.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$HH$dtArraykeylike.prototype.__bases = [
  sk$HH$dtArraykeylike,
  sk$Equality,
  sk$Hashable
];

var sk$HH$dtLambdaObject = sk.HH$dtLambdaObject = function HH$dtLambdaObject(lambda) {
  this.lambda = lambda;
};

sk$HH$dtLambdaObject.prototype = Object.create(Object.prototype);

sk$HH$dtLambdaObject.prototype.__constructor = sk$HH$dtLambdaObject;

sk$HH$dtLambdaObject.prototype.__classname = 'HH.LambdaObject';

sk$HH$dtLambdaObject.prototype.$frozen = true;

sk$HH$dtLambdaObject.prototype.__type_switch_id = 87;

sk$HH$dtLambdaObject.prototype.__copy = function() {
  return new (sk$HH$dtLambdaObject)(this.lambda);
};

sk$HH$dtLambdaObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp235 = __cache.get(this);
  if (_tmp235 === undefined)
    {
      var _tmp235 = this.__copy();
      _tmp235.$frozen = true;
      __cache.set(this, _tmp235);
      _tmp235.lambda = skip.deepFreeze(_tmp235.lambda, __cache);
    }
  return _tmp235;
};

sk$HH$dtLambdaObject.prototype.__init = function(__named_parameters) {};

sk$HH$dtLambdaObject.prototype.__bases = [
  sk$HH$dtLambdaObject,
  sk$HH$dtLambda
];

var sk$HH$dtLambdaString = sk.HH$dtLambdaString = function HH$dtLambdaString(lambda) {
  this.lambda = lambda;
};

sk$HH$dtLambdaString.prototype = Object.create(Object.prototype);

sk$HH$dtLambdaString.prototype.__constructor = sk$HH$dtLambdaString;

sk$HH$dtLambdaString.prototype.__classname = 'HH.LambdaString';

sk$HH$dtLambdaString.prototype.$frozen = true;

sk$HH$dtLambdaString.prototype.__type_switch_id = 88;

sk$HH$dtLambdaString.prototype.__copy = function() {
  return new (sk$HH$dtLambdaString)(this.lambda);
};

sk$HH$dtLambdaString.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp236 = __cache.get(this);
  if (_tmp236 === undefined)
    {
      var _tmp236 = this.__copy();
      _tmp236.$frozen = true;
      __cache.set(this, _tmp236);
      _tmp236.lambda = skip.deepFreeze(_tmp236.lambda, __cache);
    }
  return _tmp236;
};

sk$HH$dtLambdaString.prototype.__init = function(__named_parameters) {};

sk$HH$dtLambdaString.prototype.__bases = [
  sk$HH$dtLambdaString,
  sk$HH$dtLambda
];

var sk$HH$dtNonnull = sk.HH$dtNonnull = function HH$dtNonnull() {};

sk$HH$dtNonnull.prototype = Object.create(Object.prototype);

sk$HH$dtNonnull.prototype.__constructor = sk$HH$dtNonnull;

sk$HH$dtNonnull.prototype.__classname = 'HH.Nonnull';

sk$HH$dtNonnull.prototype.$frozen = undefined;

sk$HH$dtNonnull.prototype.__type_switch_id = -1;

sk$HH$dtNonnull.prototype.__copy = function() {};

sk$HH$dtNonnull.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp237 = __cache.get(this);
  if (_tmp237 === undefined)
    {
      var _tmp237 = this.__copy();
      _tmp237.$frozen = true;
      __cache.set(this, _tmp237);
    }
  return _tmp237;
};

sk$HH$dtNonnull.prototype.__init = function(__named_parameters) {};

sk$HH$dtNonnull.prototype.__bases = [
  sk$HH$dtNonnull,
  sk$HH$dtMixed
];

var sk$HH$dtNull = sk.HH$dtNull = function HH$dtNull() {};

sk$HH$dtNull.prototype = Object.create(Object.prototype);

sk$HH$dtNull.prototype.__constructor = sk$HH$dtNull;

sk$HH$dtNull.prototype.__classname = 'HH.Null';

sk$HH$dtNull.prototype.$frozen = true;

sk$HH$dtNull.prototype.__type_switch_id = 104;

sk$HH$dtNull.prototype.__copy = function() {
  return new (sk$HH$dtNull)();
};

sk$HH$dtNull.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp238 = __cache.get(this);
  if (_tmp238 === undefined)
    {
      var _tmp238 = this.__copy();
      _tmp238.$frozen = true;
      __cache.set(this, _tmp238);
    }
  return _tmp238;
};

sk$HH$dtNull.prototype.__init = function(__named_parameters) {};

sk$HH$dtNull.prototype.__bases = [
  sk$HH$dtNull,
  sk$HH$dtMixed
];

var sk$IndexedSequence = sk.IndexedSequence = function IndexedSequence() {};

sk$IndexedSequence.prototype = Object.create(Object.prototype);

sk$IndexedSequence.prototype.__constructor = sk$IndexedSequence;

sk$IndexedSequence.prototype.__classname = 'IndexedSequence';

sk$IndexedSequence.prototype.$frozen = undefined;

sk$IndexedSequence.prototype.__type_switch_id = -1;

sk$IndexedSequence.prototype.__copy = function() {};

sk$IndexedSequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp239 = __cache.get(this);
  if (_tmp239 === undefined)
    {
      var _tmp239 = this.__copy();
      _tmp239.$frozen = true;
      __cache.set(this, _tmp239);
    }
  return _tmp239;
};

sk$IndexedSequence.prototype.__init = function(__named_parameters) {};

sk$IndexedSequence.prototype.concat = function(second) {
  var t$ = this;
  var result = sk$Vector.mcreateFromItems(t$);
  var t$1 = result;
  var t$2 = second;
  t$1.extend(t$2);
  var t$3 = result;
  return t$3;
};

sk$IndexedSequence.prototype.contains = function(second) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = x;
    var t$3 = second;
    return t$2.$eq$eq(t$3);
  }));
  return t$1.isSome();
};

sk$IndexedSequence.prototype.difference = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp2878) => 
  {
    return t$6.add(_tmp2878);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    var t$10 = t$8.contains(t$9);
    if (t$10.$bg().__value)
      {
        var t$11 = result;
        var t$12 = value;
        return t$11.push(t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$IndexedSequence.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$IndexedSequence.prototype.genAll = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = (yield t$.genFind(((x) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = p;
        var t$3 = x;
        var t$4 = (yield t$2(t$3));
      }
      return t$4.$bg();
    })());
  })));
  return t$1.isNone();
});

sk$IndexedSequence.prototype.genAny = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = (yield t$.genFind(t$1));
  return t$2.isSome();
});

sk$IndexedSequence.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = p;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.get(t$4);
    return t$2(t$5);
  })));
  var t$6 = predicates;
  var nextSz = t$6.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$7 = sum;
        return t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var next = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg2907:{
      break$bg2907:{
        while_else$bg2906:{
          do
            {
              jumpBlockOutercontinue$bg2908:{
                continue$bg2908:{
                  {
                    var t$8 = toIndex;
                    var t$9 = nextSz;
                    if (t$8.ult(t$9).__value)
                      {
                        var t$10 = predicates;
                        var t$11 = fromIndex;
                        var t$12;
                        if (t$10.get(t$11).__value)
                          {
                            var t$13 = next;
                            var t$14 = toIndex;
                            var t$15 = this;
                            var t$16 = fromIndex;
                            var t$17 = t$15.get(t$16);
                            t$13.set(t$14, t$17);
                            var t$18 = toIndex;
                            toIndex = t$18.$pl(new sk$Int(1.0, 0.0));
                            t$12 = sk.__.$void;
                          }
                        else
                          t$12 = sk.__.$void;
                        var t$19 = fromIndex;
                        fromIndex = t$19.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg2906;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg2908;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg2907;
      }
      {}
      break jumpBlockOuterbreak$bg2907;
    }
  }
  var t$20 = next;
  return t$20;
});

sk$IndexedSequence.prototype.genFind = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  return (yield t$.genFindTailLoop(t$1, new sk$Int(0.0, 0.0)));
});

sk$IndexedSequence.prototype.genFindTailLoop = skip.asyncToGenerator(function*(p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var item = t$3.get(t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = p;
          var t$10 = index;
          var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindTailLoop(t$9, t$11));
        }
    }
});

sk$IndexedSequence.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var nextInner = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = s;
        var t$3 = this;
        var t$4 = index;
        var t$5 = t$3.get(t$4);
        var awaitable_x = t$2(t$5);
      }
      return (yield awaitable_x);
    })());
  })));
  var t$6 = nextInner;
  return sk$Vector.createFromItems(t$6);
});

sk$IndexedSequence.prototype.groupBy = function(s) {
  var result = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = s;
    var t$2 = value;
    var key = t$1(t$2);
    var t$3 = result;
    var t$4 = key;
    var items = t$3.getOrAdd(t$4, (() => 
    {
      return sk$Vector.mcreate(new sk$Int(0.0, 0.0));
    }));
    var t$5 = items;
    var t$6 = value;
    return t$5.push(t$6);
  }));
  var t$7 = result;
  var t$8 = t$7.map(((_, items1) => 
  {
    var t$9 = items1;
    return t$9;
  }));
  return t$8;
};

sk$IndexedSequence.prototype.indexOf = function(predicate) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = index;
    index = t$2.$pl(new sk$Int(1.0, 0.0));
    var t$3 = x;
    var t$4 = predicate;
    return t$3.$eq$eq(t$4);
  }));
  return t$1.map(((_) => 
  {
    return index;
  }));
};

sk$IndexedSequence.prototype.intersection = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp2970) => 
  {
    return t$6.add(_tmp2970);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    if (t$8.contains(t$9).__value)
      {
        var t$10 = result;
        var t$11 = value;
        return t$10.push(t$11);
      }
    else
      return sk.__.$void;
  }));
  var t$12 = result;
  return t$12;
};

sk$IndexedSequence.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$IndexedSequence.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$IndexedSequence.prototype.maybeGet = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var t$5 = t$3.get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$IndexedSequence.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$IndexedSequence.prototype.partition = function(p) {
  var pass = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var fail = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = pass;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      {
        var t$5 = fail;
        var t$6 = value;
        return t$5.push(t$6);
      }
  }));
  var t$7 = pass;
  var t$8 = t$7;
  var t$9 = fail;
  var t$10 = t$9;
  return new (sk$Tuple2)(t$8, t$10);
};

sk$IndexedSequence.prototype.sample = function(rng, count) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = count;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$2 = sz;
      var t$3 = count;
      if (t$2.$lt$eq(t$3).__value)
        {
          var t$4 = this;
          return t$4.chill();
        }
      else
        {
          var t$5 = count;
          var t$6 = t$5.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$6, new sk$String(('Vector.sample(): Expected count to be nonnegative.')));
          var t$7 = this;
          var t$8 = count;
          var t$9 = t$7.slice(new sk$Int(0.0, 0.0), t$8);
          var sample = sk$Vector.mcreateFromItems(t$9);
          var t$10 = count;
          var t$11 = sz;
          var t$12 = new (sk$Range)(t$10, t$11);
          var $var = t$12.values();
          var var1 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg3023:{
              break$bg3023:{
                dowhile_else$bg3022:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg3024:{
                        dowhile_cond$bg3024:{
                          {
                            var t$13 = $var;
                            var var2 = t$13.next();
                            var index;
                            {
                              jumpBlockOuterjumpLab$bg3042:{
                                jumpLab$bg3042:{
                                  jumpLab$bg3041:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg3041;
                                      
                                      case 205:
                                        index = var2.value;
                                        break jumpLab$bg3042;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var1 = new sk$Bool((false));
                                    break dowhile_cond$bg3024;
                                  }
                                }
                                {
                                  var t$14 = rng;
                                  var t$15 = index;
                                  var t$16 = t$15.$pl(new sk$Int(1.0, 0.0));
                                  var swap = t$14.random(new sk$Int(0.0, 0.0), t$16);
                                  var t$17 = swap;
                                  var t$18 = count;
                                  var t$19;
                                  if (t$17.$lt(t$18).__value)
                                    {
                                      var t$20 = sample;
                                      var t$21 = swap;
                                      var t$22 = this;
                                      var t$23 = index;
                                      var t$24 = t$22.get(t$23);
                                      t$20.set(t$21, t$24);
                                      t$19 = sk.__.$void;
                                    }
                                  else
                                    t$19 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg3042;
                              }
                            }
                            break dowhile_cond$bg3024;
                          }
                        }
                        if (var1.__value)
                          {}
                        else
                          break dowhile_else$bg3022;
                        break jumpBlockOuterdowhile_cond$bg3024;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg3023;
              }
              {}
              break jumpBlockOuterbreak$bg3023;
            }
          }
          var t$25 = sample;
          return t$25;
        }
    }
};

sk$IndexedSequence.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var t$ = this;
  var sz = t$.size();
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$15 = end;
      var t$16 = start;
      var capacity = t$15.$mi(t$16);
      var t$17 = capacity;
      return sk$Vector.fillBy(t$17, ((i) => 
      {
        var t$18 = this;
        var t$19 = i;
        var t$20 = start;
        var t$21 = t$19.$pl(t$20);
        return t$18.get(t$21);
      }));
    }
};

sk$IndexedSequence.prototype.unique = function() {
  var set = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = set;
    var t$2 = value;
    return t$1.set(t$2, sk.__.$void);
  }));
  var t$3 = set;
  var t$4 = t$3.size();
  var result = sk$Vector.mcreate(t$4);
  var t$5 = set;
  t$5.each(((value1, _) => 
  {
    var t$6 = result;
    var t$7 = value1;
    return t$6.push(t$7);
  }));
  var t$8 = result;
  return t$8;
};

sk$IndexedSequence.prototype.values = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  return new (sk$Sequence$dtIndexedSequenceIterator)(t$, new sk$Int(0.0, 0.0), t$2, new sk$Int(1.0, 0.0));
};

sk$IndexedSequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$IndexedSequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$IndexedSequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$IndexedSequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$IndexedSequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$IndexedSequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$IndexedSequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$IndexedSequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$IndexedSequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$IndexedSequence.prototype.__bases = [
  sk$IndexedSequence,
  sk$Sequence
];

var sk$InspectCall = sk.InspectCall = function InspectCall(name, value) {
  this.name = name;
  this.value = value;
};

sk$InspectCall.prototype = Object.create(Object.prototype);

sk$InspectCall.prototype.__constructor = sk$InspectCall;

sk$InspectCall.prototype.__classname = 'InspectCall';

sk$InspectCall.prototype.$frozen = true;

sk$InspectCall.prototype.__type_switch_id = 109;

sk$InspectCall.prototype.__copy = function() {
  return new (sk$InspectCall)(this.name, this.value);
};

sk$InspectCall.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp240 = __cache.get(this);
  if (_tmp240 === undefined)
    {
      var _tmp240 = this.__copy();
      _tmp240.$frozen = true;
      __cache.set(this, _tmp240);
      _tmp240.name = skip.deepFreeze(_tmp240.name, __cache);
      _tmp240.value = skip.deepFreeze(_tmp240.value, __cache);
    }
  return _tmp240;
};

sk$InspectCall.prototype.__init = function(__named_parameters) {};

sk$InspectCall.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  t$1.each(((elem) => 
  {
    var t$2 = stack;
    var t$3 = elem;
    return t$2.push(t$3);
  }));
  var t$4 = n;
  var t$5 = value;
  var t$6 = t$5.size();
  return t$4.$mi(t$6);
};

sk$InspectCall.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = print;
  var t$3 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$2, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$4 = print;
      return t$4(new sk$String(('"type": "call"')));
    }),
    ((_ind1) => 
    {
      var t$5 = print;
      var t$6 = name;
      var t$7 = new (sk$JSON$dtString)(t$6);
      var t$8 = t$7.encode();
      var t$9 = new sk$String(('"name": ')).$pl(t$8);
      return t$5(t$9);
    }),
    ((ind) => 
    {
      var t$10 = print;
      t$10(new sk$String(('"value": ')));
      var t$11 = print;
      var t$12 = value;
      var t$13 = t$12.map(((e) => 
      {
        return ((ind2) => 
        {
          var t$14 = e;
          var t$15 = print;
          var t$16 = ind2;
          return t$14.printJSONImpl(t$15, t$16);
        });
      }));
      var t$17 = ind;
      return sk$Debug$dtprintCommaGroupJSON(t$11, new sk$String(('[')), new sk$String((']')), t$13, t$17);
    })
  ]), t$3);
};

sk$InspectCall.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = print;
  var t$4 = name;
  var t$5 = t$4.$pl(new sk$String(('(')));
  var t$6 = value;
  var t$7 = t$6.map(((e) => 
  {
    return ((ind) => 
    {
      var t$8 = e;
      var t$9 = print;
      var t$10 = ind;
      return t$8.printNon80Column(t$9, t$10);
    });
  }));
  var t$11 = indent;
  return t$2.printCommaGroupNon80Column(t$3, t$5, new sk$String((')')), t$7, t$11);
};

sk$InspectCall.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = name;
  var t$4 = t$3.$pl(new sk$String(('(')));
  var t$5 = new (sk$Doc$dtStr)(t$4);
  var t$6 = value;
  var t$7 = t$6.map(((x) => 
  {
    var t$8 = x;
    return t$8.toDoc();
  }));
  return t$2.printCommaGroup(t$5, new (sk$Doc$dtStr)(new sk$String((')'))), t$7);
};

sk$InspectCall.prototype.__bases = [
  sk$InspectCall,
  sk$Inspect
];

var sk$InspectLiteral = sk.InspectLiteral = function InspectLiteral(value) {
  this.value = value;
};

sk$InspectLiteral.prototype = Object.create(Object.prototype);

sk$InspectLiteral.prototype.__constructor = sk$InspectLiteral;

sk$InspectLiteral.prototype.__classname = 'InspectLiteral';

sk$InspectLiteral.prototype.$frozen = true;

sk$InspectLiteral.prototype.__type_switch_id = 110;

sk$InspectLiteral.prototype.__copy = function() {
  return new (sk$InspectLiteral)(this.value);
};

sk$InspectLiteral.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp241 = __cache.get(this);
  if (_tmp241 === undefined)
    {
      var _tmp241 = this.__copy();
      _tmp241.$frozen = true;
      __cache.set(this, _tmp241);
      _tmp241.value = skip.deepFreeze(_tmp241.value, __cache);
    }
  return _tmp241;
};

sk$InspectLiteral.prototype.__init = function(__named_parameters) {};

sk$InspectLiteral.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = n;
  return t$.$mi(new sk$Int(1.0, 0.0));
};

sk$InspectLiteral.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = print;
  var t$2 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$1, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$3 = print;
      return t$3(new sk$String(('"type": "literal"')));
    }),
    ((_ind1) => 
    {
      var t$4 = print;
      var t$5 = value;
      var t$6 = new (sk$JSON$dtString)(t$5);
      var t$7 = t$6.encode();
      var t$8 = new sk$String(('"value": ')).$pl(t$7);
      return t$4(t$8);
    })
  ]), t$2);
};

sk$InspectLiteral.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = print;
  var t$2 = value;
  return t$1(t$2);
};

sk$InspectLiteral.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  return new (sk$Doc$dtStr)(t$1);
};

sk$InspectLiteral.prototype.__bases = [
  sk$InspectLiteral,
  sk$Inspect
];

var sk$InspectMap = sk.InspectMap = function InspectMap(name, value) {
  this.name = name;
  this.value = value;
};

sk$InspectMap.prototype = Object.create(Object.prototype);

sk$InspectMap.prototype.__constructor = sk$InspectMap;

sk$InspectMap.prototype.__classname = 'InspectMap';

sk$InspectMap.prototype.$frozen = true;

sk$InspectMap.prototype.__type_switch_id = 111;

sk$InspectMap.prototype.__copy = function() {
  return new (sk$InspectMap)(this.name, this.value);
};

sk$InspectMap.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp242 = __cache.get(this);
  if (_tmp242 === undefined)
    {
      var _tmp242 = this.__copy();
      _tmp242.$frozen = true;
      __cache.set(this, _tmp242);
      _tmp242.name = skip.deepFreeze(_tmp242.name, __cache);
      _tmp242.value = skip.deepFreeze(_tmp242.value, __cache);
    }
  return _tmp242;
};

sk$InspectMap.prototype.__init = function(__named_parameters) {};

sk$InspectMap.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  t$1.each(((elem) => 
  {
    var t$2 = stack;
    var t$3 = elem;
    var t$4 = t$3.i0;
    return t$2.push(t$4);
  }));
  var t$5 = value;
  t$5.each(((elem1) => 
  {
    var t$6 = stack;
    var t$7 = elem1;
    var t$8 = t$7.i1;
    return t$6.push(t$8);
  }));
  var t$9 = n;
  var t$10 = value;
  var t$11 = t$10.size();
  return t$9.$mi(t$11);
};

sk$InspectMap.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = print;
  var t$3 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$2, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$4 = print;
      return t$4(new sk$String(('"type": "map"')));
    }),
    ((_ind1) => 
    {
      var t$5 = print;
      var t$6 = name;
      var t$7 = new (sk$JSON$dtString)(t$6);
      var t$8 = t$7.encode();
      var t$9 = new sk$String(('"name": ')).$pl(t$8);
      return t$5(t$9);
    }),
    ((ind) => 
    {
      var t$10 = print;
      t$10(new sk$String(('"value": ')));
      var t$11 = print;
      var t$12 = value;
      var t$13 = t$12.map(((e) => 
      {
        return ((ind2) => 
        {
          var t$14 = e;
          var t$15 = t$14.i0;
          var t$16 = print;
          var t$17 = ind2;
          t$15.printJSONImpl(t$16, t$17);
          var t$18 = print;
          t$18(new sk$String((', ')));
          var t$19 = e;
          var t$20 = t$19.i1;
          var t$21 = print;
          var t$22 = ind2;
          return t$20.printJSONImpl(t$21, t$22);
        });
      }));
      var t$23 = ind;
      return sk$Debug$dtprintCommaGroupJSON(t$11, new sk$String(('[')), new sk$String((']')), t$13, t$23);
    })
  ]), t$3);
};

sk$InspectMap.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = print;
  var t$4 = name;
  var t$5 = t$4.$pl(new sk$String(('[')));
  var t$6 = value;
  var t$7 = t$6.map(((e) => 
  {
    return ((ind) => 
    {
      var t$8 = e;
      var t$9 = t$8.i0;
      var t$10 = print;
      var t$11 = ind;
      t$9.printNon80Column(t$10, t$11);
      var t$12 = print;
      t$12(new sk$String((' => ')));
      var t$13 = e;
      var t$14 = t$13.i1;
      var t$15 = print;
      var t$16 = ind;
      return t$14.printNon80Column(t$15, t$16);
    });
  }));
  var t$17 = indent;
  return t$2.printCommaGroupNon80Column(t$3, t$5, new sk$String((']')), t$7, t$17);
};

sk$InspectMap.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = name;
  var t$4 = t$3.$pl(new sk$String(('[')));
  var t$5 = new (sk$Doc$dtStr)(t$4);
  var t$6 = value;
  var t$7 = t$6.map(((x) => 
  {
    var t$8 = x;
    var t$9 = t$8.i0;
    var t$10 = t$9.toDoc();
    var t$11 = x;
    var t$12 = t$11.i1;
    var t$13 = t$12.toDoc();
    var t$14 = new (sk$Array)([
      t$10,
      new (sk$Doc$dtStr)(new sk$String((' => '))),
      t$13
    ]);
    return sk$Doc$dtConcat.createFromItems(t$14);
  }));
  return t$2.printCommaGroup(t$5, new (sk$Doc$dtStr)(new sk$String((']'))), t$7);
};

sk$InspectMap.prototype.__bases = [
  sk$InspectMap,
  sk$Inspect
];

var sk$InspectObject = sk.InspectObject = function InspectObject(name, value) {
  this.name = name;
  this.value = value;
};

sk$InspectObject.prototype = Object.create(Object.prototype);

sk$InspectObject.prototype.__constructor = sk$InspectObject;

sk$InspectObject.prototype.__classname = 'InspectObject';

sk$InspectObject.prototype.$frozen = true;

sk$InspectObject.prototype.__type_switch_id = 112;

sk$InspectObject.prototype.__copy = function() {
  return new (sk$InspectObject)(this.name, this.value);
};

sk$InspectObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp243 = __cache.get(this);
  if (_tmp243 === undefined)
    {
      var _tmp243 = this.__copy();
      _tmp243.$frozen = true;
      __cache.set(this, _tmp243);
      _tmp243.name = skip.deepFreeze(_tmp243.name, __cache);
      _tmp243.value = skip.deepFreeze(_tmp243.value, __cache);
    }
  return _tmp243;
};

sk$InspectObject.prototype.__init = function(__named_parameters) {};

sk$InspectObject.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  t$1.each(((elem) => 
  {
    var t$2 = stack;
    var t$3 = elem;
    var t$4 = t$3.i1;
    return t$2.push(t$4);
  }));
  var t$5 = n;
  var t$6 = value;
  var t$7 = t$6.size();
  return t$5.$mi(t$7);
};

sk$InspectObject.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = print;
  var t$3 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$2, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$4 = print;
      return t$4(new sk$String(('"type": "object"')));
    }),
    ((_ind1) => 
    {
      var t$5 = print;
      var t$6 = name;
      var t$7 = new (sk$JSON$dtString)(t$6);
      var t$8 = t$7.encode();
      var t$9 = new sk$String(('"name": ')).$pl(t$8);
      return t$5(t$9);
    }),
    ((ind) => 
    {
      var t$10 = print;
      t$10(new sk$String(('"value": ')));
      var t$11 = print;
      var t$12 = value;
      var t$13 = t$12.map(((e) => 
      {
        return ((ind2) => 
        {
          var t$14 = print;
          var t$15 = e;
          var t$16 = t$15.i0;
          var t$17 = new (sk$JSON$dtString)(t$16);
          var t$18 = t$17.encode();
          t$14(t$18);
          var t$19 = print;
          t$19(new sk$String((': ')));
          var t$20 = e;
          var t$21 = t$20.i1;
          var t$22 = print;
          var t$23 = ind2;
          return t$21.printJSONImpl(t$22, t$23);
        });
      }));
      var t$24 = ind;
      return sk$Debug$dtprintCommaGroupJSON(t$11, new sk$String(('{')), new sk$String(('}')), t$13, t$24);
    })
  ]), t$3);
};

sk$InspectObject.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = print;
  var t$4 = name;
  var t$5 = t$4.$pl(new sk$String(('{')));
  var t$6 = value;
  var t$7 = t$6.map(((e) => 
  {
    return ((ind) => 
    {
      var t$8 = print;
      var t$9 = e;
      var t$10 = t$9.i0;
      t$8(t$10);
      var t$11 = print;
      t$11(new sk$String((' => ')));
      var t$12 = e;
      var t$13 = t$12.i1;
      var t$14 = print;
      var t$15 = ind;
      return t$13.printNon80Column(t$14, t$15);
    });
  }));
  var t$16 = indent;
  return t$2.printCommaGroupNon80Column(t$3, t$5, new sk$String(('}')), t$7, t$16);
};

sk$InspectObject.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = name;
  var t$4 = t$3.$pl(new sk$String(('{')));
  var t$5 = new (sk$Doc$dtStr)(t$4);
  var t$6 = value;
  var t$7 = t$6.map(((x) => 
  {
    var t$8 = x;
    var t$9 = t$8.i0;
    var t$10 = new (sk$Doc$dtStr)(t$9);
    var t$11 = x;
    var t$12 = t$11.i1;
    var t$13 = t$12.toDoc();
    var t$14 = new (sk$Array)([
      t$10,
      new (sk$Doc$dtStr)(new sk$String((' => '))),
      t$13
    ]);
    return sk$Doc$dtConcat.createFromItems(t$14);
  }));
  return t$2.printCommaGroup(t$5, new (sk$Doc$dtStr)(new sk$String(('}'))), t$7);
};

sk$InspectObject.prototype.__bases = [
  sk$InspectObject,
  sk$Inspect
];

var sk$InspectSpecial = sk.InspectSpecial = function InspectSpecial(value) {
  this.value = value;
};

sk$InspectSpecial.prototype = Object.create(Object.prototype);

sk$InspectSpecial.prototype.__constructor = sk$InspectSpecial;

sk$InspectSpecial.prototype.__classname = 'InspectSpecial';

sk$InspectSpecial.prototype.$frozen = true;

sk$InspectSpecial.prototype.__type_switch_id = 113;

sk$InspectSpecial.prototype.__copy = function() {
  return new (sk$InspectSpecial)(this.value);
};

sk$InspectSpecial.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp244 = __cache.get(this);
  if (_tmp244 === undefined)
    {
      var _tmp244 = this.__copy();
      _tmp244.$frozen = true;
      __cache.set(this, _tmp244);
      _tmp244.value = skip.deepFreeze(_tmp244.value, __cache);
    }
  return _tmp244;
};

sk$InspectSpecial.prototype.__init = function(__named_parameters) {};

sk$InspectSpecial.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = n;
  return t$.$mi(new sk$Int(1.0, 0.0));
};

sk$InspectSpecial.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = print;
  var t$2 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$1, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$3 = print;
      return t$3(new sk$String(('"type": "special"')));
    }),
    ((_ind1) => 
    {
      var t$4 = print;
      var t$5 = value;
      var t$6 = new sk$String(('<<')).$pl(t$5);
      var t$7 = t$6.$pl(new sk$String(('>>')));
      var t$8 = new (sk$JSON$dtString)(t$7);
      var t$9 = t$8.encode();
      var t$10 = new sk$String(('"value": ')).$pl(t$9);
      return t$4(t$10);
    })
  ]), t$2);
};

sk$InspectSpecial.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = print;
  var t$2 = value;
  var t$3 = new sk$String(('<<')).$pl(t$2);
  var t$4 = t$3.$pl(new sk$String(('>>')));
  return t$1(t$4);
};

sk$InspectSpecial.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  var t$2 = new sk$String(('<<')).$pl(t$1);
  var t$3 = t$2.$pl(new sk$String(('>>')));
  return new (sk$Doc$dtStr)(t$3);
};

sk$InspectSpecial.prototype.__bases = [
  sk$InspectSpecial,
  sk$Inspect
];

var sk$InspectString = sk.InspectString = function InspectString(value) {
  this.value = value;
};

sk$InspectString.prototype = Object.create(Object.prototype);

sk$InspectString.prototype.__constructor = sk$InspectString;

sk$InspectString.prototype.__classname = 'InspectString';

sk$InspectString.prototype.$frozen = true;

sk$InspectString.prototype.__type_switch_id = 114;

sk$InspectString.prototype.__copy = function() {
  return new (sk$InspectString)(this.value);
};

sk$InspectString.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp245 = __cache.get(this);
  if (_tmp245 === undefined)
    {
      var _tmp245 = this.__copy();
      _tmp245.$frozen = true;
      __cache.set(this, _tmp245);
      _tmp245.value = skip.deepFreeze(_tmp245.value, __cache);
    }
  return _tmp245;
};

sk$InspectString.prototype.__init = function(__named_parameters) {};

sk$InspectString.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = n;
  return t$.$mi(new sk$Int(1.0, 0.0));
};

sk$InspectString.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = print;
  var t$2 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$1, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$3 = print;
      return t$3(new sk$String(('"type": "string"')));
    }),
    ((_ind1) => 
    {
      var t$4 = print;
      var t$5 = value;
      var t$6 = new (sk$JSON$dtString)(t$5);
      var t$7 = t$6.encode();
      var t$8 = new sk$String(('"value": ')).$pl(t$7);
      return t$4(t$8);
    })
  ]), t$2);
};

sk$InspectString.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = print;
  var t$2 = value;
  var t$3 = new (sk$JSON$dtString)(t$2);
  var t$4 = t$3.encode();
  return t$1(t$4);
};

sk$InspectString.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  var t$2 = new (sk$JSON$dtString)(t$1);
  var t$3 = t$2.encode();
  return new (sk$Doc$dtStr)(t$3);
};

sk$InspectString.prototype.__bases = [
  sk$InspectString,
  sk$Inspect
];

var sk$InspectVector = sk.InspectVector = function InspectVector(name, value) {
  this.name = name;
  this.value = value;
};

sk$InspectVector.prototype = Object.create(Object.prototype);

sk$InspectVector.prototype.__constructor = sk$InspectVector;

sk$InspectVector.prototype.__classname = 'InspectVector';

sk$InspectVector.prototype.$frozen = true;

sk$InspectVector.prototype.__type_switch_id = 115;

sk$InspectVector.prototype.__copy = function() {
  return new (sk$InspectVector)(this.name, this.value);
};

sk$InspectVector.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp246 = __cache.get(this);
  if (_tmp246 === undefined)
    {
      var _tmp246 = this.__copy();
      _tmp246.$frozen = true;
      __cache.set(this, _tmp246);
      _tmp246.name = skip.deepFreeze(_tmp246.name, __cache);
      _tmp246.value = skip.deepFreeze(_tmp246.value, __cache);
    }
  return _tmp246;
};

sk$InspectVector.prototype.__init = function(__named_parameters) {};

sk$InspectVector.prototype.isInspectSizeGreaterThanIter = function(n, stack) {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  t$1.each(((elem) => 
  {
    var t$2 = stack;
    var t$3 = elem;
    return t$2.push(t$3);
  }));
  var t$4 = n;
  var t$5 = value;
  var t$6 = t$5.size();
  return t$4.$mi(t$6);
};

sk$InspectVector.prototype.printJSONImpl = function(print, indent) {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = print;
  var t$3 = indent;
  return sk$Debug$dtprintCommaGroupJSON(t$2, new sk$String(('{')), new sk$String(('}')), new (sk$Array)([
    ((_ind) => 
    {
      var t$4 = print;
      return t$4(new sk$String(('"type": "vector"')));
    }),
    ((_ind1) => 
    {
      var t$5 = print;
      var t$6 = name;
      var t$7 = new (sk$JSON$dtString)(t$6);
      var t$8 = t$7.encode();
      var t$9 = new sk$String(('"name": ')).$pl(t$8);
      return t$5(t$9);
    }),
    ((ind) => 
    {
      var t$10 = print;
      t$10(new sk$String(('"value": ')));
      var t$11 = print;
      var t$12 = value;
      var t$13 = t$12.map(((e) => 
      {
        return ((ind2) => 
        {
          var t$14 = e;
          var t$15 = print;
          var t$16 = ind2;
          return t$14.printJSONImpl(t$15, t$16);
        });
      }));
      var t$17 = ind;
      return sk$Debug$dtprintCommaGroupJSON(t$11, new sk$String(('[')), new sk$String((']')), t$13, t$17);
    })
  ]), t$3);
};

sk$InspectVector.prototype.printNon80Column = function(print, indent) {
  if (indent === undefined)
    indent = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = print;
  var t$4 = name;
  var t$5 = t$4.$pl(new sk$String(('[')));
  var t$6 = value;
  var t$7 = t$6.map(((e) => 
  {
    return ((ind) => 
    {
      var t$8 = e;
      var t$9 = print;
      var t$10 = ind;
      return t$8.printNon80Column(t$9, t$10);
    });
  }));
  var t$11 = indent;
  return t$2.printCommaGroupNon80Column(t$3, t$5, new sk$String((']')), t$7, t$11);
};

sk$InspectVector.prototype.toDoc = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var name = t$1.name;
  var t$2 = this;
  var t$3 = name;
  var t$4 = t$3.$pl(new sk$String(('[')));
  var t$5 = new (sk$Doc$dtStr)(t$4);
  var t$6 = value;
  var t$7 = t$6.map(((x) => 
  {
    var t$8 = x;
    return t$8.toDoc();
  }));
  return t$2.printCommaGroup(t$5, new (sk$Doc$dtStr)(new sk$String((']'))), t$7);
};

sk$InspectVector.prototype.__bases = [
  sk$InspectVector,
  sk$Inspect
];

var sk$IntMetaClass = sk.IntMetaClass = function IntMetaClass() {};

sk$IntMetaClass.prototype = Object.create(Object.prototype);

sk$IntMetaClass.prototype.__constructor = sk$IntMetaClass;

sk$IntMetaClass.prototype.__classname = 'IntMetaClass';

sk$IntMetaClass.prototype.$frozen = true;

sk$IntMetaClass.prototype.__type_switch_id = 180;

sk$IntMetaClass.prototype.__copy = function() {
  return new (sk$IntMetaClass)();
};

sk$IntMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp247 = __cache.get(this);
  if (_tmp247 === undefined)
    {
      var _tmp247 = this.__copy();
      _tmp247.$frozen = true;
      __cache.set(this, _tmp247);
    }
  return _tmp247;
};

sk$IntMetaClass.prototype.__init = function(__named_parameters) {};

sk$IntMetaClass.prototype.description = function() {
  return new sk$String(('Int')).toString();
};

sk$IntMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  return t$.readInt();
};

sk$IntMetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var t$1 = value;
  return t$.writeInt(t$1);
};

sk$IntMetaClass.prototype.__bases = [
  sk$IntMetaClass,
  sk$MetaClass
];

var sk$InvalidCast = sk.InvalidCast = function InvalidCast(tOriginal, tExpected) {
  this.tOriginal = tOriginal;
  this.tExpected = tExpected;
};

sk$InvalidCast.prototype = Object.create(Object.prototype);

sk$InvalidCast.prototype.__constructor = sk$InvalidCast;

sk$InvalidCast.prototype.__classname = 'InvalidCast';

sk$InvalidCast.prototype.$frozen = true;

sk$InvalidCast.prototype.__type_switch_id = 69;

sk$InvalidCast.prototype.__copy = function() {
  return new (sk$InvalidCast)(this.tOriginal, this.tExpected);
};

sk$InvalidCast.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp248 = __cache.get(this);
  if (_tmp248 === undefined)
    {
      var _tmp248 = this.__copy();
      _tmp248.$frozen = true;
      __cache.set(this, _tmp248);
      _tmp248.tOriginal = skip.deepFreeze(_tmp248.tOriginal, __cache);
      _tmp248.tExpected = skip.deepFreeze(_tmp248.tExpected, __cache);
    }
  return _tmp248;
};

sk$InvalidCast.prototype.__init = function(__named_parameters) {};

sk$InvalidCast.prototype.getMessage = function() {
  var t$ = new sk$String(('Failed to cast object of type ')).toString();
  var t$1 = this;
  var t$2 = t$1.tOriginal;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' to type ')).toString();
  var t$5 = this;
  var t$6 = t$5.tExpected;
  var t$7 = t$6.toString();
  var t$8 = new sk$String((' in \'as\' expression')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7,
    t$8
  ]));
};

sk$InvalidCast.prototype.__bases = [
  sk$InvalidCast,
  sk$Exception
];

var sk$InvalidIntegralCastError = sk.InvalidIntegralCastError = function InvalidIntegralCastError(val, className) {
  this.val = val;
  this.className = className;
};

sk$InvalidIntegralCastError.prototype = Object.create(Object.prototype);

sk$InvalidIntegralCastError.prototype.__constructor = sk$InvalidIntegralCastError;

sk$InvalidIntegralCastError.prototype.__classname = 'InvalidIntegralCastError';

sk$InvalidIntegralCastError.prototype.$frozen = true;

sk$InvalidIntegralCastError.prototype.__type_switch_id = 70;

sk$InvalidIntegralCastError.prototype.__copy = function() {
  return new (sk$InvalidIntegralCastError)(this.val, this.className);
};

sk$InvalidIntegralCastError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp249 = __cache.get(this);
  if (_tmp249 === undefined)
    {
      var _tmp249 = this.__copy();
      _tmp249.$frozen = true;
      __cache.set(this, _tmp249);
      _tmp249.val = skip.deepFreeze(_tmp249.val, __cache);
      _tmp249.className = skip.deepFreeze(_tmp249.className, __cache);
    }
  return _tmp249;
};

sk$InvalidIntegralCastError.prototype.__init = function(__named_parameters) {};

sk$InvalidIntegralCastError.prototype.getMessage = function() {
  var t$ = new sk$String(('InvalidIntegralCastError: Tried to cast ')).toString();
  var t$1 = this;
  var t$2 = t$1.val;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' to ')).toString();
  var t$5 = this;
  var t$6 = t$5.className;
  var t$7 = t$6.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7
  ]));
};

sk$InvalidIntegralCastError.prototype.__bases = [
  sk$InvalidIntegralCastError,
  sk$Exception
];

var sk$InvalidRegex = sk.InvalidRegex = function InvalidRegex(message) {
  this.message = message;
};

sk$InvalidRegex.prototype = Object.create(Object.prototype);

sk$InvalidRegex.prototype.__constructor = sk$InvalidRegex;

sk$InvalidRegex.prototype.__classname = 'InvalidRegex';

sk$InvalidRegex.prototype.$frozen = true;

sk$InvalidRegex.prototype.__type_switch_id = 71;

sk$InvalidRegex.prototype.__copy = function() {
  return new (sk$InvalidRegex)(this.message);
};

sk$InvalidRegex.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp250 = __cache.get(this);
  if (_tmp250 === undefined)
    {
      var _tmp250 = this.__copy();
      _tmp250.$frozen = true;
      __cache.set(this, _tmp250);
      _tmp250.message = skip.deepFreeze(_tmp250.message, __cache);
    }
  return _tmp250;
};

sk$InvalidRegex.prototype.__init = function(__named_parameters) {};

sk$InvalidRegex.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.message;
  return new sk$String(('Invalid Regex: ')).$pl(t$1);
};

sk$InvalidRegex.prototype.__bases = [
  sk$InvalidRegex,
  sk$Exception
];

var sk$Invalid_utf8_char = sk.Invalid_utf8_char = function Invalid_utf8_char() {};

sk$Invalid_utf8_char.prototype = Object.create(Object.prototype);

sk$Invalid_utf8_char.prototype.__constructor = sk$Invalid_utf8_char;

sk$Invalid_utf8_char.prototype.__classname = 'Invalid_utf8_char';

sk$Invalid_utf8_char.prototype.$frozen = true;

sk$Invalid_utf8_char.prototype.__type_switch_id = 72;

sk$Invalid_utf8_char.prototype.__copy = function() {
  return new (sk$Invalid_utf8_char)();
};

sk$Invalid_utf8_char.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp251 = __cache.get(this);
  if (_tmp251 === undefined)
    {
      var _tmp251 = this.__copy();
      _tmp251.$frozen = true;
      __cache.set(this, _tmp251);
    }
  return _tmp251;
};

sk$Invalid_utf8_char.prototype.__init = function(__named_parameters) {};

sk$Invalid_utf8_char.prototype.getMessage = function() {
  return new sk$String(('Exception ')).$pl(new sk$String(('Invalid_utf8_char')));
};

sk$Invalid_utf8_char.prototype.__bases = [
  sk$Invalid_utf8_char,
  sk$Exception
];

var sk$InvariantViolation = sk.InvariantViolation = function InvariantViolation(msg) {
  this.msg = msg;
};

sk$InvariantViolation.prototype = Object.create(Object.prototype);

sk$InvariantViolation.prototype.__constructor = sk$InvariantViolation;

sk$InvariantViolation.prototype.__classname = 'InvariantViolation';

sk$InvariantViolation.prototype.$frozen = true;

sk$InvariantViolation.prototype.__type_switch_id = 73;

sk$InvariantViolation.prototype.__copy = function() {
  return new (sk$InvariantViolation)(this.msg);
};

sk$InvariantViolation.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp252 = __cache.get(this);
  if (_tmp252 === undefined)
    {
      var _tmp252 = this.__copy();
      _tmp252.$frozen = true;
      __cache.set(this, _tmp252);
      _tmp252.msg = skip.deepFreeze(_tmp252.msg, __cache);
    }
  return _tmp252;
};

sk$InvariantViolation.prototype.__init = function(__named_parameters) {};

sk$InvariantViolation.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.msg;
  return new sk$String(('Invariant violation: ')).$pl(t$1);
};

sk$InvariantViolation.prototype.__bases = [
  sk$InvariantViolation,
  sk$Exception
];

var sk$Iterator$dtDropIterator = sk.Iterator$dtDropIterator = function Iterator$dtDropIterator(base, n) {
  this.base = base;
  this.n = n;
};

sk$Iterator$dtDropIterator.prototype = Object.create(Object.prototype);

sk$Iterator$dtDropIterator.prototype.__constructor = sk$Iterator$dtDropIterator;

sk$Iterator$dtDropIterator.prototype.__classname = 'Iterator.DropIterator';

sk$Iterator$dtDropIterator.prototype.$frozen = false;

sk$Iterator$dtDropIterator.prototype.__type_switch_id = 130;

sk$Iterator$dtDropIterator.prototype.__copy = function() {
  return new (sk$Iterator$dtDropIterator)(this.base, this.n);
};

sk$Iterator$dtDropIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp253 = __cache.get(this);
  if (_tmp253 === undefined)
    {
      var _tmp253 = this.__copy();
      _tmp253.$frozen = true;
      __cache.set(this, _tmp253);
      _tmp253.base = skip.deepFreeze(_tmp253.base, __cache);
      _tmp253.n = skip.deepFreeze(_tmp253.n, __cache);
    }
  return _tmp253;
};

sk$Iterator$dtDropIterator.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtDropIterator.prototype.next = function() {
  {
    jumpBlockOuterbreak$bg4461:{
      break$bg4461:{
        while_else$bg4460:{
          do
            {
              jumpBlockOutercontinue$bg4462:{
                continue$bg4462:{
                  {
                    var t$ = this;
                    var t$1 = t$.n;
                    if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
                      {
                        var $var = this;
                        var t$2 = $var;
                        var t$3 = this;
                        var t$4 = t$3.base;
                        var t$5;
                        var var1 = t$4.next();
                        var _;
                        {
                          jumpBlockOuterjumpLab$bg4478:{
                            jumpLab$bg4478:{
                              jumpLab$bg4477:{
                                switch (var1.__type_switch_id) {
                                  case 205:
                                    _ = var1.value;
                                    break jumpLab$bg4477;
                                  
                                  case 204:
                                    break jumpLab$bg4478;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var t$6 = this;
                                var t$7 = t$6.n;
                                t$5 = t$7.$mi(new sk$Int(1.0, 0.0));
                              }
                              break jumpBlockOuterjumpLab$bg4478;
                            }
                            t$5 = new sk$Int(0.0, 0.0);
                            break jumpBlockOuterjumpLab$bg4478;
                          }
                        }
                        var t$8 = t$2;
                        t$8.n = t$5;
                      }
                    else
                      break while_else$bg4460;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg4462;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg4461;
      }
      {}
      break jumpBlockOuterbreak$bg4461;
    }
  }
  var t$9 = this;
  var t$10 = t$9.base;
  return t$10.next();
};

sk$Iterator$dtDropIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.base;
  var t$2 = t$1.sizeHint();
  return t$2.map(((sizeHint) => 
  {
    var t$3 = sizeHint;
    var t$4 = this;
    var t$5 = t$4.n;
    var t$6 = t$3.$mi(t$5);
    return sk$max(new sk$Int(0.0, 0.0), t$6);
  }));
};

sk$Iterator$dtDropIterator.prototype.__bases = [
  sk$Iterator$dtDropIterator,
  sk$Iterator
];

var sk$Iterator$dtGenerator = sk.Iterator$dtGenerator = function Iterator$dtGenerator() {};

sk$Iterator$dtGenerator.prototype = Object.create(Object.prototype);

sk$Iterator$dtGenerator.prototype.__constructor = sk$Iterator$dtGenerator;

sk$Iterator$dtGenerator.prototype.__classname = 'Iterator.Generator';

sk$Iterator$dtGenerator.prototype.$frozen = true;

sk$Iterator$dtGenerator.prototype.__type_switch_id = 131;

sk$Iterator$dtGenerator.prototype.__copy = function() {
  return new (sk$Iterator$dtGenerator)();
};

sk$Iterator$dtGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp254 = __cache.get(this);
  if (_tmp254 === undefined)
    {
      var _tmp254 = this.__copy();
      _tmp254.$frozen = true;
      __cache.set(this, _tmp254);
    }
  return _tmp254;
};

sk$Iterator$dtGenerator.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtGenerator.prototype.next = function() {
  return singleton$None;
};

sk$Iterator$dtGenerator.prototype.__bases = [
  sk$Iterator$dtGenerator,
  sk$Iterator,
  sk$Iterator$dtGeneratorBase
];

var sk$Iterator$dtMapIterator = sk.Iterator$dtMapIterator = function Iterator$dtMapIterator(base, f) {
  this.base = base;
  this.f = f;
};

sk$Iterator$dtMapIterator.prototype = Object.create(Object.prototype);

sk$Iterator$dtMapIterator.prototype.__constructor = sk$Iterator$dtMapIterator;

sk$Iterator$dtMapIterator.prototype.__classname = 'Iterator.MapIterator';

sk$Iterator$dtMapIterator.prototype.$frozen = false;

sk$Iterator$dtMapIterator.prototype.__type_switch_id = 132;

sk$Iterator$dtMapIterator.prototype.__copy = function() {
  return new (sk$Iterator$dtMapIterator)(this.base, this.f);
};

sk$Iterator$dtMapIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp255 = __cache.get(this);
  if (_tmp255 === undefined)
    {
      var _tmp255 = this.__copy();
      _tmp255.$frozen = true;
      __cache.set(this, _tmp255);
      _tmp255.base = skip.deepFreeze(_tmp255.base, __cache);
      _tmp255.f = skip.deepFreeze(_tmp255.f, __cache);
    }
  return _tmp255;
};

sk$Iterator$dtMapIterator.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtMapIterator.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.base;
  var $var = t$1.next();
  var x;
  {
    jumpBlockOuterjumpLab$bg4499:{
      jumpLab$bg4499:{
        jumpLab$bg4498:{
          switch ($var.__type_switch_id) {
            case 205:
              x = $var.value;
              break jumpLab$bg4498;
            
            default:
              break jumpLab$bg4499;

          }
        }
        {
          var t$2 = this;
          var t$3 = t$2.f;
          var t$4 = x;
          var t$5 = t$3(t$4);
          return new (sk$Some)(t$5);
        }
      }
      return singleton$None;
    }
  }
};

sk$Iterator$dtMapIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.base;
  return t$1.sizeHint();
};

sk$Iterator$dtMapIterator.prototype.__bases = [
  sk$Iterator$dtMapIterator,
  sk$Iterator
];

var sk$Iterator$dtTakeIterator = sk.Iterator$dtTakeIterator = function Iterator$dtTakeIterator(base, n) {
  this.base = base;
  this.n = n;
};

sk$Iterator$dtTakeIterator.prototype = Object.create(Object.prototype);

sk$Iterator$dtTakeIterator.prototype.__constructor = sk$Iterator$dtTakeIterator;

sk$Iterator$dtTakeIterator.prototype.__classname = 'Iterator.TakeIterator';

sk$Iterator$dtTakeIterator.prototype.$frozen = false;

sk$Iterator$dtTakeIterator.prototype.__type_switch_id = 133;

sk$Iterator$dtTakeIterator.prototype.__copy = function() {
  return new (sk$Iterator$dtTakeIterator)(this.base, this.n);
};

sk$Iterator$dtTakeIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp256 = __cache.get(this);
  if (_tmp256 === undefined)
    {
      var _tmp256 = this.__copy();
      _tmp256.$frozen = true;
      __cache.set(this, _tmp256);
      _tmp256.base = skip.deepFreeze(_tmp256.base, __cache);
      _tmp256.n = skip.deepFreeze(_tmp256.n, __cache);
    }
  return _tmp256;
};

sk$Iterator$dtTakeIterator.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtTakeIterator.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.n;
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var $var = this;
      var t$2 = $var;
      var t$3 = this;
      var t$4 = t$3.n;
      var t$5 = t$2;
      t$5.n = t$4.$mi(new sk$Int(1.0, 0.0));
      var t$6 = this;
      var t$7 = t$6.base;
      var v = t$7.next();
      var t$8 = v;
      if (t$8.isNone().__value)
        {
          var var1 = this;
          var t$9 = var1;
          var t$10 = t$9;
          t$10.n = new sk$Int(0.0, 0.0);
        }
      else
        {}
      return v;
    }
  else
    return singleton$None;
};

sk$Iterator$dtTakeIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.base;
  var t$2 = t$1.sizeHint();
  return t$2.map(((sizeHint) => 
  {
    var t$3 = sizeHint;
    var t$4 = this;
    var t$5 = t$4.n;
    var t$6 = t$3.$mi(t$5);
    return sk$min(new sk$Int(0.0, 0.0), t$6);
  }));
};

sk$Iterator$dtTakeIterator.prototype.__bases = [
  sk$Iterator$dtTakeIterator,
  sk$Iterator
];

var sk$Iterator$dtZipIterator = sk.Iterator$dtZipIterator = function Iterator$dtZipIterator(left, right) {
  this.left = left;
  this.right = right;
};

sk$Iterator$dtZipIterator.prototype = Object.create(Object.prototype);

sk$Iterator$dtZipIterator.prototype.__constructor = sk$Iterator$dtZipIterator;

sk$Iterator$dtZipIterator.prototype.__classname = 'Iterator.ZipIterator';

sk$Iterator$dtZipIterator.prototype.$frozen = false;

sk$Iterator$dtZipIterator.prototype.__type_switch_id = 134;

sk$Iterator$dtZipIterator.prototype.__copy = function() {
  return new (sk$Iterator$dtZipIterator)(this.left, this.right);
};

sk$Iterator$dtZipIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp257 = __cache.get(this);
  if (_tmp257 === undefined)
    {
      var _tmp257 = this.__copy();
      _tmp257.$frozen = true;
      __cache.set(this, _tmp257);
      _tmp257.left = skip.deepFreeze(_tmp257.left, __cache);
      _tmp257.right = skip.deepFreeze(_tmp257.right, __cache);
    }
  return _tmp257;
};

sk$Iterator$dtZipIterator.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtZipIterator.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = t$1.next();
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = t$4.next();
  var $var = new (sk$Tuple2)(t$2, t$5);
  var y;
  var x;
  {
    jumpBlockOuterjumpLab$bg4539:{
      jumpLab$bg4539:{
        jumpLab$bg4538:{
          jumpLab$bg4540:{
            jumpLab$bg4541:{
              switch ($var.__type_switch_id) {
                case 392:
                  break jumpLab$bg4541;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch ($var.i0.__type_switch_id) {
              case 205:
                break jumpLab$bg4540;
              
              default:
                break jumpLab$bg4539;

            }
          }
          switch ($var.i1.__type_switch_id) {
            case 205:
              x = $var.i0.value;
              y = $var.i1.value;
              break jumpLab$bg4538;
            
            default:
              break jumpLab$bg4539;

          }
        }
        {
          var t$6 = x;
          var t$7 = y;
          var t$8 = new (sk$Tuple2)(t$6, t$7);
          var t$9 = t$8;
          return new (sk$Some)(t$9);
        }
      }
      return singleton$None;
    }
  }
};

sk$Iterator$dtZipIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = t$1.sizeHint();
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = t$4.sizeHint();
  var $var = new (sk$Tuple2)(t$2, t$5);
  var right;
  var left;
  {
    jumpBlockOuterjumpLab$bg4556:{
      jumpLab$bg4556:{
        jumpLab$bg4555:{
          jumpLab$bg4557:{
            jumpLab$bg4558:{
              switch ($var.__type_switch_id) {
                case 392:
                  break jumpLab$bg4558;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch ($var.i0.__type_switch_id) {
              case 205:
                break jumpLab$bg4557;
              
              default:
                break jumpLab$bg4556;

            }
          }
          switch ($var.i1.__type_switch_id) {
            case 205:
              left = $var.i0.value;
              right = $var.i1.value;
              break jumpLab$bg4555;
            
            default:
              break jumpLab$bg4556;

          }
        }
        {
          var t$6 = left;
          var t$7 = right;
          var t$8 = sk$min(t$6, t$7);
          return new (sk$Some)(t$8);
        }
      }
      return singleton$None;
    }
  }
};

sk$Iterator$dtZipIterator.prototype.__bases = [
  sk$Iterator$dtZipIterator,
  sk$Iterator
];

var sk$Iterator$dtZipWithIterator = sk.Iterator$dtZipWithIterator = function Iterator$dtZipWithIterator(left, right, f) {
  this.left = left;
  this.right = right;
  this.f = f;
};

sk$Iterator$dtZipWithIterator.prototype = Object.create(Object.prototype);

sk$Iterator$dtZipWithIterator.prototype.__constructor = sk$Iterator$dtZipWithIterator;

sk$Iterator$dtZipWithIterator.prototype.__classname = 'Iterator.ZipWithIterator';

sk$Iterator$dtZipWithIterator.prototype.$frozen = false;

sk$Iterator$dtZipWithIterator.prototype.__type_switch_id = 135;

sk$Iterator$dtZipWithIterator.prototype.__copy = function() {
  return new (sk$Iterator$dtZipWithIterator)(this.left, this.right, this.f);
};

sk$Iterator$dtZipWithIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp258 = __cache.get(this);
  if (_tmp258 === undefined)
    {
      var _tmp258 = this.__copy();
      _tmp258.$frozen = true;
      __cache.set(this, _tmp258);
      _tmp258.left = skip.deepFreeze(_tmp258.left, __cache);
      _tmp258.right = skip.deepFreeze(_tmp258.right, __cache);
      _tmp258.f = skip.deepFreeze(_tmp258.f, __cache);
    }
  return _tmp258;
};

sk$Iterator$dtZipWithIterator.prototype.__init = function(__named_parameters) {};

sk$Iterator$dtZipWithIterator.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = t$1.next();
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = t$4.next();
  var $var = new (sk$Tuple2)(t$2, t$5);
  var l;
  var r;
  {
    jumpBlockOuterjumpLab$bg4575:{
      jumpLab$bg4575:{
        jumpLab$bg4574:{
          jumpLab$bg4576:{
            jumpLab$bg4577:{
              switch ($var.__type_switch_id) {
                case 392:
                  break jumpLab$bg4577;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch ($var.i0.__type_switch_id) {
              case 205:
                break jumpLab$bg4576;
              
              default:
                break jumpLab$bg4575;

            }
          }
          switch ($var.i1.__type_switch_id) {
            case 205:
              l = $var.i0.value;
              r = $var.i1.value;
              break jumpLab$bg4574;
            
            default:
              break jumpLab$bg4575;

          }
        }
        {
          var t$6 = this;
          var t$7 = t$6.f;
          var t$8 = l;
          var t$9 = r;
          var t$10 = t$7(t$8, t$9);
          return new (sk$Some)(t$10);
        }
      }
      return singleton$None;
    }
  }
};

sk$Iterator$dtZipWithIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = t$1.sizeHint();
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = t$4.sizeHint();
  var $var = new (sk$Tuple2)(t$2, t$5);
  var right;
  var left;
  {
    jumpBlockOuterjumpLab$bg4592:{
      jumpLab$bg4592:{
        jumpLab$bg4591:{
          jumpLab$bg4593:{
            jumpLab$bg4594:{
              switch ($var.__type_switch_id) {
                case 392:
                  break jumpLab$bg4594;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch ($var.i0.__type_switch_id) {
              case 205:
                break jumpLab$bg4593;
              
              default:
                break jumpLab$bg4592;

            }
          }
          switch ($var.i1.__type_switch_id) {
            case 205:
              left = $var.i0.value;
              right = $var.i1.value;
              break jumpLab$bg4591;
            
            default:
              break jumpLab$bg4592;

          }
        }
        {
          var t$6 = left;
          var t$7 = right;
          var t$8 = sk$min(t$6, t$7);
          return new (sk$Some)(t$8);
        }
      }
      return singleton$None;
    }
  }
};

sk$Iterator$dtZipWithIterator.prototype.__bases = [
  sk$Iterator$dtZipWithIterator,
  sk$Iterator
];

var sk$JSON$dtArray = sk.JSON$dtArray = function JSON$dtArray(value) {
  this.value = value;
};

sk$JSON$dtArray.prototype = Object.create(Object.prototype);

sk$JSON$dtArray.prototype.__constructor = sk$JSON$dtArray;

sk$JSON$dtArray.prototype.__classname = 'JSON.Array';

sk$JSON$dtArray.prototype.$frozen = true;

sk$JSON$dtArray.prototype.__type_switch_id = 159;

sk$JSON$dtArray.prototype.__copy = function() {
  return new (sk$JSON$dtArray)(this.value);
};

sk$JSON$dtArray.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp259 = __cache.get(this);
  if (_tmp259 === undefined)
    {
      var _tmp259 = this.__copy();
      _tmp259.$frozen = true;
      __cache.set(this, _tmp259);
      _tmp259.value = skip.deepFreeze(_tmp259.value, __cache);
    }
  return _tmp259;
};

sk$JSON$dtArray.prototype.__init = function(__named_parameters) {};

sk$JSON$dtArray.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Vector);
  return new (sk$JSON$dtArray)(t$2);
};

sk$JSON$dtArray.createFromIterator = function(items) {
  var vector = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = items;
  var t$1 = t$;
  var t$2 = vector;
  var t$3 = t$2;
  t$1.each(((_tmp4605) => 
  {
    return t$3.push(_tmp4605);
  }));
  var t$4 = skip.deepFreeze(vector, new Map());
  return new (sk$JSON$dtArray)(t$4);
};

sk$JSON$dtArray.prototype.expectArray = function() {
  return this;
};

sk$JSON$dtArray.prototype.expectBool = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Bool'))));
};

sk$JSON$dtArray.prototype.expectFloat = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Float'))));
};

sk$JSON$dtArray.prototype.expectInt = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Int'))));
};

sk$JSON$dtArray.prototype.expectObject = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Object'))));
};

sk$JSON$dtArray.prototype.expectString = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('String'))));
};

sk$JSON$dtArray.prototype.set = function(name, value) {
  skip.throwException(sk, singleton$JSON$dtJSONSetNonObjectError);
};

sk$JSON$dtArray.prototype.writeToStream = function(write, space, depth) {
  if (space === undefined)
    space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (depth === undefined)
    depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var t$1 = t$.value;
  var t$2 = t$1.size();
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = write;
      return t$3(new sk$String(('[]')));
    }
  else
    {
      var t$4 = write;
      t$4(new sk$String(('[')));
      var is_first = new (sk$Ref)(new sk$Bool((true)));
      var t$5 = depth;
      var nd = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$6 = this;
      var t$7 = t$6.value;
      t$7.each(((value) => 
      {
        var t$8 = is_first;
        if (t$8.value.__value)
          {
            var $var = is_first;
            var t$9 = $var;
            var t$10 = t$9;
            t$10.value = new sk$Bool((false));
          }
        else
          {
            var t$11 = write;
            t$11(new sk$String((', ')));
          }
        var t$12 = space;
        if (t$12.$gt$eq(new sk$Int(0.0, 0.0)).__value)
          {
            var t$13 = write;
            t$13(new sk$String(('\n')));
            var t$14 = write;
            var t$15 = space;
            var t$16 = nd;
            var t$17 = t$15.$ti(t$16);
            sk$JSON$dtindent(t$14, t$17);
          }
        else
          {}
        var t$18 = value;
        var t$19 = write;
        var t$20 = space;
        var t$21 = nd;
        return t$18.writeToStream(t$19, t$20, t$21);
      }));
      var t$22 = space;
      if (t$22.$gt$eq(new sk$Int(0.0, 0.0)).__value)
        {
          var t$23 = write;
          t$23(new sk$String(('\n')));
          var t$24 = write;
          var t$25 = space;
          var t$26 = depth;
          var t$27 = t$25.$ti(t$26);
          sk$JSON$dtindent(t$24, t$27);
        }
      else
        {}
      var t$28 = write;
      return t$28(new sk$String((']')));
    }
};

sk$JSON$dtArray.prototype.__bases = [
  sk$JSON$dtArray,
  sk$JSON$dtValue
];

var sk$JSON$dtBool = sk.JSON$dtBool = function JSON$dtBool(value) {
  this.value = value;
};

sk$JSON$dtBool.prototype = Object.create(Object.prototype);

sk$JSON$dtBool.prototype.__constructor = sk$JSON$dtBool;

sk$JSON$dtBool.prototype.__classname = 'JSON.Bool';

sk$JSON$dtBool.prototype.$frozen = true;

sk$JSON$dtBool.prototype.__type_switch_id = 160;

sk$JSON$dtBool.prototype.__copy = function() {
  return new (sk$JSON$dtBool)(this.value);
};

sk$JSON$dtBool.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp260 = __cache.get(this);
  if (_tmp260 === undefined)
    {
      var _tmp260 = this.__copy();
      _tmp260.$frozen = true;
      __cache.set(this, _tmp260);
      _tmp260.value = skip.deepFreeze(_tmp260.value, __cache);
    }
  return _tmp260;
};

sk$JSON$dtBool.prototype.__init = function(__named_parameters) {};

sk$JSON$dtBool.prototype.expectArray = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Array'))));
};

sk$JSON$dtBool.prototype.expectBool = function() {
  var t$ = this;
  return t$.value;
};

sk$JSON$dtBool.prototype.expectFloat = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Float'))));
};

sk$JSON$dtBool.prototype.expectInt = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Int'))));
};

sk$JSON$dtBool.prototype.expectObject = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Object'))));
};

sk$JSON$dtBool.prototype.expectString = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('String'))));
};

sk$JSON$dtBool.prototype.set = function(name, value) {
  skip.throwException(sk, singleton$JSON$dtJSONSetNonObjectError);
};

sk$JSON$dtBool.prototype.writeToStream = function(write, _space, _depth) {
  if (_space === undefined)
    _space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (_depth === undefined)
    _depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = write;
  var t$1 = this;
  var t$2 = t$1.value;
  var t$3 = t$2.toString();
  return t$(t$3);
};

sk$JSON$dtBool.prototype.__bases = [
  sk$JSON$dtBool,
  sk$JSON$dtValue
];

var sk$JSON$dtCompactFormatter = sk.JSON$dtCompactFormatter = function JSON$dtCompactFormatter(writeToStream) {
  this.writeToStream = writeToStream;
};

sk$JSON$dtCompactFormatter.prototype = Object.create(Object.prototype);

sk$JSON$dtCompactFormatter.prototype.__constructor = sk$JSON$dtCompactFormatter;

sk$JSON$dtCompactFormatter.prototype.__classname = 'JSON.CompactFormatter';

sk$JSON$dtCompactFormatter.prototype.$frozen = false;

sk$JSON$dtCompactFormatter.prototype.__type_switch_id = 151;

sk$JSON$dtCompactFormatter.prototype.__copy = function() {
  return new (sk$JSON$dtCompactFormatter)(this.writeToStream);
};

sk$JSON$dtCompactFormatter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp261 = __cache.get(this);
  if (_tmp261 === undefined)
    {
      var _tmp261 = this.__copy();
      _tmp261.$frozen = true;
      __cache.set(this, _tmp261);
      _tmp261.writeToStream = skip.deepFreeze(_tmp261.writeToStream, __cache);
    }
  return _tmp261;
};

sk$JSON$dtCompactFormatter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtCompactFormatter.prototype.writeColon = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String((': ')));
};

sk$JSON$dtCompactFormatter.prototype.writeComma = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String((', ')));
};

sk$JSON$dtCompactFormatter.prototype.writeCurlyClose = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String(('}')));
};

sk$JSON$dtCompactFormatter.prototype.writeCurlyOpen = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String(('{')));
};

sk$JSON$dtCompactFormatter.prototype.writeRaw = function(value) {
  var t$ = this;
  var t$1 = t$.writeToStream;
  var t$2 = value;
  return t$1(t$2);
};

sk$JSON$dtCompactFormatter.prototype.writeSquareClose = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String((']')));
};

sk$JSON$dtCompactFormatter.prototype.writeSquareOpen = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String(('[')));
};

sk$JSON$dtCompactFormatter.prototype.__bases = [
  sk$JSON$dtCompactFormatter,
  sk$JSON$dtFormatter
];

var sk$JSON$dtDefaultReader = sk.JSON$dtDefaultReader = function JSON$dtDefaultReader(iter) {
  this.iter = iter;
};

sk$JSON$dtDefaultReader.prototype = Object.create(Object.prototype);

sk$JSON$dtDefaultReader.prototype.__constructor = sk$JSON$dtDefaultReader;

sk$JSON$dtDefaultReader.prototype.__classname = 'JSON.DefaultReader';

sk$JSON$dtDefaultReader.prototype.$frozen = undefined;

sk$JSON$dtDefaultReader.prototype.__type_switch_id = -1;

sk$JSON$dtDefaultReader.prototype.__copy = function() {
  return new (sk$JSON$dtDefaultReader)(this.iter);
};

sk$JSON$dtDefaultReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp262 = __cache.get(this);
  if (_tmp262 === undefined)
    {
      var _tmp262 = this.__copy();
      _tmp262.$frozen = true;
      __cache.set(this, _tmp262);
      _tmp262.iter = skip.deepFreeze(_tmp262.iter, __cache);
    }
  return _tmp262;
};

sk$JSON$dtDefaultReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtDefaultReader.prototype.readBool = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  var c = t$3.peek();
  {
    jumpBlockOuterjumpLab$bg4700:{
      jumpLab$bg4700:{
        jumpLab$bg4699:{
          jumpLab$bg4698:{
            {
              var _tmp263 = c.__getSwitchValue();
              switch (_tmp263) {
                case 116:
                  break jumpLab$bg4698;
                
                case 102:
                  break jumpLab$bg4699;
                
                default:
                  break jumpLab$bg4700;

              }
            }
          }
          {
            var t$4 = this;
            var t$5 = t$4.iter;
            sk$JSON$dteatString(t$5, new sk$String(('true')));
            return new sk$Bool((true));
          }
        }
        {
          var t$6 = this;
          var t$7 = t$6.iter;
          sk$JSON$dteatString(t$7, new sk$String(('false')));
          return new sk$Bool((false));
        }
      }
      {
        var t$8 = this;
        var t$9 = t$8.iter;
        var t$10 = new sk$String(('Invalid JSON start character \'')).toString();
        var t$11 = c;
        var t$12 = t$11.toString();
        var t$13 = new sk$String(('\' for Bool.')).toString();
        var t$14 = new sk$String(('')).join(new (sk$Array)([
          t$10,
          t$12,
          t$13
        ]));
        return sk$JSON$dtreportInvalidJSON(t$9, t$14);
      }
    }
  }
};

sk$JSON$dtDefaultReader.prototype.readDynamic = function(_visitor) {
  var t$ = new sk$String(('readDynamic()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$JSON$dtDefaultReader.prototype.readFloat = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  var start = t$3.clone();
  var t$4 = this;
  var t$5 = t$4.iter;
  sk$JSON$dtskipSignOpt(t$5);
  var t$6 = this;
  var t$7 = t$6.iter;
  sk$JSON$dtskipDigits(t$7);
  var t$8 = this;
  var t$9 = t$8.iter;
  sk$JSON$dtskipFractionOpt(t$9);
  var t$10 = this;
  var t$11 = t$10.iter;
  sk$JSON$dtskipExponentOpt(t$11);
  var t$12 = start;
  var t$13 = this;
  var t$14 = t$13.iter;
  var value = t$12.getText(t$14);
  var t$15 = value;
  if (t$15.$eq$eq(new sk$String(('-0'))).__value)
    return new sk$Float((-0.0));
  else
    {
      var t$16 = value;
      return t$16.toFloat();
    }
};

sk$JSON$dtDefaultReader.prototype.readInt = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  var start = t$3.clone();
  var t$4 = this;
  var t$5 = t$4.iter;
  sk$JSON$dtskipSignOpt(t$5);
  var t$6 = this;
  var t$7 = t$6.iter;
  sk$JSON$dtskipDigits(t$7);
  var t$8 = start;
  var t$9 = this;
  var t$10 = t$9.iter;
  var value = t$8.getText(t$10);
  var t$11 = value;
  if (t$11.$eq$eq(new sk$String(('-0'))).__value)
    return new sk$Int(0.0, 0.0);
  else
    {
      var t$12 = value;
      return t$12.toInt();
    }
};

sk$JSON$dtDefaultReader.prototype.readKeyedSequence = function(keySerializer, valueSerializer) {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  sk$JSON$dteat(t$3, $makeChar(123));
  var t$4 = this;
  var t$5 = t$4.iter;
  var t$6 = keySerializer;
  var t$7 = valueSerializer;
  return new (sk$JSON$dtKeyedSequenceReader)(t$5, t$6, t$7);
};

sk$JSON$dtDefaultReader.prototype.readOption = function(serializer) {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  var $var = t$3.peek();
  {
    jumpBlockOuterjumpLab$bg4758:{
      jumpLab$bg4758:{
        jumpLab$bg4757:{
          {
            var _tmp264 = $var.__getSwitchValue();
            switch (_tmp264) {
              case 110:
                break jumpLab$bg4757;
              
              default:
                break jumpLab$bg4758;

            }
          }
        }
        {
          var t$4 = this;
          var t$5 = t$4.iter;
          sk$JSON$dteatString(t$5, new sk$String(('null')));
          return singleton$None;
        }
      }
      {
        var t$6 = serializer;
        var t$7 = this;
        var t$8 = t$7.iter;
        var t$9 = new (sk$JSON$dtOptionReader)(t$8);
        var t$10 = t$6.deserialize(t$9);
        return new (sk$Some)(t$10);
      }
    }
  }
};

sk$JSON$dtDefaultReader.prototype.readRecord = function(_fieldNames) {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  sk$JSON$dteat(t$3, $makeChar(123));
  var t$4 = this;
  var t$5 = t$4.iter;
  return new (sk$JSON$dtRecordReader)(t$5);
};

sk$JSON$dtDefaultReader.prototype.readSequence = function(serializer) {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  sk$JSON$dteat(t$3, $makeChar(91));
  var t$4 = this;
  var t$5 = t$4.iter;
  var t$6 = serializer;
  return new (sk$JSON$dtSequenceReader)(t$5, t$6);
};

sk$JSON$dtDefaultReader.prototype.readString = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  return sk$JSON$dtdecodeString(t$3);
};

sk$JSON$dtDefaultReader.prototype.readTuple = function(_size) {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  sk$JSON$dteat(t$3, $makeChar(91));
  var t$4 = this;
  var t$5 = t$4.iter;
  return new (sk$JSON$dtTupleReader)(t$5);
};

sk$JSON$dtDefaultReader.prototype.readType = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  return sk$JSON$dtdecodeString(t$3);
};

sk$JSON$dtDefaultReader.prototype.readVariant = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  sk$JSON$dteat(t$3, $makeChar(123));
  var t$4 = this;
  var t$5 = t$4.iter;
  var record = new (sk$JSON$dtRecordReader)(t$5);
  var t$6 = record;
  var key = t$6.readKey();
  var className;
  {
    jumpBlockOuterjumpLab$bg4804:{
      jumpLab$bg4804:{
        jumpLab$bg4803:{
          switch (key.__type_switch_id) {
            case 205:
              className = key.value;
              break jumpLab$bg4803;
            
            case 204:
              break jumpLab$bg4804;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$7 = this;
          var t$8 = t$7.iter;
          var value = new (sk$JSON$dtReader)(t$8);
          var t$9 = this;
          var t$10 = t$9.iter;
          sk$JSON$dteatWhitespace(t$10);
          var t$11 = className;
          var t$12 = value;
          var t$13 = record;
          var t$14 = t$13;
          return new (sk$Tuple3)(t$11, t$12, (() => 
          {
            return t$14.end();
          }));
        }
      }
      skip.throwException(sk, singleton$Serialization$dtVariantMissingError);
    }
  }
};

sk$JSON$dtDefaultReader.prototype.readVoid = function() {
  var t$ = new sk$String(('readVoid()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$JSON$dtDefaultReader.prototype.__bases = [
  sk$JSON$dtDefaultReader,
  sk$Serialization$dtReader
];

var sk$JSON$dtDefaultWriter = sk.JSON$dtDefaultWriter = function JSON$dtDefaultWriter(jsonFormatter) {
  this.jsonFormatter = jsonFormatter;
};

sk$JSON$dtDefaultWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtDefaultWriter.prototype.__constructor = sk$JSON$dtDefaultWriter;

sk$JSON$dtDefaultWriter.prototype.__classname = 'JSON.DefaultWriter';

sk$JSON$dtDefaultWriter.prototype.$frozen = undefined;

sk$JSON$dtDefaultWriter.prototype.__type_switch_id = -1;

sk$JSON$dtDefaultWriter.prototype.__copy = function() {
  return new (sk$JSON$dtDefaultWriter)(this.jsonFormatter);
};

sk$JSON$dtDefaultWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp265 = __cache.get(this);
  if (_tmp265 === undefined)
    {
      var _tmp265 = this.__copy();
      _tmp265.$frozen = true;
      __cache.set(this, _tmp265);
      _tmp265.jsonFormatter = skip.deepFreeze(_tmp265.jsonFormatter, __cache);
    }
  return _tmp265;
};

sk$JSON$dtDefaultWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtDefaultWriter.prototype.result = function() {
  return sk.__.$void;
};

sk$JSON$dtDefaultWriter.prototype.writeBool = function(value) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = value;
  var t$3 = t$2.toString();
  return t$1.writeRaw(t$3);
};

sk$JSON$dtDefaultWriter.prototype.writeFloat = function(value) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = value;
  var t$3 = t$2.toString();
  return t$1.writeRaw(t$3);
};

sk$JSON$dtDefaultWriter.prototype.writeInt = function(value) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = value;
  var t$3 = t$2.toString();
  return t$1.writeRaw(t$3);
};

sk$JSON$dtDefaultWriter.prototype.writeKeyedSequence = function(keySerializer, valueSerializer, _sizeHint) {
  if (_sizeHint === undefined)
    _sizeHint = ((() => 
    {
      return singleton$None;
    })());
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = keySerializer;
  var t$3 = valueSerializer;
  return new (sk$JSON$dtKeyedSequenceWriter)(t$1, t$2, t$3, undefined);
};

sk$JSON$dtDefaultWriter.prototype.writeOption = function(value, serializer) {
  var x;
  {
    jumpBlockOuterjumpLab$bg4833:{
      jumpLab$bg4833:{
        jumpLab$bg4832:{
          switch (value.__type_switch_id) {
            case 204:
              break jumpLab$bg4832;
            
            case 205:
              x = value.value;
              break jumpLab$bg4833;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.jsonFormatter;
          return t$1.writeRaw(new sk$String(('null')));
        }
      }
      {
        var t$2 = this;
        var t$3 = t$2.jsonFormatter;
        var writer = new (sk$JSON$dtOptionWriter)(t$3);
        var t$4 = serializer;
        var t$5 = x;
        var t$6 = writer;
        return t$4.serialize(t$5, t$6);
      }
    }
  }
};

sk$JSON$dtDefaultWriter.prototype.writeRecord = function(_fieldNames) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  return new (sk$JSON$dtRecordWriter)(t$1, undefined);
};

sk$JSON$dtDefaultWriter.prototype.writeSequence = function(serializer, _sizeHint) {
  if (_sizeHint === undefined)
    _sizeHint = ((() => 
    {
      return singleton$None;
    })());
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = serializer;
  return new (sk$JSON$dtSequenceWriter)(t$1, t$2, undefined);
};

sk$JSON$dtDefaultWriter.prototype.writeString = function(value) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = t$1;
  var t$3 = value;
  return sk$JSON$dtwriteStringValue(((_tmp4843) => 
  {
    return t$2.writeRaw(_tmp4843);
  }), t$3);
};

sk$JSON$dtDefaultWriter.prototype.writeTuple = function(_size) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  return new (sk$JSON$dtTupleWriter)(t$1, undefined);
};

sk$JSON$dtDefaultWriter.prototype.writeType = function(name) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = t$1;
  var t$3 = name;
  return sk$JSON$dtwriteStringValue(((_tmp4850) => 
  {
    return t$2.writeRaw(_tmp4850);
  }), t$3);
};

sk$JSON$dtDefaultWriter.prototype.writeVariant = function(childName, value, serializer) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var record = new (sk$JSON$dtRecordWriter)(t$1, undefined);
  var t$2 = record;
  var t$3 = childName;
  var t$4 = value;
  var t$5 = serializer;
  t$2.writeItem(t$3, t$4, t$5);
  var t$6 = record;
  return t$6.end();
};

sk$JSON$dtDefaultWriter.prototype.writeVoid = function() {
  var t$ = new sk$String(('writeVoid()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$JSON$dtDefaultWriter.prototype.__bases = [
  sk$JSON$dtDefaultWriter,
  sk$Serialization$dtWriter
];

var sk$JSON$dtKeyedSequenceReader = sk.JSON$dtKeyedSequenceReader = function JSON$dtKeyedSequenceReader(iter, keySerializer, valueSerializer) {
  this.iter = iter;
  this.keySerializer = keySerializer;
  this.valueSerializer = valueSerializer;
};

sk$JSON$dtKeyedSequenceReader.prototype = Object.create(Object.prototype);

sk$JSON$dtKeyedSequenceReader.prototype.__constructor = sk$JSON$dtKeyedSequenceReader;

sk$JSON$dtKeyedSequenceReader.prototype.__classname = 'JSON.KeyedSequenceReader';

sk$JSON$dtKeyedSequenceReader.prototype.$frozen = false;

sk$JSON$dtKeyedSequenceReader.prototype.__type_switch_id = 153;

sk$JSON$dtKeyedSequenceReader.prototype.__copy = function() {
  return new (sk$JSON$dtKeyedSequenceReader)(this.iter, this.keySerializer, this.valueSerializer);
};

sk$JSON$dtKeyedSequenceReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp266 = __cache.get(this);
  if (_tmp266 === undefined)
    {
      var _tmp266 = this.__copy();
      _tmp266.$frozen = true;
      __cache.set(this, _tmp266);
      _tmp266.iter = skip.deepFreeze(_tmp266.iter, __cache);
      _tmp266.keySerializer = skip.deepFreeze(_tmp266.keySerializer, __cache);
      _tmp266.valueSerializer = skip.deepFreeze(_tmp266.valueSerializer, __cache);
    }
  return _tmp266;
};

sk$JSON$dtKeyedSequenceReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtKeyedSequenceReader.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  return t$.endBase(t$2);
};

sk$JSON$dtKeyedSequenceReader.prototype.readItem = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  var t$3 = this;
  var t$4 = t$3.keySerializer;
  var keyOption = t$.readKeyBase(t$2, t$4);
  var key;
  {
    jumpBlockOuterjumpLab$bg5109:{
      jumpLab$bg5109:{
        jumpLab$bg5108:{
          switch (keyOption.__type_switch_id) {
            case 205:
              key = keyOption.value;
              break jumpLab$bg5108;
            
            case 204:
              break jumpLab$bg5109;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = key;
          var t$6 = this;
          var t$7 = this;
          var t$8 = t$7.iter;
          var t$9 = this;
          var t$10 = t$9.valueSerializer;
          var t$11 = t$6.readValueBase(t$8, t$10);
          var t$12 = new (sk$Tuple2)(t$5, t$11);
          return new (sk$Some)(t$12);
        }
      }
      return singleton$None;
    }
  }
};

sk$JSON$dtKeyedSequenceReader.prototype.sizeHint = function() {
  return singleton$None;
};

sk$JSON$dtKeyedSequenceReader.prototype.__bases = [
  sk$JSON$dtKeyedSequenceReader,
  sk$JSON$dtItemReader,
  sk$Serialization$dtKeyedSequenceReader
];

var sk$JSON$dtKeyedSequenceWriter = sk.JSON$dtKeyedSequenceWriter = function JSON$dtKeyedSequenceWriter(jsonFormatter, keySerializer, valueSerializer, begun) {
  this.jsonFormatter = jsonFormatter;
  this.keySerializer = keySerializer;
  this.valueSerializer = valueSerializer;
  this.begun = begun === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : begun;
};

sk$JSON$dtKeyedSequenceWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtKeyedSequenceWriter.prototype.__constructor = sk$JSON$dtKeyedSequenceWriter;

sk$JSON$dtKeyedSequenceWriter.prototype.__classname = 'JSON.KeyedSequenceWriter';

sk$JSON$dtKeyedSequenceWriter.prototype.$frozen = false;

sk$JSON$dtKeyedSequenceWriter.prototype.__type_switch_id = 155;

sk$JSON$dtKeyedSequenceWriter.prototype.__copy = function() {
  return new (sk$JSON$dtKeyedSequenceWriter)(this.jsonFormatter, this.keySerializer, this.valueSerializer, this.begun);
};

sk$JSON$dtKeyedSequenceWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp267 = __cache.get(this);
  if (_tmp267 === undefined)
    {
      var _tmp267 = this.__copy();
      _tmp267.$frozen = true;
      __cache.set(this, _tmp267);
      _tmp267.jsonFormatter = skip.deepFreeze(_tmp267.jsonFormatter, __cache);
      _tmp267.keySerializer = skip.deepFreeze(_tmp267.keySerializer, __cache);
      _tmp267.valueSerializer = skip.deepFreeze(_tmp267.valueSerializer, __cache);
      _tmp267.begun = skip.deepFreeze(_tmp267.begun, __cache);
    }
  return _tmp267;
};

sk$JSON$dtKeyedSequenceWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtKeyedSequenceWriter.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = this;
  var t$4 = t$3.begun;
  t$.endBase(t$2, t$4);
  var $var = this;
  var t$5 = $var;
  var t$6 = t$5;
  t$6.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtKeyedSequenceWriter.prototype.writeItem = function(key, value) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = key;
  var t$4 = this;
  var t$5 = t$4.keySerializer;
  var t$6 = value;
  var t$7 = this;
  var t$8 = t$7.valueSerializer;
  var t$9 = this;
  var t$10 = t$9.begun;
  t$.writeItemBase(t$2, t$3, t$5, t$6, t$8, t$10);
  var $var = this;
  var t$11 = $var;
  var t$12 = t$11;
  t$12.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtKeyedSequenceWriter.prototype.__bases = [
  sk$JSON$dtKeyedSequenceWriter,
  sk$JSON$dtItemWriter,
  sk$Serialization$dtKeyedSequenceWriter
];

var sk$JSON$dtNull = sk.JSON$dtNull = function JSON$dtNull() {};

sk$JSON$dtNull.prototype = Object.create(Object.prototype);

sk$JSON$dtNull.prototype.__constructor = sk$JSON$dtNull;

sk$JSON$dtNull.prototype.__classname = 'JSON.Null';

sk$JSON$dtNull.prototype.$frozen = true;

sk$JSON$dtNull.prototype.__type_switch_id = 161;

sk$JSON$dtNull.prototype.__copy = function() {
  return new (sk$JSON$dtNull)();
};

sk$JSON$dtNull.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp268 = __cache.get(this);
  if (_tmp268 === undefined)
    {
      var _tmp268 = this.__copy();
      _tmp268.$frozen = true;
      __cache.set(this, _tmp268);
    }
  return _tmp268;
};

sk$JSON$dtNull.prototype.__init = function(__named_parameters) {};

sk$JSON$dtNull.prototype.expectArray = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Array'))));
};

sk$JSON$dtNull.prototype.expectBool = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Bool'))));
};

sk$JSON$dtNull.prototype.expectFloat = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Float'))));
};

sk$JSON$dtNull.prototype.expectInt = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Int'))));
};

sk$JSON$dtNull.prototype.expectObject = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Object'))));
};

sk$JSON$dtNull.prototype.expectString = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('String'))));
};

sk$JSON$dtNull.prototype.set = function(name, value) {
  skip.throwException(sk, singleton$JSON$dtJSONSetNonObjectError);
};

sk$JSON$dtNull.prototype.writeToStream = function(write, _space, _depth) {
  if (_space === undefined)
    _space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (_depth === undefined)
    _depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = write;
  return t$(new sk$String(('null')));
};

sk$JSON$dtNull.prototype.__bases = [
  sk$JSON$dtNull,
  sk$JSON$dtValue
];

var sk$JSON$dtNumber = sk.JSON$dtNumber = function JSON$dtNumber() {};

sk$JSON$dtNumber.prototype = Object.create(Object.prototype);

sk$JSON$dtNumber.prototype.__constructor = sk$JSON$dtNumber;

sk$JSON$dtNumber.prototype.__classname = 'JSON.Number';

sk$JSON$dtNumber.prototype.$frozen = undefined;

sk$JSON$dtNumber.prototype.__type_switch_id = -1;

sk$JSON$dtNumber.prototype.__copy = function() {};

sk$JSON$dtNumber.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp269 = __cache.get(this);
  if (_tmp269 === undefined)
    {
      var _tmp269 = this.__copy();
      _tmp269.$frozen = true;
      __cache.set(this, _tmp269);
    }
  return _tmp269;
};

sk$JSON$dtNumber.prototype.__init = function(__named_parameters) {};

sk$JSON$dtNumber.prototype.__bases = [
  sk$JSON$dtNumber,
  sk$JSON$dtValue
];

var sk$JSON$dtObject = sk.JSON$dtObject = function JSON$dtObject(value) {
  this.value = value;
};

sk$JSON$dtObject.prototype = Object.create(Object.prototype);

sk$JSON$dtObject.prototype.__constructor = sk$JSON$dtObject;

sk$JSON$dtObject.prototype.__classname = 'JSON.Object';

sk$JSON$dtObject.prototype.$frozen = true;

sk$JSON$dtObject.prototype.__type_switch_id = 162;

sk$JSON$dtObject.prototype.__copy = function() {
  return new (sk$JSON$dtObject)(this.value);
};

sk$JSON$dtObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp270 = __cache.get(this);
  if (_tmp270 === undefined)
    {
      var _tmp270 = this.__copy();
      _tmp270.$frozen = true;
      __cache.set(this, _tmp270);
      _tmp270.value = skip.deepFreeze(_tmp270.value, __cache);
    }
  return _tmp270;
};

sk$JSON$dtObject.prototype.__init = function(__named_parameters) {};

sk$JSON$dtObject.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = t$1.collect(sk$Map);
  return new (sk$JSON$dtObject)(t$2);
};

sk$JSON$dtObject.createFromIterator = function(items) {
  var map = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = items;
  var t$1 = t$;
  t$1.each(((kv) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg5155:{
        jumpLab$bg5155:{
          switch (kv.__type_switch_id) {
            case 392:
              $var = kv.i0;
              var1 = kv.i1;
              break jumpLab$bg5155;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$2 = map;
          var t$3 = k;
          var t$4 = v;
          return t$2.set(t$3, t$4);
        }
      }
    }
  }));
  var t$5 = skip.deepFreeze(map, new Map());
  return new (sk$JSON$dtObject)(t$5);
};

sk$JSON$dtObject.prototype.expectArray = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Array'))));
};

sk$JSON$dtObject.prototype.expectBool = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Bool'))));
};

sk$JSON$dtObject.prototype.expectFloat = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Float'))));
};

sk$JSON$dtObject.prototype.expectInt = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Int'))));
};

sk$JSON$dtObject.prototype.expectObject = function() {
  return this;
};

sk$JSON$dtObject.prototype.expectString = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('String'))));
};

sk$JSON$dtObject.prototype.get = function(key) {
  var t$ = this;
  var t$1 = key;
  var $var = t$.maybeGet(t$1);
  var result;
  {
    jumpBlockOuterjumpLab$bg5169:{
      jumpLab$bg5169:{
        jumpLab$bg5168:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg5168;
            
            case 205:
              result = $var.value;
              break jumpLab$bg5169;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = key;
          skip.throwException(sk, new (sk$JSON$dtKeyNotFoundError)(t$2));
        }
      }
      return result;
    }
  }
};

sk$JSON$dtObject.prototype.getArray = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.get(t$1);
  return t$2.expectArray();
};

sk$JSON$dtObject.prototype.getBool = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.get(t$1);
  return t$2.expectBool();
};

sk$JSON$dtObject.prototype.getFloat = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.get(t$1);
  return t$2.expectFloat();
};

sk$JSON$dtObject.prototype.getInt = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.get(t$1);
  return t$2.expectInt();
};

sk$JSON$dtObject.prototype.getObject = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.get(t$1);
  return t$2.expectObject();
};

sk$JSON$dtObject.prototype.getString = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.get(t$1);
  return t$2.expectString();
};

sk$JSON$dtObject.prototype.maybeGet = function(key) {
  var t$ = this;
  var t$1 = t$.value;
  var t$2 = key;
  return t$1.maybeGet(t$2);
};

sk$JSON$dtObject.prototype.maybeGetArray = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.maybeGet(t$1);
  return t$2.map(((value) => 
  {
    var t$3 = value;
    return t$3.expectArray();
  }));
};

sk$JSON$dtObject.prototype.maybeGetBool = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.maybeGet(t$1);
  return t$2.map(((value) => 
  {
    var t$3 = value;
    return t$3.expectBool();
  }));
};

sk$JSON$dtObject.prototype.maybeGetFloat = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.maybeGet(t$1);
  return t$2.map(((value) => 
  {
    var t$3 = value;
    return t$3.expectFloat();
  }));
};

sk$JSON$dtObject.prototype.maybeGetInt = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.maybeGet(t$1);
  return t$2.map(((value) => 
  {
    var t$3 = value;
    return t$3.expectInt();
  }));
};

sk$JSON$dtObject.prototype.maybeGetObject = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.maybeGet(t$1);
  return t$2.map(((value) => 
  {
    var t$3 = value;
    return t$3.expectObject();
  }));
};

sk$JSON$dtObject.prototype.maybeGetString = function(key) {
  var t$ = this;
  var t$1 = key;
  var t$2 = t$.maybeGet(t$1);
  return t$2.map(((value) => 
  {
    var t$3 = value;
    return t$3.expectString();
  }));
};

sk$JSON$dtObject.prototype.set = function(name, value) {
  var t$ = this;
  var fields = t$.value;
  var t$1 = fields;
  var next_fields = t$1.clone(undefined);
  var t$2 = next_fields;
  var t$3 = name;
  var t$4 = value;
  t$2.set(t$3, t$4);
  var t$5 = skip.deepFreeze(next_fields, new Map());
  return new (sk$JSON$dtObject)(t$5);
};

sk$JSON$dtObject.prototype.writeToStream = function(write, space, depth) {
  if (space === undefined)
    space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (depth === undefined)
    depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var t$1 = t$.value;
  var t$2 = t$1.size();
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = write;
      return t$3(new sk$String(('{}')));
    }
  else
    {
      var t$4 = write;
      t$4(new sk$String(('{')));
      var is_first = new (sk$Ref)(new sk$Bool((true)));
      var t$5 = depth;
      var nd = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$6 = this;
      var t$7 = t$6.value;
      t$7.each(((key, value) => 
      {
        var t$8 = is_first;
        if (t$8.value.__value)
          {
            var $var = is_first;
            var t$9 = $var;
            var t$10 = t$9;
            t$10.value = new sk$Bool((false));
          }
        else
          {
            var t$11 = write;
            t$11(new sk$String((', ')));
          }
        var t$12 = space;
        if (t$12.$gt$eq(new sk$Int(0.0, 0.0)).__value)
          {
            var t$13 = write;
            t$13(new sk$String(('\n')));
            var t$14 = write;
            var t$15 = space;
            var t$16 = nd;
            var t$17 = t$15.$ti(t$16);
            sk$JSON$dtindent(t$14, t$17);
          }
        else
          {}
        var t$18 = write;
        var t$19 = key;
        sk$JSON$dtwriteStringValue(t$18, t$19);
        var t$20 = write;
        t$20(new sk$String((': ')));
        var t$21 = value;
        var t$22 = write;
        var t$23 = space;
        var t$24 = nd;
        return t$21.writeToStream(t$22, t$23, t$24);
      }));
      var t$25 = space;
      if (t$25.$gt$eq(new sk$Int(0.0, 0.0)).__value)
        {
          var t$26 = write;
          t$26(new sk$String(('\n')));
          var t$27 = write;
          var t$28 = space;
          var t$29 = depth;
          var t$30 = t$28.$ti(t$29);
          sk$JSON$dtindent(t$27, t$30);
        }
      else
        {}
      var t$31 = write;
      return t$31(new sk$String(('}')));
    }
};

sk$JSON$dtObject.prototype.__bases = [
  sk$JSON$dtObject,
  sk$JSON$dtValue
];

var sk$JSON$dtPrettyFormatter = sk.JSON$dtPrettyFormatter = function JSON$dtPrettyFormatter(writeToStream, space, depth) {
  this.writeToStream = writeToStream;
  this.space = space === undefined ? ((() => 
  {
    return new sk$Int(2.0, 0.0);
  })()) : space;
  this.depth = depth === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : depth;
};

sk$JSON$dtPrettyFormatter.prototype = Object.create(Object.prototype);

sk$JSON$dtPrettyFormatter.prototype.__constructor = sk$JSON$dtPrettyFormatter;

sk$JSON$dtPrettyFormatter.prototype.__classname = 'JSON.PrettyFormatter';

sk$JSON$dtPrettyFormatter.prototype.$frozen = false;

sk$JSON$dtPrettyFormatter.prototype.__type_switch_id = 152;

sk$JSON$dtPrettyFormatter.prototype.__copy = function() {
  return new (sk$JSON$dtPrettyFormatter)(this.writeToStream, this.space, this.depth);
};

sk$JSON$dtPrettyFormatter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp271 = __cache.get(this);
  if (_tmp271 === undefined)
    {
      var _tmp271 = this.__copy();
      _tmp271.$frozen = true;
      __cache.set(this, _tmp271);
      _tmp271.writeToStream = skip.deepFreeze(_tmp271.writeToStream, __cache);
      _tmp271.space = skip.deepFreeze(_tmp271.space, __cache);
      _tmp271.depth = skip.deepFreeze(_tmp271.depth, __cache);
    }
  return _tmp271;
};

sk$JSON$dtPrettyFormatter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtPrettyFormatter.prototype.indent = function() {
  var $var = this;
  var t$ = $var;
  var t$1 = this;
  var t$2 = t$1.depth;
  var t$3 = t$;
  t$3.depth = t$2.$pl(new sk$Int(1.0, 0.0));
  return sk.__.$void;
};

sk$JSON$dtPrettyFormatter.prototype.outdent = function() {
  var t$ = this;
  var t$1 = t$.depth;
  var t$2 = t$1.$gt(new sk$Int(0.0, 0.0));
  sk$invariant(t$2, undefined);
  var $var = this;
  var t$3 = $var;
  var t$4 = this;
  var t$5 = t$4.depth;
  var t$6 = t$3;
  t$6.depth = t$5.$mi(new sk$Int(1.0, 0.0));
  return sk.__.$void;
};

sk$JSON$dtPrettyFormatter.prototype.writeColon = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  return t$1(new sk$String((': ')));
};

sk$JSON$dtPrettyFormatter.prototype.writeComma = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  t$1(new sk$String((',\n')));
  var t$2 = this;
  return t$2.writeIndent();
};

sk$JSON$dtPrettyFormatter.prototype.writeCurlyClose = function() {
  var t$ = this;
  t$.outdent();
  var t$1 = this;
  var t$2 = t$1.writeToStream;
  t$2(new sk$String(('\n')));
  var t$3 = this;
  t$3.writeIndent();
  var t$4 = this;
  var t$5 = t$4.writeToStream;
  return t$5(new sk$String(('}')));
};

sk$JSON$dtPrettyFormatter.prototype.writeCurlyOpen = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  t$1(new sk$String(('{\n')));
  var t$2 = this;
  t$2.indent();
  var t$3 = this;
  return t$3.writeIndent();
};

sk$JSON$dtPrettyFormatter.prototype.writeIndent = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  var t$2 = this;
  var t$3 = t$2.depth;
  var t$4 = this;
  var t$5 = t$4.space;
  var t$6 = t$3.$ti(t$5);
  var t$7 = new (sk$Range)(new sk$Int(0.0, 0.0), t$6);
  var t$8 = t$7.map(((_) => 
  {
    return new sk$String((' '));
  }));
  var t$9 = t$8.join(new sk$String(('')));
  return t$1(t$9);
};

sk$JSON$dtPrettyFormatter.prototype.writeRaw = function(value) {
  var t$ = this;
  var t$1 = t$.writeToStream;
  var t$2 = value;
  return t$1(t$2);
};

sk$JSON$dtPrettyFormatter.prototype.writeSquareClose = function() {
  var t$ = this;
  t$.outdent();
  var t$1 = this;
  var t$2 = t$1.writeToStream;
  t$2(new sk$String(('\n')));
  var t$3 = this;
  t$3.writeIndent();
  var t$4 = this;
  var t$5 = t$4.writeToStream;
  return t$5(new sk$String((']')));
};

sk$JSON$dtPrettyFormatter.prototype.writeSquareOpen = function() {
  var t$ = this;
  var t$1 = t$.writeToStream;
  t$1(new sk$String(('[\n')));
  var t$2 = this;
  t$2.indent();
  var t$3 = this;
  return t$3.writeIndent();
};

sk$JSON$dtPrettyFormatter.prototype.__bases = [
  sk$JSON$dtPrettyFormatter,
  sk$JSON$dtFormatter
];

var sk$JSON$dtRecordReader = sk.JSON$dtRecordReader = function JSON$dtRecordReader(iter) {
  this.iter = iter;
};

sk$JSON$dtRecordReader.prototype = Object.create(Object.prototype);

sk$JSON$dtRecordReader.prototype.__constructor = sk$JSON$dtRecordReader;

sk$JSON$dtRecordReader.prototype.__classname = 'JSON.RecordReader';

sk$JSON$dtRecordReader.prototype.$frozen = false;

sk$JSON$dtRecordReader.prototype.__type_switch_id = 154;

sk$JSON$dtRecordReader.prototype.__copy = function() {
  return new (sk$JSON$dtRecordReader)(this.iter);
};

sk$JSON$dtRecordReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp272 = __cache.get(this);
  if (_tmp272 === undefined)
    {
      var _tmp272 = this.__copy();
      _tmp272.$frozen = true;
      __cache.set(this, _tmp272);
      _tmp272.iter = skip.deepFreeze(_tmp272.iter, __cache);
    }
  return _tmp272;
};

sk$JSON$dtRecordReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtRecordReader.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  return t$.endBase(t$2);
};

sk$JSON$dtRecordReader.prototype.readKey = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  return t$.readKeyBase(t$2, sk$String.meta);
};

sk$JSON$dtRecordReader.prototype.readValue = function(serializer) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  var t$3 = serializer;
  return t$.readValueBase(t$2, t$3);
};

sk$JSON$dtRecordReader.prototype.__bases = [
  sk$JSON$dtRecordReader,
  sk$JSON$dtItemReader,
  sk$Serialization$dtRecordReader
];

var sk$JSON$dtRecordWriter = sk.JSON$dtRecordWriter = function JSON$dtRecordWriter(jsonFormatter, begun) {
  this.jsonFormatter = jsonFormatter;
  this.begun = begun === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : begun;
};

sk$JSON$dtRecordWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtRecordWriter.prototype.__constructor = sk$JSON$dtRecordWriter;

sk$JSON$dtRecordWriter.prototype.__classname = 'JSON.RecordWriter';

sk$JSON$dtRecordWriter.prototype.$frozen = false;

sk$JSON$dtRecordWriter.prototype.__type_switch_id = 156;

sk$JSON$dtRecordWriter.prototype.__copy = function() {
  return new (sk$JSON$dtRecordWriter)(this.jsonFormatter, this.begun);
};

sk$JSON$dtRecordWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp273 = __cache.get(this);
  if (_tmp273 === undefined)
    {
      var _tmp273 = this.__copy();
      _tmp273.$frozen = true;
      __cache.set(this, _tmp273);
      _tmp273.jsonFormatter = skip.deepFreeze(_tmp273.jsonFormatter, __cache);
      _tmp273.begun = skip.deepFreeze(_tmp273.begun, __cache);
    }
  return _tmp273;
};

sk$JSON$dtRecordWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtRecordWriter.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = this;
  var t$4 = t$3.begun;
  t$.endBase(t$2, t$4);
  var $var = this;
  var t$5 = $var;
  var t$6 = t$5;
  t$6.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtRecordWriter.prototype.writeItem = function(fieldName, value, serializer) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = fieldName;
  var t$4 = value;
  var t$5 = serializer;
  var t$6 = this;
  var t$7 = t$6.begun;
  t$.writeItemBase(t$2, t$3, sk$String.meta, t$4, t$5, t$7);
  var $var = this;
  var t$8 = $var;
  var t$9 = t$8;
  t$9.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtRecordWriter.prototype.__bases = [
  sk$JSON$dtRecordWriter,
  sk$JSON$dtItemWriter,
  sk$Serialization$dtRecordWriter
];

var sk$JSON$dtSequenceReader = sk.JSON$dtSequenceReader = function JSON$dtSequenceReader(iter, serializer) {
  this.iter = iter;
  this.serializer = serializer;
};

sk$JSON$dtSequenceReader.prototype = Object.create(Object.prototype);

sk$JSON$dtSequenceReader.prototype.__constructor = sk$JSON$dtSequenceReader;

sk$JSON$dtSequenceReader.prototype.__classname = 'JSON.SequenceReader';

sk$JSON$dtSequenceReader.prototype.$frozen = false;

sk$JSON$dtSequenceReader.prototype.__type_switch_id = 164;

sk$JSON$dtSequenceReader.prototype.__copy = function() {
  return new (sk$JSON$dtSequenceReader)(this.iter, this.serializer);
};

sk$JSON$dtSequenceReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp274 = __cache.get(this);
  if (_tmp274 === undefined)
    {
      var _tmp274 = this.__copy();
      _tmp274.$frozen = true;
      __cache.set(this, _tmp274);
      _tmp274.iter = skip.deepFreeze(_tmp274.iter, __cache);
      _tmp274.serializer = skip.deepFreeze(_tmp274.serializer, __cache);
    }
  return _tmp274;
};

sk$JSON$dtSequenceReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtSequenceReader.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  return t$.endBase(t$2);
};

sk$JSON$dtSequenceReader.prototype.readValue = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  var t$3 = this;
  var t$4 = t$3.serializer;
  return t$.readValueBase(t$2, t$4);
};

sk$JSON$dtSequenceReader.prototype.sizeHint = function() {
  return singleton$None;
};

sk$JSON$dtSequenceReader.prototype.__bases = [
  sk$JSON$dtSequenceReader,
  sk$JSON$dtValueReader,
  sk$Serialization$dtSequenceReader
];

var sk$JSON$dtSequenceWriter = sk.JSON$dtSequenceWriter = function JSON$dtSequenceWriter(jsonFormatter, serializer, begun) {
  this.jsonFormatter = jsonFormatter;
  this.serializer = serializer;
  this.begun = begun === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : begun;
};

sk$JSON$dtSequenceWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtSequenceWriter.prototype.__constructor = sk$JSON$dtSequenceWriter;

sk$JSON$dtSequenceWriter.prototype.__classname = 'JSON.SequenceWriter';

sk$JSON$dtSequenceWriter.prototype.$frozen = false;

sk$JSON$dtSequenceWriter.prototype.__type_switch_id = 166;

sk$JSON$dtSequenceWriter.prototype.__copy = function() {
  return new (sk$JSON$dtSequenceWriter)(this.jsonFormatter, this.serializer, this.begun);
};

sk$JSON$dtSequenceWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp275 = __cache.get(this);
  if (_tmp275 === undefined)
    {
      var _tmp275 = this.__copy();
      _tmp275.$frozen = true;
      __cache.set(this, _tmp275);
      _tmp275.jsonFormatter = skip.deepFreeze(_tmp275.jsonFormatter, __cache);
      _tmp275.serializer = skip.deepFreeze(_tmp275.serializer, __cache);
      _tmp275.begun = skip.deepFreeze(_tmp275.begun, __cache);
    }
  return _tmp275;
};

sk$JSON$dtSequenceWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtSequenceWriter.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = this;
  var t$4 = t$3.begun;
  t$.endBase(t$2, t$4);
  var $var = this;
  var t$5 = $var;
  var t$6 = t$5;
  t$6.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtSequenceWriter.prototype.writeValue = function(value) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = this;
  var t$4 = t$3.serializer;
  var t$5 = value;
  var t$6 = this;
  var t$7 = t$6.begun;
  t$.writeValueBase(t$2, t$4, t$5, t$7);
  var $var = this;
  var t$8 = $var;
  var t$9 = t$8;
  t$9.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtSequenceWriter.prototype.__bases = [
  sk$JSON$dtSequenceWriter,
  sk$JSON$dtValueWriter,
  sk$Serialization$dtSequenceWriter
];

var sk$JSON$dtString = sk.JSON$dtString = function JSON$dtString(value) {
  this.value = value;
};

sk$JSON$dtString.prototype = Object.create(Object.prototype);

sk$JSON$dtString.prototype.__constructor = sk$JSON$dtString;

sk$JSON$dtString.prototype.__classname = 'JSON.String';

sk$JSON$dtString.prototype.$frozen = true;

sk$JSON$dtString.prototype.__type_switch_id = 163;

sk$JSON$dtString.prototype.__copy = function() {
  return new (sk$JSON$dtString)(this.value);
};

sk$JSON$dtString.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp276 = __cache.get(this);
  if (_tmp276 === undefined)
    {
      var _tmp276 = this.__copy();
      _tmp276.$frozen = true;
      __cache.set(this, _tmp276);
      _tmp276.value = skip.deepFreeze(_tmp276.value, __cache);
    }
  return _tmp276;
};

sk$JSON$dtString.prototype.__init = function(__named_parameters) {};

sk$JSON$dtString.prototype.expectArray = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Array'))));
};

sk$JSON$dtString.prototype.expectBool = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Bool'))));
};

sk$JSON$dtString.prototype.expectFloat = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Float'))));
};

sk$JSON$dtString.prototype.expectInt = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Int'))));
};

sk$JSON$dtString.prototype.expectObject = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Object'))));
};

sk$JSON$dtString.prototype.expectString = function() {
  var t$ = this;
  return t$.value;
};

sk$JSON$dtString.prototype.set = function(name, value) {
  skip.throwException(sk, singleton$JSON$dtJSONSetNonObjectError);
};

sk$JSON$dtString.prototype.writeToStream = function(write, _space, _depth) {
  if (_space === undefined)
    _space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (_depth === undefined)
    _depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = write;
  var t$1 = this;
  var t$2 = t$1.value;
  return sk$JSON$dtwriteStringValue(t$, t$2);
};

sk$JSON$dtString.prototype.__bases = [
  sk$JSON$dtString,
  sk$JSON$dtValue
];

var sk$JSON$dtTupleReader = sk.JSON$dtTupleReader = function JSON$dtTupleReader(iter) {
  this.iter = iter;
};

sk$JSON$dtTupleReader.prototype = Object.create(Object.prototype);

sk$JSON$dtTupleReader.prototype.__constructor = sk$JSON$dtTupleReader;

sk$JSON$dtTupleReader.prototype.__classname = 'JSON.TupleReader';

sk$JSON$dtTupleReader.prototype.$frozen = false;

sk$JSON$dtTupleReader.prototype.__type_switch_id = 165;

sk$JSON$dtTupleReader.prototype.__copy = function() {
  return new (sk$JSON$dtTupleReader)(this.iter);
};

sk$JSON$dtTupleReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp277 = __cache.get(this);
  if (_tmp277 === undefined)
    {
      var _tmp277 = this.__copy();
      _tmp277.$frozen = true;
      __cache.set(this, _tmp277);
      _tmp277.iter = skip.deepFreeze(_tmp277.iter, __cache);
    }
  return _tmp277;
};

sk$JSON$dtTupleReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtTupleReader.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  return t$.endBase(t$2);
};

sk$JSON$dtTupleReader.prototype.readValue = function(serializer) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.iter;
  var t$3 = serializer;
  var $var = t$.readValueBase(t$2, t$3);
  var val;
  {
    jumpBlockOuterjumpLab$bg5456:{
      jumpLab$bg5456:{
        jumpLab$bg5455:{
          switch ($var.__type_switch_id) {
            case 205:
              val = $var.value;
              break jumpLab$bg5455;
            
            case 204:
              break jumpLab$bg5456;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return val;
      }
      skip.throwException(sk, singleton$Serialization$dtTupleSizeOutOfBoundsError);
    }
  }
};

sk$JSON$dtTupleReader.prototype.__bases = [
  sk$JSON$dtTupleReader,
  sk$JSON$dtValueReader,
  sk$Serialization$dtTupleReader
];

var sk$JSON$dtTupleWriter = sk.JSON$dtTupleWriter = function JSON$dtTupleWriter(jsonFormatter, begun) {
  this.jsonFormatter = jsonFormatter;
  this.begun = begun === undefined ? ((() => 
  {
    return new sk$Bool((false));
  })()) : begun;
};

sk$JSON$dtTupleWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtTupleWriter.prototype.__constructor = sk$JSON$dtTupleWriter;

sk$JSON$dtTupleWriter.prototype.__classname = 'JSON.TupleWriter';

sk$JSON$dtTupleWriter.prototype.$frozen = false;

sk$JSON$dtTupleWriter.prototype.__type_switch_id = 167;

sk$JSON$dtTupleWriter.prototype.__copy = function() {
  return new (sk$JSON$dtTupleWriter)(this.jsonFormatter, this.begun);
};

sk$JSON$dtTupleWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp278 = __cache.get(this);
  if (_tmp278 === undefined)
    {
      var _tmp278 = this.__copy();
      _tmp278.$frozen = true;
      __cache.set(this, _tmp278);
      _tmp278.jsonFormatter = skip.deepFreeze(_tmp278.jsonFormatter, __cache);
      _tmp278.begun = skip.deepFreeze(_tmp278.begun, __cache);
    }
  return _tmp278;
};

sk$JSON$dtTupleWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtTupleWriter.prototype.end = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = this;
  var t$4 = t$3.begun;
  t$.endBase(t$2, t$4);
  var $var = this;
  var t$5 = $var;
  var t$6 = t$5;
  t$6.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtTupleWriter.prototype.writeValue = function(value, serializer) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.jsonFormatter;
  var t$3 = serializer;
  var t$4 = value;
  var t$5 = this;
  var t$6 = t$5.begun;
  t$.writeValueBase(t$2, t$3, t$4, t$6);
  var $var = this;
  var t$7 = $var;
  var t$8 = t$7;
  t$8.begun = new sk$Bool((true));
  return sk.__.$void;
};

sk$JSON$dtTupleWriter.prototype.__bases = [
  sk$JSON$dtTupleWriter,
  sk$JSON$dtValueWriter,
  sk$Serialization$dtTupleWriter
];

var sk$KeyNotFound = sk.KeyNotFound = function KeyNotFound() {};

sk$KeyNotFound.prototype = Object.create(Object.prototype);

sk$KeyNotFound.prototype.__constructor = sk$KeyNotFound;

sk$KeyNotFound.prototype.__classname = 'KeyNotFound';

sk$KeyNotFound.prototype.$frozen = true;

sk$KeyNotFound.prototype.__type_switch_id = 74;

sk$KeyNotFound.prototype.__copy = function() {
  return new (sk$KeyNotFound)();
};

sk$KeyNotFound.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp279 = __cache.get(this);
  if (_tmp279 === undefined)
    {
      var _tmp279 = this.__copy();
      _tmp279.$frozen = true;
      __cache.set(this, _tmp279);
    }
  return _tmp279;
};

sk$KeyNotFound.prototype.__init = function(__named_parameters) {};

sk$KeyNotFound.prototype.getMessage = function() {
  return new sk$String(('Key not found'));
};

sk$KeyNotFound.prototype.__bases = [
  sk$KeyNotFound,
  sk$Exception
];

var sk$LT = sk.LT = function LT() {};

sk$LT.prototype = Object.create(Object.prototype);

sk$LT.prototype.__constructor = sk$LT;

sk$LT.prototype.__classname = 'LT';

sk$LT.prototype.$frozen = true;

sk$LT.prototype.__type_switch_id = 208;

sk$LT.prototype.__copy = function() {
  return new (sk$LT)();
};

sk$LT.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp280 = __cache.get(this);
  if (_tmp280 === undefined)
    {
      var _tmp280 = this.__copy();
      _tmp280.$frozen = true;
      __cache.set(this, _tmp280);
    }
  return _tmp280;
};

sk$LT.prototype.__init = function(__named_parameters) {};

sk$LT.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$LT.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$LT.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$LT.prototype.$eq$eq = function(x) {
  jumpBlockOuterjumpLab$bg5674:{
    jumpLab$bg5674:{
      jumpLab$bg5673:{
        switch (x.__type_switch_id) {
          case 208:
            break jumpLab$bg5673;
          
          default:
            break jumpLab$bg5674;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$LT.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$LT.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$LT.generator = function() {
  return singleton$QuickCheck$dtOrderGenerator;
};

sk$LT.prototype.getClassName = function() {
  return new sk$String(('LT'));
};

sk$LT.prototype.hash = function() {
  return new sk$String(('LT')).hash();
};

sk$LT.prototype.isEQ = function() {
  return new sk$Bool((false));
};

sk$LT.prototype.isGT = function() {
  return new sk$Bool((false));
};

sk$LT.prototype.isGTE = function() {
  return new sk$Bool((false));
};

sk$LT.prototype.isLT = function() {
  return new sk$Bool((true));
};

sk$LT.prototype.isLTE = function() {
  return new sk$Bool((true));
};

sk$LT.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    return undefined;
  });
};

sk$LT.prototype.toString = function() {
  return new sk$String(('less than'));
};

sk$LT.prototype.typeOrder = function() {
  return new sk$Int(0.0, 0.0);
};

sk$LT.prototype.__bases = [
  sk$LT,
  sk$Order
];

var sk$List = sk.List = function List() {};

sk$List.prototype = Object.create(Object.prototype);

sk$List.prototype.__constructor = sk$List;

sk$List.prototype.__classname = 'List';

sk$List.prototype.$frozen = undefined;

sk$List.prototype.__type_switch_id = -1;

sk$List.prototype.__copy = function() {};

sk$List.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp281 = __cache.get(this);
  if (_tmp281 === undefined)
    {
      var _tmp281 = this.__copy();
      _tmp281.$frozen = true;
      __cache.set(this, _tmp281);
    }
  return _tmp281;
};

sk$List.prototype.__init = function(__named_parameters) {};

sk$List.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$List.prototype.$lt = function(x) {
  var t$ = this;
  var t$1 = x;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$List.prototype.$lt$eq = function(x) {
  var t$ = this;
  var t$1 = x;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$List.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  return t$.eqBy(t$1, ((a, b) => 
  {
    var t$2 = a;
    var t$3 = b;
    return t$2.$eq$eq(t$3);
  }));
};

sk$List.prototype.$gt = function(x) {
  var t$ = this;
  var t$1 = x;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$List.prototype.$gt$eq = function(x) {
  var t$ = this;
  var t$1 = x;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$List.prototype.all = function(predicate) {
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6000:{
      break$bg6000:{
        do
          {
            jumpBlockOutercontinue$bg6001:{
              continue$bg6001:{
                {
                  var head;
                  var tail;
                  {
                    jumpBlockOuterjumpLab$bg6009:{
                      jumpLab$bg6009:{
                        jumpLab$bg6008:{
                          switch (cur.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6008;
                            
                            case 268:
                              head = cur.head;
                              tail = cur.tail;
                              break jumpLab$bg6009;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = new sk$Bool((true));
                          break break$bg6000;
                        }
                      }
                      {
                        var t$ = predicate;
                        var t$1 = head;
                        var t$2 = t$(t$1);
                        var t$3;
                        if (t$2.$bg().__value)
                          {
                            break_val = new sk$Bool((false));
                            break break$bg6000;
                          }
                        else
                          t$3 = sk.__.$void;
                        cur = tail;
                      }
                      break jumpBlockOuterjumpLab$bg6009;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6001;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6000;
    }
  }
  return break_val;
};

sk$List.all2 = function(values1, values2, predicate) {
  do
    {
      jumpBlockOuterloop_end$bg6029:{
        loop_end$bg6029:{
          {
            var t$ = values1;
            var t$1 = values2;
            var $var = new (sk$Tuple2)(t$, t$1);
            var tail1;
            var head2;
            var head1;
            var tail2;
            {
              jumpBlockOuterjumpLab$bg6024:{
                jumpLab$bg6024:{
                  jumpLab$bg6023:{
                    jumpLab$bg6022:{
                      jumpLab$bg6025:{
                        jumpLab$bg6026:{
                          jumpLab$bg6027:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg6027;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6025;
                            
                            case 268:
                              break jumpLab$bg6026;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 268:
                            head1 = $var.i0.head;
                            tail1 = $var.i0.tail;
                            head2 = $var.i1.head;
                            tail2 = $var.i1.tail;
                            break jumpLab$bg6023;
                          
                          default:
                            break jumpLab$bg6024;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 269:
                          break jumpLab$bg6022;
                        
                        default:
                          break jumpLab$bg6024;

                      }
                    }
                    return new sk$Bool((true));
                  }
                  {
                    var t$2 = predicate;
                    var t$3 = head1;
                    var t$4 = head2;
                    if (t$2(t$3, t$4).__value)
                      {
                        var t$5 = tail1;
                        var t$6 = tail2;
                        var t$7 = predicate;
                        var t$8 = t$5;
                        var t$9 = t$6;
                        var t$10 = t$7;
                        values1 = t$8;
                        values2 = t$9;
                        predicate = t$10;
                        break loop_end$bg6029;
                      }
                    else
                      return new sk$Bool((false));
                  }
                }
                return sk$invariant_violation(new sk$String(('Mismatched sizes in List.all2')));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg6029;
      }
    }
  while (true);
};

sk$List.prototype.any = function(predicate) {
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6035:{
      break$bg6035:{
        do
          {
            jumpBlockOutercontinue$bg6036:{
              continue$bg6036:{
                {
                  var head;
                  var tail;
                  {
                    jumpBlockOuterjumpLab$bg6043:{
                      jumpLab$bg6043:{
                        jumpLab$bg6042:{
                          switch (cur.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6042;
                            
                            case 268:
                              head = cur.head;
                              tail = cur.tail;
                              break jumpLab$bg6043;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = new sk$Bool((false));
                          break break$bg6035;
                        }
                      }
                      {
                        var t$ = predicate;
                        var t$1 = head;
                        var t$2;
                        if (t$(t$1).__value)
                          {
                            break_val = new sk$Bool((true));
                            break break$bg6035;
                          }
                        else
                          t$2 = sk.__.$void;
                        cur = tail;
                      }
                      break jumpBlockOuterjumpLab$bg6043;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6036;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6035;
    }
  }
  return break_val;
};

sk$List.combine = function(values1, values2) {
  var t$ = this;
  var t$1 = values1;
  var t$2 = values2;
  return t$.map2(((a, b) => 
  {
    var t$3 = a;
    var t$4 = b;
    return new (sk$Tuple2)(t$3, t$4);
  }), t$1, t$2);
};

sk$List.prototype.concat = function(tail) {
  var result = tail;
  var t$ = this;
  var t$1 = t$.reversed();
  t$1.each(((element) => 
  {
    var t$2 = element;
    var t$3 = result;
    result = new (sk$List$dtCons)(t$2, t$3);
    return sk.__.$void;
  }));
  return result;
};

sk$List.prototype.contains = function(value) {
  var t$ = this;
  return t$.any(((element) => 
  {
    var t$1 = element;
    var t$2 = value;
    return t$1.$eq$eq(t$2);
  }));
};

sk$List.create = function() {
  return singleton$List$dtNil;
};

sk$List.createFromItems = function(items) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6064:{
      break$bg6064:{
        dowhile_else$bg6063:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6065:{
                dowhile_cond$bg6065:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg6080:{
                        jumpLab$bg6080:{
                          jumpLab$bg6079:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6079;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg6080;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6065;
                          }
                        }
                        {
                          var t$3 = x;
                          var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                          var t$4;
                          var p;
                          {
                            jumpBlockOuterjumpLab$bg6076:{
                              jumpLab$bg6076:{
                                jumpLab$bg6075:{
                                  switch (prev.__type_switch_id) {
                                    case 205:
                                      p = prev.value;
                                      break jumpLab$bg6075;
                                    
                                    case 204:
                                      break jumpLab$bg6076;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var var3 = p;
                                  var t$5 = var3;
                                  var t$6 = t$5;
                                  t$6.tail = c;
                                  t$4 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg6076;
                              }
                              {
                                result = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg6076;
                            }
                          }
                          var t$7 = c;
                          prev = new (sk$Some)(t$7);
                        }
                        break jumpBlockOuterjumpLab$bg6080;
                      }
                    }
                    break dowhile_cond$bg6065;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6063;
                break jumpBlockOuterdowhile_cond$bg6065;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6064;
      }
      {}
      break jumpBlockOuterbreak$bg6064;
    }
  }
  var t$8 = result;
  return t$8;
};

sk$List.createFromIterator = function(items) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6087:{
      break$bg6087:{
        dowhile_else$bg6086:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6088:{
                dowhile_cond$bg6088:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg6103:{
                        jumpLab$bg6103:{
                          jumpLab$bg6102:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6102;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg6103;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6088;
                          }
                        }
                        {
                          var t$3 = x;
                          var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                          var t$4;
                          var p;
                          {
                            jumpBlockOuterjumpLab$bg6099:{
                              jumpLab$bg6099:{
                                jumpLab$bg6098:{
                                  switch (prev.__type_switch_id) {
                                    case 205:
                                      p = prev.value;
                                      break jumpLab$bg6098;
                                    
                                    case 204:
                                      break jumpLab$bg6099;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var var3 = p;
                                  var t$5 = var3;
                                  var t$6 = t$5;
                                  t$6.tail = c;
                                  t$4 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg6099;
                              }
                              {
                                result = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg6099;
                            }
                          }
                          var t$7 = c;
                          prev = new (sk$Some)(t$7);
                        }
                        break jumpBlockOuterjumpLab$bg6103;
                      }
                    }
                    break dowhile_cond$bg6088;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6086;
                break jumpBlockOuterdowhile_cond$bg6088;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6087;
      }
      {}
      break jumpBlockOuterbreak$bg6087;
    }
  }
  var t$8 = result;
  return t$8;
};

sk$List.prototype.each = function(f) {
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6107:{
      break$bg6107:{
        do
          {
            jumpBlockOutercontinue$bg6108:{
              continue$bg6108:{
                {
                  var x;
                  var xs;
                  {
                    jumpBlockOuterjumpLab$bg6114:{
                      jumpLab$bg6114:{
                        jumpLab$bg6113:{
                          switch (cur.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6113;
                            
                            case 268:
                              x = cur.head;
                              xs = cur.tail;
                              break jumpLab$bg6114;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg6107;
                        }
                      }
                      {
                        var t$ = f;
                        var t$1 = x;
                        t$(t$1);
                        cur = xs;
                      }
                      break jumpBlockOuterjumpLab$bg6114;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6108;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6107;
    }
  }
  return break_val;
};

sk$List.prototype.eqBy = function(other, eq) {
  var l1 = this;
  var l2 = other;
  var break_val;
  {
    jumpBlockOuterbreak$bg6118:{
      break$bg6118:{
        do
          {
            jumpBlockOutercontinue$bg6119:{
              continue$bg6119:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var $var = new (sk$Tuple2)(t$, t$1);
                  var head2;
                  var head1;
                  var tail2;
                  var tail1;
                  var _;
                  {
                    jumpBlockOuterjumpLab$bg6132:{
                      jumpLab$bg6132:{
                        jumpLab$bg6131:{
                          jumpLab$bg6130:{
                            jumpLab$bg6133:{
                              jumpLab$bg6134:{
                                jumpLab$bg6135:{
                                  switch ($var.__type_switch_id) {
                                    case 392:
                                      break jumpLab$bg6135;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 269:
                                    break jumpLab$bg6133;
                                  
                                  case 268:
                                    break jumpLab$bg6134;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg6132;

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 268:
                                  head1 = $var.i0.head;
                                  tail1 = $var.i0.tail;
                                  head2 = $var.i1.head;
                                  tail2 = $var.i1.tail;
                                  break jumpLab$bg6131;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg6132;

                              }
                            }
                            switch ($var.i1.__type_switch_id) {
                              case 269:
                                break jumpLab$bg6130;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg6132;

                            }
                          }
                          {
                            break_val = new sk$Bool((true));
                            break break$bg6118;
                          }
                        }
                        {
                          var t$2 = eq;
                          var t$3 = head1;
                          var t$4 = head2;
                          var t$5 = t$2(t$3, t$4);
                          var t$6;
                          if (t$5.$bg().__value)
                            {
                              break_val = new sk$Bool((false));
                              break break$bg6118;
                            }
                          else
                            t$6 = sk.__.$void;
                          l1 = tail1;
                          l2 = tail2;
                        }
                        break jumpBlockOuterjumpLab$bg6132;
                      }
                      {
                        break_val = new sk$Bool((false));
                        break break$bg6118;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6119;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6118;
    }
  }
  return break_val;
};

sk$List.prototype.filter = function(test) {
  var t$ = this;
  var t$1 = t$.values();
  var t$2 = test;
  var t$3 = t$1.filter(t$2);
  return sk$List.createFromIterator(t$3);
};

sk$List.prototype.filterNone = function() {
  var t$ = this;
  var t$1 = t$.filter(((element) => 
  {
    var t$2 = element;
    var t$3 = t$2;
    return t$3.isSome();
  }));
  return t$1.map(((element1) => 
  {
    var t$4 = element1;
    var t$5 = t$4;
    return t$5.fromSome(undefined);
  }));
};

sk$List.prototype.find = function(p) {
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6151:{
      break$bg6151:{
        do
          {
            jumpBlockOutercontinue$bg6152:{
              continue$bg6152:{
                {
                  var head;
                  var tail;
                  {
                    jumpBlockOuterjumpLab$bg6160:{
                      jumpLab$bg6160:{
                        jumpLab$bg6159:{
                          switch (cur.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6159;
                            
                            case 268:
                              head = cur.head;
                              tail = cur.tail;
                              break jumpLab$bg6160;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = singleton$None;
                          break break$bg6151;
                        }
                      }
                      {
                        var t$ = p;
                        var t$1 = head;
                        var t$2;
                        if (t$(t$1).__value)
                          {
                            var t$3 = head;
                            break_val = new (sk$Some)(t$3);
                            break break$bg6151;
                          }
                        else
                          t$2 = sk.__.$void;
                        cur = tail;
                      }
                      break jumpBlockOuterjumpLab$bg6160;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6152;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6151;
    }
  }
  return break_val;
};

sk$List.prototype.flatten = function() {
  var t$ = this;
  return t$.foldl(((result, items) => 
  {
    var t$1 = result;
    var t$2 = items;
    var t$3 = sk$List.createFromItems(t$2);
    return t$1.concat(t$3);
  }), singleton$List$dtNil);
};

sk$List.fold2 = function(l1, l2, fn, initial) {
  var break_val;
  {
    jumpBlockOuterbreak$bg6169:{
      break$bg6169:{
        do
          {
            jumpBlockOutercontinue$bg6170:{
              continue$bg6170:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var $var = new (sk$Tuple2)(t$, t$1);
                  var tail1;
                  var head2;
                  var head1;
                  var _;
                  var tail2;
                  {
                    jumpBlockOuterjumpLab$bg6182:{
                      jumpLab$bg6182:{
                        jumpLab$bg6181:{
                          jumpLab$bg6180:{
                            jumpLab$bg6183:{
                              jumpLab$bg6184:{
                                jumpLab$bg6185:{
                                  switch ($var.__type_switch_id) {
                                    case 392:
                                      break jumpLab$bg6185;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 268:
                                    break jumpLab$bg6183;
                                  
                                  case 269:
                                    break jumpLab$bg6184;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 269:
                                  break jumpLab$bg6181;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg6182;

                              }
                            }
                            switch ($var.i1.__type_switch_id) {
                              case 268:
                                head1 = $var.i0.head;
                                tail1 = $var.i0.tail;
                                head2 = $var.i1.head;
                                tail2 = $var.i1.tail;
                                break jumpLab$bg6180;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg6182;

                            }
                          }
                          {
                            l1 = tail1;
                            l2 = tail2;
                            var t$2 = fn;
                            var t$3 = initial;
                            var t$4 = head1;
                            var t$5 = head2;
                            initial = t$2(t$3, t$4, t$5);
                          }
                          break jumpBlockOuterjumpLab$bg6182;
                        }
                        {
                          break_val = initial;
                          break break$bg6169;
                        }
                      }
                      sk$invariant_violation(new sk$String(('Mismatched list sizes')));
                      break jumpBlockOuterjumpLab$bg6182;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6170;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6169;
    }
  }
  return break_val;
};

sk$List.fold3 = function(l1, l2, l3, fn, initial) {
  var break_val;
  {
    jumpBlockOuterbreak$bg6189:{
      break$bg6189:{
        do
          {
            jumpBlockOutercontinue$bg6190:{
              continue$bg6190:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var t$2 = l3;
                  var $var = new (sk$Tuple3)(t$, t$1, t$2);
                  var tail1;
                  var _;
                  var head3;
                  var head2;
                  var head1;
                  var tail3;
                  var tail2;
                  {
                    jumpBlockOuterjumpLab$bg6204:{
                      jumpLab$bg6204:{
                        jumpLab$bg6203:{
                          jumpLab$bg6202:{
                            jumpLab$bg6205:{
                              jumpLab$bg6206:{
                                jumpLab$bg6207:{
                                  jumpLab$bg6208:{
                                    jumpLab$bg6209:{
                                      switch ($var.__type_switch_id) {
                                        case 393:
                                          break jumpLab$bg6209;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    switch ($var.i0.__type_switch_id) {
                                      case 268:
                                        break jumpLab$bg6206;
                                      
                                      case 269:
                                        break jumpLab$bg6208;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  switch ($var.i1.__type_switch_id) {
                                    case 269:
                                      break jumpLab$bg6207;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg6204;

                                  }
                                }
                                switch ($var.i2.__type_switch_id) {
                                  case 269:
                                    break jumpLab$bg6203;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg6204;

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 268:
                                  break jumpLab$bg6205;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg6204;

                              }
                            }
                            switch ($var.i2.__type_switch_id) {
                              case 268:
                                head1 = $var.i0.head;
                                tail1 = $var.i0.tail;
                                head2 = $var.i1.head;
                                tail2 = $var.i1.tail;
                                head3 = $var.i2.head;
                                tail3 = $var.i2.tail;
                                break jumpLab$bg6202;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg6204;

                            }
                          }
                          {
                            l1 = tail1;
                            l2 = tail2;
                            l3 = tail3;
                            var t$3 = fn;
                            var t$4 = initial;
                            var t$5 = head1;
                            var t$6 = head2;
                            var t$7 = head3;
                            initial = t$3(t$4, t$5, t$6, t$7);
                          }
                          break jumpBlockOuterjumpLab$bg6204;
                        }
                        {
                          break_val = initial;
                          break break$bg6189;
                        }
                      }
                      sk$invariant_violation(new sk$String(('Mismatched list sizes')));
                      break jumpBlockOuterjumpLab$bg6204;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6190;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6189;
    }
  }
  return break_val;
};

sk$List.prototype.foldl = function(f, init) {
  var list = this;
  {
    jumpBlockOuterbreak$bg6214:{
      break$bg6214:{
        while_else$bg6213:{
          do
            {
              jumpBlockOutercontinue$bg6215:{
                continue$bg6215:{
                  {
                    var t$;
                    var x;
                    var xs;
                    {
                      jumpBlockOuterjumpLab$bg6223:{
                        jumpLab$bg6223:{
                          jumpLab$bg6222:{
                            switch (list.__type_switch_id) {
                              case 268:
                                x = list.head;
                                xs = list.tail;
                                break jumpLab$bg6222;
                              
                              case 269:
                                break jumpLab$bg6223;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var t$1 = f;
                            var t$2 = init;
                            var t$3 = x;
                            init = t$1(t$2, t$3);
                            list = xs;
                            t$ = new sk$Bool((true));
                          }
                          break jumpBlockOuterjumpLab$bg6223;
                        }
                        t$ = new sk$Bool((false));
                        break jumpBlockOuterjumpLab$bg6223;
                      }
                    }
                    if (t$.__value)
                      {}
                    else
                      break while_else$bg6213;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg6215;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6214;
      }
      {}
      break jumpBlockOuterbreak$bg6214;
    }
  }
  return init;
};

sk$List.prototype.foldr = function(f, init) {
  var t$ = this;
  var t$1 = t$.toArray();
  var t$2 = t$1.reversedValues();
  var t$3 = init;
  return t$2.reduce(((a, b) => 
  {
    var t$4 = f;
    var t$5 = b;
    var t$6 = a;
    return t$4(t$5, t$6);
  }), t$3);
};

sk$List.foldr2 = function(values1, values2, fn, initial) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg6247:{
      jumpLab$bg6247:{
        jumpLab$bg6246:{
          jumpLab$bg6245:{
            jumpLab$bg6248:{
              jumpLab$bg6249:{
                jumpLab$bg6250:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg6250;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg6248;
                  
                  case 268:
                    break jumpLab$bg6249;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg6246;
                
                default:
                  break jumpLab$bg6247;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg6245;
              
              default:
                break jumpLab$bg6247;

            }
          }
          return initial;
        }
        {
          var t$2 = fn;
          var t$3 = this;
          var t$4 = tail1;
          var t$5 = tail2;
          var t$6 = fn;
          var t$7 = initial;
          var t$8 = t$3.foldr2(t$4, t$5, t$6, t$7);
          var t$9 = head1;
          var t$10 = head2;
          return t$2(t$8, t$9, t$10);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched list sizes')));
    }
  }
};

sk$List.prototype.genReverse = skip.asyncToGenerator(function*() {
  var t$ = this;
  return (yield t$.genReverseHelp(singleton$List$dtNil));
});

sk$List.prototype.getNth = function(index) {
  var x = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6256:{
      break$bg6256:{
        do
          {
            jumpBlockOutercontinue$bg6257:{
              continue$bg6257:{
                {
                  var t$ = x;
                  var t$1 = index;
                  var $var = new (sk$Tuple2)(t$, t$1);
                  var _;
                  var head;
                  var _1;
                  var tail;
                  var _2;
                  var _3;
                  {
                    jumpBlockOuterjumpLab$bg6266:{
                      jumpLab$bg6266:{
                        jumpLab$bg6265:{
                          jumpLab$bg6264:{
                            jumpLab$bg6267:{
                              jumpLab$bg6268:{
                                switch ($var.__type_switch_id) {
                                  case 392:
                                    break jumpLab$bg6268;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i0.__type_switch_id) {
                                case 269:
                                  _ = $var.i1;
                                  break jumpLab$bg6264;
                                
                                case 268:
                                  break jumpLab$bg6267;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var _tmp282 = $var.i1.__getSwitchValue();
                              switch (_tmp282) {
                                case 0:
                                  {
                                    head = $var.i0.head;
                                    _2 = $var.i0.tail;
                                    break jumpLab$bg6265;
                                  }
                                
                                default:
                                  {
                                    _1 = $var.i0.head;
                                    tail = $var.i0.tail;
                                    _3 = $var.i1;
                                    break jumpLab$bg6266;
                                  }

                              }
                            }
                          }
                          sk$throwOutOfBounds();
                          break jumpBlockOuterjumpLab$bg6266;
                        }
                        {
                          break_val = head;
                          break break$bg6256;
                        }
                      }
                      {
                        x = tail;
                        var t$2 = index;
                        index = t$2.$mi(new sk$Int(1.0, 0.0));
                      }
                      break jumpBlockOuterjumpLab$bg6266;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6257;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6256;
    }
  }
  return break_val;
};

sk$List.prototype.hash = function() {
  var t$ = this;
  return t$.foldl(((i, x) => 
  {
    var t$1 = i;
    var t$2 = x;
    var t$3 = t$2.hash();
    var t$4 = new (sk$Tuple2)(t$1, t$3);
    return t$4.hash();
  }), new sk$Int(0.0, 0.0));
};

sk$List.prototype.hashBy = function(hash, seed) {
  var t$ = this;
  var t$1 = seed;
  return t$.foldl(((i, x) => 
  {
    var t$2 = i;
    var t$3 = hash;
    var t$4 = x;
    var t$5 = t$3(t$4);
    var t$6 = new (sk$Tuple2)(t$2, t$5);
    return t$6.hash();
  }), t$1);
};

sk$List.iter2 = function(values1, values2, fn) {
  do
    {
      jumpBlockOuterloop_end$bg6300:{
        loop_end$bg6300:{
          {
            var t$ = values1;
            var t$1 = values2;
            var $var = new (sk$Tuple2)(t$, t$1);
            var tail1;
            var head2;
            var head1;
            var tail2;
            {
              jumpBlockOuterjumpLab$bg6295:{
                jumpLab$bg6295:{
                  jumpLab$bg6294:{
                    jumpLab$bg6293:{
                      jumpLab$bg6296:{
                        jumpLab$bg6297:{
                          jumpLab$bg6298:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg6298;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6296;
                            
                            case 268:
                              break jumpLab$bg6297;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 268:
                            head1 = $var.i0.head;
                            tail1 = $var.i0.tail;
                            head2 = $var.i1.head;
                            tail2 = $var.i1.tail;
                            break jumpLab$bg6294;
                          
                          default:
                            break jumpLab$bg6295;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 269:
                          break jumpLab$bg6293;
                        
                        default:
                          break jumpLab$bg6295;

                      }
                    }
                    return sk.__.$void;
                  }
                  {
                    var t$2 = fn;
                    var t$3 = head1;
                    var t$4 = head2;
                    t$2(t$3, t$4);
                    var t$5 = tail1;
                    var t$6 = tail2;
                    var t$7 = fn;
                    var t$8 = t$5;
                    var t$9 = t$6;
                    var t$10 = t$7;
                    values1 = t$8;
                    values2 = t$9;
                    fn = t$10;
                    break loop_end$bg6300;
                  }
                }
                return sk$invariant_violation(new sk$String(('Mismatched sizes in List.iter2')));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg6300;
      }
    }
  while (true);
};

sk$List.prototype.join = function(separator) {
  var t$ = this;
  var t$1 = t$.collect(sk$Array);
  var t$2 = separator;
  return t$1.join(t$2);
};

sk$List.prototype.last = function() {
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6310:{
      break$bg6310:{
        do
          {
            jumpBlockOutercontinue$bg6311:{
              continue$bg6311:{
                {
                  var hd;
                  var tl;
                  var _;
                  {
                    jumpBlockOuterjumpLab$bg6317:{
                      jumpLab$bg6317:{
                        jumpLab$bg6316:{
                          jumpLab$bg6315:{
                            jumpLab$bg6318:{
                              switch (cur.__type_switch_id) {
                                case 269:
                                  break jumpLab$bg6315;
                                
                                case 268:
                                  break jumpLab$bg6318;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (cur.tail.__type_switch_id) {
                              case 269:
                                hd = cur.head;
                                break jumpLab$bg6316;
                              
                              default:
                                _ = cur.head;
                                tl = cur.tail;
                                break jumpLab$bg6317;

                            }
                          }
                          {
                            var t$ = this;
                            break_val = t$.getHead();
                            break break$bg6310;
                          }
                        }
                        {
                          break_val = hd;
                          break break$bg6310;
                        }
                      }
                      cur = tl;
                      break jumpBlockOuterjumpLab$bg6317;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6311;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6310;
    }
  }
  return break_val;
};

sk$List.prototype.map = function(f) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6322:{
      break$bg6322:{
        do
          {
            jumpBlockOutercontinue$bg6323:{
              continue$bg6323:{
                {
                  var tail;
                  var head;
                  {
                    jumpBlockOuterjumpLab$bg6338:{
                      jumpLab$bg6338:{
                        jumpLab$bg6337:{
                          switch (cur.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6337;
                            
                            case 268:
                              head = cur.head;
                              tail = cur.tail;
                              break jumpLab$bg6338;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$ = result;
                          break_val = t$;
                          break break$bg6322;
                        }
                      }
                      {
                        cur = tail;
                        var t$1 = f;
                        var t$2 = head;
                        var t$3 = t$1(t$2);
                        var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                        var t$4;
                        var p;
                        {
                          jumpBlockOuterjumpLab$bg6335:{
                            jumpLab$bg6335:{
                              jumpLab$bg6334:{
                                switch (prev.__type_switch_id) {
                                  case 205:
                                    p = prev.value;
                                    break jumpLab$bg6334;
                                  
                                  case 204:
                                    break jumpLab$bg6335;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var $var = p;
                                var t$5 = $var;
                                var t$6 = t$5;
                                t$6.tail = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg6335;
                            }
                            {
                              result = c;
                              t$4 = sk.__.$void;
                            }
                            break jumpBlockOuterjumpLab$bg6335;
                          }
                        }
                        var t$7 = c;
                        prev = new (sk$Some)(t$7);
                      }
                      break jumpBlockOuterjumpLab$bg6338;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6323;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6322;
    }
  }
  return break_val;
};

sk$List.map2 = function(f, a, b) {
  var t$ = a;
  var t$1 = b;
  var $var = new (sk$Tuple2)(t$, t$1);
  var bhd;
  var ahd;
  var btl;
  var atl;
  {
    jumpBlockOuterjumpLab$bg6355:{
      jumpLab$bg6355:{
        jumpLab$bg6354:{
          jumpLab$bg6353:{
            jumpLab$bg6356:{
              jumpLab$bg6357:{
                jumpLab$bg6358:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg6358;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg6356;
                  
                  case 268:
                    break jumpLab$bg6357;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  ahd = $var.i0.head;
                  atl = $var.i0.tail;
                  bhd = $var.i1.head;
                  btl = $var.i1.tail;
                  break jumpLab$bg6354;
                
                default:
                  break jumpLab$bg6355;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg6353;
              
              default:
                break jumpLab$bg6355;

            }
          }
          return singleton$List$dtNil;
        }
        {
          var t$2 = f;
          var t$3 = ahd;
          var t$4 = bhd;
          var t$5 = t$2(t$3, t$4);
          var t$6 = this;
          var t$7 = f;
          var t$8 = atl;
          var t$9 = btl;
          var t$10 = t$6.map2(t$7, t$8, t$9);
          return new (sk$List$dtCons)(t$5, t$10);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched list sizes')));
    }
  }
};

sk$List.mapRev = function(f, acc, list) {
  do
    {
      jumpBlockOuterloop_end$bg6371:{
        loop_end$bg6371:{
          {
            var t;
            var h;
            {
              jumpBlockOuterjumpLab$bg6369:{
                jumpLab$bg6369:{
                  jumpLab$bg6368:{
                    switch (list.__type_switch_id) {
                      case 269:
                        break jumpLab$bg6368;
                      
                      case 268:
                        h = list.head;
                        t = list.tail;
                        break jumpLab$bg6369;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return acc;
                }
                {
                  var t$ = f;
                  var t$1 = f;
                  var t$2 = h;
                  var t$3 = t$1(t$2);
                  var t$4 = acc;
                  var t$5 = new (sk$List$dtCons)(t$3, t$4);
                  var t$6 = t;
                  var t$7 = t$;
                  var t$8 = t$5;
                  var t$9 = t$6;
                  f = t$7;
                  acc = t$8;
                  list = t$9;
                  break loop_end$bg6371;
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg6371;
      }
    }
  while (true);
};

sk$List.prototype.mapWithIndex = function(f) {
  var i = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  return t$.map(((v) => 
  {
    var t$1 = i;
    i = t$1.$pl(new sk$Int(1.0, 0.0));
    var t$2 = f;
    var t$3 = i;
    var t$4 = v;
    return t$2(t$3, t$4);
  }));
};

sk$List.prototype.map_foldl = function(f, acc) {
  var t$ = this;
  var list = t$.map(((v) => 
  {
    var t$1 = f;
    var t$2 = acc;
    var t$3 = v;
    var $var = t$1(t$2, t$3);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg6389:{
        jumpLab$bg6389:{
          switch ($var.__type_switch_id) {
            case 392:
              var1 = $var.i0;
              var2 = $var.i1;
              break jumpLab$bg6389;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v2 = var2;
          acc = var1;
          return v2;
        }
      }
    }
  }));
  var t$4 = acc;
  var t$5 = list;
  return new (sk$Tuple2)(t$4, t$5);
};

sk$List.prototype.maybeLast = function() {
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6392:{
      break$bg6392:{
        do
          {
            jumpBlockOutercontinue$bg6393:{
              continue$bg6393:{
                {
                  var hd;
                  var tl;
                  var _;
                  {
                    jumpBlockOuterjumpLab$bg6399:{
                      jumpLab$bg6399:{
                        jumpLab$bg6398:{
                          jumpLab$bg6397:{
                            jumpLab$bg6400:{
                              switch (cur.__type_switch_id) {
                                case 269:
                                  break jumpLab$bg6397;
                                
                                case 268:
                                  break jumpLab$bg6400;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (cur.tail.__type_switch_id) {
                              case 269:
                                hd = cur.head;
                                break jumpLab$bg6398;
                              
                              default:
                                _ = cur.head;
                                tl = cur.tail;
                                break jumpLab$bg6399;

                            }
                          }
                          {
                            break_val = singleton$None;
                            break break$bg6392;
                          }
                        }
                        {
                          var t$ = hd;
                          break_val = new (sk$Some)(t$);
                          break break$bg6392;
                        }
                      }
                      cur = tl;
                      break jumpBlockOuterjumpLab$bg6399;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6393;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6392;
    }
  }
  return break_val;
};

sk$List.of = function(element) {
  var t$ = element;
  var t$1 = new (sk$Array)([
    t$
  ]);
  return sk$List.createFromItems(t$1);
};

sk$List.prototype.partition = function(p) {
  var cur = this;
  var trues = singleton$List$dtNil;
  var falses = singleton$List$dtNil;
  var break_val;
  {
    jumpBlockOuterbreak$bg6407:{
      break$bg6407:{
        do
          {
            jumpBlockOutercontinue$bg6408:{
              continue$bg6408:{
                {
                  var hd;
                  var tl;
                  {
                    jumpBlockOuterjumpLab$bg6423:{
                      jumpLab$bg6423:{
                        jumpLab$bg6422:{
                          switch (cur.__type_switch_id) {
                            case 269:
                              break jumpLab$bg6422;
                            
                            case 268:
                              hd = cur.head;
                              tl = cur.tail;
                              break jumpLab$bg6423;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$ = trues;
                          var t$1 = t$.reversed();
                          var t$2 = falses;
                          var t$3 = t$2.reversed();
                          break_val = new (sk$Tuple2)(t$1, t$3);
                          break break$bg6407;
                        }
                      }
                      {
                        var t$4 = p;
                        var t$5 = hd;
                        var t$6;
                        if (t$4(t$5).__value)
                          {
                            var t$7 = hd;
                            var t$8 = trues;
                            trues = new (sk$List$dtCons)(t$7, t$8);
                            t$6 = sk.__.$void;
                          }
                        else
                          {
                            var t$9 = hd;
                            var t$10 = falses;
                            falses = new (sk$List$dtCons)(t$9, t$10);
                            t$6 = sk.__.$void;
                          }
                        cur = tl;
                      }
                      break jumpBlockOuterjumpLab$bg6423;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6408;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6407;
    }
  }
  return break_val;
};

sk$List.reverseFromIterator = function(items) {
  var result = singleton$List$dtNil;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6430:{
      break$bg6430:{
        dowhile_else$bg6429:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6431:{
                dowhile_cond$bg6431:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var element;
                    {
                      jumpBlockOuterjumpLab$bg6439:{
                        jumpLab$bg6439:{
                          jumpLab$bg6438:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6438;
                              
                              case 205:
                                element = var2.value;
                                break jumpLab$bg6439;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6431;
                          }
                        }
                        {
                          var t$3 = element;
                          var t$4 = result;
                          result = new (sk$List$dtCons)(t$3, t$4);
                        }
                        break jumpBlockOuterjumpLab$bg6439;
                      }
                    }
                    break dowhile_cond$bg6431;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6429;
                break jumpBlockOuterdowhile_cond$bg6431;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6430;
      }
      {}
      break jumpBlockOuterbreak$bg6430;
    }
  }
  return result;
};

sk$List.prototype.reversed = function() {
  var result = singleton$List$dtNil;
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6445:{
      break$bg6445:{
        dowhile_else$bg6444:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6446:{
                dowhile_cond$bg6446:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg6454:{
                        jumpLab$bg6454:{
                          jumpLab$bg6453:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6453;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg6454;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6446;
                          }
                        }
                        {
                          var t$2 = x;
                          var t$3 = result;
                          result = new (sk$List$dtCons)(t$2, t$3);
                        }
                        break jumpBlockOuterjumpLab$bg6454;
                      }
                    }
                    break dowhile_cond$bg6446;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6444;
                break jumpBlockOuterdowhile_cond$bg6446;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6445;
      }
      {}
      break jumpBlockOuterbreak$bg6445;
    }
  }
  return result;
};

sk$List.prototype.size = function() {
  var t$ = this;
  return t$.foldl(((size, _) => 
  {
    var t$1 = size;
    return t$1.$pl(new sk$Int(1.0, 0.0));
  }), new sk$Int(0.0, 0.0));
};

sk$List.prototype.sorted = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = sk$Array.createFromItems(t$);
  var t$2 = compare;
  var t$3 = t$1.sorted(t$2);
  return sk$List.createFromItems(t$3);
};

sk$List.prototype.sortedBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = sk$Array.createFromItems(t$);
  var t$2 = selector;
  var t$3 = compare;
  var t$4 = t$1.sortedBy(t$2, t$3);
  return sk$List.createFromItems(t$4);
};

sk$List.prototype.sorted_DEPRECATED = function(cmp) {
  var t$ = this;
  var items = sk$Array.mcreateFromItems(t$);
  var t$1 = items;
  t$1.sortBy(((x) => 
  {
    var t$2 = x;
    var t$3 = cmp;
    return sk$Orderable$dtcreate(t$2, t$3);
  }), undefined);
  var t$4 = items;
  var t$5 = t$4.reversedValues();
  return sk$List.reverseFromIterator(t$5);
};

sk$List.prototype.split = function(i) {
  var t$ = this;
  var t$1 = i;
  return t$.splitImpl(t$1, singleton$List$dtNil);
};

sk$List.prototype.splitImpl = function(i, acc) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg6500:{
        loop_end$bg6500:{
          {
            var hd;
            var tl;
            {
              jumpBlockOuterjumpLab$bg6496:{
                jumpLab$bg6496:{
                  jumpLab$bg6495:{
                    switch (t$.__type_switch_id) {
                      case 268:
                        hd = t$.head;
                        tl = t$.tail;
                        var $var = new sk$Bool((false));
                        var t$1 = i;
                        $var = t$1.$gt(new sk$Int(0.0, 0.0));
                        if ($var.__value)
                          break jumpLab$bg6495;
                        else
                          break jumpLab$bg6496;
                      
                      default:
                        break jumpLab$bg6496;

                    }
                  }
                  {
                    var t$2 = tl;
                    var t$3 = i;
                    var t$4 = t$3.$mi(new sk$Int(1.0, 0.0));
                    var t$5 = hd;
                    var t$6 = acc;
                    var t$7 = new (sk$List$dtCons)(t$5, t$6);
                    var t$8 = t$2;
                    var t$9 = t$4;
                    var t$10 = t$7;
                    t$ = t$8;
                    i = t$9;
                    acc = t$10;
                    break loop_end$bg6500;
                  }
                }
                {
                  var t$11 = acc;
                  var t$12 = t$11.reversed();
                  var t$13 = t$;
                  return new (sk$Tuple2)(t$12, t$13);
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg6500;
      }
    }
  while (true);
};

sk$List.tabulate = function(size, f) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('List.tabulate: negative size')));
  var t$2 = this;
  var t$3 = size;
  var t$4 = f;
  return t$2.tabulateFrom(t$3, t$4, singleton$List$dtNil);
};

sk$List.tabulateFrom = function(i, f, rest) {
  do
    {
      jumpBlockOuterloop_end$bg6522:{
        loop_end$bg6522:{
          {
            var t$ = i;
            if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
              return rest;
            else
              {
                var t$1 = this;
                var t$2 = i;
                var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
                var t$4 = f;
                var t$5 = f;
                var t$6 = i;
                var t$7 = t$6.$mi(new sk$Int(1.0, 0.0));
                var t$8 = t$5(t$7);
                var t$9 = rest;
                var t$10 = new (sk$List$dtCons)(t$8, t$9);
                var t$11 = t$3;
                var t$12 = t$4;
                var t$13 = t$10;
                i = t$11;
                f = t$12;
                rest = t$13;
                break loop_end$bg6522;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg6522;
      }
    }
  while (true);
};

sk$List.prototype.takeAndDrop = function(n) {
  var taken = singleton$List$dtNil;
  var prev = singleton$None;
  var cur = this;
  var break_val;
  {
    jumpBlockOuterbreak$bg6528:{
      break$bg6528:{
        do
          {
            jumpBlockOutercontinue$bg6529:{
              continue$bg6529:{
                {
                  var t$ = n;
                  var t$1 = cur;
                  var $var = new (sk$Tuple2)(t$, t$1);
                  var _;
                  var val;
                  var _1;
                  var tail;
                  var _2;
                  {
                    jumpBlockOuterjumpLab$bg6550:{
                      jumpLab$bg6550:{
                        jumpLab$bg6549:{
                          jumpLab$bg6548:{
                            jumpLab$bg6551:{
                              jumpLab$bg6552:{
                                switch ($var.__type_switch_id) {
                                  case 392:
                                    break jumpLab$bg6552;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 269:
                                  _2 = $var.i0;
                                  break jumpLab$bg6548;
                                
                                case 268:
                                  break jumpLab$bg6551;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var _tmp283 = $var.i0.__getSwitchValue();
                              switch (_tmp283) {
                                case 0:
                                  {
                                    _1 = $var.i1;
                                    break jumpLab$bg6549;
                                  }
                                
                                default:
                                  {
                                    _ = $var.i0;
                                    val = $var.i1.head;
                                    tail = $var.i1.tail;
                                    break jumpLab$bg6550;
                                  }

                              }
                            }
                          }
                          {
                            var t$2 = this;
                            break_val = new (sk$Tuple2)(t$2, singleton$List$dtNil);
                            break break$bg6528;
                          }
                        }
                        {
                          var t$3 = taken;
                          var t$4 = t$3;
                          var t$5 = cur;
                          break_val = new (sk$Tuple2)(t$4, t$5);
                          break break$bg6528;
                        }
                      }
                      {
                        var t$6 = val;
                        var c = new (sk$List$dtCons)(t$6, singleton$List$dtNil);
                        var t$7;
                        var p;
                        {
                          jumpBlockOuterjumpLab$bg6545:{
                            jumpLab$bg6545:{
                              jumpLab$bg6544:{
                                switch (prev.__type_switch_id) {
                                  case 205:
                                    p = prev.value;
                                    break jumpLab$bg6544;
                                  
                                  case 204:
                                    break jumpLab$bg6545;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var var1 = p;
                                var t$8 = var1;
                                var t$9 = t$8;
                                t$9.tail = c;
                                t$7 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg6545;
                            }
                            {
                              taken = c;
                              t$7 = sk.__.$void;
                            }
                            break jumpBlockOuterjumpLab$bg6545;
                          }
                        }
                        var t$10 = c;
                        prev = new (sk$Some)(t$10);
                        cur = tail;
                        var t$11 = n;
                        n = t$11.$mi(new sk$Int(1.0, 0.0));
                      }
                      break jumpBlockOuterjumpLab$bg6550;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6529;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6528;
    }
  }
  return break_val;
};

sk$List.prototype.toArray = function() {
  var x = this;
  var t$ = this;
  var t$1 = t$.size();
  return sk$Array.fillBy(t$1, ((_) => 
  {
    var head;
    var tail;
    {
      jumpBlockOuterjumpLab$bg6559:{
        jumpLab$bg6559:{
          jumpLab$bg6558:{
            switch (x.__type_switch_id) {
              case 268:
                head = x.head;
                tail = x.tail;
                break jumpLab$bg6558;
              
              case 269:
                break jumpLab$bg6559;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            x = tail;
            return head;
          }
        }
        return sk$invariant_violation(new sk$String(('unreachable')));
      }
    }
  }));
};

sk$List.prototype.toString = function() {
  var t$ = new sk$String(('List[')).toString();
  var t$1 = this;
  var t$2 = t$1.join(new sk$String((', ')));
  var t$3 = t$2.toString();
  var t$4 = new sk$String((']')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4
  ]));
};

sk$List.prototype.unzip = function() {
  var t$ = this;
  var t$1 = t$.map(((p) => 
  {
    var t$2 = p;
    var t$3 = t$2;
    return t$3.i0;
  }));
  var t$4 = this;
  var t$5 = t$4.map(((p1) => 
  {
    var t$6 = p1;
    var t$7 = t$6;
    return t$7.i1;
  }));
  return new (sk$Tuple2)(t$1, t$5);
};

sk$List.prototype.values = function() {
  var t$ = this;
  return new (sk$List$dtListIterator)(t$);
};

sk$List.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$List.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$List.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$List.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$List.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$List.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$List.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$List.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$List.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$List.prototype.__bases = [
  sk$List,
  sk$Sequence
];

var sk$List$dtListIterator = sk.List$dtListIterator = function List$dtListIterator(list) {
  this.list = list;
};

sk$List$dtListIterator.prototype = Object.create(Object.prototype);

sk$List$dtListIterator.prototype.__constructor = sk$List$dtListIterator;

sk$List$dtListIterator.prototype.__classname = 'List.ListIterator';

sk$List$dtListIterator.prototype.$frozen = false;

sk$List$dtListIterator.prototype.__type_switch_id = 136;

sk$List$dtListIterator.prototype.__copy = function() {
  return new (sk$List$dtListIterator)(this.list);
};

sk$List$dtListIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp284 = __cache.get(this);
  if (_tmp284 === undefined)
    {
      var _tmp284 = this.__copy();
      _tmp284.$frozen = true;
      __cache.set(this, _tmp284);
      _tmp284.list = skip.deepFreeze(_tmp284.list, __cache);
    }
  return _tmp284;
};

sk$List$dtListIterator.prototype.__init = function(__named_parameters) {};

sk$List$dtListIterator.prototype.next = function() {
  var t$ = this;
  var $var = t$.list;
  var head;
  var tail;
  {
    jumpBlockOuterjumpLab$bg6989:{
      jumpLab$bg6989:{
        jumpLab$bg6988:{
          switch ($var.__type_switch_id) {
            case 269:
              break jumpLab$bg6988;
            
            case 268:
              head = $var.head;
              tail = $var.tail;
              break jumpLab$bg6989;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return singleton$None;
      }
      {
        var var1 = this;
        var t$1 = var1;
        var t$2 = t$1;
        t$2.list = tail;
        var t$3 = head;
        return new (sk$Some)(t$3);
      }
    }
  }
};

sk$List$dtListIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.list;
  var t$2 = t$1.size();
  return new (sk$Some)(t$2);
};

sk$List$dtListIterator.prototype.__bases = [
  sk$List$dtListIterator,
  sk$Iterator
];

var sk$Map$dtDArrayIterator = sk.Map$dtDArrayIterator = function Map$dtDArrayIterator(array, pos, end) {
  this.array = array;
  this.pos = pos;
  this.end = end;
};

sk$Map$dtDArrayIterator.prototype = Object.create(Object.prototype);

sk$Map$dtDArrayIterator.prototype.__constructor = sk$Map$dtDArrayIterator;

sk$Map$dtDArrayIterator.prototype.__classname = 'Map.DArrayIterator';

sk$Map$dtDArrayIterator.prototype.$frozen = false;

sk$Map$dtDArrayIterator.prototype.__type_switch_id = 137;

sk$Map$dtDArrayIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtDArrayIterator.internalIterGetKey = function(array, i) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.DArrayIterator::internalIterGetKey')));
};

sk$Map$dtDArrayIterator.internalIterGetValue = function(array, i) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.DArrayIterator::internalIterGetValue')));
};

sk$Map$dtDArrayIterator.iterAdvance = function(array, i) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.DArrayIterator::iterAdvance')));
};

sk$Map$dtDArrayIterator.iterBegin = function(array) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.DArrayIterator::iterBegin')));
};

sk$Map$dtDArrayIterator.iterEnd = function(array) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.DArrayIterator::iterEnd')));
};

sk$Map$dtDArrayIterator.iterGetKey = function(array, i) {
  var t$ = this;
  var t$1 = array;
  var t$2 = i;
  var t$3 = t$.internalIterGetKey(t$1, t$2);
  return sk$HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue(t$3);
};

sk$Map$dtDArrayIterator.iterGetValue = function(array, i) {
  var t$ = this;
  var t$1 = array;
  var t$2 = i;
  var t$3 = t$.internalIterGetValue(t$1, t$2);
  return sk$HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue(t$3);
};

sk$Map$dtDArrayIterator.make = function(array) {
  var t$ = array;
  var t$1 = this;
  var t$2 = array;
  var t$3 = t$1.iterBegin(t$2);
  var t$4 = this;
  var t$5 = array;
  var t$6 = t$4.iterEnd(t$5);
  return new (sk$Map$dtDArrayIterator)(t$, t$3, t$6);
};

sk$Map$dtDArrayIterator.prototype.next = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.pos;
  var t$2 = this;
  var t$3 = t$2.end;
  if (t$1.$eq$eq(t$3).__value)
    return singleton$None;
  else
    {
      var t$4 = static1;
      var t$5 = this;
      var t$6 = t$5.array;
      var t$7 = this;
      var t$8 = t$7.pos;
      var k = t$4.iterGetKey(t$6, t$8);
      var t$9 = static1;
      var t$10 = this;
      var t$11 = t$10.array;
      var t$12 = this;
      var t$13 = t$12.pos;
      var v = t$9.iterGetValue(t$11, t$13);
      var $var = this;
      var t$14 = $var;
      var t$15 = static1;
      var t$16 = this;
      var t$17 = t$16.array;
      var t$18 = this;
      var t$19 = t$18.pos;
      var t$20 = t$14;
      t$20.pos = t$15.iterAdvance(t$17, t$19);
      var t$21 = k;
      var t$22 = v;
      var t$23 = new (sk$Tuple2)(t$21, t$22);
      return new (sk$Some)(t$23);
    }
};

sk$Map$dtDArrayIterator.prototype.__bases = [
  sk$Map$dtDArrayIterator,
  sk$Iterator
];

sk$Map$dtDArrayIterator = sk.Map$dtDArrayIterator = skip.initNativeClass(sk, 'Map.DArrayIterator', sk$Map$dtDArrayIterator);

var sk$Map$dtHH_darray2 = sk.Map$dtHH_darray2 = function Map$dtHH_darray2(__named_parameters) {
  sk$KeyedSequence.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$Map$dtHH_darray2.prototype = Object.create(Object.prototype);

sk$Map$dtHH_darray2.prototype.__constructor = sk$Map$dtHH_darray2;

sk$Map$dtHH_darray2.prototype.__classname = 'Map.HH_darray2';

sk$Map$dtHH_darray2.prototype.$frozen = true;

sk$Map$dtHH_darray2.prototype.__type_switch_id = 170;

sk$Map$dtHH_darray2.prototype.__init = function(__named_parameters) {};

sk$Map$dtHH_darray2.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.find(((k, v) => 
  {
    var t$2 = p;
    var t$3 = k;
    var t$4 = v;
    var t$5 = t$2(t$3, t$4);
    return t$5.$bg();
  }));
  return t$1.isNone();
};

sk$Map$dtHH_darray2.prototype.any = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.find(t$1);
  return t$2.isSome();
};

sk$Map$dtHH_darray2.prototype.chill = function() {
  var t$ = this;
  var t$1 = sk$HhvmInterop$dtfetchProxyPointer(t$);
  return sk$HhvmInterop$dtcreateFromProxyPointer(t$1);
};

sk$Map$dtHH_darray2.prototype.containsKey = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.isSome();
};

sk$Map$dtHH_darray2.createFromIterator = function(items) {
  var t$ = this;
  var res = t$.internalCreate();
  var t$1 = items;
  var t$2 = t$1;
  t$2.each(((i) => 
  {
    var t$3 = this;
    var t$4 = res;
    var t$5 = i;
    var t$6 = t$5.i0;
    var t$7 = i;
    var t$8 = t$7.i1;
    return t$3.internalSet(t$4, t$6, t$8);
  }));
  var t$9 = res;
  return t$9;
};

sk$Map$dtHH_darray2.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.each(((i) => 
  {
    var t$2 = f;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$Map$dtHH_darray2.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = p;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return t$2.collect(sk$Map);
};

sk$Map$dtHH_darray2.prototype.filterNone = function() {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i1;
    var t$5 = t$4;
    return t$5.isSome();
  }));
  var t$6 = t$2.map(((i1) => 
  {
    var t$7 = i1;
    var t$8 = t$7.i0;
    var t$9 = i1;
    var t$10 = t$9.i1;
    var t$11 = t$10;
    var t$12 = t$11.fromSome(undefined);
    return new (sk$Tuple2)(t$8, t$12);
  }));
  return t$6.collect(sk$Map);
};

sk$Map$dtHH_darray2.prototype.find = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.findItem(t$1);
  return t$2.map(((i) => 
  {
    var t$3 = i;
    return t$3.i1;
  }));
};

sk$Map$dtHH_darray2.prototype.findItem = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.find(((i) => 
  {
    var t$2 = p;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$Map$dtHH_darray2.prototype.genFilter = skip.asyncToGenerator(function*(_p) {
  return sk$invariant_violation(new sk$String(('TODO: implement default version')));
});

sk$Map$dtHH_darray2.prototype.genMap = skip.asyncToGenerator(function*(_s) {
  return sk$invariant_violation(new sk$String(('TODO: implement default version')));
});

sk$Map$dtHH_darray2.prototype.get = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var v;
  {
    jumpBlockOuterjumpLab$bg8672:{
      jumpLab$bg8672:{
        jumpLab$bg8671:{
          jumpLab$bg8673:{
            switch ($var.__type_switch_id) {
              case 205:
                break jumpLab$bg8673;
              
              case 204:
                break jumpLab$bg8672;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          switch ($var.value.__type_switch_id) {
            case 392:
              v = $var.value.i1;
              break jumpLab$bg8671;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return v;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$Map$dtHH_darray2.prototype.getItem = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var i;
  {
    jumpBlockOuterjumpLab$bg8680:{
      jumpLab$bg8680:{
        jumpLab$bg8679:{
          switch ($var.__type_switch_id) {
            case 205:
              i = $var.value;
              break jumpLab$bg8679;
            
            case 204:
              break jumpLab$bg8680;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return i;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$Map$dtHH_darray2.internalCreate = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.HH_darray2::internalCreate')));
};

sk$Map$dtHH_darray2.internalSet = function(array, k, v) {
  var t$ = this;
  var t$1 = array;
  var t$2 = k;
  var t$3 = sk$HhvmInterop$dtinternalBitcastToRetValue(t$2);
  var t$4 = v;
  var t$5 = sk$HhvmInterop$dtinternalBitcastToRetValue(t$4);
  return t$.internalSetHelper(t$1, t$3, t$5);
};

sk$Map$dtHH_darray2.internalSetHelper = function(array, k, v) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.HH_darray2::internalSetHelper')));
};

sk$Map$dtHH_darray2.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Map$dtHH_darray2.prototype.items = function() {
  var t$ = this;
  return sk$Map$dtDArrayIterator.make(t$);
};

sk$Map$dtHH_darray2.prototype.iterator = function() {
  var t$ = this;
  return t$.items();
};

sk$Map$dtHH_darray2.prototype.joinKeys = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((k, _) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = k;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$Map$dtHH_darray2.prototype.joinValues = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((_, v) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = v;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$Map$dtHH_darray2.prototype.keys = function() {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.map(((i) => 
  {
    var t$2 = i;
    return t$2.i0;
  }));
};

sk$Map$dtHH_darray2.prototype.map = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = s;
    var t$6 = i;
    var t$7 = t$6.i0;
    var t$8 = i;
    var t$9 = t$8.i1;
    var t$10 = t$5(t$7, t$9);
    return new (sk$Tuple2)(t$4, t$10);
  }));
  return t$2.collect(sk$Map);
};

sk$Map$dtHH_darray2.prototype.mapItems = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = s;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return t$2.collect(sk$Map);
};

sk$Map$dtHH_darray2.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.map(((v) => 
  {
    var t$3 = v;
    return t$3.i1;
  }));
};

sk$Map$dtHH_darray2.prototype.maybeGetItem = function(k) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.HH_darray2::maybeGetItem')));
};

sk$Map$dtHH_darray2.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((k, v) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = k;
    var t$4 = v;
    result = t$1(t$2, t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$Map$dtHH_darray2.prototype.size = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Map.HH_darray2::size')));
};

sk$Map$dtHH_darray2.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.map(((i) => 
  {
    var t$2 = i;
    return t$2.i1;
  }));
};

sk$Map$dtHH_darray2.prototype.__bases = [
  sk$Map$dtHH_darray2,
  sk$KeyedSequence
];

sk$Map$dtHH_darray2 = sk.Map$dtHH_darray2 = skip.initNativeClass(sk, 'Map.HH_darray2', sk$Map$dtHH_darray2);

var sk$Map$dtMapItemsIterator = sk.Map$dtMapItemsIterator = function Map$dtMapItemsIterator(table, sz, used, slots, indexMinusGeneration) {
  this.table = table;
  this.sz = sz;
  this.used = used;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtMapItemsIterator.prototype = Object.create(Object.prototype);

sk$Map$dtMapItemsIterator.prototype.__constructor = sk$Map$dtMapItemsIterator;

sk$Map$dtMapItemsIterator.prototype.__classname = 'Map.MapItemsIterator';

sk$Map$dtMapItemsIterator.prototype.$frozen = false;

sk$Map$dtMapItemsIterator.prototype.__type_switch_id = 138;

sk$Map$dtMapItemsIterator.prototype.__copy = function() {
  return new (sk$Map$dtMapItemsIterator)(this.table, this.sz, this.used, this.slots, this.indexMinusGeneration);
};

sk$Map$dtMapItemsIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp285 = __cache.get(this);
  if (_tmp285 === undefined)
    {
      var _tmp285 = this.__copy();
      _tmp285.$frozen = true;
      __cache.set(this, _tmp285);
      _tmp285.table = skip.deepFreeze(_tmp285.table, __cache);
      _tmp285.sz = skip.deepFreeze(_tmp285.sz, __cache);
      _tmp285.used = skip.deepFreeze(_tmp285.used, __cache);
      _tmp285.slots = skip.deepFreeze(_tmp285.slots, __cache);
      _tmp285.indexMinusGeneration = skip.deepFreeze(_tmp285.indexMinusGeneration, __cache);
    }
  return _tmp285;
};

sk$Map$dtMapItemsIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtMapItemsIterator.prototype.extractEntryResult = function(entry) {
  var t$ = entry;
  var t$1 = t$.unsafeKey();
  var t$2 = entry;
  var t$3 = t$2.unsafeValue();
  return new (sk$Tuple2)(t$1, t$3);
};

sk$Map$dtMapItemsIterator.prototype.next = function() {
  var t$ = this;
  var slots = t$.slots;
  var break_val;
  {
    jumpBlockOuterbreak$bg8854:{
      break$bg8854:{
        do
          {
            jumpBlockOutercontinue$bg8855:{
              continue$bg8855:{
                {
                  var t$1 = this;
                  var t$2 = t$1.indexMinusGeneration;
                  var t$3 = this;
                  var t$4 = t$3.table;
                  var t$5 = t$4.generation_PRIVATE;
                  var index = t$2.$pl(t$5);
                  var t$6 = index;
                  var t$7 = this;
                  var t$8 = t$7.used;
                  var t$9;
                  if (t$6.uge(t$8).__value)
                    {
                      var t$10 = index;
                      var t$11;
                      if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                        t$11 = sk$throwContainerChanged();
                      else
                        t$11 = sk.__.$void;
                      break_val = singleton$None;
                      break break$bg8854;
                    }
                  else
                    {
                      var t$12 = slots;
                      var t$13 = index;
                      var entry = sk$Map$dtunsafeGet(t$12, t$13);
                      var $var = this;
                      var t$14 = $var;
                      var t$15 = this;
                      var t$16 = t$15.indexMinusGeneration;
                      var t$17 = t$14;
                      t$17.indexMinusGeneration = t$16.$pl(new sk$Int(1.0, 0.0));
                      var t$18 = entry;
                      var t$19 = t$18.isEmpty();
                      var t$20;
                      if (t$19.$bg().__value)
                        {
                          var t$21 = this;
                          var t$22 = entry;
                          var t$23 = t$21.extractEntryResult(t$22);
                          break_val = new (sk$Some)(t$23);
                          break break$bg8854;
                        }
                      else
                        t$20 = sk.__.$void;
                      t$9 = t$20;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8855;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8854;
    }
  }
  return break_val;
};

sk$Map$dtMapItemsIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.table;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var size = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = size;
  return new (sk$Some)(t$9);
};

sk$Map$dtMapItemsIterator.prototype.__bases = [
  sk$Map$dtMapItemsIterator,
  sk$Iterator
];

var sk$Map$dtMapKeysIterator = sk.Map$dtMapKeysIterator = function Map$dtMapKeysIterator(table, sz, used, slots, indexMinusGeneration) {
  this.table = table;
  this.sz = sz;
  this.used = used;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtMapKeysIterator.prototype = Object.create(Object.prototype);

sk$Map$dtMapKeysIterator.prototype.__constructor = sk$Map$dtMapKeysIterator;

sk$Map$dtMapKeysIterator.prototype.__classname = 'Map.MapKeysIterator';

sk$Map$dtMapKeysIterator.prototype.$frozen = false;

sk$Map$dtMapKeysIterator.prototype.__type_switch_id = 139;

sk$Map$dtMapKeysIterator.prototype.__copy = function() {
  return new (sk$Map$dtMapKeysIterator)(this.table, this.sz, this.used, this.slots, this.indexMinusGeneration);
};

sk$Map$dtMapKeysIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp286 = __cache.get(this);
  if (_tmp286 === undefined)
    {
      var _tmp286 = this.__copy();
      _tmp286.$frozen = true;
      __cache.set(this, _tmp286);
      _tmp286.table = skip.deepFreeze(_tmp286.table, __cache);
      _tmp286.sz = skip.deepFreeze(_tmp286.sz, __cache);
      _tmp286.used = skip.deepFreeze(_tmp286.used, __cache);
      _tmp286.slots = skip.deepFreeze(_tmp286.slots, __cache);
      _tmp286.indexMinusGeneration = skip.deepFreeze(_tmp286.indexMinusGeneration, __cache);
    }
  return _tmp286;
};

sk$Map$dtMapKeysIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtMapKeysIterator.prototype.extractEntryResult = function(entry) {
  var t$ = entry;
  return t$.unsafeKey();
};

sk$Map$dtMapKeysIterator.prototype.next = function() {
  var t$ = this;
  var slots = t$.slots;
  var break_val;
  {
    jumpBlockOuterbreak$bg8937:{
      break$bg8937:{
        do
          {
            jumpBlockOutercontinue$bg8938:{
              continue$bg8938:{
                {
                  var t$1 = this;
                  var t$2 = t$1.indexMinusGeneration;
                  var t$3 = this;
                  var t$4 = t$3.table;
                  var t$5 = t$4.generation_PRIVATE;
                  var index = t$2.$pl(t$5);
                  var t$6 = index;
                  var t$7 = this;
                  var t$8 = t$7.used;
                  var t$9;
                  if (t$6.uge(t$8).__value)
                    {
                      var t$10 = index;
                      var t$11;
                      if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                        t$11 = sk$throwContainerChanged();
                      else
                        t$11 = sk.__.$void;
                      break_val = singleton$None;
                      break break$bg8937;
                    }
                  else
                    {
                      var t$12 = slots;
                      var t$13 = index;
                      var entry = sk$Map$dtunsafeGet(t$12, t$13);
                      var $var = this;
                      var t$14 = $var;
                      var t$15 = this;
                      var t$16 = t$15.indexMinusGeneration;
                      var t$17 = t$14;
                      t$17.indexMinusGeneration = t$16.$pl(new sk$Int(1.0, 0.0));
                      var t$18 = entry;
                      var t$19 = t$18.isEmpty();
                      var t$20;
                      if (t$19.$bg().__value)
                        {
                          var t$21 = this;
                          var t$22 = entry;
                          var t$23 = t$21.extractEntryResult(t$22);
                          break_val = new (sk$Some)(t$23);
                          break break$bg8937;
                        }
                      else
                        t$20 = sk.__.$void;
                      t$9 = t$20;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8938;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8937;
    }
  }
  return break_val;
};

sk$Map$dtMapKeysIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.table;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var size = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = size;
  return new (sk$Some)(t$9);
};

sk$Map$dtMapKeysIterator.prototype.__bases = [
  sk$Map$dtMapKeysIterator,
  sk$Iterator
];

var sk$Map$dtMapValuesIterator = sk.Map$dtMapValuesIterator = function Map$dtMapValuesIterator(table, sz, used, slots, indexMinusGeneration) {
  this.table = table;
  this.sz = sz;
  this.used = used;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtMapValuesIterator.prototype = Object.create(Object.prototype);

sk$Map$dtMapValuesIterator.prototype.__constructor = sk$Map$dtMapValuesIterator;

sk$Map$dtMapValuesIterator.prototype.__classname = 'Map.MapValuesIterator';

sk$Map$dtMapValuesIterator.prototype.$frozen = false;

sk$Map$dtMapValuesIterator.prototype.__type_switch_id = 140;

sk$Map$dtMapValuesIterator.prototype.__copy = function() {
  return new (sk$Map$dtMapValuesIterator)(this.table, this.sz, this.used, this.slots, this.indexMinusGeneration);
};

sk$Map$dtMapValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp287 = __cache.get(this);
  if (_tmp287 === undefined)
    {
      var _tmp287 = this.__copy();
      _tmp287.$frozen = true;
      __cache.set(this, _tmp287);
      _tmp287.table = skip.deepFreeze(_tmp287.table, __cache);
      _tmp287.sz = skip.deepFreeze(_tmp287.sz, __cache);
      _tmp287.used = skip.deepFreeze(_tmp287.used, __cache);
      _tmp287.slots = skip.deepFreeze(_tmp287.slots, __cache);
      _tmp287.indexMinusGeneration = skip.deepFreeze(_tmp287.indexMinusGeneration, __cache);
    }
  return _tmp287;
};

sk$Map$dtMapValuesIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtMapValuesIterator.prototype.extractEntryResult = function(entry) {
  var t$ = entry;
  return t$.unsafeValue();
};

sk$Map$dtMapValuesIterator.prototype.next = function() {
  var t$ = this;
  var slots = t$.slots;
  var break_val;
  {
    jumpBlockOuterbreak$bg8980:{
      break$bg8980:{
        do
          {
            jumpBlockOutercontinue$bg8981:{
              continue$bg8981:{
                {
                  var t$1 = this;
                  var t$2 = t$1.indexMinusGeneration;
                  var t$3 = this;
                  var t$4 = t$3.table;
                  var t$5 = t$4.generation_PRIVATE;
                  var index = t$2.$pl(t$5);
                  var t$6 = index;
                  var t$7 = this;
                  var t$8 = t$7.used;
                  var t$9;
                  if (t$6.uge(t$8).__value)
                    {
                      var t$10 = index;
                      var t$11;
                      if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                        t$11 = sk$throwContainerChanged();
                      else
                        t$11 = sk.__.$void;
                      break_val = singleton$None;
                      break break$bg8980;
                    }
                  else
                    {
                      var t$12 = slots;
                      var t$13 = index;
                      var entry = sk$Map$dtunsafeGet(t$12, t$13);
                      var $var = this;
                      var t$14 = $var;
                      var t$15 = this;
                      var t$16 = t$15.indexMinusGeneration;
                      var t$17 = t$14;
                      t$17.indexMinusGeneration = t$16.$pl(new sk$Int(1.0, 0.0));
                      var t$18 = entry;
                      var t$19 = t$18.isEmpty();
                      var t$20;
                      if (t$19.$bg().__value)
                        {
                          var t$21 = this;
                          var t$22 = entry;
                          var t$23 = t$21.extractEntryResult(t$22);
                          break_val = new (sk$Some)(t$23);
                          break break$bg8980;
                        }
                      else
                        t$20 = sk.__.$void;
                      t$9 = t$20;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8981;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8980;
    }
  }
  return break_val;
};

sk$Map$dtMapValuesIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.table;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var size = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = size;
  return new (sk$Some)(t$9);
};

sk$Map$dtMapValuesIterator.prototype.__bases = [
  sk$Map$dtMapValuesIterator,
  sk$Iterator
];

var sk$Map$dtUnorderedMapIterator = sk.Map$dtUnorderedMapIterator = function Map$dtUnorderedMapIterator(table, slots, indexMinusGeneration) {
  this.table = table;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtUnorderedMapIterator.prototype = Object.create(Object.prototype);

sk$Map$dtUnorderedMapIterator.prototype.__constructor = sk$Map$dtUnorderedMapIterator;

sk$Map$dtUnorderedMapIterator.prototype.__classname = 'Map.UnorderedMapIterator';

sk$Map$dtUnorderedMapIterator.prototype.$frozen = undefined;

sk$Map$dtUnorderedMapIterator.prototype.__type_switch_id = -1;

sk$Map$dtUnorderedMapIterator.prototype.__copy = function() {
  return new (sk$Map$dtUnorderedMapIterator)(this.table, this.slots, this.indexMinusGeneration);
};

sk$Map$dtUnorderedMapIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp288 = __cache.get(this);
  if (_tmp288 === undefined)
    {
      var _tmp288 = this.__copy();
      _tmp288.$frozen = true;
      __cache.set(this, _tmp288);
      _tmp288.table = skip.deepFreeze(_tmp288.table, __cache);
      _tmp288.slots = skip.deepFreeze(_tmp288.slots, __cache);
      _tmp288.indexMinusGeneration = skip.deepFreeze(_tmp288.indexMinusGeneration, __cache);
    }
  return _tmp288;
};

sk$Map$dtUnorderedMapIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtUnorderedMapIterator.prototype.next = function() {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg9049:{
        loop_end$bg9049:{
          {
            var t$1 = t$;
            var slots = t$1.slots;
            var t$2 = t$;
            var table = t$2.table;
            var t$3 = t$;
            var t$4 = t$3.indexMinusGeneration;
            var t$5 = table;
            var t$6 = t$5.generation_PRIVATE;
            var index = t$4.$pl(t$6);
            var t$7 = slots;
            var sz = t$7.size();
            var t$8 = index;
            var t$9 = sz;
            if (t$8.uge(t$9).__value)
              {
                var t$10 = index;
                if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                  sk$throwContainerChanged();
                else
                  {}
                return singleton$None;
              }
            else
              {
                var t$11 = slots;
                var t$12 = index;
                var slot = sk$Unsafe$dtarray_get(t$11, t$12);
                var $var = t$;
                var t$13 = $var;
                var t$14 = t$;
                var t$15 = t$14.indexMinusGeneration;
                var t$16 = t$13;
                t$16.indexMinusGeneration = t$15.$pl(new sk$Int(1.0, 0.0));
                var t$17 = slot;
                var t$18 = t$17.isEmpty();
                if (t$18.$bg().__value)
                  {
                    var t$19 = t$;
                    var t$20 = slot;
                    var t$21 = t$19.extractSlotValue(t$20);
                    return new (sk$Some)(t$21);
                  }
                else
                  {
                    var t$22 = t$;
                    var t$23 = t$22;
                    t$ = t$23;
                    break loop_end$bg9049;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg9049;
      }
    }
  while (true);
};

sk$Map$dtUnorderedMapIterator.prototype.__bases = [
  sk$Map$dtUnorderedMapIterator,
  sk$Iterator
];

var sk$MapMetaClass = sk.MapMetaClass = function MapMetaClass(keyClass, valueClass) {
  this.keyClass = keyClass;
  this.valueClass = valueClass;
};

sk$MapMetaClass.prototype = Object.create(Object.prototype);

sk$MapMetaClass.prototype.__constructor = sk$MapMetaClass;

sk$MapMetaClass.prototype.__classname = 'MapMetaClass';

sk$MapMetaClass.prototype.$frozen = true;

sk$MapMetaClass.prototype.__type_switch_id = 181;

sk$MapMetaClass.prototype.__copy = function() {
  return new (sk$MapMetaClass)(this.keyClass, this.valueClass);
};

sk$MapMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp289 = __cache.get(this);
  if (_tmp289 === undefined)
    {
      var _tmp289 = this.__copy();
      _tmp289.$frozen = true;
      __cache.set(this, _tmp289);
      _tmp289.keyClass = skip.deepFreeze(_tmp289.keyClass, __cache);
      _tmp289.valueClass = skip.deepFreeze(_tmp289.valueClass, __cache);
    }
  return _tmp289;
};

sk$MapMetaClass.prototype.__init = function(__named_parameters) {};

sk$MapMetaClass.prototype.description = function() {
  var t$ = new sk$String(('Map<')).toString();
  var t$1 = this;
  var t$2 = t$1.keyClass;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.valueClass;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12
  ]));
};

sk$MapMetaClass.prototype.deserialize = function(reader) {
  var t$ = this;
  var keyClass = t$.keyClass;
  var t$1 = this;
  var valueClass = t$1.valueClass;
  var t$2 = reader;
  var t$3 = keyClass;
  var t$4 = valueClass;
  var t$5 = t$2.readKeyedSequence(t$3, t$4);
  var sequence = t$5;
  var t$6 = sequence;
  var t$7 = t$6.sizeHint();
  var sizeHint = t$7.$default(new sk$Int(0.0, 0.0));
  var t$8 = sizeHint;
  var map = sk$Map.mcreate(t$8);
  var break_val;
  {
    jumpBlockOuterbreak$bg9107:{
      break$bg9107:{
        do
          {
            jumpBlockOutercontinue$bg9108:{
              continue$bg9108:{
                {
                  var t$9 = sequence;
                  var $var = t$9.readItem();
                  var key;
                  var value;
                  {
                    jumpBlockOuterjumpLab$bg9119:{
                      jumpLab$bg9119:{
                        jumpLab$bg9118:{
                          jumpLab$bg9120:{
                            switch ($var.__type_switch_id) {
                              case 205:
                                break jumpLab$bg9120;
                              
                              case 204:
                                break jumpLab$bg9119;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.value.__type_switch_id) {
                            case 392:
                              key = $var.value.i0;
                              value = $var.value.i1;
                              break jumpLab$bg9118;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$10 = map;
                          var t$11 = key;
                          var t$12 = value;
                          t$10.set(t$11, t$12);
                        }
                        break jumpBlockOuterjumpLab$bg9119;
                      }
                      {
                        break_val = sk.__.$void;
                        break break$bg9107;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg9108;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg9107;
    }
  }
  var t$13 = sequence;
  t$13.end();
  var t$14 = map;
  return t$14;
};

sk$MapMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$MapMetaClass.prototype.serialize = function(map, writer) {
  var t$ = this;
  var keyClass = t$.keyClass;
  var t$1 = this;
  var valueClass = t$1.valueClass;
  var t$2 = writer;
  var t$3 = keyClass;
  var t$4 = valueClass;
  var t$5 = map;
  var t$6 = t$5.size();
  var t$7 = new (sk$Some)(t$6);
  var sequence = t$2.writeKeyedSequence(t$3, t$4, t$7);
  var t$8 = map;
  var $var = t$8.items();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg9136:{
      break$bg9136:{
        dowhile_else$bg9135:{
          do
            {
              jumpBlockOuterdowhile_cond$bg9137:{
                dowhile_cond$bg9137:{
                  {
                    var t$9 = $var;
                    var var2 = t$9.next();
                    var key;
                    var value;
                    {
                      jumpBlockOuterjumpLab$bg9147:{
                        jumpLab$bg9147:{
                          jumpLab$bg9146:{
                            jumpLab$bg9148:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg9146;
                                
                                case 205:
                                  break jumpLab$bg9148;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                key = var2.value.i0;
                                value = var2.value.i1;
                                break jumpLab$bg9147;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg9137;
                          }
                        }
                        {
                          var t$10 = sequence;
                          var t$11 = key;
                          var t$12 = value;
                          t$10.writeItem(t$11, t$12);
                        }
                        break jumpBlockOuterjumpLab$bg9147;
                      }
                    }
                    break dowhile_cond$bg9137;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg9135;
                break jumpBlockOuterdowhile_cond$bg9137;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg9136;
      }
      {}
      break jumpBlockOuterbreak$bg9136;
    }
  }
  var t$13 = sequence;
  return t$13.end();
};

sk$MapMetaClass.prototype.__bases = [
  sk$MapMetaClass,
  sk$MetaClass
];

var sk$MutableKeyedSequence = sk.MutableKeyedSequence = function MutableKeyedSequence() {};

sk$MutableKeyedSequence.prototype = Object.create(Object.prototype);

sk$MutableKeyedSequence.prototype.__constructor = sk$MutableKeyedSequence;

sk$MutableKeyedSequence.prototype.__classname = 'MutableKeyedSequence';

sk$MutableKeyedSequence.prototype.$frozen = undefined;

sk$MutableKeyedSequence.prototype.__type_switch_id = -1;

sk$MutableKeyedSequence.prototype.__copy = function() {};

sk$MutableKeyedSequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp290 = __cache.get(this);
  if (_tmp290 === undefined)
    {
      var _tmp290 = this.__copy();
      _tmp290.$frozen = true;
      __cache.set(this, _tmp290);
    }
  return _tmp290;
};

sk$MutableKeyedSequence.prototype.__init = function(__named_parameters) {};

sk$MutableKeyedSequence.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.find(((k, v) => 
  {
    var t$2 = p;
    var t$3 = k;
    var t$4 = v;
    var t$5 = t$2(t$3, t$4);
    return t$5.$bg();
  }));
  return t$1.isNone();
};

sk$MutableKeyedSequence.prototype.any = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.find(t$1);
  return t$2.isSome();
};

sk$MutableKeyedSequence.prototype.containsKey = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.isSome();
};

sk$MutableKeyedSequence.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.each(((i) => 
  {
    var t$2 = f;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$MutableKeyedSequence.prototype.extend = function(second) {
  var t$ = second;
  return t$.each(((k, v) => 
  {
    var t$1 = this;
    var t$2 = k;
    var t$3 = v;
    return t$1.set(t$2, t$3);
  }));
};

sk$MutableKeyedSequence.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = p;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return t$2.collect(sk$Map);
};

sk$MutableKeyedSequence.prototype.filterNone = function() {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.filter(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i1;
    var t$5 = t$4;
    return t$5.isSome();
  }));
  var t$6 = t$2.map(((i1) => 
  {
    var t$7 = i1;
    var t$8 = t$7.i0;
    var t$9 = i1;
    var t$10 = t$9.i1;
    var t$11 = t$10;
    var t$12 = t$11.fromSome(undefined);
    return new (sk$Tuple2)(t$8, t$12);
  }));
  return t$6.collect(sk$Map);
};

sk$MutableKeyedSequence.prototype.find = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.findItem(t$1);
  return t$2.map(((i) => 
  {
    var t$3 = i;
    return t$3.i1;
  }));
};

sk$MutableKeyedSequence.prototype.findItem = function(p) {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.find(((i) => 
  {
    var t$2 = p;
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = i;
    var t$6 = t$5.i1;
    return t$2(t$4, t$6);
  }));
};

sk$MutableKeyedSequence.prototype.genFilter = skip.asyncToGenerator(function*(_p) {
  return sk$invariant_violation(new sk$String(('TODO: implement default version')));
});

sk$MutableKeyedSequence.prototype.genMap = skip.asyncToGenerator(function*(_s) {
  return sk$invariant_violation(new sk$String(('TODO: implement default version')));
});

sk$MutableKeyedSequence.prototype.get = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var v;
  {
    jumpBlockOuterjumpLab$bg9822:{
      jumpLab$bg9822:{
        jumpLab$bg9821:{
          jumpLab$bg9823:{
            switch ($var.__type_switch_id) {
              case 205:
                break jumpLab$bg9823;
              
              case 204:
                break jumpLab$bg9822;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          switch ($var.value.__type_switch_id) {
            case 392:
              v = $var.value.i1;
              break jumpLab$bg9821;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return v;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$MutableKeyedSequence.prototype.getItem = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var i;
  {
    jumpBlockOuterjumpLab$bg9830:{
      jumpLab$bg9830:{
        jumpLab$bg9829:{
          switch ($var.__type_switch_id) {
            case 205:
              i = $var.value;
              break jumpLab$bg9829;
            
            case 204:
              break jumpLab$bg9830;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return i;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$MutableKeyedSequence.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$MutableKeyedSequence.prototype.iterator = function() {
  var t$ = this;
  return t$.items();
};

sk$MutableKeyedSequence.prototype.joinKeys = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((k, _) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = k;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$MutableKeyedSequence.prototype.joinValues = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((_, v) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = v;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$MutableKeyedSequence.prototype.keys = function() {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.map(((i) => 
  {
    var t$2 = i;
    return t$2.i0;
  }));
};

sk$MutableKeyedSequence.prototype.map = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = i;
    var t$4 = t$3.i0;
    var t$5 = s;
    var t$6 = i;
    var t$7 = t$6.i0;
    var t$8 = i;
    var t$9 = t$8.i1;
    var t$10 = t$5(t$7, t$9);
    return new (sk$Tuple2)(t$4, t$10);
  }));
  return t$2.collect(sk$Map);
};

sk$MutableKeyedSequence.prototype.mapItems = function(s) {
  var t$ = this;
  var t$1 = t$.items();
  var t$2 = t$1.map(((i) => 
  {
    var t$3 = s;
    var t$4 = i;
    var t$5 = t$4.i0;
    var t$6 = i;
    var t$7 = t$6.i1;
    return t$3(t$5, t$7);
  }));
  return t$2.collect(sk$Map);
};

sk$MutableKeyedSequence.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.map(((v) => 
  {
    var t$3 = v;
    return t$3.i1;
  }));
};

sk$MutableKeyedSequence.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((k, v) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = k;
    var t$4 = v;
    result = t$1(t$2, t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$MutableKeyedSequence.prototype.setWith = function(k, v, collision) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGet(t$1);
  var v2;
  {
    jumpBlockOuterjumpLab$bg9901:{
      jumpLab$bg9901:{
        jumpLab$bg9900:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg9900;
            
            case 205:
              v2 = $var.value;
              break jumpLab$bg9901;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = this;
          var t$3 = k;
          var t$4 = v;
          return t$2.set(t$3, t$4);
        }
      }
      {
        var t$5 = this;
        var t$6 = k;
        var t$7 = collision;
        var t$8 = v;
        var t$9 = v2;
        var t$10 = t$7(t$8, t$9);
        return t$5.set(t$6, t$10);
      }
    }
  }
};

sk$MutableKeyedSequence.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.items();
  return t$1.map(((i) => 
  {
    var t$2 = i;
    return t$2.i1;
  }));
};

sk$MutableKeyedSequence.prototype.__bases = [
  sk$MutableKeyedSequence,
  sk$KeyedSequence
];

var sk$None = sk.None = function None() {};

sk$None.prototype = Object.create(Object.prototype);

sk$None.prototype.__constructor = sk$None;

sk$None.prototype.__classname = 'None';

sk$None.prototype.$frozen = true;

sk$None.prototype.__type_switch_id = 204;

sk$None.prototype.__copy = function() {
  return new (sk$None)();
};

sk$None.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp291 = __cache.get(this);
  if (_tmp291 === undefined)
    {
      var _tmp291 = this.__copy();
      _tmp291.$frozen = true;
      __cache.set(this, _tmp291);
    }
  return _tmp291;
};

sk$None.prototype.__init = function(__named_parameters) {};

sk$None.prototype.$eq$eq = function(other) {
  var t$ = other;
  return t$.isNone();
};

sk$None.prototype.compare = function(other) {
  var t$ = other;
  if (t$.isNone().__value)
    return singleton$EQ;
  else
    return singleton$LT;
};

sk$None.prototype.$default = function(x) {
  return x;
};

sk$None.prototype.each = function(f) {
  return sk.__.$void;
};

sk$None.prototype.eachUntracked = function(f) {
  return sk.__.$void;
};

sk$None.prototype.flatMap = function(f) {
  return singleton$None;
};

sk$None.prototype.fromSome = function(msg) {
  if (msg === undefined)
    msg = ((() => 
    {
      return new sk$String(('fromSome called on None'));
    })());
  var t$ = msg;
  return sk$invariant_violation(t$);
};

sk$None.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  return singleton$None;
});

sk$None.prototype.genMap = skip.asyncToGenerator(function*(f) {
  return singleton$None;
});

sk$None.generator = function(generator) {
  var t$ = generator;
  return new (sk$QuickCheck$dtOptionGenerator)(t$);
};

sk$None.prototype.getClassName = function() {
  return new sk$String(('None'));
};

sk$None.prototype.hash = function() {
  return new sk$Int(1027410261.0, 0.0);
};

sk$None.prototype.isNone = function() {
  return new sk$Bool((true));
};

sk$None.prototype.isSome = function() {
  return new sk$Bool((false));
};

sk$None.prototype.map = function(f) {
  return singleton$None;
};

sk$None.prototype.maybe = function(nothing, mjust) {
  return nothing;
};

sk$None.meta = function(itemClass) {
  var t$ = itemClass;
  return new (sk$OptionMetaClass)(t$);
};

sk$None.prototype.perturb = function(rng) {
  var t$ = rng;
  return t$.perturb(new sk$Int(0.0, 0.0));
};

sk$None.prototype.shrink = function(firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (firstShrink === undefined)
      firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    return undefined;
  });
};

sk$None.prototype.test = function(p) {
  return new sk$Bool((false));
};

sk$None.prototype.toString = function() {
  return new sk$String(('None()'));
};

sk$None.prototype.__bases = [
  sk$None,
  sk$Option
];

var sk$Null = sk.Null = function Null() {};

sk$Null.prototype = Object.create(Object.prototype);

sk$Null.prototype.__constructor = sk$Null;

sk$Null.prototype.__classname = 'Null';

sk$Null.prototype.$frozen = true;

sk$Null.prototype.__type_switch_id = 203;

sk$Null.prototype.__copy = function() {
  return new (sk$Null)();
};

sk$Null.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp292 = __cache.get(this);
  if (_tmp292 === undefined)
    {
      var _tmp292 = this.__copy();
      _tmp292.$frozen = true;
      __cache.set(this, _tmp292);
    }
  return _tmp292;
};

sk$Null.prototype.__init = function(__named_parameters) {};

sk$Null.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg9936:{
    jumpLab$bg9936:{
      jumpLab$bg9935:{
        switch (other.__type_switch_id) {
          case 202:
            break jumpLab$bg9935;
          
          case 203:
            break jumpLab$bg9936;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      return new sk$Bool((false));
    }
    return new sk$Bool((true));
  }
};

sk$Null.prototype.$default = function(x) {
  return x;
};

sk$Null.prototype.each = function(f) {
  return sk.__.$void;
};

sk$Null.prototype.flatMap = function(f) {
  return singleton$Null;
};

sk$Null.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  return singleton$Null;
});

sk$Null.prototype.genMap = skip.asyncToGenerator(function*(f) {
  return singleton$Null;
});

sk$Null.prototype.getx = function() {
  return sk$invariant_violation(new sk$String(('getx on Null')));
};

sk$Null.prototype.isBox = function() {
  return new sk$Bool((false));
};

sk$Null.prototype.isNull = function() {
  return new sk$Bool((true));
};

sk$Null.prototype.map = function(f) {
  return singleton$Null;
};

sk$Null.prototype.test = function(f) {
  return new sk$Bool((false));
};

sk$Null.prototype.toString = function() {
  return new sk$String(('Null()'));
};

sk$Null.prototype.__bases = [
  sk$Null,
  sk$Nullable
];

var sk$OptionMetaClass = sk.OptionMetaClass = function OptionMetaClass(itemClass) {
  this.itemClass = itemClass;
};

sk$OptionMetaClass.prototype = Object.create(Object.prototype);

sk$OptionMetaClass.prototype.__constructor = sk$OptionMetaClass;

sk$OptionMetaClass.prototype.__classname = 'OptionMetaClass';

sk$OptionMetaClass.prototype.$frozen = true;

sk$OptionMetaClass.prototype.__type_switch_id = 182;

sk$OptionMetaClass.prototype.__copy = function() {
  return new (sk$OptionMetaClass)(this.itemClass);
};

sk$OptionMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp293 = __cache.get(this);
  if (_tmp293 === undefined)
    {
      var _tmp293 = this.__copy();
      _tmp293.$frozen = true;
      __cache.set(this, _tmp293);
      _tmp293.itemClass = skip.deepFreeze(_tmp293.itemClass, __cache);
    }
  return _tmp293;
};

sk$OptionMetaClass.prototype.__init = function(__named_parameters) {};

sk$OptionMetaClass.prototype.description = function() {
  var t$ = new sk$String(('?')).toString();
  var t$1 = this;
  var t$2 = t$1.itemClass;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5
  ]));
};

sk$OptionMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var t$1 = this;
  var t$2 = t$1.itemClass;
  return t$.readOption(t$2);
};

sk$OptionMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$OptionMetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var t$1 = value;
  var t$2 = this;
  var t$3 = t$2.itemClass;
  return t$.writeOption(t$1, t$3);
};

sk$OptionMetaClass.prototype.__bases = [
  sk$OptionMetaClass,
  sk$MetaClass
];

var sk$Orderable = sk.Orderable = function Orderable() {};

sk$Orderable.prototype = Object.create(Object.prototype);

sk$Orderable.prototype.__constructor = sk$Orderable;

sk$Orderable.prototype.__classname = 'Orderable';

sk$Orderable.prototype.$frozen = undefined;

sk$Orderable.prototype.__type_switch_id = -1;

sk$Orderable.prototype.__copy = function() {};

sk$Orderable.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp294 = __cache.get(this);
  if (_tmp294 === undefined)
    {
      var _tmp294 = this.__copy();
      _tmp294.$frozen = true;
      __cache.set(this, _tmp294);
    }
  return _tmp294;
};

sk$Orderable.prototype.__init = function(__named_parameters) {};

sk$Orderable.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Orderable.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Orderable.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Orderable.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$Orderable.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Orderable.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Orderable.prototype.__bases = [
  sk$Orderable,
  sk$Equality,
  sk$HasClassName
];

var sk$OutOfBounds = sk.OutOfBounds = function OutOfBounds() {};

sk$OutOfBounds.prototype = Object.create(Object.prototype);

sk$OutOfBounds.prototype.__constructor = sk$OutOfBounds;

sk$OutOfBounds.prototype.__classname = 'OutOfBounds';

sk$OutOfBounds.prototype.$frozen = true;

sk$OutOfBounds.prototype.__type_switch_id = 75;

sk$OutOfBounds.prototype.__copy = function() {
  return new (sk$OutOfBounds)();
};

sk$OutOfBounds.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp295 = __cache.get(this);
  if (_tmp295 === undefined)
    {
      var _tmp295 = this.__copy();
      _tmp295.$frozen = true;
      __cache.set(this, _tmp295);
    }
  return _tmp295;
};

sk$OutOfBounds.prototype.__init = function(__named_parameters) {};

sk$OutOfBounds.prototype.getMessage = function() {
  return new sk$String(('Out of bounds'));
};

sk$OutOfBounds.prototype.__bases = [
  sk$OutOfBounds,
  sk$Exception
];

var sk$ParseTree$dtEmptyTree = sk.ParseTree$dtEmptyTree = function ParseTree$dtEmptyTree(__named_parameters) {
  sk$ParseTree$dtParseTree.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtEmptyTree.prototype = Object.create(Object.prototype);

sk$ParseTree$dtEmptyTree.prototype.__constructor = sk$ParseTree$dtEmptyTree;

sk$ParseTree$dtEmptyTree.prototype.__classname = 'ParseTree.EmptyTree';

sk$ParseTree$dtEmptyTree.prototype.$frozen = true;

sk$ParseTree$dtEmptyTree.prototype.__type_switch_id = 211;

sk$ParseTree$dtEmptyTree.prototype.__copy = function() {
  return new (sk$ParseTree$dtEmptyTree)(this);
};

sk$ParseTree$dtEmptyTree.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp296 = __cache.get(this);
  if (_tmp296 === undefined)
    {
      var _tmp296 = this.__copy();
      _tmp296.$frozen = true;
      __cache.set(this, _tmp296);
      _tmp296.range = skip.deepFreeze(_tmp296.range, __cache);
    }
  return _tmp296;
};

sk$ParseTree$dtEmptyTree.prototype.__init = function(__named_parameters) {
  this.range = __named_parameters.range;
};

sk$ParseTree$dtEmptyTree.prototype.asEmpty = function() {
  return this;
};

sk$ParseTree$dtEmptyTree.prototype.getChildren = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    return undefined;
  });
};

sk$ParseTree$dtEmptyTree.prototype.getKind = function() {
  return new sk$String(('Empty'));
};

sk$ParseTree$dtEmptyTree.prototype.getNamedFields = function() {
  return sk$List.createFromItems(new (sk$Array)([]));
};

sk$ParseTree$dtEmptyTree.prototype.isEmpty = function() {
  return new sk$Bool((true));
};

sk$ParseTree$dtEmptyTree.prototype.transform = function(_codemod) {
  var t$ = this;
  var t$1 = sk$Vector.createFromItems(new (sk$Array)([]));
  return new (sk$Tuple2)(t$, t$1);
};

sk$ParseTree$dtEmptyTree.prototype.__bases = [
  sk$ParseTree$dtEmptyTree,
  sk$ParseTree$dtParseTree
];

var sk$ParseTree$dtErrorTree = sk.ParseTree$dtErrorTree = function ParseTree$dtErrorTree(__named_parameters) {
  sk$ParseTree$dtParseTree.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtErrorTree.prototype = Object.create(Object.prototype);

sk$ParseTree$dtErrorTree.prototype.__constructor = sk$ParseTree$dtErrorTree;

sk$ParseTree$dtErrorTree.prototype.__classname = 'ParseTree.ErrorTree';

sk$ParseTree$dtErrorTree.prototype.$frozen = true;

sk$ParseTree$dtErrorTree.prototype.__type_switch_id = 212;

sk$ParseTree$dtErrorTree.prototype.__copy = function() {
  return new (sk$ParseTree$dtErrorTree)(this);
};

sk$ParseTree$dtErrorTree.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp297 = __cache.get(this);
  if (_tmp297 === undefined)
    {
      var _tmp297 = this.__copy();
      _tmp297.$frozen = true;
      __cache.set(this, _tmp297);
      _tmp297.value = skip.deepFreeze(_tmp297.value, __cache);
      _tmp297.range = skip.deepFreeze(_tmp297.range, __cache);
    }
  return _tmp297;
};

sk$ParseTree$dtErrorTree.prototype.__init = function(__named_parameters) {
  this.value = __named_parameters.value === undefined ? ((() => 
  {
    return new sk$String((''));
  })()) : __named_parameters.value;
  this.range = __named_parameters.range;
};

sk$ParseTree$dtErrorTree.prototype.asError = function() {
  return this;
};

sk$ParseTree$dtErrorTree.prototype.getChildren = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    return undefined;
  });
};

sk$ParseTree$dtErrorTree.prototype.getKind = function() {
  return new sk$String(('Error'));
};

sk$ParseTree$dtErrorTree.prototype.getNamedFields = function() {
  return sk$List.createFromItems(new (sk$Array)([]));
};

sk$ParseTree$dtErrorTree.prototype.isError = function() {
  return new sk$Bool((true));
};

sk$ParseTree$dtErrorTree.prototype.transform = function(_codemod) {
  var t$ = this;
  var t$1 = sk$Vector.createFromItems(new (sk$Array)([]));
  return new (sk$Tuple2)(t$, t$1);
};

sk$ParseTree$dtErrorTree.prototype.__bases = [
  sk$ParseTree$dtErrorTree,
  sk$ParseTree$dtParseTree
];

var sk$ParseTree$dtLazyTree = sk.ParseTree$dtLazyTree = function ParseTree$dtLazyTree(__named_parameters) {
  sk$ParseTree$dtParseTree.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtLazyTree.prototype = Object.create(Object.prototype);

sk$ParseTree$dtLazyTree.prototype.__constructor = sk$ParseTree$dtLazyTree;

sk$ParseTree$dtLazyTree.prototype.__classname = 'ParseTree.LazyTree';

sk$ParseTree$dtLazyTree.prototype.$frozen = true;

sk$ParseTree$dtLazyTree.prototype.__type_switch_id = 213;

sk$ParseTree$dtLazyTree.prototype.__copy = function() {
  return new (sk$ParseTree$dtLazyTree)(this);
};

sk$ParseTree$dtLazyTree.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp298 = __cache.get(this);
  if (_tmp298 === undefined)
    {
      var _tmp298 = this.__copy();
      _tmp298.$frozen = true;
      __cache.set(this, _tmp298);
      _tmp298.builder = skip.deepFreeze(_tmp298.builder, __cache);
      _tmp298.range = skip.deepFreeze(_tmp298.range, __cache);
    }
  return _tmp298;
};

sk$ParseTree$dtLazyTree.prototype.__init = function(__named_parameters) {
  this.builder = __named_parameters.builder;
  this.range = __named_parameters.range;
};

sk$ParseTree$dtLazyTree.prototype.asEmpty = function() {
  var t$ = this;
  var t$1 = t$.builder;
  var t$2 = t$1();
  return t$2.asEmpty();
};

sk$ParseTree$dtLazyTree.prototype.getChildren = function() {
  var t$ = this;
  var t$1 = t$.builder;
  var t$2 = t$1();
  return t$2.getChildren();
};

sk$ParseTree$dtLazyTree.prototype.getKind = function() {
  var t$ = this;
  var t$1 = t$.builder;
  var t$2 = t$1();
  return t$2.getKind();
};

sk$ParseTree$dtLazyTree.prototype.getNamedFields = function() {
  var t$ = this;
  var t$1 = t$.builder;
  var t$2 = t$1();
  return t$2.getNamedFields();
};

sk$ParseTree$dtLazyTree.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.builder;
  var t$2 = t$1();
  return t$2.isEmpty();
};

sk$ParseTree$dtLazyTree.prototype.transform = function(_codemod) {
  return sk$invariant_violation(new sk$String(('Should not be transforming LazyTrees')));
};

sk$ParseTree$dtLazyTree.prototype.__bases = [
  sk$ParseTree$dtLazyTree,
  sk$ParseTree$dtParseTree
];

var sk$ParseTree$dtParseTreeList = sk.ParseTree$dtParseTreeList = function ParseTree$dtParseTreeList(__named_parameters) {
  sk$ParseTree$dtParseTree.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtParseTreeList.prototype = Object.create(Object.prototype);

sk$ParseTree$dtParseTreeList.prototype.__constructor = sk$ParseTree$dtParseTreeList;

sk$ParseTree$dtParseTreeList.prototype.__classname = 'ParseTree.ParseTreeList';

sk$ParseTree$dtParseTreeList.prototype.$frozen = true;

sk$ParseTree$dtParseTreeList.prototype.__type_switch_id = 214;

sk$ParseTree$dtParseTreeList.prototype.__copy = function() {
  return new (sk$ParseTree$dtParseTreeList)(this);
};

sk$ParseTree$dtParseTreeList.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp299 = __cache.get(this);
  if (_tmp299 === undefined)
    {
      var _tmp299 = this.__copy();
      _tmp299.$frozen = true;
      __cache.set(this, _tmp299);
      _tmp299.startDelimiter = skip.deepFreeze(_tmp299.startDelimiter, __cache);
      _tmp299.elements = skip.deepFreeze(_tmp299.elements, __cache);
      _tmp299.separatorKind = skip.deepFreeze(_tmp299.separatorKind, __cache);
      _tmp299.separators = skip.deepFreeze(_tmp299.separators, __cache);
      _tmp299.endDelimiter = skip.deepFreeze(_tmp299.endDelimiter, __cache);
      _tmp299.range = skip.deepFreeze(_tmp299.range, __cache);
    }
  return _tmp299;
};

sk$ParseTree$dtParseTreeList.prototype.__init = function(__named_parameters) {
  this.startDelimiter = __named_parameters.startDelimiter;
  this.elements = __named_parameters.elements;
  this.separatorKind = __named_parameters.separatorKind;
  this.separators = __named_parameters.separators;
  this.endDelimiter = __named_parameters.endDelimiter;
  this.range = __named_parameters.range;
};

sk$ParseTree$dtParseTreeList.prototype.addDelimiters = function(startDelimiter, endDelimiter) {
  var t$ = this;
  var t$1 = t$.startDelimiter;
  var t$2;
  if (t$1.isEmpty().__value)
    {
      var t$3 = this;
      var t$4 = t$3.endDelimiter;
      t$2 = t$4.isEmpty();
    }
  else
    t$2 = new sk$Bool((false));
  var t$5 = t$2;
  sk$invariant(t$5, new sk$String(('Adding Delimiters to existing delimited list')));
  var t$6 = startDelimiter;
  var t$7 = t$6.range;
  var t$8 = t$7.start;
  var t$9 = endDelimiter;
  var t$10 = t$9.range;
  var t$11 = t$10.end;
  var range = sk$TextRange$dtcreate(t$8, t$11);
  var t$12 = range;
  var t$13 = this;
  var t$14 = t$13.range;
  var t$15 = t$12.containsRange(t$14);
  sk$invariant(t$15, new sk$String(('Delimiters are contained within the list')));
  var t$16 = this;
  var t$17 = range;
  var t$18 = startDelimiter;
  var t$19 = endDelimiter;
  return ((() => 
  {
    var _tmp300 = t$16.__copy();
    _tmp300.endDelimiter = t$19;
    _tmp300.range = t$17;
    _tmp300.startDelimiter = t$18;
    return _tmp300;
  })());
};

sk$ParseTree$dtParseTreeList.prototype.asList = function() {
  return this;
};

sk$ParseTree$dtParseTreeList.prototype.getChildren = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    yield new sk$Some(t$.startDelimiter);
    var t$1 = this;
    var t$2 = t$1.separators;
    if (t$2.isEmpty().__value)
      {
        var t$3 = this;
        var t$4 = t$3.elements;
        var $var = t$4.values();
        var var1 = new sk$Bool((true));
        {
          jumpBlockOuterbreak$bg10435:{
            break$bg10435:{
              dowhile_else$bg10434:{
                do
                  {
                    jumpBlockOuterdowhile_cond$bg10436:{
                      dowhile_cond$bg10436:{
                        {
                          var t$5 = $var;
                          var var2 = t$5.next();
                          var element;
                          {
                            jumpBlockOuterjumpLab$bg10470:{
                              jumpLab$bg10470:{
                                jumpLab$bg10469:{
                                  switch (var2.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg10469;
                                    
                                    case 205:
                                      element = var2.value;
                                      break jumpLab$bg10470;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var1 = new sk$Bool((false));
                                  break dowhile_cond$bg10436;
                                }
                              }
                              yield new sk$Some(element);
                              break jumpBlockOuterjumpLab$bg10470;
                            }
                          }
                          break dowhile_cond$bg10436;
                        }
                      }
                      if (var1.__value)
                        {}
                      else
                        break dowhile_else$bg10434;
                      break jumpBlockOuterdowhile_cond$bg10436;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg10435;
            }
            {}
            break jumpBlockOuterbreak$bg10435;
          }
        }
      }
    else
      {
        var t$6 = this;
        var elements = t$6.elements;
        var t$7 = this;
        var separators = t$7.separators;
        var t$8 = separators;
        var t$9 = t$8.size();
        var t$10 = elements;
        var t$11 = t$10.size();
        var t$12;
        if (t$9.$eq$eq(t$11).__value)
          t$12 = new sk$Bool((true));
        else
          {
            var t$13 = separators;
            var t$14 = t$13.size();
            var t$15 = t$14.$pl(new sk$Int(1.0, 0.0));
            var t$16 = elements;
            var t$17 = t$16.size();
            t$12 = t$15.$eq$eq(t$17);
          }
        var t$18 = t$12;
        sk$invariant(t$18, undefined);
        var separatorsIndex = new sk$Int(0.0, 0.0);
        var t$19 = elements;
        var var3 = t$19.values();
        var var4 = new sk$Bool((true));
        {
          jumpBlockOuterbreak$bg10456:{
            break$bg10456:{
              dowhile_else$bg10455:{
                do
                  {
                    jumpBlockOuterdowhile_cond$bg10457:{
                      dowhile_cond$bg10457:{
                        {
                          var t$20 = var3;
                          var var5 = t$20.next();
                          var element1;
                          {
                            jumpBlockOuterjumpLab$bg10474:{
                              jumpLab$bg10474:{
                                jumpLab$bg10473:{
                                  switch (var5.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg10473;
                                    
                                    case 205:
                                      element1 = var5.value;
                                      break jumpLab$bg10474;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var4 = new sk$Bool((false));
                                  break dowhile_cond$bg10457;
                                }
                              }
                              {
                                yield new sk$Some(element1);
                                var t$21 = separatorsIndex;
                                var t$22 = separators;
                                var t$23 = t$22.size();
                                if (t$21.$lt(t$23).__value)
                                  {
                                    var t$24 = separators;
                                    var t$25 = separatorsIndex;
                                    yield new sk$Some(t$24.get(t$25));
                                    var t$26 = separatorsIndex;
                                    separatorsIndex = t$26.$pl(new sk$Int(1.0, 0.0));
                                  }
                                else
                                  {}
                              }
                              break jumpBlockOuterjumpLab$bg10474;
                            }
                          }
                          break dowhile_cond$bg10457;
                        }
                      }
                      if (var4.__value)
                        {}
                      else
                        break dowhile_else$bg10455;
                      break jumpBlockOuterdowhile_cond$bg10457;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg10456;
            }
            {}
            break jumpBlockOuterbreak$bg10456;
          }
        }
      }
    var t$27 = this;
    yield new sk$Some(t$27.endDelimiter);
    return undefined;
  });
};

sk$ParseTree$dtParseTreeList.prototype.getKind = function() {
  return new sk$String(('ParseTreeList'));
};

sk$ParseTree$dtParseTreeList.prototype.getNamedFields = function() {
  return sk$invariant_violation(new sk$String(('Do not get fields of ParseTreeList')));
};

sk$ParseTree$dtParseTreeList.prototype.isList = function() {
  return new sk$Bool((true));
};

sk$ParseTree$dtParseTreeList.makeList = function(__named_parameters) {
  var elements = __named_parameters.elements;
  var range = __named_parameters.range;
  var t$ = range;
  var t$1 = range;
  var t$2 = t$1.start;
  var t$3 = sk$TextRange$dtempty(t$2);
  var t$4 = new (sk$ParseTree$dtEmptyTree)({
    range: t$3
  });
  var t$5 = elements;
  var t$6 = range;
  var t$7 = t$6.end;
  var t$8 = sk$TextRange$dtempty(t$7);
  var t$9 = new (sk$ParseTree$dtEmptyTree)({
    range: t$8
  });
  return new (sk$ParseTree$dtParseTreeList)({
    elements: t$5,
    endDelimiter: t$9,
    range: t$,
    separatorKind: singleton$None,
    separators: new (sk$Array)([]),
    startDelimiter: t$4
  });
};

sk$ParseTree$dtParseTreeList.makeSeparatedList = function(__named_parameters) {
  var elements = __named_parameters.elements;
  var range = __named_parameters.range;
  var separatorKind = __named_parameters.separatorKind;
  var separators = __named_parameters.separators;
  var t$ = range;
  var t$1 = range;
  var t$2 = t$1.start;
  var t$3 = sk$TextRange$dtempty(t$2);
  var t$4 = new (sk$ParseTree$dtEmptyTree)({
    range: t$3
  });
  var t$5 = elements;
  var t$6 = separatorKind;
  var t$7 = new (sk$Some)(t$6);
  var t$8 = separators;
  var t$9 = range;
  var t$10 = t$9.end;
  var t$11 = sk$TextRange$dtempty(t$10);
  var t$12 = new (sk$ParseTree$dtEmptyTree)({
    range: t$11
  });
  return new (sk$ParseTree$dtParseTreeList)({
    elements: t$5,
    endDelimiter: t$12,
    range: t$,
    separatorKind: t$7,
    separators: t$8,
    startDelimiter: t$4
  });
};

sk$ParseTree$dtParseTreeList.prototype.map = function(transformElement) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.elements;
  var t$3 = transformElement;
  var t$4 = t$2.map(t$3);
  return ((() => 
  {
    var _tmp301 = t$.__copy();
    _tmp301.elements = t$4;
    return _tmp301;
  })());
};

sk$ParseTree$dtParseTreeList.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.elements;
  return t$1.size();
};

sk$ParseTree$dtParseTreeList.prototype.transform = function(codemod) {
  var t$ = codemod;
  var t$1 = this;
  var t$2 = t$1.startDelimiter;
  var startDelimiter = t$.transform(t$2);
  var t$3 = this;
  var t$4 = t$3.elements;
  var t$5 = codemod;
  var t$6 = t$5;
  var elements = t$4.map(((_tmp10521) => 
  {
    return t$6.transform(_tmp10521);
  }));
  var t$7 = this;
  var t$8 = t$7.separators;
  var t$9 = codemod;
  var t$10 = t$9;
  var separators = t$8.map(((_tmp10526) => 
  {
    return t$10.transform(_tmp10526);
  }));
  var t$11 = codemod;
  var t$12 = this;
  var t$13 = t$12.endDelimiter;
  var endDelimiter = t$11.transform(t$13);
  var t$14 = this;
  var t$15 = t$14.range;
  var t$16 = startDelimiter;
  var t$17 = t$16.i0;
  var t$18 = elements;
  var t$19 = t$18.map(((subst) => 
  {
    var t$20 = subst;
    return t$20.i0;
  }));
  var t$21 = separators;
  var t$22 = t$21.map(((subst1) => 
  {
    var t$23 = subst1;
    return t$23.i0;
  }));
  var t$24 = this;
  var t$25 = t$24.separatorKind;
  var t$26 = endDelimiter;
  var t$27 = t$26.i0;
  var t$28 = new (sk$ParseTree$dtParseTreeList)({
    elements: t$19,
    endDelimiter: t$27,
    range: t$15,
    separatorKind: t$25,
    separators: t$22,
    startDelimiter: t$17
  });
  var t$29 = startDelimiter;
  var t$30 = t$29.i1;
  var t$31 = elements;
  var t$32 = t$31.values();
  var t$33 = t$32.flatMap(((subst2) => 
  {
    var t$34 = subst2;
    var t$35 = t$34.i1;
    return t$35.values();
  }));
  var t$36 = t$33.collect(sk$Vector);
  var t$37 = separators;
  var t$38 = t$37.values();
  var t$39 = t$38.flatMap(((subst3) => 
  {
    var t$40 = subst3;
    var t$41 = t$40.i1;
    return t$41.values();
  }));
  var t$42 = t$39.collect(sk$Vector);
  var t$43 = endDelimiter;
  var t$44 = t$43.i1;
  var t$45 = new (sk$Array)([
    t$30,
    t$36,
    t$42,
    t$44
  ]);
  var t$46 = sk$Vector.createFromItems(t$45);
  var t$47 = t$46.flatten();
  return new (sk$Tuple2)(t$28, t$47);
};

sk$ParseTree$dtParseTreeList.prototype.__bases = [
  sk$ParseTree$dtParseTreeList,
  sk$ParseTree$dtParseTree
];

var sk$ParseTree$dtReplaceTokenCodeMod = sk.ParseTree$dtReplaceTokenCodeMod = function ParseTree$dtReplaceTokenCodeMod(__named_parameters) {
  sk$ParseTree$dtCodeMod.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtReplaceTokenCodeMod.prototype = Object.create(Object.prototype);

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__constructor = sk$ParseTree$dtReplaceTokenCodeMod;

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__classname = 'ParseTree.ReplaceTokenCodeMod';

sk$ParseTree$dtReplaceTokenCodeMod.prototype.$frozen = false;

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__type_switch_id = 210;

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__copy = function() {
  return new (sk$ParseTree$dtReplaceTokenCodeMod)(this);
};

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp302 = __cache.get(this);
  if (_tmp302 === undefined)
    {
      var _tmp302 = this.__copy();
      _tmp302.$frozen = true;
      __cache.set(this, _tmp302);
      _tmp302.search = skip.deepFreeze(_tmp302.search, __cache);
      _tmp302.replace = skip.deepFreeze(_tmp302.replace, __cache);
    }
  return _tmp302;
};

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__init = function(__named_parameters) {
  this.search = __named_parameters.search;
  this.replace = __named_parameters.replace;
};

sk$ParseTree$dtReplaceTokenCodeMod.doIt = function(search, replace, tree) {
  var t$ = search;
  var t$1 = new (sk$Some)(t$);
  var t$2 = replace;
  var codemod = new (sk$ParseTree$dtReplaceTokenCodeMod)({
    replace: t$2,
    search: t$1
  });
  var t$3 = codemod;
  var t$4 = tree;
  return t$3.transform(t$4);
};

sk$ParseTree$dtReplaceTokenCodeMod.prototype.transform = function(tree) {
  var t$ = this;
  var t$1 = tree;
  var $var = t$.transformChildren(t$1);
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg10595:{
      jumpLab$bg10595:{
        switch ($var.__type_switch_id) {
          case 392:
            var1 = $var.i0;
            var2 = $var.i1;
            break jumpLab$bg10595;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var childSubstitions = var2;
        var afterChildren = var1;
        var t$2 = this;
        var t$3 = afterChildren;
        var var3 = t$2.transformTree(t$3);
        var transformedTree;
        {
          jumpBlockOuterjumpLab$bg10592:{
            jumpLab$bg10592:{
              jumpLab$bg10591:{
                switch (var3.__type_switch_id) {
                  case 204:
                    break jumpLab$bg10591;
                  
                  case 205:
                    transformedTree = var3.value;
                    break jumpLab$bg10592;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$4 = afterChildren;
                var t$5 = childSubstitions;
                return new (sk$Tuple2)(t$4, t$5);
              }
            }
            {
              var t$6 = transformedTree;
              var t$7 = tree;
              var t$8 = t$7.getRangeWithComments();
              var t$9 = transformedTree;
              var t$10 = new (sk$Tuple2)(t$8, t$9);
              var t$11 = new (sk$Array)([
                t$10
              ]);
              var t$12 = sk$Vector.createFromItems(t$11);
              return new (sk$Tuple2)(t$6, t$12);
            }
          }
        }
      }
    }
  }
};

sk$ParseTree$dtReplaceTokenCodeMod.prototype.transformTree = function(tree) {
  var t$ = this;
  var $var = t$.search;
  var search;
  {
    jumpBlockOuterjumpLab$bg10615:{
      jumpLab$bg10615:{
        jumpLab$bg10614:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg10614;
            
            case 205:
              search = $var.value;
              break jumpLab$bg10615;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return singleton$None;
      }
      {
        var tokenTree;
        var token;
        {
          jumpBlockOuterjumpLab$bg10608:{
            jumpLab$bg10608:{
              jumpLab$bg10607:{
                switch (tree.__type_switch_id) {
                  case 215:
                    tokenTree = tree;
                    token = tree.token;
                    var var1 = new sk$Bool((false));
                    var t$1 = token;
                    var t$2 = search;
                    var1 = t$1.$eq$eq(t$2);
                    if (var1.__value)
                      break jumpLab$bg10607;
                    else
                      break jumpLab$bg10608;
                  
                  default:
                    break jumpLab$bg10608;

                }
              }
              {
                var t$3 = tokenTree;
                var t$4 = this;
                var t$5 = t$4.replace;
                var t$6 = ((() => 
                {
                  var _tmp303 = t$3.__copy();
                  _tmp303.token = t$5;
                  return _tmp303;
                })());
                return new (sk$Some)(t$6);
              }
            }
            return singleton$None;
          }
        }
      }
    }
  }
};

sk$ParseTree$dtReplaceTokenCodeMod.prototype.__bases = [
  sk$ParseTree$dtReplaceTokenCodeMod,
  sk$ParseTree$dtCodeMod
];

var sk$ParseTree$dtTokenAccumulator = sk.ParseTree$dtTokenAccumulator = function ParseTree$dtTokenAccumulator(__named_parameters) {
  sk$ParseTree$dtParseTreeVisitor.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtTokenAccumulator.prototype = Object.create(Object.prototype);

sk$ParseTree$dtTokenAccumulator.prototype.__constructor = sk$ParseTree$dtTokenAccumulator;

sk$ParseTree$dtTokenAccumulator.prototype.__classname = 'ParseTree.TokenAccumulator';

sk$ParseTree$dtTokenAccumulator.prototype.$frozen = false;

sk$ParseTree$dtTokenAccumulator.prototype.__type_switch_id = 216;

sk$ParseTree$dtTokenAccumulator.prototype.__copy = function() {
  return new (sk$ParseTree$dtTokenAccumulator)(this);
};

sk$ParseTree$dtTokenAccumulator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp304 = __cache.get(this);
  if (_tmp304 === undefined)
    {
      var _tmp304 = this.__copy();
      _tmp304.$frozen = true;
      __cache.set(this, _tmp304);
      _tmp304.tokens = skip.deepFreeze(_tmp304.tokens, __cache);
    }
  return _tmp304;
};

sk$ParseTree$dtTokenAccumulator.prototype.__init = function(__named_parameters) {
  this.tokens = __named_parameters.tokens === undefined ? ((() => 
  {
    return sk$Vector.mcreateFromItems(new (sk$Array)([]));
  })()) : __named_parameters.tokens;
};

sk$ParseTree$dtTokenAccumulator.prototype.visit = function(tree) {
  var token;
  {
    jumpBlockOuterjumpLab$bg10625:{
      jumpLab$bg10625:{
        jumpLab$bg10624:{
          switch (tree.__type_switch_id) {
            case 215:
              token = tree.token;
              break jumpLab$bg10624;
            
            default:
              break jumpLab$bg10625;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.tokens;
          var t$2 = token;
          return t$1.push(t$2);
        }
      }
      {
        var t$3 = this;
        var t$4 = tree;
        return t$3.visitChildren(t$4);
      }
    }
  }
};

sk$ParseTree$dtTokenAccumulator.prototype.__bases = [
  sk$ParseTree$dtTokenAccumulator,
  sk$ParseTree$dtParseTreeVisitor
];

var sk$ParseTree$dtTokenTree = sk.ParseTree$dtTokenTree = function ParseTree$dtTokenTree(__named_parameters) {
  sk$ParseTree$dtParseTree.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$ParseTree$dtTokenTree.prototype = Object.create(Object.prototype);

sk$ParseTree$dtTokenTree.prototype.__constructor = sk$ParseTree$dtTokenTree;

sk$ParseTree$dtTokenTree.prototype.__classname = 'ParseTree.TokenTree';

sk$ParseTree$dtTokenTree.prototype.$frozen = true;

sk$ParseTree$dtTokenTree.prototype.__type_switch_id = 215;

sk$ParseTree$dtTokenTree.prototype.__copy = function() {
  return new (sk$ParseTree$dtTokenTree)(this);
};

sk$ParseTree$dtTokenTree.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp305 = __cache.get(this);
  if (_tmp305 === undefined)
    {
      var _tmp305 = this.__copy();
      _tmp305.$frozen = true;
      __cache.set(this, _tmp305);
      _tmp305.token = skip.deepFreeze(_tmp305.token, __cache);
      _tmp305.range = skip.deepFreeze(_tmp305.range, __cache);
    }
  return _tmp305;
};

sk$ParseTree$dtTokenTree.prototype.__init = function(__named_parameters) {
  this.token = __named_parameters.token;
  this.range = __named_parameters.range;
};

sk$ParseTree$dtTokenTree.prototype.asToken = function() {
  return this;
};

sk$ParseTree$dtTokenTree.prototype.getChildren = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    return undefined;
  });
};

sk$ParseTree$dtTokenTree.prototype.getFirstToken = function() {
  var t$ = this;
  var t$1 = t$.token;
  return new (sk$Some)(t$1);
};

sk$ParseTree$dtTokenTree.prototype.getKind = function() {
  return new sk$String(('Token'));
};

sk$ParseTree$dtTokenTree.prototype.getLastToken = function() {
  var t$ = this;
  var t$1 = t$.token;
  return new (sk$Some)(t$1);
};

sk$ParseTree$dtTokenTree.prototype.getNamedFields = function() {
  return sk$invariant_violation(new sk$String(('Do not get fields of Token')));
};

sk$ParseTree$dtTokenTree.prototype.isToken = function() {
  return new sk$Bool((true));
};

sk$ParseTree$dtTokenTree.prototype.transform = function(_codemod) {
  var t$ = this;
  var t$1 = sk$Vector.createFromItems(new (sk$Array)([]));
  return new (sk$Tuple2)(t$, t$1);
};

sk$ParseTree$dtTokenTree.prototype.__bases = [
  sk$ParseTree$dtTokenTree,
  sk$ParseTree$dtParseTree
];

var sk$Persistent$dtInternal = sk.Persistent$dtInternal = function Persistent$dtInternal(elements) {
  this.elements = elements;
};

sk$Persistent$dtInternal.prototype = Object.create(Object.prototype);

sk$Persistent$dtInternal.prototype.__constructor = sk$Persistent$dtInternal;

sk$Persistent$dtInternal.prototype.__classname = 'Persistent.Internal';

sk$Persistent$dtInternal.prototype.$frozen = true;

sk$Persistent$dtInternal.prototype.__type_switch_id = 220;

sk$Persistent$dtInternal.prototype.__copy = function() {
  return new (sk$Persistent$dtInternal)(this.elements);
};

sk$Persistent$dtInternal.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp306 = __cache.get(this);
  if (_tmp306 === undefined)
    {
      var _tmp306 = this.__copy();
      _tmp306.$frozen = true;
      __cache.set(this, _tmp306);
      _tmp306.elements = skip.deepFreeze(_tmp306.elements, __cache);
    }
  return _tmp306;
};

sk$Persistent$dtInternal.prototype.__init = function(__named_parameters) {};

sk$Persistent$dtInternal.branchLadder = function(shift, tailSize, tail) {
  var t$ = shift;
  var t$1 = t$.i;
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var elements = sk$Array.mfill((sk$Persistent$dtbranchFactor()), singleton$None);
      var t$2 = elements;
      var t$3 = this;
      var t$4 = shift;
      var t$5 = t$4.decrement();
      var t$6 = tailSize;
      var t$7 = tail;
      var t$8 = t$3.branchLadder(t$5, t$6, t$7);
      var t$9 = new (sk$Some)(t$8);
      t$2.set(new sk$Int(0.0, 0.0), t$9);
      var t$10 = elements;
      var t$11 = t$10;
      return new (sk$Persistent$dtInternal)(t$11);
    }
  else
    {
      var t$12 = tail;
      return new (sk$Persistent$dtLeaf)(t$12);
    }
};

sk$Persistent$dtInternal.prototype.count = function() {
  var t$ = this;
  var elements = t$.elements;
  var count = new sk$Int(0.0, 0.0);
  var t$1 = elements;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg11208:{
      break$bg11208:{
        dowhile_else$bg11207:{
          do
            {
              jumpBlockOuterdowhile_cond$bg11209:{
                dowhile_cond$bg11209:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var node;
                    {
                      jumpBlockOuterjumpLab$bg11221:{
                        jumpLab$bg11221:{
                          jumpLab$bg11220:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg11220;
                              
                              case 205:
                                node = var2.value;
                                break jumpLab$bg11221;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg11209;
                          }
                        }
                        {
                          var child;
                          {
                            jumpBlockOuterjumpLab$bg11217:{
                              jumpLab$bg11217:{
                                jumpLab$bg11216:{
                                  switch (node.__type_switch_id) {
                                    case 205:
                                      child = node.value;
                                      break jumpLab$bg11216;
                                    
                                    case 204:
                                      break jumpLab$bg11217;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var t$3 = count;
                                  var t$4 = child;
                                  var t$5 = t$4.count();
                                  count = t$3.$pl(t$5);
                                }
                                break jumpBlockOuterjumpLab$bg11217;
                              }
                              {
                                break_val = sk.__.$void;
                                break break$bg11208;
                              }
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg11221;
                      }
                    }
                    break dowhile_cond$bg11209;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg11207;
                break jumpBlockOuterdowhile_cond$bg11209;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11208;
      }
      {}
      break jumpBlockOuterbreak$bg11208;
    }
  }
  return count;
};

sk$Persistent$dtInternal.prototype.popTail = function(shift, index) {
  var t$ = this;
  var elements = t$.elements;
  var t$1 = index;
  var t$2 = shift;
  var child = t$1.child(t$2);
  var t$3 = elements;
  var t$4 = child;
  var $var = sk$Unsafe$dtarray_get(t$3, t$4);
  var node;
  {
    jumpBlockOuterjumpLab$bg11260:{
      jumpLab$bg11260:{
        jumpLab$bg11259:{
          switch ($var.__type_switch_id) {
            case 205:
              node = $var.value;
              break jumpLab$bg11259;
            
            case 204:
              break jumpLab$bg11260;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = node;
          var t$6 = shift;
          var t$7 = t$6.decrement();
          var t$8 = index;
          var var1 = t$5.popTail(t$7, t$8);
          var var2;
          var var3;
          {
            jumpBlockOuterjumpLab$bg11256:{
              jumpLab$bg11256:{
                switch (var1.__type_switch_id) {
                  case 392:
                    var2 = var1.i0;
                    var3 = var1.i1;
                    break jumpLab$bg11256;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var leaf = var3;
                var nextNode = var2;
                var t$9 = child;
                var t$10;
                if (t$9.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                  {
                    var t$11 = nextNode;
                    t$10 = t$11.isNone();
                  }
                else
                  t$10 = new sk$Bool((false));
                if (t$10.__value)
                  {
                    var t$12 = nextNode;
                    var t$13 = leaf;
                    return new (sk$Tuple2)(t$12, t$13);
                  }
                else
                  {
                    var t$14 = elements;
                    var nextElements = t$14.clone();
                    var t$15 = nextElements;
                    var t$16 = child;
                    var t$17 = nextNode;
                    sk$Unsafe$dtarray_set(t$15, t$16, t$17);
                    var t$18 = nextElements;
                    var t$19 = t$18;
                    var t$20 = new (sk$Persistent$dtInternal)(t$19);
                    var t$21 = new (sk$Some)(t$20);
                    var t$22 = leaf;
                    return new (sk$Tuple2)(t$21, t$22);
                  }
              }
            }
          }
        }
      }
      {
        var t$23 = new sk$String(('Node::popTail: unexpected null node with shift=')).toString();
        var t$24 = shift;
        var t$25 = t$24.i;
        var t$26 = t$25.toString();
        var t$27 = new sk$String(('')).join(new (sk$Array)([
          t$23,
          t$26
        ]));
        return sk$invariant_violation(t$27);
      }
    }
  }
};

sk$Persistent$dtInternal.prototype.pushTail = function(shift, index, tailSize, tail) {
  var static1 = this.__constructor;
  var t$ = this;
  var elements = t$.elements;
  var t$1 = index;
  var t$2 = shift;
  var child = t$1.child(t$2);
  var t$3 = shift;
  shift = t$3.decrement();
  var t$4 = shift;
  var t$5 = t$4.i;
  var t$6;
  if (t$5.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$7 = tail;
      t$6 = new (sk$Persistent$dtLeaf)(t$7);
    }
  else
    {
      var t$8 = elements;
      var t$9 = child;
      var t$10;
      var $var = t$8.get(t$9);
      var node;
      {
        jumpBlockOuterjumpLab$bg11294:{
          jumpLab$bg11294:{
            jumpLab$bg11293:{
              switch ($var.__type_switch_id) {
                case 205:
                  node = $var.value;
                  break jumpLab$bg11293;
                
                case 204:
                  break jumpLab$bg11294;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            {
              var t$11 = node;
              var t$12 = shift;
              var t$13 = index;
              var t$14 = tailSize;
              var t$15 = tail;
              t$10 = t$11.pushTail(t$12, t$13, t$14, t$15);
            }
            break jumpBlockOuterjumpLab$bg11294;
          }
          {
            var t$16 = static1;
            var t$17 = shift;
            var t$18 = tailSize;
            var t$19 = tail;
            t$10 = t$16.branchLadder(t$17, t$18, t$19);
          }
          break jumpBlockOuterjumpLab$bg11294;
        }
      }
      t$6 = t$10;
    }
  var tailNode = t$6;
  var nextElements = sk$Array.mfillBy((sk$Persistent$dtbranchFactor()), ((i) => 
  {
    var t$20 = elements;
    var t$21 = i;
    var t$22 = sk$Unsafe$dtarray_get(t$20, t$21);
    return t$22;
  }));
  var t$23 = nextElements;
  var t$24 = child;
  var t$25 = tailNode;
  var t$26 = new (sk$Some)(t$25);
  t$23.set(t$24, t$26);
  var t$27 = nextElements;
  var t$28 = t$27;
  return new (sk$Persistent$dtInternal)(t$28);
};

sk$Persistent$dtInternal.prototype.set = function(shift, index, value) {
  var t$ = this;
  var elements = t$.elements;
  var t$1 = index;
  var t$2 = shift;
  var child = t$1.child(t$2);
  var t$3 = elements;
  var t$4 = child;
  var $var = sk$Unsafe$dtarray_get(t$3, t$4);
  var childNode;
  {
    jumpBlockOuterjumpLab$bg11323:{
      jumpLab$bg11323:{
        jumpLab$bg11322:{
          switch ($var.__type_switch_id) {
            case 205:
              childNode = $var.value;
              break jumpLab$bg11322;
            
            case 204:
              break jumpLab$bg11323;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = childNode;
          var t$6 = shift;
          var t$7 = t$6.decrement();
          var t$8 = index;
          var t$9 = value;
          var nextChildNode = t$5.set(t$7, t$8, t$9);
          var nextElements = sk$Array.mfillBy((sk$Persistent$dtbranchFactor()), ((i) => 
          {
            var t$10 = elements;
            var t$11 = i;
            var t$12 = sk$Unsafe$dtarray_get(t$10, t$11);
            return t$12;
          }));
          var t$13 = nextElements;
          var t$14 = child;
          var t$15 = nextChildNode;
          var t$16 = new (sk$Some)(t$15);
          sk$Unsafe$dtarray_set(t$13, t$14, t$16);
          var t$17 = nextElements;
          var t$18 = t$17;
          return new (sk$Persistent$dtInternal)(t$18);
        }
      }
      {
        var t$19 = new sk$String(('Node::set: unexpected null node with shift=')).toString();
        var t$20 = shift;
        var t$21 = t$20.i;
        var t$22 = t$21.toString();
        var t$23 = new sk$String(('')).join(new (sk$Array)([
          t$19,
          t$22
        ]));
        return sk$invariant_violation(t$23);
      }
    }
  }
};

sk$Persistent$dtInternal.prototype.validate = function(path, shift, len) {
  var t$ = this;
  var elements = t$.elements;
  var t$1 = shift;
  var t$2 = t$1.i;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = new sk$String(('Encountered branch at path ')).toString();
      var t$4 = path;
      var t$5 = t$4.join(new sk$String(('.')));
      var t$6 = t$5.toString();
      var t$7 = new sk$String((' but shift is ')).toString();
      var t$8 = shift;
      var t$9 = t$8.i;
      var t$10 = t$9.toString();
      var t$11 = new sk$String(('')).join(new (sk$Array)([
        t$3,
        t$6,
        t$7,
        t$10
      ]));
      return new (sk$Failure)(t$11);
    }
  else
    {
      var t$12 = elements;
      var t$13 = t$12.values();
      var elementsIterator = t$13.enumerated();
      var walked = new sk$Int(0.0, 0.0);
      {
        jumpBlockOuterbreak$bg11342:{
          break$bg11342:{
            while_else$bg11341:{
              do
                {
                  jumpBlockOutercontinue$bg11343:{
                    continue$bg11343:{
                      {
                        var t$14 = walked;
                        var t$15 = len;
                        var t$16 = t$15.i;
                        if (t$14.$lt(t$16).__value)
                          {
                            var t$17 = elementsIterator;
                            var $var = t$17.next();
                            var i;
                            var element;
                            {
                              jumpBlockOuterjumpLab$bg11404:{
                                jumpLab$bg11404:{
                                  jumpLab$bg11403:{
                                    jumpLab$bg11405:{
                                      switch ($var.__type_switch_id) {
                                        case 205:
                                          break jumpLab$bg11405;
                                        
                                        case 204:
                                          break jumpLab$bg11404;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    switch ($var.value.__type_switch_id) {
                                      case 392:
                                        i = $var.value.i0;
                                        element = $var.value.i1;
                                        break jumpLab$bg11403;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var node;
                                    {
                                      jumpBlockOuterjumpLab$bg11400:{
                                        jumpLab$bg11400:{
                                          jumpLab$bg11399:{
                                            switch (element.__type_switch_id) {
                                              case 205:
                                                node = element.value;
                                                break jumpLab$bg11399;
                                              
                                              case 204:
                                                break jumpLab$bg11400;
                                              
                                              default:
                                                skip.throwException(sk, new Error('Unmatched Branch'));

                                            }
                                          }
                                          {
                                            var t$18 = path;
                                            var t$19 = i;
                                            t$18.push(t$19);
                                            var t$20 = shift;
                                            var t$21 = t$20.i;
                                            var t$22 = t$21.$mi((sk$Persistent$dtbitsPerLevel()));
                                            var maxInChild = (sk$Persistent$dtbranchFactor()).shl(t$22);
                                            var t$23 = len;
                                            var t$24 = t$23.i;
                                            var t$25 = walked;
                                            var remaining = t$24.$mi(t$25);
                                            var t$26 = remaining;
                                            var t$27 = maxInChild;
                                            var childSize = sk$min(t$26, t$27);
                                            var t$28 = childSize;
                                            var t$29;
                                            if (t$28.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                                              {
                                                var t$30 = new sk$String(('Empty child at path ')).toString();
                                                var t$31 = path;
                                                var t$32 = t$31.join(new sk$String(('.')));
                                                var t$33 = t$32.toString();
                                                var t$34 = new sk$String(('')).join(new (sk$Array)([
                                                  t$30,
                                                  t$33
                                                ]));
                                                return new (sk$Failure)(t$34);
                                              }
                                            else
                                              {
                                                var t$35 = node;
                                                var t$36 = path;
                                                var t$37 = shift;
                                                var t$38 = t$37.decrement();
                                                var t$39 = childSize;
                                                var t$40 = new (sk$Persistent$dtIndex)(t$39);
                                                var t$41;
                                                var var1 = t$35.validate(t$36, t$38, t$40);
                                                var f;
                                                {
                                                  jumpBlockOuterjumpLab$bg11397:{
                                                    jumpLab$bg11397:{
                                                      jumpLab$bg11396:{
                                                        switch (var1.__type_switch_id) {
                                                          case 259:
                                                            break jumpLab$bg11396;
                                                          
                                                          case 258:
                                                            f = var1;
                                                            break jumpLab$bg11397;
                                                          
                                                          default:
                                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                                        }
                                                      }
                                                      {
                                                        var t$42 = walked;
                                                        var t$43 = childSize;
                                                        walked = t$42.$pl(t$43);
                                                        var t$44 = i;
                                                        var t$45 = path;
                                                        var t$46 = t$45.pop();
                                                        var t$47;
                                                        if (t$44.$bg$eq(t$46).__value)
                                                          {
                                                            var t$48 = new sk$String(('Unbalanced push/pop to path')).toString();
                                                            var t$49 = t$48;
                                                            return new (sk$Failure)(t$49);
                                                          }
                                                        else
                                                          t$47 = sk.__.$void;
                                                        t$41 = t$47;
                                                      }
                                                      break jumpBlockOuterjumpLab$bg11397;
                                                    }
                                                    return f;
                                                  }
                                                }
                                                t$29 = t$41;
                                              }
                                          }
                                          break jumpBlockOuterjumpLab$bg11400;
                                        }
                                        {
                                          var t$50 = new sk$String(('Encountered None() at index ')).toString();
                                          var t$51 = i;
                                          var t$52 = t$51.toString();
                                          var t$53 = new sk$String((' of path ')).toString();
                                          var t$54 = path;
                                          var t$55 = t$54.join(new sk$String(('.')));
                                          var t$56 = t$55.toString();
                                          var t$57 = new sk$String(('')).join(new (sk$Array)([
                                            t$50,
                                            t$52,
                                            t$53,
                                            t$56
                                          ]));
                                          return new (sk$Failure)(t$57);
                                        }
                                      }
                                    }
                                  }
                                  break jumpBlockOuterjumpLab$bg11404;
                                }
                                {
                                  var t$58 = new sk$String(('Iterator ended early at path ')).toString();
                                  var t$59 = path;
                                  var t$60 = t$59.join(new sk$String(('.')));
                                  var t$61 = t$60.toString();
                                  var t$62 = new sk$String(('')).join(new (sk$Array)([
                                    t$58,
                                    t$61
                                  ]));
                                  return new (sk$Failure)(t$62);
                                }
                              }
                            }
                          }
                        else
                          break while_else$bg11341;
                      }
                    }
                    {}
                    break jumpBlockOutercontinue$bg11343;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg11342;
          }
          {}
          break jumpBlockOuterbreak$bg11342;
        }
      }
      return new (sk$Success)(sk.__.$void);
    }
};

sk$Persistent$dtInternal.prototype.__bases = [
  sk$Persistent$dtInternal,
  sk$Persistent$dtNode
];

var sk$Persistent$dtLeaf = sk.Persistent$dtLeaf = function Persistent$dtLeaf(elements) {
  this.elements = elements;
};

sk$Persistent$dtLeaf.prototype = Object.create(Object.prototype);

sk$Persistent$dtLeaf.prototype.__constructor = sk$Persistent$dtLeaf;

sk$Persistent$dtLeaf.prototype.__classname = 'Persistent.Leaf';

sk$Persistent$dtLeaf.prototype.$frozen = true;

sk$Persistent$dtLeaf.prototype.__type_switch_id = 221;

sk$Persistent$dtLeaf.prototype.__copy = function() {
  return new (sk$Persistent$dtLeaf)(this.elements);
};

sk$Persistent$dtLeaf.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp307 = __cache.get(this);
  if (_tmp307 === undefined)
    {
      var _tmp307 = this.__copy();
      _tmp307.$frozen = true;
      __cache.set(this, _tmp307);
      _tmp307.elements = skip.deepFreeze(_tmp307.elements, __cache);
    }
  return _tmp307;
};

sk$Persistent$dtLeaf.prototype.__init = function(__named_parameters) {};

sk$Persistent$dtLeaf.branchLadder = function(shift, tailSize, tail) {
  var t$ = shift;
  var t$1 = t$.i;
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var elements = sk$Array.mfill((sk$Persistent$dtbranchFactor()), singleton$None);
      var t$2 = elements;
      var t$3 = this;
      var t$4 = shift;
      var t$5 = t$4.decrement();
      var t$6 = tailSize;
      var t$7 = tail;
      var t$8 = t$3.branchLadder(t$5, t$6, t$7);
      var t$9 = new (sk$Some)(t$8);
      t$2.set(new sk$Int(0.0, 0.0), t$9);
      var t$10 = elements;
      var t$11 = t$10;
      return new (sk$Persistent$dtInternal)(t$11);
    }
  else
    {
      var t$12 = tail;
      return new (sk$Persistent$dtLeaf)(t$12);
    }
};

sk$Persistent$dtLeaf.prototype.count = function() {
  return (sk$Persistent$dtbranchFactor());
};

sk$Persistent$dtLeaf.prototype.popTail = function(shift, index) {
  var leaf = this;
  var t$ = leaf;
  return new (sk$Tuple2)(singleton$None, t$);
};

sk$Persistent$dtLeaf.prototype.pushTail = function(shift, index, tailSize, tail) {
  var t$ = new sk$String(('Node::pushTail: unexpected leaf node with shift=')).toString();
  var t$1 = shift;
  var t$2 = t$1.i;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
  return sk$invariant_violation(t$4);
};

sk$Persistent$dtLeaf.prototype.set = function(shift, index, value) {
  var t$ = this;
  var elements = t$.elements;
  var t$1 = index;
  var child = t$1.leafChild();
  var nextElements = sk$Array.mfillBy((sk$Persistent$dtbranchFactor()), ((i) => 
  {
    var t$2 = elements;
    var t$3 = i;
    var t$4 = sk$Unsafe$dtarray_get(t$2, t$3);
    return t$4;
  }));
  var t$5 = nextElements;
  var t$6 = child;
  var t$7 = value;
  var t$8 = sk$Persistent$dtunsafeMake(t$7);
  sk$Unsafe$dtarray_set(t$5, t$6, t$8);
  var t$9 = nextElements;
  var t$10 = t$9;
  return new (sk$Persistent$dtLeaf)(t$10);
};

sk$Persistent$dtLeaf.prototype.validate = function(path, shift, len) {
  var t$ = shift;
  var t$1 = t$.i;
  if (t$1.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = new sk$String(('Encountered leaf at path ')).toString();
      var t$3 = path;
      var t$4 = t$3.join(new sk$String(('.')));
      var t$5 = t$4.toString();
      var t$6 = new sk$String((' but shift is ')).toString();
      var t$7 = shift;
      var t$8 = t$7.i;
      var t$9 = t$8.toString();
      var t$10 = new sk$String(('.')).toString();
      var t$11 = new sk$String(('')).join(new (sk$Array)([
        t$2,
        t$5,
        t$6,
        t$9,
        t$10
      ]));
      return new (sk$Failure)(t$11);
    }
  else
    return new (sk$Success)(sk.__.$void);
};

sk$Persistent$dtLeaf.prototype.__bases = [
  sk$Persistent$dtLeaf,
  sk$Persistent$dtNode
];

var sk$QuickCheck$dtBoolGenerator = sk.QuickCheck$dtBoolGenerator = function QuickCheck$dtBoolGenerator() {};

sk$QuickCheck$dtBoolGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtBoolGenerator.prototype.__constructor = sk$QuickCheck$dtBoolGenerator;

sk$QuickCheck$dtBoolGenerator.prototype.__classname = 'QuickCheck.BoolGenerator';

sk$QuickCheck$dtBoolGenerator.prototype.$frozen = true;

sk$QuickCheck$dtBoolGenerator.prototype.__type_switch_id = 227;

sk$QuickCheck$dtBoolGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtBoolGenerator)();
};

sk$QuickCheck$dtBoolGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp308 = __cache.get(this);
  if (_tmp308 === undefined)
    {
      var _tmp308 = this.__copy();
      _tmp308.$frozen = true;
      __cache.set(this, _tmp308);
    }
  return _tmp308;
};

sk$QuickCheck$dtBoolGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtBoolGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtBoolGenerator.prototype.generate = function(rng, _size) {
  var t$ = rng;
  return t$.randomBool();
};

sk$QuickCheck$dtBoolGenerator.prototype.__bases = [
  sk$QuickCheck$dtBoolGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtCharGenerator = sk.QuickCheck$dtCharGenerator = function QuickCheck$dtCharGenerator() {};

sk$QuickCheck$dtCharGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtCharGenerator.prototype.__constructor = sk$QuickCheck$dtCharGenerator;

sk$QuickCheck$dtCharGenerator.prototype.__classname = 'QuickCheck.CharGenerator';

sk$QuickCheck$dtCharGenerator.prototype.$frozen = true;

sk$QuickCheck$dtCharGenerator.prototype.__type_switch_id = 228;

sk$QuickCheck$dtCharGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtCharGenerator)();
};

sk$QuickCheck$dtCharGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp309 = __cache.get(this);
  if (_tmp309 === undefined)
    {
      var _tmp309 = this.__copy();
      _tmp309.$frozen = true;
      __cache.set(this, _tmp309);
    }
  return _tmp309;
};

sk$QuickCheck$dtCharGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtCharGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtCharGenerator.prototype.generate = function(rng, size) {
  jumpBlockOuterbreak$bg12791:{
    break$bg12791:{
      do
        {
          jumpBlockOutercontinue$bg12792:{
            continue$bg12792:{
              {
                var t$ = rng;
                var t$1 = size;
                var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
                var code = t$.random(new sk$Int(0.0, 0.0), t$2);
                var t$3 = code;
                var t$4;
                if (sk$Char.isValidCharCodePoint(t$3).__value)
                  {
                    var t$5 = code;
                    return t$5.chr();
                  }
                else
                  t$4 = sk.__.$void;
              }
            }
            {}
            break jumpBlockOutercontinue$bg12792;
          }
        }
      while (true);
    }
    {}
    break jumpBlockOuterbreak$bg12791;
  }
};

sk$QuickCheck$dtCharGenerator.prototype.__bases = [
  sk$QuickCheck$dtCharGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtConcatLazy = sk.QuickCheck$dtConcatLazy = function QuickCheck$dtConcatLazy(source, second) {
  this.source = source;
  this.second = second;
};

sk$QuickCheck$dtConcatLazy.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtConcatLazy.prototype.__constructor = sk$QuickCheck$dtConcatLazy;

sk$QuickCheck$dtConcatLazy.prototype.__classname = 'QuickCheck.ConcatLazy';

sk$QuickCheck$dtConcatLazy.prototype.$frozen = true;

sk$QuickCheck$dtConcatLazy.prototype.__type_switch_id = 244;

sk$QuickCheck$dtConcatLazy.prototype.__copy = function() {
  return new (sk$QuickCheck$dtConcatLazy)(this.source, this.second);
};

sk$QuickCheck$dtConcatLazy.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp310 = __cache.get(this);
  if (_tmp310 === undefined)
    {
      var _tmp310 = this.__copy();
      _tmp310.$frozen = true;
      __cache.set(this, _tmp310);
      _tmp310.source = skip.deepFreeze(_tmp310.source, __cache);
      _tmp310.second = skip.deepFreeze(_tmp310.second, __cache);
    }
  return _tmp310;
};

sk$QuickCheck$dtConcatLazy.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtConcatLazy.empty = function() {
  return singleton$QuickCheck$dtEmptyLazy;
};

sk$QuickCheck$dtConcatLazy.prototype.iterator = function() {
  var t$ = this;
  var t$1 = t$.source;
  var t$2 = t$1.iterator();
  var t$3 = this;
  var t$4 = t$3.second;
  var t$5 = t$4.iterator();
  return t$2.concat(t$5);
};

sk$QuickCheck$dtConcatLazy.prototype.__bases = [
  sk$QuickCheck$dtConcatLazy,
  sk$QuickCheck$dtLazy
];

var sk$QuickCheck$dtCreateComposedGenerator = sk.QuickCheck$dtCreateComposedGenerator = function QuickCheck$dtCreateComposedGenerator(f) {
  this.f = f;
};

sk$QuickCheck$dtCreateComposedGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtCreateComposedGenerator.prototype.__constructor = sk$QuickCheck$dtCreateComposedGenerator;

sk$QuickCheck$dtCreateComposedGenerator.prototype.__classname = 'QuickCheck.CreateComposedGenerator';

sk$QuickCheck$dtCreateComposedGenerator.prototype.$frozen = true;

sk$QuickCheck$dtCreateComposedGenerator.prototype.__type_switch_id = 229;

sk$QuickCheck$dtCreateComposedGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtCreateComposedGenerator)(this.f);
};

sk$QuickCheck$dtCreateComposedGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp311 = __cache.get(this);
  if (_tmp311 === undefined)
    {
      var _tmp311 = this.__copy();
      _tmp311.$frozen = true;
      __cache.set(this, _tmp311);
      _tmp311.f = skip.deepFreeze(_tmp311.f, __cache);
    }
  return _tmp311;
};

sk$QuickCheck$dtCreateComposedGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtCreateComposedGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtCreateComposedGenerator.prototype.generate = function(rng, sizeBound) {
  var t$ = this;
  var t$1 = t$.f;
  var t$2 = rng;
  var t$3 = sizeBound;
  return t$1(t$2, t$3);
};

sk$QuickCheck$dtCreateComposedGenerator.prototype.__bases = [
  sk$QuickCheck$dtCreateComposedGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtEmptyLazy = sk.QuickCheck$dtEmptyLazy = function QuickCheck$dtEmptyLazy() {};

sk$QuickCheck$dtEmptyLazy.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtEmptyLazy.prototype.__constructor = sk$QuickCheck$dtEmptyLazy;

sk$QuickCheck$dtEmptyLazy.prototype.__classname = 'QuickCheck.EmptyLazy';

sk$QuickCheck$dtEmptyLazy.prototype.$frozen = true;

sk$QuickCheck$dtEmptyLazy.prototype.__type_switch_id = 245;

sk$QuickCheck$dtEmptyLazy.prototype.__copy = function() {
  return new (sk$QuickCheck$dtEmptyLazy)();
};

sk$QuickCheck$dtEmptyLazy.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp312 = __cache.get(this);
  if (_tmp312 === undefined)
    {
      var _tmp312 = this.__copy();
      _tmp312.$frozen = true;
      __cache.set(this, _tmp312);
    }
  return _tmp312;
};

sk$QuickCheck$dtEmptyLazy.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtEmptyLazy.empty = function() {
  return singleton$QuickCheck$dtEmptyLazy;
};

sk$QuickCheck$dtEmptyLazy.prototype.iterator = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    return undefined;
  });
};

sk$QuickCheck$dtEmptyLazy.prototype.__bases = [
  sk$QuickCheck$dtEmptyLazy,
  sk$QuickCheck$dtLazy
];

var sk$QuickCheck$dtFloatGenerator = sk.QuickCheck$dtFloatGenerator = function QuickCheck$dtFloatGenerator() {};

sk$QuickCheck$dtFloatGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtFloatGenerator.prototype.__constructor = sk$QuickCheck$dtFloatGenerator;

sk$QuickCheck$dtFloatGenerator.prototype.__classname = 'QuickCheck.FloatGenerator';

sk$QuickCheck$dtFloatGenerator.prototype.$frozen = true;

sk$QuickCheck$dtFloatGenerator.prototype.__type_switch_id = 230;

sk$QuickCheck$dtFloatGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtFloatGenerator)();
};

sk$QuickCheck$dtFloatGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp313 = __cache.get(this);
  if (_tmp313 === undefined)
    {
      var _tmp313 = this.__copy();
      _tmp313.$frozen = true;
      __cache.set(this, _tmp313);
    }
  return _tmp313;
};

sk$QuickCheck$dtFloatGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtFloatGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtFloatGenerator.prototype.generate = function(rng, size) {
  var t$ = rng;
  var t$1 = t$.randomFloat();
  var t$2 = size;
  var t$3 = t$2.$ti(new sk$Int(2.0, 0.0));
  var t$4 = t$3.toFloat();
  var t$5 = t$1.$ti(t$4);
  var t$6 = size;
  var t$7 = t$6.toFloat();
  return t$5.$mi(t$7);
};

sk$QuickCheck$dtFloatGenerator.prototype.__bases = [
  sk$QuickCheck$dtFloatGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtForAllGenerator = sk.QuickCheck$dtForAllGenerator = function QuickCheck$dtForAllGenerator(gen, f) {
  this.gen = gen;
  this.f = f;
};

sk$QuickCheck$dtForAllGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtForAllGenerator.prototype.__constructor = sk$QuickCheck$dtForAllGenerator;

sk$QuickCheck$dtForAllGenerator.prototype.__classname = 'QuickCheck.ForAllGenerator';

sk$QuickCheck$dtForAllGenerator.prototype.$frozen = true;

sk$QuickCheck$dtForAllGenerator.prototype.__type_switch_id = 231;

sk$QuickCheck$dtForAllGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtForAllGenerator)(this.gen, this.f);
};

sk$QuickCheck$dtForAllGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp314 = __cache.get(this);
  if (_tmp314 === undefined)
    {
      var _tmp314 = this.__copy();
      _tmp314.$frozen = true;
      __cache.set(this, _tmp314);
      _tmp314.gen = skip.deepFreeze(_tmp314.gen, __cache);
      _tmp314.f = skip.deepFreeze(_tmp314.f, __cache);
    }
  return _tmp314;
};

sk$QuickCheck$dtForAllGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtForAllGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtForAllGenerator.prototype.generate = function(rng, size) {
  var t$ = rng;
  var seed1 = t$.next();
  var t$1 = rng;
  var seed2 = t$1.next();
  var t$2 = this;
  var t$3 = t$2.gen;
  var t$4 = seed1;
  var t$5 = sk$Random.mcreate(t$4);
  var t$6 = size;
  var arg = t$3.generate(t$5, t$6);
  var t$7 = arg;
  var shrinkTree = sk$QuickCheck$dtbuildShrinkTree(t$7, undefined);
  var t$8 = this;
  var f = t$8.f;
  var t$9 = shrinkTree;
  var resultTree = t$9.map(((x) => 
  {
    var t$10 = f;
    var t$11 = x;
    var t$12 = t$10(t$11);
    var t$13 = t$12.property();
    var t$14 = t$13.generator();
    var t$15 = seed2;
    var t$16 = sk$Random.mcreate(t$15);
    var t$17 = size;
    var tree = t$14.generate(t$16, t$17);
    var t$18 = tree;
    return t$18.map(((result) => 
    {
      var t$19 = result;
      return t$19.flatMapFailure(((failure) => 
      {
        var t$20 = failure;
        var t$21 = x;
        var t$22 = t$21.toString();
        var t$23 = new (sk$Array)([
          t$22
        ]);
        var t$24 = sk$Vector.createFromItems(t$23);
        var t$25 = failure;
        var t$26 = t$25.counterExample;
        var t$27 = t$24.concat(t$26);
        return ((() => 
        {
          var _tmp315 = t$20.__copy();
          _tmp315.counterExample = t$27;
          return _tmp315;
        })());
      }));
    }));
  }));
  var t$28 = resultTree;
  return t$28.join();
};

sk$QuickCheck$dtForAllGenerator.prototype.__bases = [
  sk$QuickCheck$dtForAllGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtForAllProperty = sk.QuickCheck$dtForAllProperty = function QuickCheck$dtForAllProperty(gen, f) {
  this.gen = gen;
  this.f = f;
};

sk$QuickCheck$dtForAllProperty.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtForAllProperty.prototype.__constructor = sk$QuickCheck$dtForAllProperty;

sk$QuickCheck$dtForAllProperty.prototype.__classname = 'QuickCheck.ForAllProperty';

sk$QuickCheck$dtForAllProperty.prototype.$frozen = true;

sk$QuickCheck$dtForAllProperty.prototype.__type_switch_id = 248;

sk$QuickCheck$dtForAllProperty.prototype.__copy = function() {
  return new (sk$QuickCheck$dtForAllProperty)(this.gen, this.f);
};

sk$QuickCheck$dtForAllProperty.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp316 = __cache.get(this);
  if (_tmp316 === undefined)
    {
      var _tmp316 = this.__copy();
      _tmp316.$frozen = true;
      __cache.set(this, _tmp316);
      _tmp316.gen = skip.deepFreeze(_tmp316.gen, __cache);
      _tmp316.f = skip.deepFreeze(_tmp316.f, __cache);
    }
  return _tmp316;
};

sk$QuickCheck$dtForAllProperty.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtForAllProperty.prototype.generator = function() {
  var t$ = this;
  var t$1 = t$.gen;
  var t$2 = this;
  var t$3 = t$2.f;
  return new (sk$QuickCheck$dtForAllGenerator)(t$1, t$3);
};

sk$QuickCheck$dtForAllProperty.prototype.__bases = [
  sk$QuickCheck$dtForAllProperty,
  sk$QuickCheck$dtProperty
];

var sk$QuickCheck$dtFun1Generator = sk.QuickCheck$dtFun1Generator = function QuickCheck$dtFun1Generator(generator) {
  this.generator = generator;
};

sk$QuickCheck$dtFun1Generator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtFun1Generator.prototype.__constructor = sk$QuickCheck$dtFun1Generator;

sk$QuickCheck$dtFun1Generator.prototype.__classname = 'QuickCheck.Fun1Generator';

sk$QuickCheck$dtFun1Generator.prototype.$frozen = true;

sk$QuickCheck$dtFun1Generator.prototype.__type_switch_id = 232;

sk$QuickCheck$dtFun1Generator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtFun1Generator)(this.generator);
};

sk$QuickCheck$dtFun1Generator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp317 = __cache.get(this);
  if (_tmp317 === undefined)
    {
      var _tmp317 = this.__copy();
      _tmp317.$frozen = true;
      __cache.set(this, _tmp317);
      _tmp317.generator = skip.deepFreeze(_tmp317.generator, __cache);
    }
  return _tmp317;
};

sk$QuickCheck$dtFun1Generator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtFun1Generator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtFun1Generator.prototype.generate = function(rng, size) {
  var t$ = rng;
  var seed = t$.next();
  {
    jumpBlockOuterbreak$bg12875:{
      break$bg12875:{
        while_else$bg12874:{
          do
            {
              jumpBlockOutercontinue$bg12876:{
                continue$bg12876:{
                  {
                    var t$1 = seed;
                    if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                      {
                        var t$2 = rng;
                        seed = t$2.next();
                      }
                    else
                      break while_else$bg12874;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg12876;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg12875;
      }
      {}
      break jumpBlockOuterbreak$bg12875;
    }
  }
  var seed1 = seed;
  var t$3 = this;
  var generator = t$3.generator;
  return new (sk$QuickCheck$dtFun1)(((i1) => 
  {
    var t$4 = seed1;
    var rng1 = sk$Random.mcreate(t$4);
    var t$5 = i1;
    var t$6 = rng1;
    t$5.perturb(t$6);
    var t$7 = generator;
    var t$8 = rng1;
    var t$9 = size;
    return t$7.generate(t$8, t$9);
  }));
};

sk$QuickCheck$dtFun1Generator.prototype.__bases = [
  sk$QuickCheck$dtFun1Generator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtIntGenerator = sk.QuickCheck$dtIntGenerator = function QuickCheck$dtIntGenerator() {};

sk$QuickCheck$dtIntGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtIntGenerator.prototype.__constructor = sk$QuickCheck$dtIntGenerator;

sk$QuickCheck$dtIntGenerator.prototype.__classname = 'QuickCheck.IntGenerator';

sk$QuickCheck$dtIntGenerator.prototype.$frozen = true;

sk$QuickCheck$dtIntGenerator.prototype.__type_switch_id = 233;

sk$QuickCheck$dtIntGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtIntGenerator)();
};

sk$QuickCheck$dtIntGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp318 = __cache.get(this);
  if (_tmp318 === undefined)
    {
      var _tmp318 = this.__copy();
      _tmp318.$frozen = true;
      __cache.set(this, _tmp318);
    }
  return _tmp318;
};

sk$QuickCheck$dtIntGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtIntGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtIntGenerator.prototype.generate = function(rng, size) {
  var t$ = rng;
  var t$1 = size;
  var t$2 = t$1.negate();
  var t$3 = size;
  var t$4 = t$3.$pl(new sk$Int(1.0, 0.0));
  return t$.random(t$2, t$4);
};

sk$QuickCheck$dtIntGenerator.prototype.__bases = [
  sk$QuickCheck$dtIntGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtLazySource = sk.QuickCheck$dtLazySource = function QuickCheck$dtLazySource(source) {
  this.source = source;
};

sk$QuickCheck$dtLazySource.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtLazySource.prototype.__constructor = sk$QuickCheck$dtLazySource;

sk$QuickCheck$dtLazySource.prototype.__classname = 'QuickCheck.LazySource';

sk$QuickCheck$dtLazySource.prototype.$frozen = true;

sk$QuickCheck$dtLazySource.prototype.__type_switch_id = 246;

sk$QuickCheck$dtLazySource.prototype.__copy = function() {
  return new (sk$QuickCheck$dtLazySource)(this.source);
};

sk$QuickCheck$dtLazySource.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp319 = __cache.get(this);
  if (_tmp319 === undefined)
    {
      var _tmp319 = this.__copy();
      _tmp319.$frozen = true;
      __cache.set(this, _tmp319);
      _tmp319.source = skip.deepFreeze(_tmp319.source, __cache);
    }
  return _tmp319;
};

sk$QuickCheck$dtLazySource.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtLazySource.empty = function() {
  return singleton$QuickCheck$dtEmptyLazy;
};

sk$QuickCheck$dtLazySource.prototype.iterator = function() {
  var t$ = this;
  var t$1 = t$.source;
  return t$1();
};

sk$QuickCheck$dtLazySource.prototype.__bases = [
  sk$QuickCheck$dtLazySource,
  sk$QuickCheck$dtLazy
];

var sk$QuickCheck$dtMapComposedGenerator = sk.QuickCheck$dtMapComposedGenerator = function QuickCheck$dtMapComposedGenerator(generator, f) {
  this.generator = generator;
  this.f = f;
};

sk$QuickCheck$dtMapComposedGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtMapComposedGenerator.prototype.__constructor = sk$QuickCheck$dtMapComposedGenerator;

sk$QuickCheck$dtMapComposedGenerator.prototype.__classname = 'QuickCheck.MapComposedGenerator';

sk$QuickCheck$dtMapComposedGenerator.prototype.$frozen = true;

sk$QuickCheck$dtMapComposedGenerator.prototype.__type_switch_id = 234;

sk$QuickCheck$dtMapComposedGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtMapComposedGenerator)(this.generator, this.f);
};

sk$QuickCheck$dtMapComposedGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp320 = __cache.get(this);
  if (_tmp320 === undefined)
    {
      var _tmp320 = this.__copy();
      _tmp320.$frozen = true;
      __cache.set(this, _tmp320);
      _tmp320.generator = skip.deepFreeze(_tmp320.generator, __cache);
      _tmp320.f = skip.deepFreeze(_tmp320.f, __cache);
    }
  return _tmp320;
};

sk$QuickCheck$dtMapComposedGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtMapComposedGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtMapComposedGenerator.prototype.generate = function(rng, sizeBound) {
  var t$ = this;
  var t$1 = t$.f;
  var t$2 = this;
  var t$3 = t$2.generator;
  var t$4 = rng;
  var t$5 = sizeBound;
  var t$6 = t$3.generate(t$4, t$5);
  return t$1(t$6);
};

sk$QuickCheck$dtMapComposedGenerator.prototype.__bases = [
  sk$QuickCheck$dtMapComposedGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtMapGenerator = sk.QuickCheck$dtMapGenerator = function QuickCheck$dtMapGenerator(keyGenerator, valueGenerator) {
  this.keyGenerator = keyGenerator;
  this.valueGenerator = valueGenerator;
};

sk$QuickCheck$dtMapGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtMapGenerator.prototype.__constructor = sk$QuickCheck$dtMapGenerator;

sk$QuickCheck$dtMapGenerator.prototype.__classname = 'QuickCheck.MapGenerator';

sk$QuickCheck$dtMapGenerator.prototype.$frozen = true;

sk$QuickCheck$dtMapGenerator.prototype.__type_switch_id = 235;

sk$QuickCheck$dtMapGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtMapGenerator)(this.keyGenerator, this.valueGenerator);
};

sk$QuickCheck$dtMapGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp321 = __cache.get(this);
  if (_tmp321 === undefined)
    {
      var _tmp321 = this.__copy();
      _tmp321.$frozen = true;
      __cache.set(this, _tmp321);
      _tmp321.keyGenerator = skip.deepFreeze(_tmp321.keyGenerator, __cache);
      _tmp321.valueGenerator = skip.deepFreeze(_tmp321.valueGenerator, __cache);
    }
  return _tmp321;
};

sk$QuickCheck$dtMapGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtMapGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtMapGenerator.prototype.generate = function(rng, sizeBound) {
  var t$ = rng;
  var t$1 = sizeBound;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var size = t$.random(new sk$Int(0.0, 0.0), t$2);
  var t$3 = size;
  var map = sk$Map.mcreate(t$3);
  var t$4 = size;
  var t$5 = new (sk$Range)(new sk$Int(0.0, 0.0), t$4);
  var $var = t$5.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg12940:{
      break$bg12940:{
        dowhile_else$bg12939:{
          do
            {
              jumpBlockOuterdowhile_cond$bg12941:{
                dowhile_cond$bg12941:{
                  {
                    var t$6 = $var;
                    var var2 = t$6.next();
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg12959:{
                        jumpLab$bg12959:{
                          jumpLab$bg12958:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg12958;
                              
                              case 205:
                                _ = var2.value;
                                break jumpLab$bg12959;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg12941;
                          }
                        }
                        {
                          var t$7 = map;
                          var t$8 = this;
                          var t$9 = t$8.keyGenerator;
                          var t$10 = rng;
                          var t$11 = sizeBound;
                          var t$12 = t$9.generate(t$10, t$11);
                          var t$13 = this;
                          var t$14 = t$13.valueGenerator;
                          var t$15 = rng;
                          var t$16 = sizeBound;
                          var t$17 = t$14.generate(t$15, t$16);
                          t$7.set(t$12, t$17);
                        }
                        break jumpBlockOuterjumpLab$bg12959;
                      }
                    }
                    break dowhile_cond$bg12941;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg12939;
                break jumpBlockOuterdowhile_cond$bg12941;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg12940;
      }
      {}
      break jumpBlockOuterbreak$bg12940;
    }
  }
  var t$18 = map;
  return t$18.chill();
};

sk$QuickCheck$dtMapGenerator.prototype.__bases = [
  sk$QuickCheck$dtMapGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtMapLazy = sk.QuickCheck$dtMapLazy = function QuickCheck$dtMapLazy(source, f) {
  this.source = source;
  this.f = f;
};

sk$QuickCheck$dtMapLazy.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtMapLazy.prototype.__constructor = sk$QuickCheck$dtMapLazy;

sk$QuickCheck$dtMapLazy.prototype.__classname = 'QuickCheck.MapLazy';

sk$QuickCheck$dtMapLazy.prototype.$frozen = true;

sk$QuickCheck$dtMapLazy.prototype.__type_switch_id = 247;

sk$QuickCheck$dtMapLazy.prototype.__copy = function() {
  return new (sk$QuickCheck$dtMapLazy)(this.source, this.f);
};

sk$QuickCheck$dtMapLazy.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp322 = __cache.get(this);
  if (_tmp322 === undefined)
    {
      var _tmp322 = this.__copy();
      _tmp322.$frozen = true;
      __cache.set(this, _tmp322);
      _tmp322.source = skip.deepFreeze(_tmp322.source, __cache);
      _tmp322.f = skip.deepFreeze(_tmp322.f, __cache);
    }
  return _tmp322;
};

sk$QuickCheck$dtMapLazy.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtMapLazy.empty = function() {
  return singleton$QuickCheck$dtEmptyLazy;
};

sk$QuickCheck$dtMapLazy.prototype.iterator = function() {
  var t$ = this;
  var t$1 = t$.source;
  var t$2 = t$1.iterator();
  var t$3 = this;
  var t$4 = t$3.f;
  return t$2.map(t$4);
};

sk$QuickCheck$dtMapLazy.prototype.__bases = [
  sk$QuickCheck$dtMapLazy,
  sk$QuickCheck$dtLazy
];

var sk$QuickCheck$dtOptionGenerator = sk.QuickCheck$dtOptionGenerator = function QuickCheck$dtOptionGenerator(generator) {
  this.generator = generator;
};

sk$QuickCheck$dtOptionGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtOptionGenerator.prototype.__constructor = sk$QuickCheck$dtOptionGenerator;

sk$QuickCheck$dtOptionGenerator.prototype.__classname = 'QuickCheck.OptionGenerator';

sk$QuickCheck$dtOptionGenerator.prototype.$frozen = true;

sk$QuickCheck$dtOptionGenerator.prototype.__type_switch_id = 236;

sk$QuickCheck$dtOptionGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtOptionGenerator)(this.generator);
};

sk$QuickCheck$dtOptionGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp323 = __cache.get(this);
  if (_tmp323 === undefined)
    {
      var _tmp323 = this.__copy();
      _tmp323.$frozen = true;
      __cache.set(this, _tmp323);
      _tmp323.generator = skip.deepFreeze(_tmp323.generator, __cache);
    }
  return _tmp323;
};

sk$QuickCheck$dtOptionGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtOptionGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtOptionGenerator.prototype.generate = function(rng, size) {
  var t$ = rng;
  var freq = t$.random(new sk$Int(0.0, 0.0), new sk$Int(4.0, 0.0));
  var t$1 = freq;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$2 = this;
      var t$3 = t$2.generator;
      var t$4 = rng;
      var t$5 = size;
      var t$6 = t$3.generate(t$4, t$5);
      return new (sk$Some)(t$6);
    }
};

sk$QuickCheck$dtOptionGenerator.prototype.__bases = [
  sk$QuickCheck$dtOptionGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtOrderGenerator = sk.QuickCheck$dtOrderGenerator = function QuickCheck$dtOrderGenerator() {};

sk$QuickCheck$dtOrderGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtOrderGenerator.prototype.__constructor = sk$QuickCheck$dtOrderGenerator;

sk$QuickCheck$dtOrderGenerator.prototype.__classname = 'QuickCheck.OrderGenerator';

sk$QuickCheck$dtOrderGenerator.prototype.$frozen = true;

sk$QuickCheck$dtOrderGenerator.prototype.__type_switch_id = 237;

sk$QuickCheck$dtOrderGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtOrderGenerator)();
};

sk$QuickCheck$dtOrderGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp324 = __cache.get(this);
  if (_tmp324 === undefined)
    {
      var _tmp324 = this.__copy();
      _tmp324.$frozen = true;
      __cache.set(this, _tmp324);
    }
  return _tmp324;
};

sk$QuickCheck$dtOrderGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtOrderGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtOrderGenerator.prototype.generate = function(rng, _size) {
  var t$ = rng;
  var t$1 = t$.random(new sk$Int(0.0, 0.0), new sk$Int(3.0, 0.0));
  return new (sk$Array)([
    singleton$LT,
    singleton$EQ,
    singleton$GT
  ]).get(t$1);
};

sk$QuickCheck$dtOrderGenerator.prototype.__bases = [
  sk$QuickCheck$dtOrderGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtResultGenerator = sk.QuickCheck$dtResultGenerator = function QuickCheck$dtResultGenerator(successGenerator, failureGenerator) {
  this.successGenerator = successGenerator;
  this.failureGenerator = failureGenerator;
};

sk$QuickCheck$dtResultGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtResultGenerator.prototype.__constructor = sk$QuickCheck$dtResultGenerator;

sk$QuickCheck$dtResultGenerator.prototype.__classname = 'QuickCheck.ResultGenerator';

sk$QuickCheck$dtResultGenerator.prototype.$frozen = true;

sk$QuickCheck$dtResultGenerator.prototype.__type_switch_id = 238;

sk$QuickCheck$dtResultGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtResultGenerator)(this.successGenerator, this.failureGenerator);
};

sk$QuickCheck$dtResultGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp325 = __cache.get(this);
  if (_tmp325 === undefined)
    {
      var _tmp325 = this.__copy();
      _tmp325.$frozen = true;
      __cache.set(this, _tmp325);
      _tmp325.successGenerator = skip.deepFreeze(_tmp325.successGenerator, __cache);
      _tmp325.failureGenerator = skip.deepFreeze(_tmp325.failureGenerator, __cache);
    }
  return _tmp325;
};

sk$QuickCheck$dtResultGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtResultGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtResultGenerator.prototype.generate = function(rng, size) {
  var t$ = rng;
  var freq = t$.random(new sk$Int(0.0, 0.0), new sk$Int(3.0, 0.0));
  var t$1 = freq;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = this;
      var t$3 = t$2.failureGenerator;
      var t$4 = rng;
      var t$5 = size;
      var t$6 = t$3.generate(t$4, t$5);
      return new (sk$Failure)(t$6);
    }
  else
    {
      var t$7 = this;
      var t$8 = t$7.successGenerator;
      var t$9 = rng;
      var t$10 = size;
      var t$11 = t$8.generate(t$9, t$10);
      return new (sk$Success)(t$11);
    }
};

sk$QuickCheck$dtResultGenerator.prototype.__bases = [
  sk$QuickCheck$dtResultGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtSetGenerator = sk.QuickCheck$dtSetGenerator = function QuickCheck$dtSetGenerator(generator) {
  this.generator = generator;
};

sk$QuickCheck$dtSetGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtSetGenerator.prototype.__constructor = sk$QuickCheck$dtSetGenerator;

sk$QuickCheck$dtSetGenerator.prototype.__classname = 'QuickCheck.SetGenerator';

sk$QuickCheck$dtSetGenerator.prototype.$frozen = true;

sk$QuickCheck$dtSetGenerator.prototype.__type_switch_id = 239;

sk$QuickCheck$dtSetGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtSetGenerator)(this.generator);
};

sk$QuickCheck$dtSetGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp326 = __cache.get(this);
  if (_tmp326 === undefined)
    {
      var _tmp326 = this.__copy();
      _tmp326.$frozen = true;
      __cache.set(this, _tmp326);
      _tmp326.generator = skip.deepFreeze(_tmp326.generator, __cache);
    }
  return _tmp326;
};

sk$QuickCheck$dtSetGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtSetGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtSetGenerator.prototype.generate = function(rng, sizeBound) {
  var t$ = rng;
  var t$1 = sizeBound;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var size = t$.random(new sk$Int(0.0, 0.0), t$2);
  var t$3 = size;
  var set = sk$Set.mcreate(t$3);
  var t$4 = size;
  var t$5 = new (sk$Range)(new sk$Int(0.0, 0.0), t$4);
  var $var = t$5.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg13012:{
      break$bg13012:{
        dowhile_else$bg13011:{
          do
            {
              jumpBlockOuterdowhile_cond$bg13013:{
                dowhile_cond$bg13013:{
                  {
                    var t$6 = $var;
                    var var2 = t$6.next();
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg13026:{
                        jumpLab$bg13026:{
                          jumpLab$bg13025:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg13025;
                              
                              case 205:
                                _ = var2.value;
                                break jumpLab$bg13026;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg13013;
                          }
                        }
                        {
                          var t$7 = set;
                          var t$8 = this;
                          var t$9 = t$8.generator;
                          var t$10 = rng;
                          var t$11 = sizeBound;
                          var t$12 = t$9.generate(t$10, t$11);
                          t$7.insert(t$12);
                        }
                        break jumpBlockOuterjumpLab$bg13026;
                      }
                    }
                    break dowhile_cond$bg13013;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg13011;
                break jumpBlockOuterdowhile_cond$bg13013;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg13012;
      }
      {}
      break jumpBlockOuterbreak$bg13012;
    }
  }
  var t$13 = set;
  return t$13.chill();
};

sk$QuickCheck$dtSetGenerator.prototype.__bases = [
  sk$QuickCheck$dtSetGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtStringGenerator = sk.QuickCheck$dtStringGenerator = function QuickCheck$dtStringGenerator() {};

sk$QuickCheck$dtStringGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtStringGenerator.prototype.__constructor = sk$QuickCheck$dtStringGenerator;

sk$QuickCheck$dtStringGenerator.prototype.__classname = 'QuickCheck.StringGenerator';

sk$QuickCheck$dtStringGenerator.prototype.$frozen = true;

sk$QuickCheck$dtStringGenerator.prototype.__type_switch_id = 240;

sk$QuickCheck$dtStringGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtStringGenerator)();
};

sk$QuickCheck$dtStringGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp327 = __cache.get(this);
  if (_tmp327 === undefined)
    {
      var _tmp327 = this.__copy();
      _tmp327.$frozen = true;
      __cache.set(this, _tmp327);
    }
  return _tmp327;
};

sk$QuickCheck$dtStringGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtStringGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtStringGenerator.prototype.generate = function(rng, sizeBound) {
  var t$ = rng;
  var t$1 = sizeBound;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var size = t$.random(new sk$Int(0.0, 0.0), t$2);
  var chars = singleton$QuickCheck$dtCharGenerator;
  var t$3 = size;
  var t$4 = sk$Array.fillBy(t$3, ((_) => 
  {
    var t$5 = chars;
    var t$6 = rng;
    var t$7 = sizeBound;
    return t$5.generate(t$6, t$7);
  }));
  return sk$String.fromChars(t$4);
};

sk$QuickCheck$dtStringGenerator.prototype.__bases = [
  sk$QuickCheck$dtStringGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtTestFailure = sk.QuickCheck$dtTestFailure = function QuickCheck$dtTestFailure(seed, counterExample) {
  this.seed = seed;
  this.counterExample = counterExample;
};

sk$QuickCheck$dtTestFailure.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTestFailure.prototype.__constructor = sk$QuickCheck$dtTestFailure;

sk$QuickCheck$dtTestFailure.prototype.__classname = 'QuickCheck.TestFailure';

sk$QuickCheck$dtTestFailure.prototype.$frozen = true;

sk$QuickCheck$dtTestFailure.prototype.__type_switch_id = 250;

sk$QuickCheck$dtTestFailure.prototype.__copy = function() {
  return new (sk$QuickCheck$dtTestFailure)(this.seed, this.counterExample);
};

sk$QuickCheck$dtTestFailure.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp328 = __cache.get(this);
  if (_tmp328 === undefined)
    {
      var _tmp328 = this.__copy();
      _tmp328.$frozen = true;
      __cache.set(this, _tmp328);
      _tmp328.seed = skip.deepFreeze(_tmp328.seed, __cache);
      _tmp328.counterExample = skip.deepFreeze(_tmp328.counterExample, __cache);
    }
  return _tmp328;
};

sk$QuickCheck$dtTestFailure.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTestFailure.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$QuickCheck$dtTestFailure.prototype.flatMapFailure = function(f) {
  var failure = this;
  var t$ = f;
  var t$1 = failure;
  return t$(t$1);
};

sk$QuickCheck$dtTestFailure.prototype.fromFailure = function() {
  return this;
};

sk$QuickCheck$dtTestFailure.prototype.isFailure = function() {
  return new sk$Bool((true));
};

sk$QuickCheck$dtTestFailure.prototype.isSuccess = function() {
  return new sk$Bool((false));
};

sk$QuickCheck$dtTestFailure.prototype.toString = function() {
  var t$ = this;
  var counterExample = t$.counterExample;
  var t$1 = this;
  var seed = t$1.seed;
  var t$2 = new sk$String(('TestFailure: seed=')).toString();
  var t$3 = seed;
  var t$4 = t$3.toString();
  var t$5 = new sk$String((' counterExample=[')).toString();
  var t$6 = counterExample;
  var t$7 = t$6.join(new sk$String((', ')));
  var t$8 = t$7.toString();
  var t$9 = new sk$String((']')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$4,
    t$5,
    t$8,
    t$9
  ]));
};

sk$QuickCheck$dtTestFailure.prototype.__bases = [
  sk$QuickCheck$dtTestFailure,
  sk$QuickCheck$dtTestResult
];

var sk$QuickCheck$dtTestResultGenerator = sk.QuickCheck$dtTestResultGenerator = function QuickCheck$dtTestResultGenerator(result) {
  this.result = result;
};

sk$QuickCheck$dtTestResultGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTestResultGenerator.prototype.__constructor = sk$QuickCheck$dtTestResultGenerator;

sk$QuickCheck$dtTestResultGenerator.prototype.__classname = 'QuickCheck.TestResultGenerator';

sk$QuickCheck$dtTestResultGenerator.prototype.$frozen = true;

sk$QuickCheck$dtTestResultGenerator.prototype.__type_switch_id = 241;

sk$QuickCheck$dtTestResultGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtTestResultGenerator)(this.result);
};

sk$QuickCheck$dtTestResultGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp329 = __cache.get(this);
  if (_tmp329 === undefined)
    {
      var _tmp329 = this.__copy();
      _tmp329.$frozen = true;
      __cache.set(this, _tmp329);
      _tmp329.result = skip.deepFreeze(_tmp329.result, __cache);
    }
  return _tmp329;
};

sk$QuickCheck$dtTestResultGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTestResultGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtTestResultGenerator.prototype.generate = function(_rng, _size) {
  var t$ = this;
  var t$1 = t$.result;
  var t$2 = sk$QuickCheck$dtLazy.empty();
  return new (sk$QuickCheck$dtTree)(t$1, t$2);
};

sk$QuickCheck$dtTestResultGenerator.prototype.__bases = [
  sk$QuickCheck$dtTestResultGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtTestResultProperty = sk.QuickCheck$dtTestResultProperty = function QuickCheck$dtTestResultProperty(result) {
  this.result = result;
};

sk$QuickCheck$dtTestResultProperty.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTestResultProperty.prototype.__constructor = sk$QuickCheck$dtTestResultProperty;

sk$QuickCheck$dtTestResultProperty.prototype.__classname = 'QuickCheck.TestResultProperty';

sk$QuickCheck$dtTestResultProperty.prototype.$frozen = true;

sk$QuickCheck$dtTestResultProperty.prototype.__type_switch_id = 249;

sk$QuickCheck$dtTestResultProperty.prototype.__copy = function() {
  return new (sk$QuickCheck$dtTestResultProperty)(this.result);
};

sk$QuickCheck$dtTestResultProperty.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp330 = __cache.get(this);
  if (_tmp330 === undefined)
    {
      var _tmp330 = this.__copy();
      _tmp330.$frozen = true;
      __cache.set(this, _tmp330);
      _tmp330.result = skip.deepFreeze(_tmp330.result, __cache);
    }
  return _tmp330;
};

sk$QuickCheck$dtTestResultProperty.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTestResultProperty.prototype.generator = function() {
  var t$ = this;
  var t$1 = t$.result;
  return new (sk$QuickCheck$dtTestResultGenerator)(t$1);
};

sk$QuickCheck$dtTestResultProperty.prototype.__bases = [
  sk$QuickCheck$dtTestResultProperty,
  sk$QuickCheck$dtProperty
];

var sk$QuickCheck$dtTestSuccess = sk.QuickCheck$dtTestSuccess = function QuickCheck$dtTestSuccess() {};

sk$QuickCheck$dtTestSuccess.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTestSuccess.prototype.__constructor = sk$QuickCheck$dtTestSuccess;

sk$QuickCheck$dtTestSuccess.prototype.__classname = 'QuickCheck.TestSuccess';

sk$QuickCheck$dtTestSuccess.prototype.$frozen = true;

sk$QuickCheck$dtTestSuccess.prototype.__type_switch_id = 251;

sk$QuickCheck$dtTestSuccess.prototype.__copy = function() {
  return new (sk$QuickCheck$dtTestSuccess)();
};

sk$QuickCheck$dtTestSuccess.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp331 = __cache.get(this);
  if (_tmp331 === undefined)
    {
      var _tmp331 = this.__copy();
      _tmp331.$frozen = true;
      __cache.set(this, _tmp331);
    }
  return _tmp331;
};

sk$QuickCheck$dtTestSuccess.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTestSuccess.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$QuickCheck$dtTestSuccess.prototype.flatMapFailure = function(f) {
  return singleton$QuickCheck$dtTestSuccess;
};

sk$QuickCheck$dtTestSuccess.prototype.fromFailure = function() {
  return sk$invariant_violation(new sk$String(('fromFailure() called on TestSuccess')));
};

sk$QuickCheck$dtTestSuccess.prototype.isFailure = function() {
  return new sk$Bool((false));
};

sk$QuickCheck$dtTestSuccess.prototype.isSuccess = function() {
  return new sk$Bool((true));
};

sk$QuickCheck$dtTestSuccess.prototype.toString = function() {
  return new sk$String(('TestSuccess'));
};

sk$QuickCheck$dtTestSuccess.prototype.__bases = [
  sk$QuickCheck$dtTestSuccess,
  sk$QuickCheck$dtTestResult
];

var sk$QuickCheck$dtTuple2Generator = sk.QuickCheck$dtTuple2Generator = function QuickCheck$dtTuple2Generator(g0, g1) {
  this.g0 = g0;
  this.g1 = g1;
};

sk$QuickCheck$dtTuple2Generator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtTuple2Generator.prototype.__constructor = sk$QuickCheck$dtTuple2Generator;

sk$QuickCheck$dtTuple2Generator.prototype.__classname = 'QuickCheck.Tuple2Generator';

sk$QuickCheck$dtTuple2Generator.prototype.$frozen = true;

sk$QuickCheck$dtTuple2Generator.prototype.__type_switch_id = 242;

sk$QuickCheck$dtTuple2Generator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtTuple2Generator)(this.g0, this.g1);
};

sk$QuickCheck$dtTuple2Generator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp332 = __cache.get(this);
  if (_tmp332 === undefined)
    {
      var _tmp332 = this.__copy();
      _tmp332.$frozen = true;
      __cache.set(this, _tmp332);
      _tmp332.g0 = skip.deepFreeze(_tmp332.g0, __cache);
      _tmp332.g1 = skip.deepFreeze(_tmp332.g1, __cache);
    }
  return _tmp332;
};

sk$QuickCheck$dtTuple2Generator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtTuple2Generator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtTuple2Generator.prototype.generate = function(rng, sizeBound) {
  var t$ = this;
  var t$1 = t$.g0;
  var t$2 = rng;
  var t$3 = sizeBound;
  var i0 = t$1.generate(t$2, t$3);
  var t$4 = this;
  var t$5 = t$4.g1;
  var t$6 = rng;
  var t$7 = sizeBound;
  var i1 = t$5.generate(t$6, t$7);
  var t$8 = i0;
  var t$9 = i1;
  return new (sk$Tuple2)(t$8, t$9);
};

sk$QuickCheck$dtTuple2Generator.prototype.__bases = [
  sk$QuickCheck$dtTuple2Generator,
  sk$QuickCheck$dtGenerator
];

var sk$QuickCheck$dtVectorGenerator = sk.QuickCheck$dtVectorGenerator = function QuickCheck$dtVectorGenerator(generator) {
  this.generator = generator;
};

sk$QuickCheck$dtVectorGenerator.prototype = Object.create(Object.prototype);

sk$QuickCheck$dtVectorGenerator.prototype.__constructor = sk$QuickCheck$dtVectorGenerator;

sk$QuickCheck$dtVectorGenerator.prototype.__classname = 'QuickCheck.VectorGenerator';

sk$QuickCheck$dtVectorGenerator.prototype.$frozen = true;

sk$QuickCheck$dtVectorGenerator.prototype.__type_switch_id = 243;

sk$QuickCheck$dtVectorGenerator.prototype.__copy = function() {
  return new (sk$QuickCheck$dtVectorGenerator)(this.generator);
};

sk$QuickCheck$dtVectorGenerator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp333 = __cache.get(this);
  if (_tmp333 === undefined)
    {
      var _tmp333 = this.__copy();
      _tmp333.$frozen = true;
      __cache.set(this, _tmp333);
      _tmp333.generator = skip.deepFreeze(_tmp333.generator, __cache);
    }
  return _tmp333;
};

sk$QuickCheck$dtVectorGenerator.prototype.__init = function(__named_parameters) {};

sk$QuickCheck$dtVectorGenerator.create = function(f) {
  var t$ = f;
  return new (sk$QuickCheck$dtCreateComposedGenerator)(t$);
};

sk$QuickCheck$dtVectorGenerator.prototype.generate = function(rng, sizeBound) {
  var t$ = rng;
  var t$1 = sizeBound;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var size = t$.random(new sk$Int(0.0, 0.0), t$2);
  var t$3 = size;
  return sk$Vector.fillBy(t$3, ((_) => 
  {
    var t$4 = this;
    var t$5 = t$4.generator;
    var t$6 = rng;
    var t$7 = sizeBound;
    return t$5.generate(t$6, t$7);
  }));
};

sk$QuickCheck$dtVectorGenerator.prototype.__bases = [
  sk$QuickCheck$dtVectorGenerator,
  sk$QuickCheck$dtGenerator
];

var sk$Range = sk.Range = function Range(start, end) {
  this.start = start;
  this.end = end;
};

sk$Range.prototype = Object.create(Object.prototype);

sk$Range.prototype.__constructor = sk$Range;

sk$Range.prototype.__classname = 'Range';

sk$Range.prototype.$frozen = true;

sk$Range.prototype.__type_switch_id = 274;

sk$Range.prototype.__copy = function() {
  return new (sk$Range)(this.start, this.end);
};

sk$Range.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp334 = __cache.get(this);
  if (_tmp334 === undefined)
    {
      var _tmp334 = this.__copy();
      _tmp334.$frozen = true;
      __cache.set(this, _tmp334);
      _tmp334.start = skip.deepFreeze(_tmp334.start, __cache);
      _tmp334.end = skip.deepFreeze(_tmp334.end, __cache);
    }
  return _tmp334;
};

sk$Range.prototype.__init = function(__named_parameters) {};

sk$Range.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Range.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg13320:{
      jumpLab$bg13320:{
        jumpLab$bg13319:{
          switch (other.__type_switch_id) {
            case 274:
              otherTyped = other;
              break jumpLab$bg13319;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.start;
          var t$2 = otherTyped;
          var t$3 = t$2.start;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.end;
          var t$7 = otherTyped;
          var t$8 = t$7.end;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Range.create = function(__named_parameters) {
  var length = __named_parameters.length;
  var start = __named_parameters.start;
  var t$ = start;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Invalid start. Negative ranges are not allowed')));
  var t$2 = length;
  var t$3 = t$2.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$3, new sk$String(('Invalid length. Negative ranges are not allowed')));
  var t$4 = start;
  var t$5 = start;
  var t$6 = length;
  var t$7 = t$5.$pl(t$6);
  return new (sk$Range)(t$4, t$7);
};

sk$Range.prototype.each = function(f) {
  var t$ = this;
  return t$.foldl(((_, pos) => 
  {
    var t$1 = f;
    var t$2 = pos;
    return t$1(t$2);
  }), sk.__.$void);
};

sk$Range.empty = function(position) {
  var t$ = position;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Negative ranges are not allowed')));
  var t$2 = position;
  return new (sk$Range)(t$2, new sk$Int(0.0, 0.0));
};

sk$Range.prototype.foldl = function(f, init) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.start;
  var t$3 = f;
  var t$4 = init;
  return t$.foldlLoop(t$2, t$3, t$4);
};

sk$Range.prototype.foldlLoop = function(pos, f, state) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg13356:{
        loop_end$bg13356:{
          {
            var t$1 = pos;
            var t$2 = t$;
            var t$3 = t$2.end;
            if (t$1.$lt(t$3).__value)
              {
                var t$4 = t$;
                var t$5 = pos;
                var t$6 = t$5.$pl(new sk$Int(1.0, 0.0));
                var t$7 = f;
                var t$8 = f;
                var t$9 = state;
                var t$10 = pos;
                var t$11 = t$8(t$9, t$10);
                var t$12 = t$4;
                var t$13 = t$6;
                var t$14 = t$7;
                var t$15 = t$11;
                t$ = t$12;
                pos = t$13;
                f = t$14;
                state = t$15;
                break loop_end$bg13356;
              }
            else
              return state;
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg13356;
      }
    }
  while (true);
};

sk$Range.prototype.genFoldl = skip.asyncToGenerator(function*(f, init) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.start;
  var t$3 = f;
  var t$4 = init;
  return (yield t$.genFoldlLoop(t$2, t$3, t$4));
});

sk$Range.prototype.genFoldlLoop = skip.asyncToGenerator(function*(pos, f, state) {
  var t$ = pos;
  var t$1 = this;
  var t$2 = t$1.end;
  if (t$.$lt(t$2).__value)
    {
      var t$3 = this;
      var t$4 = pos;
      var t$5 = t$4.$pl(new sk$Int(1.0, 0.0));
      var t$6 = f;
      var t$7 = f;
      var t$8 = state;
      var t$9 = pos;
      var t$10 = (yield t$7(t$8, t$9));
      return (yield t$3.genFoldlLoop(t$5, t$6, t$10));
    }
  else
    return state;
});

sk$Range.prototype.genIter = skip.asyncToGenerator(function*(f) {
  var t$ = this;
  return (yield t$.genFoldl(((_, pos) => 
  {
    var t$1 = f;
    var t$2 = pos;
    return t$1(t$2);
  }), sk.__.$void));
});

sk$Range.prototype.inRange = function(pos) {
  var t$ = pos;
  var t$1 = this;
  var t$2 = t$1.start;
  if (t$.$gt$eq(t$2).__value)
    {
      var t$3 = pos;
      var t$4 = this;
      var t$5 = t$4.end;
      return t$3.$lt(t$5);
    }
  else
    return new sk$Bool((false));
};

sk$Range.prototype.intersection = function(other) {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = other;
  var t$3 = t$2.start;
  var start = sk$max(t$1, t$3);
  var t$4 = this;
  var t$5 = t$4.end;
  var t$6 = other;
  var t$7 = t$6.end;
  var end = sk$min(t$5, t$7);
  var t$8 = start;
  var t$9 = end;
  if (t$8.$gt$eq(t$9).__value)
    return singleton$None;
  else
    {
      var t$10 = start;
      var t$11 = end;
      var t$12 = new (sk$Range)(t$10, t$11);
      return new (sk$Some)(t$12);
    }
};

sk$Range.prototype.offset = function(off) {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = off;
  var t$3 = t$1.$pl(t$2);
  var t$4 = this;
  var t$5 = t$4.end;
  var t$6 = off;
  var t$7 = t$5.$pl(t$6);
  return new (sk$Range)(t$3, t$7);
};

sk$Range.prototype.reversedValues = function() {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = this;
  var t$3 = t$2.end;
  return new (sk$Range$dtRangeReverseIterator)(t$1, t$3);
};

sk$Range.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.end;
  var t$2 = this;
  var t$3 = t$2.start;
  var t$4 = t$1.$mi(t$3);
  return sk$max(new sk$Int(0.0, 0.0), t$4);
};

sk$Range.prototype.sumInt = function() {
  var t$ = this;
  return t$.reduce(((acc, i) => 
  {
    var t$1 = acc;
    var t$2 = i;
    return t$1.$pl(t$2);
  }), new sk$Int(0.0, 0.0));
};

sk$Range.prototype.toString = function() {
  var t$ = new sk$String(('[')).toString();
  var t$1 = this;
  var t$2 = t$1.start;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((', ')).toString();
  var t$5 = this;
  var t$6 = t$5.end;
  var t$7 = t$6.toString();
  var t$8 = new sk$String((')')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7,
    t$8
  ]));
};

sk$Range.prototype.union = function(other) {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = other;
  var t$3 = t$2.start;
  var start = sk$min(t$1, t$3);
  var t$4 = this;
  var t$5 = t$4.end;
  var t$6 = other;
  var t$7 = t$6.end;
  var end = sk$max(t$5, t$7);
  var t$8 = start;
  var t$9 = end;
  return new (sk$Range)(t$8, t$9);
};

sk$Range.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = this;
  var t$3 = t$2.end;
  return new (sk$Range$dtRangeIterator)(t$1, t$3);
};

sk$Range.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Range.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Range.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Range.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Range.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Range.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Range.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Range.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Range.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Range.prototype.__bases = [
  sk$Range,
  sk$Sequence
];

var sk$Range$dtRangeIterator = sk.Range$dtRangeIterator = function Range$dtRangeIterator(current, end) {
  this.current = current;
  this.end = end;
};

sk$Range$dtRangeIterator.prototype = Object.create(Object.prototype);

sk$Range$dtRangeIterator.prototype.__constructor = sk$Range$dtRangeIterator;

sk$Range$dtRangeIterator.prototype.__classname = 'Range.RangeIterator';

sk$Range$dtRangeIterator.prototype.$frozen = false;

sk$Range$dtRangeIterator.prototype.__type_switch_id = 141;

sk$Range$dtRangeIterator.prototype.__copy = function() {
  return new (sk$Range$dtRangeIterator)(this.current, this.end);
};

sk$Range$dtRangeIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp335 = __cache.get(this);
  if (_tmp335 === undefined)
    {
      var _tmp335 = this.__copy();
      _tmp335.$frozen = true;
      __cache.set(this, _tmp335);
      _tmp335.current = skip.deepFreeze(_tmp335.current, __cache);
      _tmp335.end = skip.deepFreeze(_tmp335.end, __cache);
    }
  return _tmp335;
};

sk$Range$dtRangeIterator.prototype.__init = function(__named_parameters) {};

sk$Range$dtRangeIterator.prototype.drop = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called RangeIterator::drop with negative number')));
  var $var = this;
  var t$2 = $var;
  var t$3 = this;
  var t$4 = t$3.current;
  var t$5 = n;
  var t$6 = t$4.$pl(t$5);
  var t$7 = this;
  var t$8 = t$7.end;
  var t$9 = t$2;
  t$9.current = sk$min(t$6, t$8);
  return this;
};

sk$Range$dtRangeIterator.prototype.next = function() {
  var t$ = this;
  var i = t$.current;
  var t$1 = i;
  var t$2 = this;
  var t$3 = t$2.end;
  if (t$1.$gt$eq(t$3).__value)
    return singleton$None;
  else
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = i;
      var t$6 = t$4;
      t$6.current = t$5.$pl(new sk$Int(1.0, 0.0));
      var t$7 = i;
      return new (sk$Some)(t$7);
    }
};

sk$Range$dtRangeIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.end;
  var t$2 = this;
  var t$3 = t$2.current;
  var t$4 = t$1.$mi(t$3);
  var size = sk$max(t$4, new sk$Int(0.0, 0.0));
  var t$5 = size;
  return new (sk$Some)(t$5);
};

sk$Range$dtRangeIterator.prototype.take = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called RangeIterator::take with negative number')));
  var $var = this;
  var t$2 = $var;
  var t$3 = this;
  var t$4 = t$3.current;
  var t$5 = n;
  var t$6 = t$4.$pl(t$5);
  var t$7 = this;
  var t$8 = t$7.end;
  var t$9 = t$2;
  t$9.end = sk$min(t$6, t$8);
  return this;
};

sk$Range$dtRangeIterator.prototype.__bases = [
  sk$Range$dtRangeIterator,
  sk$Iterator
];

var sk$Range$dtRangeReverseIterator = sk.Range$dtRangeReverseIterator = function Range$dtRangeReverseIterator(start, current) {
  this.start = start;
  this.current = current;
};

sk$Range$dtRangeReverseIterator.prototype = Object.create(Object.prototype);

sk$Range$dtRangeReverseIterator.prototype.__constructor = sk$Range$dtRangeReverseIterator;

sk$Range$dtRangeReverseIterator.prototype.__classname = 'Range.RangeReverseIterator';

sk$Range$dtRangeReverseIterator.prototype.$frozen = false;

sk$Range$dtRangeReverseIterator.prototype.__type_switch_id = 142;

sk$Range$dtRangeReverseIterator.prototype.__copy = function() {
  return new (sk$Range$dtRangeReverseIterator)(this.start, this.current);
};

sk$Range$dtRangeReverseIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp336 = __cache.get(this);
  if (_tmp336 === undefined)
    {
      var _tmp336 = this.__copy();
      _tmp336.$frozen = true;
      __cache.set(this, _tmp336);
      _tmp336.start = skip.deepFreeze(_tmp336.start, __cache);
      _tmp336.current = skip.deepFreeze(_tmp336.current, __cache);
    }
  return _tmp336;
};

sk$Range$dtRangeReverseIterator.prototype.__init = function(__named_parameters) {};

sk$Range$dtRangeReverseIterator.prototype.drop = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called RangeReverseIterator::drop with negative number')));
  var $var = this;
  var t$2 = $var;
  var t$3 = this;
  var t$4 = t$3.start;
  var t$5 = this;
  var t$6 = t$5.current;
  var t$7 = n;
  var t$8 = t$6.$mi(t$7);
  var t$9 = t$2;
  t$9.current = sk$max(t$4, t$8);
  return this;
};

sk$Range$dtRangeReverseIterator.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.start;
  var t$2 = this;
  var t$3 = t$2.current;
  if (t$1.$gt$eq(t$3).__value)
    return singleton$None;
  else
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = this;
      var t$6 = t$5.current;
      var t$7 = t$4;
      t$7.current = t$6.$mi(new sk$Int(1.0, 0.0));
      var t$8 = this;
      var t$9 = t$8.current;
      return new (sk$Some)(t$9);
    }
};

sk$Range$dtRangeReverseIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.current;
  var t$2 = this;
  var t$3 = t$2.start;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$Range$dtRangeReverseIterator.prototype.take = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called RangeReverseIterator::take with negative number')));
  var $var = this;
  var t$2 = $var;
  var t$3 = this;
  var t$4 = t$3.start;
  var t$5 = this;
  var t$6 = t$5.current;
  var t$7 = n;
  var t$8 = t$6.$mi(t$7);
  var t$9 = t$2;
  t$9.start = sk$max(t$4, t$8);
  return this;
};

sk$Range$dtRangeReverseIterator.prototype.__bases = [
  sk$Range$dtRangeReverseIterator,
  sk$Iterator
];

var sk$RuntimeError = sk.RuntimeError = function RuntimeError(msg) {
  this.msg = msg;
};

sk$RuntimeError.prototype = Object.create(Object.prototype);

sk$RuntimeError.prototype.__constructor = sk$RuntimeError;

sk$RuntimeError.prototype.__classname = 'RuntimeError';

sk$RuntimeError.prototype.$frozen = true;

sk$RuntimeError.prototype.__type_switch_id = 76;

sk$RuntimeError.prototype.__copy = function() {
  return new (sk$RuntimeError)(this.msg);
};

sk$RuntimeError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp337 = __cache.get(this);
  if (_tmp337 === undefined)
    {
      var _tmp337 = this.__copy();
      _tmp337.$frozen = true;
      __cache.set(this, _tmp337);
      _tmp337.msg = skip.deepFreeze(_tmp337.msg, __cache);
    }
  return _tmp337;
};

sk$RuntimeError.prototype.__init = function(__named_parameters) {};

sk$RuntimeError.prototype.getMessage = function() {
  var t$ = this;
  return t$.msg;
};

sk$RuntimeError.prototype.__bases = [
  sk$RuntimeError,
  sk$Exception
];

var sk$Sequence$dtIndexedSequenceIterator = sk.Sequence$dtIndexedSequenceIterator = function Sequence$dtIndexedSequenceIterator(container, start, size, stride) {
  this.container = container;
  this.start = start;
  this.size = size;
  this.stride = stride;
};

sk$Sequence$dtIndexedSequenceIterator.prototype = Object.create(Object.prototype);

sk$Sequence$dtIndexedSequenceIterator.prototype.__constructor = sk$Sequence$dtIndexedSequenceIterator;

sk$Sequence$dtIndexedSequenceIterator.prototype.__classname = 'Sequence.IndexedSequenceIterator';

sk$Sequence$dtIndexedSequenceIterator.prototype.$frozen = false;

sk$Sequence$dtIndexedSequenceIterator.prototype.__type_switch_id = 143;

sk$Sequence$dtIndexedSequenceIterator.prototype.__copy = function() {
  return new (sk$Sequence$dtIndexedSequenceIterator)(this.container, this.start, this.size, this.stride);
};

sk$Sequence$dtIndexedSequenceIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp338 = __cache.get(this);
  if (_tmp338 === undefined)
    {
      var _tmp338 = this.__copy();
      _tmp338.$frozen = true;
      __cache.set(this, _tmp338);
      _tmp338.container = skip.deepFreeze(_tmp338.container, __cache);
      _tmp338.start = skip.deepFreeze(_tmp338.start, __cache);
      _tmp338.size = skip.deepFreeze(_tmp338.size, __cache);
      _tmp338.stride = skip.deepFreeze(_tmp338.stride, __cache);
    }
  return _tmp338;
};

sk$Sequence$dtIndexedSequenceIterator.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtIndexedSequenceIterator.prototype.next = function() {
  var t$ = this;
  var t$1 = t$.size;
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = this;
      var cur = t$2.start;
      var $var = this;
      var t$3 = $var;
      var t$4 = cur;
      var t$5 = this;
      var t$6 = t$5.stride;
      var t$7 = t$3;
      t$7.start = t$4.$pl(t$6);
      var var1 = this;
      var t$8 = var1;
      var t$9 = this;
      var t$10 = t$9.size;
      var t$11 = t$8;
      t$11.size = t$10.$mi(new sk$Int(1.0, 0.0));
      var t$12 = this;
      var t$13 = t$12.container;
      var t$14 = cur;
      var t$15 = t$13.get(t$14);
      return new (sk$Some)(t$15);
    }
  else
    return singleton$None;
};

sk$Sequence$dtIndexedSequenceIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.size;
  return new (sk$Some)(t$1);
};

sk$Sequence$dtIndexedSequenceIterator.prototype.__bases = [
  sk$Sequence$dtIndexedSequenceIterator,
  sk$Iterator
];

var sk$Sequence$dtZip10Sequence = sk.Sequence$dtZip10Sequence = function Sequence$dtZip10Sequence(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
  this.s4 = s4;
  this.s5 = s5;
  this.s6 = s6;
  this.s7 = s7;
  this.s8 = s8;
  this.s9 = s9;
};

sk$Sequence$dtZip10Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip10Sequence.prototype.__constructor = sk$Sequence$dtZip10Sequence;

sk$Sequence$dtZip10Sequence.prototype.__classname = 'Sequence.Zip10Sequence';

sk$Sequence$dtZip10Sequence.prototype.$frozen = true;

sk$Sequence$dtZip10Sequence.prototype.__type_switch_id = 275;

sk$Sequence$dtZip10Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip10Sequence)(this.s0, this.s1, this.s2, this.s3, this.s4, this.s5, this.s6, this.s7, this.s8, this.s9);
};

sk$Sequence$dtZip10Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp339 = __cache.get(this);
  if (_tmp339 === undefined)
    {
      var _tmp339 = this.__copy();
      _tmp339.$frozen = true;
      __cache.set(this, _tmp339);
      _tmp339.s0 = skip.deepFreeze(_tmp339.s0, __cache);
      _tmp339.s1 = skip.deepFreeze(_tmp339.s1, __cache);
      _tmp339.s2 = skip.deepFreeze(_tmp339.s2, __cache);
      _tmp339.s3 = skip.deepFreeze(_tmp339.s3, __cache);
      _tmp339.s4 = skip.deepFreeze(_tmp339.s4, __cache);
      _tmp339.s5 = skip.deepFreeze(_tmp339.s5, __cache);
      _tmp339.s6 = skip.deepFreeze(_tmp339.s6, __cache);
      _tmp339.s7 = skip.deepFreeze(_tmp339.s7, __cache);
      _tmp339.s8 = skip.deepFreeze(_tmp339.s8, __cache);
      _tmp339.s9 = skip.deepFreeze(_tmp339.s9, __cache);
    }
  return _tmp339;
};

sk$Sequence$dtZip10Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip10Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = this;
  var t$13 = t$12.s4;
  var t$14 = t$13.size();
  var t$15 = this;
  var t$16 = t$15.s5;
  var t$17 = t$16.size();
  var t$18 = this;
  var t$19 = t$18.s6;
  var t$20 = t$19.size();
  var t$21 = this;
  var t$22 = t$21.s7;
  var t$23 = t$22.size();
  var t$24 = this;
  var t$25 = t$24.s8;
  var t$26 = t$25.size();
  var t$27 = this;
  var t$28 = t$27.s9;
  var t$29 = t$28.size();
  var t$30 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20,
    t$23,
    t$26,
    t$29
  ]);
  var t$31 = sk$Vector.createFromItems(t$30);
  var t$32 = t$31.min();
  return t$32.fromSome(undefined);
};

sk$Sequence$dtZip10Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var t$8 = this;
    var t$9 = t$8.s4;
    var it4 = t$9.values();
    var t$10 = this;
    var t$11 = t$10.s5;
    var it5 = t$11.values();
    var t$12 = this;
    var t$13 = t$12.s6;
    var it6 = t$13.values();
    var t$14 = this;
    var t$15 = t$14.s7;
    var it7 = t$15.values();
    var t$16 = this;
    var t$17 = t$16.s8;
    var it8 = t$17.values();
    var t$18 = this;
    var t$19 = t$18.s9;
    var it9 = t$19.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14121:{
        break$bg14121:{
          do
            {
              jumpBlockOutercontinue$bg14122:{
                continue$bg14122:{
                  {
                    var t$20 = it0;
                    var t$21 = t$20.next();
                    var t$22 = it1;
                    var t$23 = t$22.next();
                    var t$24 = it2;
                    var t$25 = t$24.next();
                    var t$26 = it3;
                    var t$27 = t$26.next();
                    var t$28 = it4;
                    var t$29 = t$28.next();
                    var t$30 = it5;
                    var t$31 = t$30.next();
                    var t$32 = it6;
                    var t$33 = t$32.next();
                    var t$34 = it7;
                    var t$35 = t$34.next();
                    var t$36 = it8;
                    var t$37 = t$36.next();
                    var t$38 = it9;
                    var t$39 = t$38.next();
                    var $var = new (sk$Tuple10)(t$21, t$23, t$25, t$27, t$29, t$31, t$33, t$35, t$37, t$39);
                    var val8;
                    var val7;
                    var val6;
                    var _;
                    var val9;
                    var val5;
                    var val4;
                    var val3;
                    var val2;
                    var val1;
                    var val0;
                    {
                      jumpBlockOuterjumpLab$bg14157:{
                        jumpLab$bg14157:{
                          jumpLab$bg14156:{
                            jumpLab$bg14158:{
                              jumpLab$bg14159:{
                                jumpLab$bg14160:{
                                  jumpLab$bg14161:{
                                    jumpLab$bg14162:{
                                      jumpLab$bg14163:{
                                        jumpLab$bg14164:{
                                          jumpLab$bg14165:{
                                            jumpLab$bg14166:{
                                              jumpLab$bg14167:{
                                                switch ($var.__type_switch_id) {
                                                  case 391:
                                                    break jumpLab$bg14167;
                                                  
                                                  default:
                                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                                }
                                              }
                                              switch ($var.i0.__type_switch_id) {
                                                case 205:
                                                  break jumpLab$bg14166;
                                                
                                                default:
                                                  _ = $var;
                                                  break jumpLab$bg14157;

                                              }
                                            }
                                            switch ($var.i1.__type_switch_id) {
                                              case 205:
                                                break jumpLab$bg14165;
                                              
                                              default:
                                                _ = $var;
                                                break jumpLab$bg14157;

                                            }
                                          }
                                          switch ($var.i2.__type_switch_id) {
                                            case 205:
                                              break jumpLab$bg14164;
                                            
                                            default:
                                              _ = $var;
                                              break jumpLab$bg14157;

                                          }
                                        }
                                        switch ($var.i3.__type_switch_id) {
                                          case 205:
                                            break jumpLab$bg14163;
                                          
                                          default:
                                            _ = $var;
                                            break jumpLab$bg14157;

                                        }
                                      }
                                      switch ($var.i4.__type_switch_id) {
                                        case 205:
                                          break jumpLab$bg14162;
                                        
                                        default:
                                          _ = $var;
                                          break jumpLab$bg14157;

                                      }
                                    }
                                    switch ($var.i5.__type_switch_id) {
                                      case 205:
                                        break jumpLab$bg14161;
                                      
                                      default:
                                        _ = $var;
                                        break jumpLab$bg14157;

                                    }
                                  }
                                  switch ($var.i6.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg14160;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg14157;

                                  }
                                }
                                switch ($var.i7.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg14159;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg14157;

                                }
                              }
                              switch ($var.i8.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14158;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14157;

                              }
                            }
                            switch ($var.i9.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                val4 = $var.i4.value;
                                val5 = $var.i5.value;
                                val6 = $var.i6.value;
                                val7 = $var.i7.value;
                                val8 = $var.i8.value;
                                val9 = $var.i9.value;
                                break jumpLab$bg14156;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14157;

                            }
                          }
                          {
                            var t$40 = val0;
                            var t$41 = val1;
                            var t$42 = val2;
                            var t$43 = val3;
                            var t$44 = val4;
                            var t$45 = val5;
                            var t$46 = val6;
                            var t$47 = val7;
                            var t$48 = val8;
                            var t$49 = val9;
                            yield new sk$Some(new (sk$Tuple10)(t$40, t$41, t$42, t$43, t$44, t$45, t$46, t$47, t$48, t$49));
                          }
                          break jumpBlockOuterjumpLab$bg14157;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14121;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14122;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14121;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip10Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip10Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip10Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip10Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip10Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip10Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip10Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip10Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip10Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip10Sequence.prototype.__bases = [
  sk$Sequence$dtZip10Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip2Sequence = sk.Sequence$dtZip2Sequence = function Sequence$dtZip2Sequence(s0, s1) {
  this.s0 = s0;
  this.s1 = s1;
};

sk$Sequence$dtZip2Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip2Sequence.prototype.__constructor = sk$Sequence$dtZip2Sequence;

sk$Sequence$dtZip2Sequence.prototype.__classname = 'Sequence.Zip2Sequence';

sk$Sequence$dtZip2Sequence.prototype.$frozen = true;

sk$Sequence$dtZip2Sequence.prototype.__type_switch_id = 276;

sk$Sequence$dtZip2Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip2Sequence)(this.s0, this.s1);
};

sk$Sequence$dtZip2Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp340 = __cache.get(this);
  if (_tmp340 === undefined)
    {
      var _tmp340 = this.__copy();
      _tmp340.$frozen = true;
      __cache.set(this, _tmp340);
      _tmp340.s0 = skip.deepFreeze(_tmp340.s0, __cache);
      _tmp340.s1 = skip.deepFreeze(_tmp340.s1, __cache);
    }
  return _tmp340;
};

sk$Sequence$dtZip2Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip2Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = new (sk$Array)([
    t$2,
    t$5
  ]);
  var t$7 = sk$Vector.createFromItems(t$6);
  var t$8 = t$7.min();
  return t$8.fromSome(undefined);
};

sk$Sequence$dtZip2Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14248:{
        break$bg14248:{
          do
            {
              jumpBlockOutercontinue$bg14249:{
                continue$bg14249:{
                  {
                    var t$4 = it0;
                    var t$5 = t$4.next();
                    var t$6 = it1;
                    var t$7 = t$6.next();
                    var $var = new (sk$Tuple2)(t$5, t$7);
                    var val0;
                    var _;
                    var val1;
                    {
                      jumpBlockOuterjumpLab$bg14260:{
                        jumpLab$bg14260:{
                          jumpLab$bg14259:{
                            jumpLab$bg14261:{
                              jumpLab$bg14262:{
                                switch ($var.__type_switch_id) {
                                  case 392:
                                    break jumpLab$bg14262;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i0.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14261;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14260;

                              }
                            }
                            switch ($var.i1.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                break jumpLab$bg14259;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14260;

                            }
                          }
                          {
                            var t$8 = val0;
                            var t$9 = val1;
                            yield new sk$Some(new (sk$Tuple2)(t$8, t$9));
                          }
                          break jumpBlockOuterjumpLab$bg14260;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14248;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14249;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14248;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip2Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip2Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip2Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip2Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip2Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip2Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip2Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip2Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip2Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip2Sequence.prototype.__bases = [
  sk$Sequence$dtZip2Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip3Sequence = sk.Sequence$dtZip3Sequence = function Sequence$dtZip3Sequence(s0, s1, s2) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
};

sk$Sequence$dtZip3Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip3Sequence.prototype.__constructor = sk$Sequence$dtZip3Sequence;

sk$Sequence$dtZip3Sequence.prototype.__classname = 'Sequence.Zip3Sequence';

sk$Sequence$dtZip3Sequence.prototype.$frozen = true;

sk$Sequence$dtZip3Sequence.prototype.__type_switch_id = 277;

sk$Sequence$dtZip3Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip3Sequence)(this.s0, this.s1, this.s2);
};

sk$Sequence$dtZip3Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp341 = __cache.get(this);
  if (_tmp341 === undefined)
    {
      var _tmp341 = this.__copy();
      _tmp341.$frozen = true;
      __cache.set(this, _tmp341);
      _tmp341.s0 = skip.deepFreeze(_tmp341.s0, __cache);
      _tmp341.s1 = skip.deepFreeze(_tmp341.s1, __cache);
      _tmp341.s2 = skip.deepFreeze(_tmp341.s2, __cache);
    }
  return _tmp341;
};

sk$Sequence$dtZip3Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip3Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = new (sk$Array)([
    t$2,
    t$5,
    t$8
  ]);
  var t$10 = sk$Vector.createFromItems(t$9);
  var t$11 = t$10.min();
  return t$11.fromSome(undefined);
};

sk$Sequence$dtZip3Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14348:{
        break$bg14348:{
          do
            {
              jumpBlockOutercontinue$bg14349:{
                continue$bg14349:{
                  {
                    var t$6 = it0;
                    var t$7 = t$6.next();
                    var t$8 = it1;
                    var t$9 = t$8.next();
                    var t$10 = it2;
                    var t$11 = t$10.next();
                    var $var = new (sk$Tuple3)(t$7, t$9, t$11);
                    var val1;
                    var val0;
                    var val2;
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg14363:{
                        jumpLab$bg14363:{
                          jumpLab$bg14362:{
                            jumpLab$bg14364:{
                              jumpLab$bg14365:{
                                jumpLab$bg14366:{
                                  switch ($var.__type_switch_id) {
                                    case 393:
                                      break jumpLab$bg14366;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg14365;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg14363;

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14364;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14363;

                              }
                            }
                            switch ($var.i2.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                break jumpLab$bg14362;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14363;

                            }
                          }
                          {
                            var t$12 = val0;
                            var t$13 = val1;
                            var t$14 = val2;
                            yield new sk$Some(new (sk$Tuple3)(t$12, t$13, t$14));
                          }
                          break jumpBlockOuterjumpLab$bg14363;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14348;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14349;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14348;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip3Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip3Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip3Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip3Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip3Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip3Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip3Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip3Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip3Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip3Sequence.prototype.__bases = [
  sk$Sequence$dtZip3Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip4Sequence = sk.Sequence$dtZip4Sequence = function Sequence$dtZip4Sequence(s0, s1, s2, s3) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
};

sk$Sequence$dtZip4Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip4Sequence.prototype.__constructor = sk$Sequence$dtZip4Sequence;

sk$Sequence$dtZip4Sequence.prototype.__classname = 'Sequence.Zip4Sequence';

sk$Sequence$dtZip4Sequence.prototype.$frozen = true;

sk$Sequence$dtZip4Sequence.prototype.__type_switch_id = 278;

sk$Sequence$dtZip4Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip4Sequence)(this.s0, this.s1, this.s2, this.s3);
};

sk$Sequence$dtZip4Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp342 = __cache.get(this);
  if (_tmp342 === undefined)
    {
      var _tmp342 = this.__copy();
      _tmp342.$frozen = true;
      __cache.set(this, _tmp342);
      _tmp342.s0 = skip.deepFreeze(_tmp342.s0, __cache);
      _tmp342.s1 = skip.deepFreeze(_tmp342.s1, __cache);
      _tmp342.s2 = skip.deepFreeze(_tmp342.s2, __cache);
      _tmp342.s3 = skip.deepFreeze(_tmp342.s3, __cache);
    }
  return _tmp342;
};

sk$Sequence$dtZip4Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip4Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11
  ]);
  var t$13 = sk$Vector.createFromItems(t$12);
  var t$14 = t$13.min();
  return t$14.fromSome(undefined);
};

sk$Sequence$dtZip4Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14457:{
        break$bg14457:{
          do
            {
              jumpBlockOutercontinue$bg14458:{
                continue$bg14458:{
                  {
                    var t$8 = it0;
                    var t$9 = t$8.next();
                    var t$10 = it1;
                    var t$11 = t$10.next();
                    var t$12 = it2;
                    var t$13 = t$12.next();
                    var t$14 = it3;
                    var t$15 = t$14.next();
                    var $var = new (sk$Tuple4)(t$9, t$11, t$13, t$15);
                    var val0;
                    var val2;
                    var _;
                    var val1;
                    var val3;
                    {
                      jumpBlockOuterjumpLab$bg14475:{
                        jumpLab$bg14475:{
                          jumpLab$bg14474:{
                            jumpLab$bg14476:{
                              jumpLab$bg14477:{
                                jumpLab$bg14478:{
                                  jumpLab$bg14479:{
                                    switch ($var.__type_switch_id) {
                                      case 394:
                                        break jumpLab$bg14479;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  switch ($var.i0.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg14478;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg14475;

                                  }
                                }
                                switch ($var.i1.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg14477;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg14475;

                                }
                              }
                              switch ($var.i2.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14476;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14475;

                              }
                            }
                            switch ($var.i3.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                break jumpLab$bg14474;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14475;

                            }
                          }
                          {
                            var t$16 = val0;
                            var t$17 = val1;
                            var t$18 = val2;
                            var t$19 = val3;
                            yield new sk$Some(new (sk$Tuple4)(t$16, t$17, t$18, t$19));
                          }
                          break jumpBlockOuterjumpLab$bg14475;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14457;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14458;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14457;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip4Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip4Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip4Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip4Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip4Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip4Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip4Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip4Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip4Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip4Sequence.prototype.__bases = [
  sk$Sequence$dtZip4Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip5Sequence = sk.Sequence$dtZip5Sequence = function Sequence$dtZip5Sequence(s0, s1, s2, s3, s4) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
  this.s4 = s4;
};

sk$Sequence$dtZip5Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip5Sequence.prototype.__constructor = sk$Sequence$dtZip5Sequence;

sk$Sequence$dtZip5Sequence.prototype.__classname = 'Sequence.Zip5Sequence';

sk$Sequence$dtZip5Sequence.prototype.$frozen = true;

sk$Sequence$dtZip5Sequence.prototype.__type_switch_id = 279;

sk$Sequence$dtZip5Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip5Sequence)(this.s0, this.s1, this.s2, this.s3, this.s4);
};

sk$Sequence$dtZip5Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp343 = __cache.get(this);
  if (_tmp343 === undefined)
    {
      var _tmp343 = this.__copy();
      _tmp343.$frozen = true;
      __cache.set(this, _tmp343);
      _tmp343.s0 = skip.deepFreeze(_tmp343.s0, __cache);
      _tmp343.s1 = skip.deepFreeze(_tmp343.s1, __cache);
      _tmp343.s2 = skip.deepFreeze(_tmp343.s2, __cache);
      _tmp343.s3 = skip.deepFreeze(_tmp343.s3, __cache);
      _tmp343.s4 = skip.deepFreeze(_tmp343.s4, __cache);
    }
  return _tmp343;
};

sk$Sequence$dtZip5Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip5Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = this;
  var t$13 = t$12.s4;
  var t$14 = t$13.size();
  var t$15 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14
  ]);
  var t$16 = sk$Vector.createFromItems(t$15);
  var t$17 = t$16.min();
  return t$17.fromSome(undefined);
};

sk$Sequence$dtZip5Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var t$8 = this;
    var t$9 = t$8.s4;
    var it4 = t$9.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14575:{
        break$bg14575:{
          do
            {
              jumpBlockOutercontinue$bg14576:{
                continue$bg14576:{
                  {
                    var t$10 = it0;
                    var t$11 = t$10.next();
                    var t$12 = it1;
                    var t$13 = t$12.next();
                    var t$14 = it2;
                    var t$15 = t$14.next();
                    var t$16 = it3;
                    var t$17 = t$16.next();
                    var t$18 = it4;
                    var t$19 = t$18.next();
                    var $var = new (sk$Tuple5)(t$11, t$13, t$15, t$17, t$19);
                    var val1;
                    var val3;
                    var _;
                    var val0;
                    var val2;
                    var val4;
                    {
                      jumpBlockOuterjumpLab$bg14596:{
                        jumpLab$bg14596:{
                          jumpLab$bg14595:{
                            jumpLab$bg14597:{
                              jumpLab$bg14598:{
                                jumpLab$bg14599:{
                                  jumpLab$bg14600:{
                                    jumpLab$bg14601:{
                                      switch ($var.__type_switch_id) {
                                        case 395:
                                          break jumpLab$bg14601;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    switch ($var.i0.__type_switch_id) {
                                      case 205:
                                        break jumpLab$bg14600;
                                      
                                      default:
                                        _ = $var;
                                        break jumpLab$bg14596;

                                    }
                                  }
                                  switch ($var.i1.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg14599;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg14596;

                                  }
                                }
                                switch ($var.i2.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg14598;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg14596;

                                }
                              }
                              switch ($var.i3.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14597;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14596;

                              }
                            }
                            switch ($var.i4.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                val4 = $var.i4.value;
                                break jumpLab$bg14595;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14596;

                            }
                          }
                          {
                            var t$20 = val0;
                            var t$21 = val1;
                            var t$22 = val2;
                            var t$23 = val3;
                            var t$24 = val4;
                            yield new sk$Some(new (sk$Tuple5)(t$20, t$21, t$22, t$23, t$24));
                          }
                          break jumpBlockOuterjumpLab$bg14596;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14575;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14576;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14575;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip5Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip5Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip5Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip5Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip5Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip5Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip5Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip5Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip5Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip5Sequence.prototype.__bases = [
  sk$Sequence$dtZip5Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip6Sequence = sk.Sequence$dtZip6Sequence = function Sequence$dtZip6Sequence(s0, s1, s2, s3, s4, s5) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
  this.s4 = s4;
  this.s5 = s5;
};

sk$Sequence$dtZip6Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip6Sequence.prototype.__constructor = sk$Sequence$dtZip6Sequence;

sk$Sequence$dtZip6Sequence.prototype.__classname = 'Sequence.Zip6Sequence';

sk$Sequence$dtZip6Sequence.prototype.$frozen = true;

sk$Sequence$dtZip6Sequence.prototype.__type_switch_id = 280;

sk$Sequence$dtZip6Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip6Sequence)(this.s0, this.s1, this.s2, this.s3, this.s4, this.s5);
};

sk$Sequence$dtZip6Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp344 = __cache.get(this);
  if (_tmp344 === undefined)
    {
      var _tmp344 = this.__copy();
      _tmp344.$frozen = true;
      __cache.set(this, _tmp344);
      _tmp344.s0 = skip.deepFreeze(_tmp344.s0, __cache);
      _tmp344.s1 = skip.deepFreeze(_tmp344.s1, __cache);
      _tmp344.s2 = skip.deepFreeze(_tmp344.s2, __cache);
      _tmp344.s3 = skip.deepFreeze(_tmp344.s3, __cache);
      _tmp344.s4 = skip.deepFreeze(_tmp344.s4, __cache);
      _tmp344.s5 = skip.deepFreeze(_tmp344.s5, __cache);
    }
  return _tmp344;
};

sk$Sequence$dtZip6Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip6Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = this;
  var t$13 = t$12.s4;
  var t$14 = t$13.size();
  var t$15 = this;
  var t$16 = t$15.s5;
  var t$17 = t$16.size();
  var t$18 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17
  ]);
  var t$19 = sk$Vector.createFromItems(t$18);
  var t$20 = t$19.min();
  return t$20.fromSome(undefined);
};

sk$Sequence$dtZip6Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var t$8 = this;
    var t$9 = t$8.s4;
    var it4 = t$9.values();
    var t$10 = this;
    var t$11 = t$10.s5;
    var it5 = t$11.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14702:{
        break$bg14702:{
          do
            {
              jumpBlockOutercontinue$bg14703:{
                continue$bg14703:{
                  {
                    var t$12 = it0;
                    var t$13 = t$12.next();
                    var t$14 = it1;
                    var t$15 = t$14.next();
                    var t$16 = it2;
                    var t$17 = t$16.next();
                    var t$18 = it3;
                    var t$19 = t$18.next();
                    var t$20 = it4;
                    var t$21 = t$20.next();
                    var t$22 = it5;
                    var t$23 = t$22.next();
                    var $var = new (sk$Tuple6)(t$13, t$15, t$17, t$19, t$21, t$23);
                    var val0;
                    var val2;
                    var _;
                    var val1;
                    var val5;
                    var val4;
                    var val3;
                    {
                      jumpBlockOuterjumpLab$bg14726:{
                        jumpLab$bg14726:{
                          jumpLab$bg14725:{
                            jumpLab$bg14727:{
                              jumpLab$bg14728:{
                                jumpLab$bg14729:{
                                  jumpLab$bg14730:{
                                    jumpLab$bg14731:{
                                      jumpLab$bg14732:{
                                        switch ($var.__type_switch_id) {
                                          case 396:
                                            break jumpLab$bg14732;
                                          
                                          default:
                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                        }
                                      }
                                      switch ($var.i0.__type_switch_id) {
                                        case 205:
                                          break jumpLab$bg14731;
                                        
                                        default:
                                          _ = $var;
                                          break jumpLab$bg14726;

                                      }
                                    }
                                    switch ($var.i1.__type_switch_id) {
                                      case 205:
                                        break jumpLab$bg14730;
                                      
                                      default:
                                        _ = $var;
                                        break jumpLab$bg14726;

                                    }
                                  }
                                  switch ($var.i2.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg14729;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg14726;

                                  }
                                }
                                switch ($var.i3.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg14728;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg14726;

                                }
                              }
                              switch ($var.i4.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14727;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14726;

                              }
                            }
                            switch ($var.i5.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                val4 = $var.i4.value;
                                val5 = $var.i5.value;
                                break jumpLab$bg14725;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14726;

                            }
                          }
                          {
                            var t$24 = val0;
                            var t$25 = val1;
                            var t$26 = val2;
                            var t$27 = val3;
                            var t$28 = val4;
                            var t$29 = val5;
                            yield new sk$Some(new (sk$Tuple6)(t$24, t$25, t$26, t$27, t$28, t$29));
                          }
                          break jumpBlockOuterjumpLab$bg14726;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14702;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14703;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14702;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip6Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip6Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip6Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip6Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip6Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip6Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip6Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip6Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip6Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip6Sequence.prototype.__bases = [
  sk$Sequence$dtZip6Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip7Sequence = sk.Sequence$dtZip7Sequence = function Sequence$dtZip7Sequence(s0, s1, s2, s3, s4, s5, s6) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
  this.s4 = s4;
  this.s5 = s5;
  this.s6 = s6;
};

sk$Sequence$dtZip7Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip7Sequence.prototype.__constructor = sk$Sequence$dtZip7Sequence;

sk$Sequence$dtZip7Sequence.prototype.__classname = 'Sequence.Zip7Sequence';

sk$Sequence$dtZip7Sequence.prototype.$frozen = true;

sk$Sequence$dtZip7Sequence.prototype.__type_switch_id = 281;

sk$Sequence$dtZip7Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip7Sequence)(this.s0, this.s1, this.s2, this.s3, this.s4, this.s5, this.s6);
};

sk$Sequence$dtZip7Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp345 = __cache.get(this);
  if (_tmp345 === undefined)
    {
      var _tmp345 = this.__copy();
      _tmp345.$frozen = true;
      __cache.set(this, _tmp345);
      _tmp345.s0 = skip.deepFreeze(_tmp345.s0, __cache);
      _tmp345.s1 = skip.deepFreeze(_tmp345.s1, __cache);
      _tmp345.s2 = skip.deepFreeze(_tmp345.s2, __cache);
      _tmp345.s3 = skip.deepFreeze(_tmp345.s3, __cache);
      _tmp345.s4 = skip.deepFreeze(_tmp345.s4, __cache);
      _tmp345.s5 = skip.deepFreeze(_tmp345.s5, __cache);
      _tmp345.s6 = skip.deepFreeze(_tmp345.s6, __cache);
    }
  return _tmp345;
};

sk$Sequence$dtZip7Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip7Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = this;
  var t$13 = t$12.s4;
  var t$14 = t$13.size();
  var t$15 = this;
  var t$16 = t$15.s5;
  var t$17 = t$16.size();
  var t$18 = this;
  var t$19 = t$18.s6;
  var t$20 = t$19.size();
  var t$21 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20
  ]);
  var t$22 = sk$Vector.createFromItems(t$21);
  var t$23 = t$22.min();
  return t$23.fromSome(undefined);
};

sk$Sequence$dtZip7Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var t$8 = this;
    var t$9 = t$8.s4;
    var it4 = t$9.values();
    var t$10 = this;
    var t$11 = t$10.s5;
    var it5 = t$11.values();
    var t$12 = this;
    var t$13 = t$12.s6;
    var it6 = t$13.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14838:{
        break$bg14838:{
          do
            {
              jumpBlockOutercontinue$bg14839:{
                continue$bg14839:{
                  {
                    var t$14 = it0;
                    var t$15 = t$14.next();
                    var t$16 = it1;
                    var t$17 = t$16.next();
                    var t$18 = it2;
                    var t$19 = t$18.next();
                    var t$20 = it3;
                    var t$21 = t$20.next();
                    var t$22 = it4;
                    var t$23 = t$22.next();
                    var t$24 = it5;
                    var t$25 = t$24.next();
                    var t$26 = it6;
                    var t$27 = t$26.next();
                    var $var = new (sk$Tuple7)(t$15, t$17, t$19, t$21, t$23, t$25, t$27);
                    var val1;
                    var val6;
                    var _;
                    var val5;
                    var val0;
                    var val4;
                    var val3;
                    var val2;
                    {
                      jumpBlockOuterjumpLab$bg14865:{
                        jumpLab$bg14865:{
                          jumpLab$bg14864:{
                            jumpLab$bg14866:{
                              jumpLab$bg14867:{
                                jumpLab$bg14868:{
                                  jumpLab$bg14869:{
                                    jumpLab$bg14870:{
                                      jumpLab$bg14871:{
                                        jumpLab$bg14872:{
                                          switch ($var.__type_switch_id) {
                                            case 397:
                                              break jumpLab$bg14872;
                                            
                                            default:
                                              skip.throwException(sk, new Error('Unmatched Branch'));

                                          }
                                        }
                                        switch ($var.i0.__type_switch_id) {
                                          case 205:
                                            break jumpLab$bg14871;
                                          
                                          default:
                                            _ = $var;
                                            break jumpLab$bg14865;

                                        }
                                      }
                                      switch ($var.i1.__type_switch_id) {
                                        case 205:
                                          break jumpLab$bg14870;
                                        
                                        default:
                                          _ = $var;
                                          break jumpLab$bg14865;

                                      }
                                    }
                                    switch ($var.i2.__type_switch_id) {
                                      case 205:
                                        break jumpLab$bg14869;
                                      
                                      default:
                                        _ = $var;
                                        break jumpLab$bg14865;

                                    }
                                  }
                                  switch ($var.i3.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg14868;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg14865;

                                  }
                                }
                                switch ($var.i4.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg14867;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg14865;

                                }
                              }
                              switch ($var.i5.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg14866;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg14865;

                              }
                            }
                            switch ($var.i6.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                val4 = $var.i4.value;
                                val5 = $var.i5.value;
                                val6 = $var.i6.value;
                                break jumpLab$bg14864;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg14865;

                            }
                          }
                          {
                            var t$28 = val0;
                            var t$29 = val1;
                            var t$30 = val2;
                            var t$31 = val3;
                            var t$32 = val4;
                            var t$33 = val5;
                            var t$34 = val6;
                            yield new sk$Some(new (sk$Tuple7)(t$28, t$29, t$30, t$31, t$32, t$33, t$34));
                          }
                          break jumpBlockOuterjumpLab$bg14865;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14838;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14839;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14838;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip7Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip7Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip7Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip7Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip7Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip7Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip7Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip7Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip7Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip7Sequence.prototype.__bases = [
  sk$Sequence$dtZip7Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip8Sequence = sk.Sequence$dtZip8Sequence = function Sequence$dtZip8Sequence(s0, s1, s2, s3, s4, s5, s6, s7) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
  this.s4 = s4;
  this.s5 = s5;
  this.s6 = s6;
  this.s7 = s7;
};

sk$Sequence$dtZip8Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip8Sequence.prototype.__constructor = sk$Sequence$dtZip8Sequence;

sk$Sequence$dtZip8Sequence.prototype.__classname = 'Sequence.Zip8Sequence';

sk$Sequence$dtZip8Sequence.prototype.$frozen = true;

sk$Sequence$dtZip8Sequence.prototype.__type_switch_id = 282;

sk$Sequence$dtZip8Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip8Sequence)(this.s0, this.s1, this.s2, this.s3, this.s4, this.s5, this.s6, this.s7);
};

sk$Sequence$dtZip8Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp346 = __cache.get(this);
  if (_tmp346 === undefined)
    {
      var _tmp346 = this.__copy();
      _tmp346.$frozen = true;
      __cache.set(this, _tmp346);
      _tmp346.s0 = skip.deepFreeze(_tmp346.s0, __cache);
      _tmp346.s1 = skip.deepFreeze(_tmp346.s1, __cache);
      _tmp346.s2 = skip.deepFreeze(_tmp346.s2, __cache);
      _tmp346.s3 = skip.deepFreeze(_tmp346.s3, __cache);
      _tmp346.s4 = skip.deepFreeze(_tmp346.s4, __cache);
      _tmp346.s5 = skip.deepFreeze(_tmp346.s5, __cache);
      _tmp346.s6 = skip.deepFreeze(_tmp346.s6, __cache);
      _tmp346.s7 = skip.deepFreeze(_tmp346.s7, __cache);
    }
  return _tmp346;
};

sk$Sequence$dtZip8Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip8Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = this;
  var t$13 = t$12.s4;
  var t$14 = t$13.size();
  var t$15 = this;
  var t$16 = t$15.s5;
  var t$17 = t$16.size();
  var t$18 = this;
  var t$19 = t$18.s6;
  var t$20 = t$19.size();
  var t$21 = this;
  var t$22 = t$21.s7;
  var t$23 = t$22.size();
  var t$24 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20,
    t$23
  ]);
  var t$25 = sk$Vector.createFromItems(t$24);
  var t$26 = t$25.min();
  return t$26.fromSome(undefined);
};

sk$Sequence$dtZip8Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var t$8 = this;
    var t$9 = t$8.s4;
    var it4 = t$9.values();
    var t$10 = this;
    var t$11 = t$10.s5;
    var it5 = t$11.values();
    var t$12 = this;
    var t$13 = t$12.s6;
    var it6 = t$13.values();
    var t$14 = this;
    var t$15 = t$14.s7;
    var it7 = t$15.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg14983:{
        break$bg14983:{
          do
            {
              jumpBlockOutercontinue$bg14984:{
                continue$bg14984:{
                  {
                    var t$16 = it0;
                    var t$17 = t$16.next();
                    var t$18 = it1;
                    var t$19 = t$18.next();
                    var t$20 = it2;
                    var t$21 = t$20.next();
                    var t$22 = it3;
                    var t$23 = t$22.next();
                    var t$24 = it4;
                    var t$25 = t$24.next();
                    var t$26 = it5;
                    var t$27 = t$26.next();
                    var t$28 = it6;
                    var t$29 = t$28.next();
                    var t$30 = it7;
                    var t$31 = t$30.next();
                    var $var = new (sk$Tuple8)(t$17, t$19, t$21, t$23, t$25, t$27, t$29, t$31);
                    var val0;
                    var val7;
                    var val6;
                    var val5;
                    var _;
                    var val4;
                    var val3;
                    var val2;
                    var val1;
                    {
                      jumpBlockOuterjumpLab$bg15013:{
                        jumpLab$bg15013:{
                          jumpLab$bg15012:{
                            jumpLab$bg15014:{
                              jumpLab$bg15015:{
                                jumpLab$bg15016:{
                                  jumpLab$bg15017:{
                                    jumpLab$bg15018:{
                                      jumpLab$bg15019:{
                                        jumpLab$bg15020:{
                                          jumpLab$bg15021:{
                                            switch ($var.__type_switch_id) {
                                              case 398:
                                                break jumpLab$bg15021;
                                              
                                              default:
                                                skip.throwException(sk, new Error('Unmatched Branch'));

                                            }
                                          }
                                          switch ($var.i0.__type_switch_id) {
                                            case 205:
                                              break jumpLab$bg15020;
                                            
                                            default:
                                              _ = $var;
                                              break jumpLab$bg15013;

                                          }
                                        }
                                        switch ($var.i1.__type_switch_id) {
                                          case 205:
                                            break jumpLab$bg15019;
                                          
                                          default:
                                            _ = $var;
                                            break jumpLab$bg15013;

                                        }
                                      }
                                      switch ($var.i2.__type_switch_id) {
                                        case 205:
                                          break jumpLab$bg15018;
                                        
                                        default:
                                          _ = $var;
                                          break jumpLab$bg15013;

                                      }
                                    }
                                    switch ($var.i3.__type_switch_id) {
                                      case 205:
                                        break jumpLab$bg15017;
                                      
                                      default:
                                        _ = $var;
                                        break jumpLab$bg15013;

                                    }
                                  }
                                  switch ($var.i4.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg15016;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg15013;

                                  }
                                }
                                switch ($var.i5.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg15015;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg15013;

                                }
                              }
                              switch ($var.i6.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg15014;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg15013;

                              }
                            }
                            switch ($var.i7.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                val4 = $var.i4.value;
                                val5 = $var.i5.value;
                                val6 = $var.i6.value;
                                val7 = $var.i7.value;
                                break jumpLab$bg15012;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg15013;

                            }
                          }
                          {
                            var t$32 = val0;
                            var t$33 = val1;
                            var t$34 = val2;
                            var t$35 = val3;
                            var t$36 = val4;
                            var t$37 = val5;
                            var t$38 = val6;
                            var t$39 = val7;
                            yield new sk$Some(new (sk$Tuple8)(t$32, t$33, t$34, t$35, t$36, t$37, t$38, t$39));
                          }
                          break jumpBlockOuterjumpLab$bg15013;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg14983;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg14984;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg14983;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip8Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip8Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip8Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip8Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip8Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip8Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip8Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip8Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip8Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip8Sequence.prototype.__bases = [
  sk$Sequence$dtZip8Sequence,
  sk$Sequence
];

var sk$Sequence$dtZip9Sequence = sk.Sequence$dtZip9Sequence = function Sequence$dtZip9Sequence(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  this.s0 = s0;
  this.s1 = s1;
  this.s2 = s2;
  this.s3 = s3;
  this.s4 = s4;
  this.s5 = s5;
  this.s6 = s6;
  this.s7 = s7;
  this.s8 = s8;
};

sk$Sequence$dtZip9Sequence.prototype = Object.create(Object.prototype);

sk$Sequence$dtZip9Sequence.prototype.__constructor = sk$Sequence$dtZip9Sequence;

sk$Sequence$dtZip9Sequence.prototype.__classname = 'Sequence.Zip9Sequence';

sk$Sequence$dtZip9Sequence.prototype.$frozen = true;

sk$Sequence$dtZip9Sequence.prototype.__type_switch_id = 283;

sk$Sequence$dtZip9Sequence.prototype.__copy = function() {
  return new (sk$Sequence$dtZip9Sequence)(this.s0, this.s1, this.s2, this.s3, this.s4, this.s5, this.s6, this.s7, this.s8);
};

sk$Sequence$dtZip9Sequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp347 = __cache.get(this);
  if (_tmp347 === undefined)
    {
      var _tmp347 = this.__copy();
      _tmp347.$frozen = true;
      __cache.set(this, _tmp347);
      _tmp347.s0 = skip.deepFreeze(_tmp347.s0, __cache);
      _tmp347.s1 = skip.deepFreeze(_tmp347.s1, __cache);
      _tmp347.s2 = skip.deepFreeze(_tmp347.s2, __cache);
      _tmp347.s3 = skip.deepFreeze(_tmp347.s3, __cache);
      _tmp347.s4 = skip.deepFreeze(_tmp347.s4, __cache);
      _tmp347.s5 = skip.deepFreeze(_tmp347.s5, __cache);
      _tmp347.s6 = skip.deepFreeze(_tmp347.s6, __cache);
      _tmp347.s7 = skip.deepFreeze(_tmp347.s7, __cache);
      _tmp347.s8 = skip.deepFreeze(_tmp347.s8, __cache);
    }
  return _tmp347;
};

sk$Sequence$dtZip9Sequence.prototype.__init = function(__named_parameters) {};

sk$Sequence$dtZip9Sequence.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.s0;
  var t$2 = t$1.size();
  var t$3 = this;
  var t$4 = t$3.s1;
  var t$5 = t$4.size();
  var t$6 = this;
  var t$7 = t$6.s2;
  var t$8 = t$7.size();
  var t$9 = this;
  var t$10 = t$9.s3;
  var t$11 = t$10.size();
  var t$12 = this;
  var t$13 = t$12.s4;
  var t$14 = t$13.size();
  var t$15 = this;
  var t$16 = t$15.s5;
  var t$17 = t$16.size();
  var t$18 = this;
  var t$19 = t$18.s6;
  var t$20 = t$19.size();
  var t$21 = this;
  var t$22 = t$21.s7;
  var t$23 = t$22.size();
  var t$24 = this;
  var t$25 = t$24.s8;
  var t$26 = t$25.size();
  var t$27 = new (sk$Array)([
    t$2,
    t$5,
    t$8,
    t$11,
    t$14,
    t$17,
    t$20,
    t$23,
    t$26
  ]);
  var t$28 = sk$Vector.createFromItems(t$27);
  var t$29 = t$28.min();
  return t$29.fromSome(undefined);
};

sk$Sequence$dtZip9Sequence.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var t$1 = t$.s0;
    var it0 = t$1.values();
    var t$2 = this;
    var t$3 = t$2.s1;
    var it1 = t$3.values();
    var t$4 = this;
    var t$5 = t$4.s2;
    var it2 = t$5.values();
    var t$6 = this;
    var t$7 = t$6.s3;
    var it3 = t$7.values();
    var t$8 = this;
    var t$9 = t$8.s4;
    var it4 = t$9.values();
    var t$10 = this;
    var t$11 = t$10.s5;
    var it5 = t$11.values();
    var t$12 = this;
    var t$13 = t$12.s6;
    var it6 = t$13.values();
    var t$14 = this;
    var t$15 = t$14.s7;
    var it7 = t$15.values();
    var t$16 = this;
    var t$17 = t$16.s8;
    var it8 = t$17.values();
    var break_val;
    {
      jumpBlockOuterbreak$bg15137:{
        break$bg15137:{
          do
            {
              jumpBlockOutercontinue$bg15138:{
                continue$bg15138:{
                  {
                    var t$18 = it0;
                    var t$19 = t$18.next();
                    var t$20 = it1;
                    var t$21 = t$20.next();
                    var t$22 = it2;
                    var t$23 = t$22.next();
                    var t$24 = it3;
                    var t$25 = t$24.next();
                    var t$26 = it4;
                    var t$27 = t$26.next();
                    var t$28 = it5;
                    var t$29 = t$28.next();
                    var t$30 = it6;
                    var t$31 = t$30.next();
                    var t$32 = it7;
                    var t$33 = t$32.next();
                    var t$34 = it8;
                    var t$35 = t$34.next();
                    var $var = new (sk$Tuple9)(t$19, t$21, t$23, t$25, t$27, t$29, t$31, t$33, t$35);
                    var val8;
                    var val7;
                    var val6;
                    var val5;
                    var _;
                    var val4;
                    var val3;
                    var val2;
                    var val1;
                    var val0;
                    {
                      jumpBlockOuterjumpLab$bg15170:{
                        jumpLab$bg15170:{
                          jumpLab$bg15169:{
                            jumpLab$bg15171:{
                              jumpLab$bg15172:{
                                jumpLab$bg15173:{
                                  jumpLab$bg15174:{
                                    jumpLab$bg15175:{
                                      jumpLab$bg15176:{
                                        jumpLab$bg15177:{
                                          jumpLab$bg15178:{
                                            jumpLab$bg15179:{
                                              switch ($var.__type_switch_id) {
                                                case 399:
                                                  break jumpLab$bg15179;
                                                
                                                default:
                                                  skip.throwException(sk, new Error('Unmatched Branch'));

                                              }
                                            }
                                            switch ($var.i0.__type_switch_id) {
                                              case 205:
                                                break jumpLab$bg15178;
                                              
                                              default:
                                                _ = $var;
                                                break jumpLab$bg15170;

                                            }
                                          }
                                          switch ($var.i1.__type_switch_id) {
                                            case 205:
                                              break jumpLab$bg15177;
                                            
                                            default:
                                              _ = $var;
                                              break jumpLab$bg15170;

                                          }
                                        }
                                        switch ($var.i2.__type_switch_id) {
                                          case 205:
                                            break jumpLab$bg15176;
                                          
                                          default:
                                            _ = $var;
                                            break jumpLab$bg15170;

                                        }
                                      }
                                      switch ($var.i3.__type_switch_id) {
                                        case 205:
                                          break jumpLab$bg15175;
                                        
                                        default:
                                          _ = $var;
                                          break jumpLab$bg15170;

                                      }
                                    }
                                    switch ($var.i4.__type_switch_id) {
                                      case 205:
                                        break jumpLab$bg15174;
                                      
                                      default:
                                        _ = $var;
                                        break jumpLab$bg15170;

                                    }
                                  }
                                  switch ($var.i5.__type_switch_id) {
                                    case 205:
                                      break jumpLab$bg15173;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg15170;

                                  }
                                }
                                switch ($var.i6.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg15172;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg15170;

                                }
                              }
                              switch ($var.i7.__type_switch_id) {
                                case 205:
                                  break jumpLab$bg15171;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg15170;

                              }
                            }
                            switch ($var.i8.__type_switch_id) {
                              case 205:
                                val0 = $var.i0.value;
                                val1 = $var.i1.value;
                                val2 = $var.i2.value;
                                val3 = $var.i3.value;
                                val4 = $var.i4.value;
                                val5 = $var.i5.value;
                                val6 = $var.i6.value;
                                val7 = $var.i7.value;
                                val8 = $var.i8.value;
                                break jumpLab$bg15169;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg15170;

                            }
                          }
                          {
                            var t$36 = val0;
                            var t$37 = val1;
                            var t$38 = val2;
                            var t$39 = val3;
                            var t$40 = val4;
                            var t$41 = val5;
                            var t$42 = val6;
                            var t$43 = val7;
                            var t$44 = val8;
                            yield new sk$Some(new (sk$Tuple9)(t$36, t$37, t$38, t$39, t$40, t$41, t$42, t$43, t$44));
                          }
                          break jumpBlockOuterjumpLab$bg15170;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg15137;
                        }
                      }
                    }
                  }
                }
                {}
                break jumpBlockOutercontinue$bg15138;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg15137;
      }
    }
    return undefined;
  });
};

sk$Sequence$dtZip9Sequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Sequence$dtZip9Sequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Sequence$dtZip9Sequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Sequence$dtZip9Sequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Sequence$dtZip9Sequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Sequence$dtZip9Sequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Sequence$dtZip9Sequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Sequence$dtZip9Sequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Sequence$dtZip9Sequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Sequence$dtZip9Sequence.prototype.__bases = [
  sk$Sequence$dtZip9Sequence,
  sk$Sequence
];

var sk$Serialization$dtDefaultKeyedSequenceReader = sk.Serialization$dtDefaultKeyedSequenceReader = function Serialization$dtDefaultKeyedSequenceReader() {};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__constructor = sk$Serialization$dtDefaultKeyedSequenceReader;

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__classname = 'Serialization.DefaultKeyedSequenceReader';

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.$frozen = undefined;

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultKeyedSequenceReader)();
};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp348 = __cache.get(this);
  if (_tmp348 === undefined)
    {
      var _tmp348 = this.__copy();
      _tmp348.$frozen = true;
      __cache.set(this, _tmp348);
    }
  return _tmp348;
};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.readItem = function() {
  var t$ = new sk$String(('readItem()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.sizeHint = function() {
  var t$ = new sk$String(('sizeHint()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultKeyedSequenceReader.prototype.__bases = [
  sk$Serialization$dtDefaultKeyedSequenceReader,
  sk$Serialization$dtKeyedSequenceReader
];

var sk$Serialization$dtDefaultKeyedSequenceWriter = sk.Serialization$dtDefaultKeyedSequenceWriter = function Serialization$dtDefaultKeyedSequenceWriter() {};

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__constructor = sk$Serialization$dtDefaultKeyedSequenceWriter;

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__classname = 'Serialization.DefaultKeyedSequenceWriter';

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.$frozen = undefined;

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultKeyedSequenceWriter)();
};

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp349 = __cache.get(this);
  if (_tmp349 === undefined)
    {
      var _tmp349 = this.__copy();
      _tmp349.$frozen = true;
      __cache.set(this, _tmp349);
    }
  return _tmp349;
};

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.writeItem = function(_key, _value) {
  var t$ = new sk$String(('writeItem()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultKeyedSequenceWriter.prototype.__bases = [
  sk$Serialization$dtDefaultKeyedSequenceWriter,
  sk$Serialization$dtKeyedSequenceWriter
];

var sk$Serialization$dtDefaultReader = sk.Serialization$dtDefaultReader = function Serialization$dtDefaultReader() {};

sk$Serialization$dtDefaultReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultReader.prototype.__constructor = sk$Serialization$dtDefaultReader;

sk$Serialization$dtDefaultReader.prototype.__classname = 'Serialization.DefaultReader';

sk$Serialization$dtDefaultReader.prototype.$frozen = undefined;

sk$Serialization$dtDefaultReader.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultReader.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultReader)();
};

sk$Serialization$dtDefaultReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp350 = __cache.get(this);
  if (_tmp350 === undefined)
    {
      var _tmp350 = this.__copy();
      _tmp350.$frozen = true;
      __cache.set(this, _tmp350);
    }
  return _tmp350;
};

sk$Serialization$dtDefaultReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultReader.prototype.readBool = function() {
  var t$ = new sk$String(('readBool()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readDynamic = function(_visitor) {
  var t$ = new sk$String(('readDynamic()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readFloat = function() {
  var t$ = new sk$String(('readFloat()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readInt = function() {
  var t$ = new sk$String(('readInt()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readKeyedSequence = function(_keySerializer, _valueSerializer) {
  var t$ = new sk$String(('readKeyedSequence()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readOption = function(_serializer) {
  var t$ = new sk$String(('readOption()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readRecord = function(_fieldNames) {
  var t$ = new sk$String(('readRecord()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readSequence = function(_serializer) {
  var t$ = new sk$String(('readSequence()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readString = function() {
  var t$ = new sk$String(('readString()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readTuple = function(_size) {
  var t$ = new sk$String(('readTuple()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readType = function() {
  var t$ = new sk$String(('readType()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readVariant = function() {
  var t$ = new sk$String(('readVariant()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.readVoid = function() {
  var t$ = new sk$String(('readVoid()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultReader.prototype.__bases = [
  sk$Serialization$dtDefaultReader,
  sk$Serialization$dtReader
];

var sk$Serialization$dtDefaultRecordReader = sk.Serialization$dtDefaultRecordReader = function Serialization$dtDefaultRecordReader() {};

sk$Serialization$dtDefaultRecordReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultRecordReader.prototype.__constructor = sk$Serialization$dtDefaultRecordReader;

sk$Serialization$dtDefaultRecordReader.prototype.__classname = 'Serialization.DefaultRecordReader';

sk$Serialization$dtDefaultRecordReader.prototype.$frozen = undefined;

sk$Serialization$dtDefaultRecordReader.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultRecordReader.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultRecordReader)();
};

sk$Serialization$dtDefaultRecordReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp351 = __cache.get(this);
  if (_tmp351 === undefined)
    {
      var _tmp351 = this.__copy();
      _tmp351.$frozen = true;
      __cache.set(this, _tmp351);
    }
  return _tmp351;
};

sk$Serialization$dtDefaultRecordReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultRecordReader.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultRecordReader.prototype.readKey = function() {
  var t$ = new sk$String(('readKey()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultRecordReader.prototype.readValue = function(_serializer) {
  var t$ = new sk$String(('readValue()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultRecordReader.prototype.__bases = [
  sk$Serialization$dtDefaultRecordReader,
  sk$Serialization$dtRecordReader
];

var sk$Serialization$dtDefaultRecordWriter = sk.Serialization$dtDefaultRecordWriter = function Serialization$dtDefaultRecordWriter() {};

sk$Serialization$dtDefaultRecordWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultRecordWriter.prototype.__constructor = sk$Serialization$dtDefaultRecordWriter;

sk$Serialization$dtDefaultRecordWriter.prototype.__classname = 'Serialization.DefaultRecordWriter';

sk$Serialization$dtDefaultRecordWriter.prototype.$frozen = undefined;

sk$Serialization$dtDefaultRecordWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultRecordWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultRecordWriter)();
};

sk$Serialization$dtDefaultRecordWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp352 = __cache.get(this);
  if (_tmp352 === undefined)
    {
      var _tmp352 = this.__copy();
      _tmp352.$frozen = true;
      __cache.set(this, _tmp352);
    }
  return _tmp352;
};

sk$Serialization$dtDefaultRecordWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultRecordWriter.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultRecordWriter.prototype.writeKey = function(_fieldName) {
  var t$ = new sk$String(('writeKey()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultRecordWriter.prototype.writeValue = function(_value, _serializer) {
  var t$ = new sk$String(('writeValue()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultRecordWriter.prototype.__bases = [
  sk$Serialization$dtDefaultRecordWriter,
  sk$Serialization$dtRecordWriter
];

var sk$Serialization$dtDefaultSequenceReader = sk.Serialization$dtDefaultSequenceReader = function Serialization$dtDefaultSequenceReader() {};

sk$Serialization$dtDefaultSequenceReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultSequenceReader.prototype.__constructor = sk$Serialization$dtDefaultSequenceReader;

sk$Serialization$dtDefaultSequenceReader.prototype.__classname = 'Serialization.DefaultSequenceReader';

sk$Serialization$dtDefaultSequenceReader.prototype.$frozen = undefined;

sk$Serialization$dtDefaultSequenceReader.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultSequenceReader.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultSequenceReader)();
};

sk$Serialization$dtDefaultSequenceReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp353 = __cache.get(this);
  if (_tmp353 === undefined)
    {
      var _tmp353 = this.__copy();
      _tmp353.$frozen = true;
      __cache.set(this, _tmp353);
    }
  return _tmp353;
};

sk$Serialization$dtDefaultSequenceReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultSequenceReader.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultSequenceReader.prototype.readValue = function() {
  var t$ = new sk$String(('readValue()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultSequenceReader.prototype.sizeHint = function() {
  var t$ = new sk$String(('sizeHint()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultSequenceReader.prototype.__bases = [
  sk$Serialization$dtDefaultSequenceReader,
  sk$Serialization$dtSequenceReader
];

var sk$Serialization$dtDefaultSequenceWriter = sk.Serialization$dtDefaultSequenceWriter = function Serialization$dtDefaultSequenceWriter() {};

sk$Serialization$dtDefaultSequenceWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultSequenceWriter.prototype.__constructor = sk$Serialization$dtDefaultSequenceWriter;

sk$Serialization$dtDefaultSequenceWriter.prototype.__classname = 'Serialization.DefaultSequenceWriter';

sk$Serialization$dtDefaultSequenceWriter.prototype.$frozen = undefined;

sk$Serialization$dtDefaultSequenceWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultSequenceWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultSequenceWriter)();
};

sk$Serialization$dtDefaultSequenceWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp354 = __cache.get(this);
  if (_tmp354 === undefined)
    {
      var _tmp354 = this.__copy();
      _tmp354.$frozen = true;
      __cache.set(this, _tmp354);
    }
  return _tmp354;
};

sk$Serialization$dtDefaultSequenceWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultSequenceWriter.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultSequenceWriter.prototype.writeValue = function(_value) {
  var t$ = new sk$String(('writeValue()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultSequenceWriter.prototype.__bases = [
  sk$Serialization$dtDefaultSequenceWriter,
  sk$Serialization$dtSequenceWriter
];

var sk$Serialization$dtDefaultTupleReader = sk.Serialization$dtDefaultTupleReader = function Serialization$dtDefaultTupleReader() {};

sk$Serialization$dtDefaultTupleReader.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultTupleReader.prototype.__constructor = sk$Serialization$dtDefaultTupleReader;

sk$Serialization$dtDefaultTupleReader.prototype.__classname = 'Serialization.DefaultTupleReader';

sk$Serialization$dtDefaultTupleReader.prototype.$frozen = undefined;

sk$Serialization$dtDefaultTupleReader.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultTupleReader.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultTupleReader)();
};

sk$Serialization$dtDefaultTupleReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp355 = __cache.get(this);
  if (_tmp355 === undefined)
    {
      var _tmp355 = this.__copy();
      _tmp355.$frozen = true;
      __cache.set(this, _tmp355);
    }
  return _tmp355;
};

sk$Serialization$dtDefaultTupleReader.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultTupleReader.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultTupleReader.prototype.readValue = function(_serializer) {
  var t$ = new sk$String(('readValue()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultTupleReader.prototype.__bases = [
  sk$Serialization$dtDefaultTupleReader,
  sk$Serialization$dtTupleReader
];

var sk$Serialization$dtDefaultTupleWriter = sk.Serialization$dtDefaultTupleWriter = function Serialization$dtDefaultTupleWriter() {};

sk$Serialization$dtDefaultTupleWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultTupleWriter.prototype.__constructor = sk$Serialization$dtDefaultTupleWriter;

sk$Serialization$dtDefaultTupleWriter.prototype.__classname = 'Serialization.DefaultTupleWriter';

sk$Serialization$dtDefaultTupleWriter.prototype.$frozen = undefined;

sk$Serialization$dtDefaultTupleWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultTupleWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultTupleWriter)();
};

sk$Serialization$dtDefaultTupleWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp356 = __cache.get(this);
  if (_tmp356 === undefined)
    {
      var _tmp356 = this.__copy();
      _tmp356.$frozen = true;
      __cache.set(this, _tmp356);
    }
  return _tmp356;
};

sk$Serialization$dtDefaultTupleWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultTupleWriter.prototype.end = function() {
  var t$ = new sk$String(('end()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultTupleWriter.prototype.writeValue = function(_value, _serializer) {
  var t$ = new sk$String(('writeValue()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotImplementedError)(t$1));
};

sk$Serialization$dtDefaultTupleWriter.prototype.__bases = [
  sk$Serialization$dtDefaultTupleWriter,
  sk$Serialization$dtTupleWriter
];

var sk$Serialization$dtDefaultWriter = sk.Serialization$dtDefaultWriter = function Serialization$dtDefaultWriter() {};

sk$Serialization$dtDefaultWriter.prototype = Object.create(Object.prototype);

sk$Serialization$dtDefaultWriter.prototype.__constructor = sk$Serialization$dtDefaultWriter;

sk$Serialization$dtDefaultWriter.prototype.__classname = 'Serialization.DefaultWriter';

sk$Serialization$dtDefaultWriter.prototype.$frozen = undefined;

sk$Serialization$dtDefaultWriter.prototype.__type_switch_id = -1;

sk$Serialization$dtDefaultWriter.prototype.__copy = function() {
  return new (sk$Serialization$dtDefaultWriter)();
};

sk$Serialization$dtDefaultWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp357 = __cache.get(this);
  if (_tmp357 === undefined)
    {
      var _tmp357 = this.__copy();
      _tmp357.$frozen = true;
      __cache.set(this, _tmp357);
    }
  return _tmp357;
};

sk$Serialization$dtDefaultWriter.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtDefaultWriter.prototype.writeBool = function(_value) {
  var t$ = new sk$String(('writeBool()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeFloat = function(_value) {
  var t$ = new sk$String(('writeFloat()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeInt = function(_value) {
  var t$ = new sk$String(('writeInt()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeKeyedSequence = function(_keySerializer, _valueSerializer, _sizeHint) {
  if (_sizeHint === undefined)
    _sizeHint = ((() => 
    {
      return singleton$None;
    })());
  var t$ = new sk$String(('writeKeyedSequence()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeOption = function(_value, _serializer) {
  var t$ = new sk$String(('writeOption()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeRecord = function(_fieldNames) {
  var t$ = new sk$String(('writeRecord()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeSequence = function(_serializer, _sizeHint) {
  if (_sizeHint === undefined)
    _sizeHint = ((() => 
    {
      return singleton$None;
    })());
  var t$ = new sk$String(('writeSequence()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeString = function(_value) {
  var t$ = new sk$String(('writeString()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeTuple = function(_size) {
  var t$ = new sk$String(('writeTuple()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeType = function(_name) {
  var t$ = new sk$String(('writeType()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeVariant = function(_childName, _value, _serializer) {
  var t$ = new sk$String(('writeVariant()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.writeVoid = function() {
  var t$ = new sk$String(('writeVoid()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$Serialization$dtDefaultWriter.prototype.__bases = [
  sk$Serialization$dtDefaultWriter,
  sk$Serialization$dtWriter
];

var sk$Serialization$dtSerializationError = sk.Serialization$dtSerializationError = function Serialization$dtSerializationError() {};

sk$Serialization$dtSerializationError.prototype = Object.create(Object.prototype);

sk$Serialization$dtSerializationError.prototype.__constructor = sk$Serialization$dtSerializationError;

sk$Serialization$dtSerializationError.prototype.__classname = 'Serialization.SerializationError';

sk$Serialization$dtSerializationError.prototype.$frozen = undefined;

sk$Serialization$dtSerializationError.prototype.__type_switch_id = -1;

sk$Serialization$dtSerializationError.prototype.__copy = function() {
  return new (sk$Serialization$dtSerializationError)();
};

sk$Serialization$dtSerializationError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp358 = __cache.get(this);
  if (_tmp358 === undefined)
    {
      var _tmp358 = this.__copy();
      _tmp358.$frozen = true;
      __cache.set(this, _tmp358);
    }
  return _tmp358;
};

sk$Serialization$dtSerializationError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtSerializationError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtSerializationError.prototype.__bases = [
  sk$Serialization$dtSerializationError,
  sk$Exception
];

var sk$Serialization$dtTestRecordMetaClass = sk.Serialization$dtTestRecordMetaClass = function Serialization$dtTestRecordMetaClass() {};

sk$Serialization$dtTestRecordMetaClass.prototype = Object.create(Object.prototype);

sk$Serialization$dtTestRecordMetaClass.prototype.__constructor = sk$Serialization$dtTestRecordMetaClass;

sk$Serialization$dtTestRecordMetaClass.prototype.__classname = 'Serialization.TestRecordMetaClass';

sk$Serialization$dtTestRecordMetaClass.prototype.$frozen = true;

sk$Serialization$dtTestRecordMetaClass.prototype.__type_switch_id = 183;

sk$Serialization$dtTestRecordMetaClass.prototype.__copy = function() {
  return new (sk$Serialization$dtTestRecordMetaClass)();
};

sk$Serialization$dtTestRecordMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp359 = __cache.get(this);
  if (_tmp359 === undefined)
    {
      var _tmp359 = this.__copy();
      _tmp359.$frozen = true;
      __cache.set(this, _tmp359);
    }
  return _tmp359;
};

sk$Serialization$dtTestRecordMetaClass.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtTestRecordMetaClass.prototype.description = function() {
  return new sk$String(('TestRecord')).toString();
};

sk$Serialization$dtTestRecordMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('str')),
    new sk$String(('int')),
    new sk$String(('opt'))
  ]));
  var str = singleton$None;
  var int = singleton$None;
  var opt = singleton$None;
  var $var = new (sk$Range)(new sk$Int(0.0, 0.0), new sk$Int(3.0, 0.0)).values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg15593:{
      break$bg15593:{
        dowhile_else$bg15592:{
          do
            {
              jumpBlockOuterdowhile_cond$bg15594:{
                dowhile_cond$bg15594:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg15627:{
                        jumpLab$bg15627:{
                          jumpLab$bg15626:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg15626;
                              
                              case 205:
                                _ = var2.value;
                                break jumpLab$bg15627;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg15594;
                          }
                        }
                        {
                          var t$2 = record;
                          var var3 = t$2.readKey();
                          var string;
                          {
                            jumpBlockOuterjumpLab$bg15622:{
                              jumpLab$bg15622:{
                                jumpLab$bg15621:{
                                  jumpLab$bg15620:{
                                    jumpLab$bg15619:{
                                      jumpLab$bg15618:{
                                        jumpLab$bg15623:{
                                          switch (var3.__type_switch_id) {
                                            case 204:
                                              break jumpLab$bg15621;
                                            
                                            case 205:
                                              break jumpLab$bg15623;
                                            
                                            default:
                                              skip.throwException(sk, new Error('Unmatched Branch'));

                                          }
                                        }
                                        {
                                          var _tmp360 = var3.value.__getSwitchValue();
                                          switch (_tmp360) {
                                            case 'str':
                                              break jumpLab$bg15618;
                                            
                                            case 'int':
                                              break jumpLab$bg15619;
                                            
                                            case 'opt':
                                              break jumpLab$bg15620;
                                            
                                            default:
                                              {
                                                string = var3.value;
                                                break jumpLab$bg15622;
                                              }

                                          }
                                        }
                                      }
                                      {
                                        var t$3 = record;
                                        var t$4 = t$3.readValue(sk$String.meta);
                                        str = new (sk$Some)(t$4);
                                      }
                                      break jumpBlockOuterjumpLab$bg15622;
                                    }
                                    {
                                      var t$5 = record;
                                      var t$6 = t$5.readValue(sk$Int.meta);
                                      int = new (sk$Some)(t$6);
                                    }
                                    break jumpBlockOuterjumpLab$bg15622;
                                  }
                                  {
                                    var t$7 = record;
                                    var t$8 = t$7.readValue(sk$Bool.meta);
                                    opt = new (sk$Some)(t$8);
                                  }
                                  break jumpBlockOuterjumpLab$bg15622;
                                }
                                {
                                  break_val = sk.__.$void;
                                  break break$bg15593;
                                }
                              }
                              {
                                var t$9 = new sk$String(('Unexpected field \'')).toString();
                                var t$10 = string;
                                var t$11 = t$10.toString();
                                var t$12 = new sk$String(('\'')).toString();
                                var t$13 = new sk$String(('')).join(new (sk$Array)([
                                  t$9,
                                  t$11,
                                  t$12
                                ]));
                                sk$invariant_violation(t$13);
                              }
                              break jumpBlockOuterjumpLab$bg15622;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg15627;
                      }
                    }
                    break dowhile_cond$bg15594;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg15592;
                break jumpBlockOuterdowhile_cond$bg15594;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg15593;
      }
      {}
      break jumpBlockOuterbreak$bg15593;
    }
  }
  var t$14 = record;
  t$14.end();
  var t$15 = str;
  var t$16 = t$15.fromSome(undefined);
  var t$17 = int;
  var t$18 = t$17.fromSome(undefined);
  var t$19 = opt;
  var t$20 = t$19.fromSome(undefined);
  return new (sk$Serialization$dtTestRecord)({
    int: t$18,
    opt: t$20,
    str: t$16
  });
};

sk$Serialization$dtTestRecordMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$Serialization$dtTestRecordMetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('str')),
    new sk$String(('int')),
    new sk$String(('opt'))
  ]));
  var t$1 = record;
  var t$2 = value;
  var t$3 = t$2.str;
  t$1.writeItem(new sk$String(('str')), t$3, sk$String.meta);
  var t$4 = record;
  var t$5 = value;
  var t$6 = t$5.int;
  t$4.writeItem(new sk$String(('int')), t$6, sk$Int.meta);
  var t$7 = record;
  var t$8 = value;
  var t$9 = t$8.opt;
  t$7.writeItem(new sk$String(('opt')), t$9, sk$Bool.meta);
  var t$10 = record;
  return t$10.end();
};

sk$Serialization$dtTestRecordMetaClass.prototype.__bases = [
  sk$Serialization$dtTestRecordMetaClass,
  sk$MetaClass
];

var sk$Set$dtKeysetIterator = sk.Set$dtKeysetIterator = function Set$dtKeysetIterator(array, pos, end) {
  this.array = array;
  this.pos = pos;
  this.end = end;
};

sk$Set$dtKeysetIterator.prototype = Object.create(Object.prototype);

sk$Set$dtKeysetIterator.prototype.__constructor = sk$Set$dtKeysetIterator;

sk$Set$dtKeysetIterator.prototype.__classname = 'Set.KeysetIterator';

sk$Set$dtKeysetIterator.prototype.$frozen = false;

sk$Set$dtKeysetIterator.prototype.__type_switch_id = 144;

sk$Set$dtKeysetIterator.prototype.__init = function(__named_parameters) {};

sk$Set$dtKeysetIterator.internalIterGetKey = function(array, i) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.KeysetIterator::internalIterGetKey')));
};

sk$Set$dtKeysetIterator.internalIterGetValue = function(array, i) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.KeysetIterator::internalIterGetValue')));
};

sk$Set$dtKeysetIterator.iterAdvance = function(array, i) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.KeysetIterator::iterAdvance')));
};

sk$Set$dtKeysetIterator.iterBegin = function(array) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.KeysetIterator::iterBegin')));
};

sk$Set$dtKeysetIterator.iterEnd = function(array) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.KeysetIterator::iterEnd')));
};

sk$Set$dtKeysetIterator.iterGetKey = function(array, i) {
  var t$ = this;
  var t$1 = array;
  var t$2 = i;
  var t$3 = t$.internalIterGetKey(t$1, t$2);
  return sk$HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue(t$3);
};

sk$Set$dtKeysetIterator.make = function(array) {
  var t$ = array;
  var t$1 = this;
  var t$2 = array;
  var t$3 = t$1.iterBegin(t$2);
  var t$4 = this;
  var t$5 = array;
  var t$6 = t$4.iterEnd(t$5);
  return new (sk$Set$dtKeysetIterator)(t$, t$3, t$6);
};

sk$Set$dtKeysetIterator.prototype.next = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.pos;
  var t$2 = this;
  var t$3 = t$2.end;
  if (t$1.$eq$eq(t$3).__value)
    return singleton$None;
  else
    {
      var t$4 = static1;
      var t$5 = this;
      var t$6 = t$5.array;
      var t$7 = this;
      var t$8 = t$7.pos;
      var k = t$4.iterGetKey(t$6, t$8);
      var $var = this;
      var t$9 = $var;
      var t$10 = static1;
      var t$11 = this;
      var t$12 = t$11.array;
      var t$13 = this;
      var t$14 = t$13.pos;
      var t$15 = t$9;
      t$15.pos = t$10.iterAdvance(t$12, t$14);
      var t$16 = k;
      return new (sk$Some)(t$16);
    }
};

sk$Set$dtKeysetIterator.prototype.__bases = [
  sk$Set$dtKeysetIterator,
  sk$Iterator
];

sk$Set$dtKeysetIterator = sk.Set$dtKeysetIterator = skip.initNativeClass(sk, 'Set.KeysetIterator', sk$Set$dtKeysetIterator);

var sk$SetMetaClass = sk.SetMetaClass = function SetMetaClass(itemClass) {
  this.itemClass = itemClass;
};

sk$SetMetaClass.prototype = Object.create(Object.prototype);

sk$SetMetaClass.prototype.__constructor = sk$SetMetaClass;

sk$SetMetaClass.prototype.__classname = 'SetMetaClass';

sk$SetMetaClass.prototype.$frozen = true;

sk$SetMetaClass.prototype.__type_switch_id = 184;

sk$SetMetaClass.prototype.__copy = function() {
  return new (sk$SetMetaClass)(this.itemClass);
};

sk$SetMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp361 = __cache.get(this);
  if (_tmp361 === undefined)
    {
      var _tmp361 = this.__copy();
      _tmp361.$frozen = true;
      __cache.set(this, _tmp361);
      _tmp361.itemClass = skip.deepFreeze(_tmp361.itemClass, __cache);
    }
  return _tmp361;
};

sk$SetMetaClass.prototype.__init = function(__named_parameters) {};

sk$SetMetaClass.prototype.description = function() {
  var t$ = new sk$String(('Set<')).toString();
  var t$1 = this;
  var t$2 = t$1.itemClass;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6
  ]));
};

sk$SetMetaClass.prototype.deserialize = function(reader) {
  var t$ = this;
  var itemClass = t$.itemClass;
  var t$1 = reader;
  var t$2 = itemClass;
  var t$3 = t$1.readSequence(t$2);
  var sequence = t$3;
  var t$4 = sequence;
  var t$5 = t$4.sizeHint();
  var sizeHint = t$5.$default(new sk$Int(0.0, 0.0));
  var t$6 = sizeHint;
  var set = sk$Set.mcreate(t$6);
  var break_val;
  {
    jumpBlockOuterbreak$bg16579:{
      break$bg16579:{
        do
          {
            jumpBlockOutercontinue$bg16580:{
              continue$bg16580:{
                {
                  var t$7 = sequence;
                  var $var = t$7.readValue();
                  var item;
                  {
                    jumpBlockOuterjumpLab$bg16590:{
                      jumpLab$bg16590:{
                        jumpLab$bg16589:{
                          switch ($var.__type_switch_id) {
                            case 205:
                              item = $var.value;
                              break jumpLab$bg16589;
                            
                            case 204:
                              break jumpLab$bg16590;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$8 = set;
                          var t$9 = item;
                          t$8.insert(t$9);
                        }
                        break jumpBlockOuterjumpLab$bg16590;
                      }
                      {
                        break_val = sk.__.$void;
                        break break$bg16579;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg16580;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg16579;
    }
  }
  var t$10 = sequence;
  t$10.end();
  var t$11 = set;
  return t$11;
};

sk$SetMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SetMetaClass.prototype.serialize = function(value, writer) {
  var t$ = this;
  var itemClass = t$.itemClass;
  var t$1 = writer;
  var t$2 = itemClass;
  var t$3 = value;
  var t$4 = t$3.size();
  var t$5 = new (sk$Some)(t$4);
  var sequence = t$1.writeSequence(t$2, t$5);
  var t$6 = value;
  var $var = t$6.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg16604:{
      break$bg16604:{
        dowhile_else$bg16603:{
          do
            {
              jumpBlockOuterdowhile_cond$bg16605:{
                dowhile_cond$bg16605:{
                  {
                    var t$7 = $var;
                    var var2 = t$7.next();
                    var item;
                    {
                      jumpBlockOuterjumpLab$bg16614:{
                        jumpLab$bg16614:{
                          jumpLab$bg16613:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg16613;
                              
                              case 205:
                                item = var2.value;
                                break jumpLab$bg16614;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg16605;
                          }
                        }
                        {
                          var t$8 = sequence;
                          var t$9 = item;
                          t$8.writeValue(t$9);
                        }
                        break jumpBlockOuterjumpLab$bg16614;
                      }
                    }
                    break dowhile_cond$bg16605;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg16603;
                break jumpBlockOuterdowhile_cond$bg16605;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg16604;
      }
      {}
      break jumpBlockOuterbreak$bg16604;
    }
  }
  var t$10 = sequence;
  return t$10.end();
};

sk$SetMetaClass.prototype.__bases = [
  sk$SetMetaClass,
  sk$MetaClass
];

var sk$SkipError$dtSkipErrorException = sk.SkipError$dtSkipErrorException = function SkipError$dtSkipErrorException(__named_parameters) {
  sk$Exception.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$SkipError$dtSkipErrorException.prototype = Object.create(Object.prototype);

sk$SkipError$dtSkipErrorException.prototype.__constructor = sk$SkipError$dtSkipErrorException;

sk$SkipError$dtSkipErrorException.prototype.__classname = 'SkipError.SkipErrorException';

sk$SkipError$dtSkipErrorException.prototype.$frozen = true;

sk$SkipError$dtSkipErrorException.prototype.__type_switch_id = 77;

sk$SkipError$dtSkipErrorException.prototype.__copy = function() {
  return new (sk$SkipError$dtSkipErrorException)(this);
};

sk$SkipError$dtSkipErrorException.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp362 = __cache.get(this);
  if (_tmp362 === undefined)
    {
      var _tmp362 = this.__copy();
      _tmp362.$frozen = true;
      __cache.set(this, _tmp362);
      _tmp362.errors = skip.deepFreeze(_tmp362.errors, __cache);
    }
  return _tmp362;
};

sk$SkipError$dtSkipErrorException.prototype.__init = function(__named_parameters) {
  this.errors = __named_parameters.errors;
};

sk$SkipError$dtSkipErrorException.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.errors;
  return t$1.join(new sk$String(('')));
};

sk$SkipError$dtSkipErrorException.prototype.__bases = [
  sk$SkipError$dtSkipErrorException,
  sk$Exception
];

var sk$SkipProject$dtProgramUnitArgument = sk.SkipProject$dtProgramUnitArgument = function SkipProject$dtProgramUnitArgument(__named_parameters) {
  sk$SkipProject$dtTargetArgument.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$SkipProject$dtProgramUnitArgument.prototype = Object.create(Object.prototype);

sk$SkipProject$dtProgramUnitArgument.prototype.__constructor = sk$SkipProject$dtProgramUnitArgument;

sk$SkipProject$dtProgramUnitArgument.prototype.__classname = 'SkipProject.ProgramUnitArgument';

sk$SkipProject$dtProgramUnitArgument.prototype.$frozen = true;

sk$SkipProject$dtProgramUnitArgument.prototype.__type_switch_id = 304;

sk$SkipProject$dtProgramUnitArgument.prototype.__copy = function() {
  return new (sk$SkipProject$dtProgramUnitArgument)(this);
};

sk$SkipProject$dtProgramUnitArgument.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp363 = __cache.get(this);
  if (_tmp363 === undefined)
    {
      var _tmp363 = this.__copy();
      _tmp363.$frozen = true;
      __cache.set(this, _tmp363);
      _tmp363.projectPath = skip.deepFreeze(_tmp363.projectPath, __cache);
      _tmp363.programUnit = skip.deepFreeze(_tmp363.programUnit, __cache);
    }
  return _tmp363;
};

sk$SkipProject$dtProgramUnitArgument.prototype.__init = function(__named_parameters) {
  this.projectPath = __named_parameters.projectPath;
  this.programUnit = __named_parameters.programUnit;
};

sk$SkipProject$dtProgramUnitArgument.create = function(projectPath, programUnit) {
  var t$ = projectPath;
  var t$1 = sk$Path$dtnormalize(t$);
  var t$2 = programUnit;
  return new (sk$SkipProject$dtProgramUnitArgument)({
    programUnit: t$2,
    projectPath: t$1
  });
};

sk$SkipProject$dtProgramUnitArgument.parse = function(argument) {
  var t$ = argument;
  if (sk$SkipProject$dtisTarget(t$).__value)
    {
      var t$1 = argument;
      var $var = sk$SkipProject$dttargetToProjectProgramUnit(t$1);
      var var1;
      var var2;
      {
        jumpBlockOuterjumpLab$bg16759:{
          jumpLab$bg16759:{
            switch ($var.__type_switch_id) {
              case 392:
                var1 = $var.i0;
                var2 = $var.i1;
                break jumpLab$bg16759;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var programUnitName = var2;
            var projectPath = var1;
            var t$2 = projectPath;
            var t$3 = programUnitName;
            var t$4 = sk$SkipProject$dtProgramUnitArgument.create(t$2, t$3);
            return new (sk$Some)(t$4);
          }
        }
      }
    }
  else
    {
      var t$5 = argument;
      if (sk$FileSystem$dtisDirectory(t$5).__value)
        {
          var t$6 = argument;
          var t$7 = sk$SkipProject$dtProgramUnitArgument.create(t$6, new sk$String(('')));
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = argument;
          if (sk$FileSystem$dtexists(t$8).__value)
            {
              var t$9 = argument;
              var t$10 = new (sk$SkipProject$dtSourceFileArgument)({
                filename: t$9
              });
              return new (sk$Some)(t$10);
            }
          else
            {
              var t$11 = sk$SkipProject$dtprojectFilenameOfDirectory((sk$Path$dtcurrentDirectory()));
              if (sk$FileSystem$dtexists(t$11).__value)
                {
                  var t$12 = argument;
                  var t$13 = sk$SkipProject$dtProgramUnitArgument.create((sk$Path$dtcurrentDirectory()), t$12);
                  return new (sk$Some)(t$13);
                }
              else
                return singleton$None;
            }
        }
    }
};

sk$SkipProject$dtProgramUnitArgument.prototype.__bases = [
  sk$SkipProject$dtProgramUnitArgument,
  sk$SkipProject$dtTargetArgument
];

var sk$SkipProject$dtSourceFileArgument = sk.SkipProject$dtSourceFileArgument = function SkipProject$dtSourceFileArgument(__named_parameters) {
  sk$SkipProject$dtTargetArgument.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$SkipProject$dtSourceFileArgument.prototype = Object.create(Object.prototype);

sk$SkipProject$dtSourceFileArgument.prototype.__constructor = sk$SkipProject$dtSourceFileArgument;

sk$SkipProject$dtSourceFileArgument.prototype.__classname = 'SkipProject.SourceFileArgument';

sk$SkipProject$dtSourceFileArgument.prototype.$frozen = true;

sk$SkipProject$dtSourceFileArgument.prototype.__type_switch_id = 305;

sk$SkipProject$dtSourceFileArgument.prototype.__copy = function() {
  return new (sk$SkipProject$dtSourceFileArgument)(this);
};

sk$SkipProject$dtSourceFileArgument.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp364 = __cache.get(this);
  if (_tmp364 === undefined)
    {
      var _tmp364 = this.__copy();
      _tmp364.$frozen = true;
      __cache.set(this, _tmp364);
      _tmp364.filename = skip.deepFreeze(_tmp364.filename, __cache);
    }
  return _tmp364;
};

sk$SkipProject$dtSourceFileArgument.prototype.__init = function(__named_parameters) {
  this.filename = __named_parameters.filename;
};

sk$SkipProject$dtSourceFileArgument.parse = function(argument) {
  var t$ = argument;
  if (sk$SkipProject$dtisTarget(t$).__value)
    {
      var t$1 = argument;
      var $var = sk$SkipProject$dttargetToProjectProgramUnit(t$1);
      var var1;
      var var2;
      {
        jumpBlockOuterjumpLab$bg17929:{
          jumpLab$bg17929:{
            switch ($var.__type_switch_id) {
              case 392:
                var1 = $var.i0;
                var2 = $var.i1;
                break jumpLab$bg17929;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var programUnitName = var2;
            var projectPath = var1;
            var t$2 = projectPath;
            var t$3 = programUnitName;
            var t$4 = sk$SkipProject$dtProgramUnitArgument.create(t$2, t$3);
            return new (sk$Some)(t$4);
          }
        }
      }
    }
  else
    {
      var t$5 = argument;
      if (sk$FileSystem$dtisDirectory(t$5).__value)
        {
          var t$6 = argument;
          var t$7 = sk$SkipProject$dtProgramUnitArgument.create(t$6, new sk$String(('')));
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = argument;
          if (sk$FileSystem$dtexists(t$8).__value)
            {
              var t$9 = argument;
              var t$10 = new (sk$SkipProject$dtSourceFileArgument)({
                filename: t$9
              });
              return new (sk$Some)(t$10);
            }
          else
            {
              var t$11 = sk$SkipProject$dtprojectFilenameOfDirectory((sk$Path$dtcurrentDirectory()));
              if (sk$FileSystem$dtexists(t$11).__value)
                {
                  var t$12 = argument;
                  var t$13 = sk$SkipProject$dtProgramUnitArgument.create((sk$Path$dtcurrentDirectory()), t$12);
                  return new (sk$Some)(t$13);
                }
              else
                return singleton$None;
            }
        }
    }
};

sk$SkipProject$dtSourceFileArgument.prototype.__bases = [
  sk$SkipProject$dtSourceFileArgument,
  sk$SkipProject$dtTargetArgument
];

var sk$SkipProjectConfig$dtLibrary = sk.SkipProjectConfig$dtLibrary = function SkipProjectConfig$dtLibrary() {};

sk$SkipProjectConfig$dtLibrary.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtLibrary.prototype.__constructor = sk$SkipProjectConfig$dtLibrary;

sk$SkipProjectConfig$dtLibrary.prototype.__classname = 'SkipProjectConfig.Library';

sk$SkipProjectConfig$dtLibrary.prototype.$frozen = true;

sk$SkipProjectConfig$dtLibrary.prototype.__type_switch_id = 309;

sk$SkipProjectConfig$dtLibrary.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtLibrary)();
};

sk$SkipProjectConfig$dtLibrary.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp365 = __cache.get(this);
  if (_tmp365 === undefined)
    {
      var _tmp365 = this.__copy();
      _tmp365.$frozen = true;
      __cache.set(this, _tmp365);
    }
  return _tmp365;
};

sk$SkipProjectConfig$dtLibrary.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtLibrary.prototype.isLibrary = function() {
  return new sk$Bool((true));
};

sk$SkipProjectConfig$dtLibrary.prototype.isProgram = function() {
  return new sk$Bool((false));
};

sk$SkipProjectConfig$dtLibrary.prototype.__bases = [
  sk$SkipProjectConfig$dtLibrary,
  sk$SkipProjectConfig$dtProgramUnitKind
];

Object.defineProperty(sk$SkipProjectConfig$dtLibrary, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtProgramUnitKindMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtLibrary, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtParameterValueMetaClass = sk.SkipProjectConfig$dtParameterValueMetaClass = function SkipProjectConfig$dtParameterValueMetaClass() {};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__constructor = sk$SkipProjectConfig$dtParameterValueMetaClass;

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__classname = 'SkipProjectConfig.ParameterValueMetaClass';

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.$frozen = true;

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__type_switch_id = 185;

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtParameterValueMetaClass)();
};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp366 = __cache.get(this);
  if (_tmp366 === undefined)
    {
      var _tmp366 = this.__copy();
      _tmp366.$frozen = true;
      __cache.set(this, _tmp366);
    }
  return _tmp366;
};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.description = function() {
  return new sk$String(('ParameterValue')).toString();
};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('sources')),
    new sk$String(('excludes'))
  ]));
  var t$1 = sk$Vector.createFromItems(new (sk$Array)([]));
  var temp0 = t$1;
  var t$2 = sk$Vector.createFromItems(new (sk$Array)([]));
  var temp1 = t$2;
  var break_val;
  {
    jumpBlockOuterbreak$bg17958:{
      break$bg17958:{
        do
          {
            jumpBlockOutercontinue$bg17959:{
              continue$bg17959:{
                {
                  var t$3 = record;
                  var $var = t$3.readKey();
                  var string;
                  {
                    jumpBlockOuterjumpLab$bg17975:{
                      jumpLab$bg17975:{
                        jumpLab$bg17974:{
                          jumpLab$bg17973:{
                            jumpLab$bg17972:{
                              jumpLab$bg17976:{
                                switch ($var.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg17974;
                                  
                                  case 205:
                                    break jumpLab$bg17976;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var _tmp367 = $var.value.__getSwitchValue();
                                switch (_tmp367) {
                                  case 'sources':
                                    break jumpLab$bg17972;
                                  
                                  case 'excludes':
                                    break jumpLab$bg17973;
                                  
                                  default:
                                    {
                                      string = $var.value;
                                      break jumpLab$bg17975;
                                    }

                                }
                              }
                            }
                            {
                              var t$4 = record;
                              var t$5 = sk$Vector.meta(sk$String.meta);
                              temp0 = t$4.readValue(t$5);
                            }
                            break jumpBlockOuterjumpLab$bg17975;
                          }
                          {
                            var t$6 = record;
                            var t$7 = sk$Vector.meta(sk$String.meta);
                            temp1 = t$6.readValue(t$7);
                          }
                          break jumpBlockOuterjumpLab$bg17975;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg17958;
                        }
                      }
                      {
                        var t$8 = string;
                        skip.throwException(sk, new (sk$Serialization$dtFieldNotInClassError)(t$8, new (sk$Array)([
                          new sk$String(('excludes')),
                          new sk$String(('sources'))
                        ])));
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg17959;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg17958;
    }
  }
  var t$9 = record;
  t$9.end();
  var t$10 = temp0;
  var t$11 = temp1;
  return new (sk$SkipProjectConfig$dtParameterValue)({
    excludes: t$11,
    sources: t$10
  });
};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.serialize = function(_value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('sources')),
    new sk$String(('excludes'))
  ]));
  var t$1 = record;
  var t$2 = _value;
  var t$3 = t$2.sources;
  var t$4 = sk$Vector.meta(sk$String.meta);
  t$1.writeItem(new sk$String(('sources')), t$3, t$4);
  var t$5 = record;
  var t$6 = _value;
  var t$7 = t$6.excludes;
  var t$8 = sk$Vector.meta(sk$String.meta);
  t$5.writeItem(new sk$String(('excludes')), t$7, t$8);
  var t$9 = record;
  return t$9.end();
};

sk$SkipProjectConfig$dtParameterValueMetaClass.prototype.__bases = [
  sk$SkipProjectConfig$dtParameterValueMetaClass,
  sk$MetaClass
];

var sk$SkipProjectConfig$dtProgram = sk.SkipProjectConfig$dtProgram = function SkipProjectConfig$dtProgram() {};

sk$SkipProjectConfig$dtProgram.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgram.prototype.__constructor = sk$SkipProjectConfig$dtProgram;

sk$SkipProjectConfig$dtProgram.prototype.__classname = 'SkipProjectConfig.Program';

sk$SkipProjectConfig$dtProgram.prototype.$frozen = true;

sk$SkipProjectConfig$dtProgram.prototype.__type_switch_id = 310;

sk$SkipProjectConfig$dtProgram.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgram)();
};

sk$SkipProjectConfig$dtProgram.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp368 = __cache.get(this);
  if (_tmp368 === undefined)
    {
      var _tmp368 = this.__copy();
      _tmp368.$frozen = true;
      __cache.set(this, _tmp368);
    }
  return _tmp368;
};

sk$SkipProjectConfig$dtProgram.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtProgram.prototype.isLibrary = function() {
  return new sk$Bool((false));
};

sk$SkipProjectConfig$dtProgram.prototype.isProgram = function() {
  return new sk$Bool((true));
};

sk$SkipProjectConfig$dtProgram.prototype.__bases = [
  sk$SkipProjectConfig$dtProgram,
  sk$SkipProjectConfig$dtProgramUnitKind
];

Object.defineProperty(sk$SkipProjectConfig$dtProgram, 'meta', {
  configurable: true,
  enumerable: true,
  get: (() => 
  {
    var temp = ((() => 
    {
      return singleton$SkipProjectConfig$dtProgramUnitKindMetaClass;
    })());
    Object.defineProperty(sk$SkipProjectConfig$dtProgram, 'meta', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: temp
    });
    return temp;
  })
});

var sk$SkipProjectConfig$dtProgramUnitKindMetaClass = sk.SkipProjectConfig$dtProgramUnitKindMetaClass = function SkipProjectConfig$dtProgramUnitKindMetaClass() {};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__constructor = sk$SkipProjectConfig$dtProgramUnitKindMetaClass;

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__classname = 'SkipProjectConfig.ProgramUnitKindMetaClass';

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.$frozen = true;

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__type_switch_id = 186;

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgramUnitKindMetaClass)();
};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp369 = __cache.get(this);
  if (_tmp369 === undefined)
    {
      var _tmp369 = this.__copy();
      _tmp369.$frozen = true;
      __cache.set(this, _tmp369);
    }
  return _tmp369;
};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.description = function() {
  return new sk$String(('ProgramUnitKind')).toString();
};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var childName = t$.readType();
  {
    jumpBlockOuterjumpLab$bg18001:{
      jumpLab$bg18001:{
        jumpLab$bg18000:{
          jumpLab$bg17999:{
            {
              var _tmp370 = childName.__getSwitchValue();
              switch (_tmp370) {
                case 'Library':
                  break jumpLab$bg17999;
                
                case 'Program':
                  break jumpLab$bg18000;
                
                default:
                  break jumpLab$bg18001;

              }
            }
          }
          return singleton$SkipProjectConfig$dtLibrary;
        }
        return singleton$SkipProjectConfig$dtProgram;
      }
      {
        var t$1 = childName;
        skip.throwException(sk, new (sk$Serialization$dtNotChildClassError)(new sk$String(('ProgramUnitKind')), t$1));
      }
    }
  }
};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.serialize = function(_value, writer) {
  jumpBlockOuterjumpLab$bg18010:{
    jumpLab$bg18010:{
      jumpLab$bg18009:{
        switch (_value.__type_switch_id) {
          case 309:
            break jumpLab$bg18009;
          
          case 310:
            break jumpLab$bg18010;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var t$ = writer;
        return t$.writeType(new sk$String(('Library')));
      }
    }
    {
      var t$1 = writer;
      return t$1.writeType(new sk$String(('Program')));
    }
  }
};

sk$SkipProjectConfig$dtProgramUnitKindMetaClass.prototype.__bases = [
  sk$SkipProjectConfig$dtProgramUnitKindMetaClass,
  sk$MetaClass
];

var sk$SkipProjectConfig$dtProgramUnitMetaClass = sk.SkipProjectConfig$dtProgramUnitMetaClass = function SkipProjectConfig$dtProgramUnitMetaClass() {};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__constructor = sk$SkipProjectConfig$dtProgramUnitMetaClass;

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__classname = 'SkipProjectConfig.ProgramUnitMetaClass';

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.$frozen = true;

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__type_switch_id = 187;

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgramUnitMetaClass)();
};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp371 = __cache.get(this);
  if (_tmp371 === undefined)
    {
      var _tmp371 = this.__copy();
      _tmp371.$frozen = true;
      __cache.set(this, _tmp371);
    }
  return _tmp371;
};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.description = function() {
  return new sk$String(('ProgramUnit')).toString();
};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('sources')),
    new sk$String(('excludes')),
    new sk$String(('kind')),
    new sk$String(('references')),
    new sk$String(('parameters'))
  ]));
  var t$1 = sk$Vector.createFromItems(new (sk$Array)([]));
  var temp0 = t$1;
  var t$2 = sk$Vector.createFromItems(new (sk$Array)([]));
  var temp1 = t$2;
  var tempMaybe2 = singleton$None;
  var t$3 = sk$Vector.createFromItems(new (sk$Array)([]));
  var temp3 = t$3;
  var t$4 = sk$Map.createFromItems(new (sk$Array)([]));
  var temp4 = t$4;
  var break_val;
  {
    jumpBlockOuterbreak$bg18021:{
      break$bg18021:{
        do
          {
            jumpBlockOutercontinue$bg18022:{
              continue$bg18022:{
                {
                  var t$5 = record;
                  var $var = t$5.readKey();
                  var string;
                  {
                    jumpBlockOuterjumpLab$bg18052:{
                      jumpLab$bg18052:{
                        jumpLab$bg18051:{
                          jumpLab$bg18050:{
                            jumpLab$bg18049:{
                              jumpLab$bg18048:{
                                jumpLab$bg18047:{
                                  jumpLab$bg18046:{
                                    jumpLab$bg18053:{
                                      switch ($var.__type_switch_id) {
                                        case 204:
                                          break jumpLab$bg18051;
                                        
                                        case 205:
                                          break jumpLab$bg18053;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var _tmp372 = $var.value.__getSwitchValue();
                                      switch (_tmp372) {
                                        case 'sources':
                                          break jumpLab$bg18046;
                                        
                                        case 'excludes':
                                          break jumpLab$bg18047;
                                        
                                        case 'kind':
                                          break jumpLab$bg18048;
                                        
                                        case 'references':
                                          break jumpLab$bg18049;
                                        
                                        case 'parameters':
                                          break jumpLab$bg18050;
                                        
                                        default:
                                          {
                                            string = $var.value;
                                            break jumpLab$bg18052;
                                          }

                                      }
                                    }
                                  }
                                  {
                                    var t$6 = record;
                                    var t$7 = sk$Vector.meta(sk$String.meta);
                                    temp0 = t$6.readValue(t$7);
                                  }
                                  break jumpBlockOuterjumpLab$bg18052;
                                }
                                {
                                  var t$8 = record;
                                  var t$9 = sk$Vector.meta(sk$String.meta);
                                  temp1 = t$8.readValue(t$9);
                                }
                                break jumpBlockOuterjumpLab$bg18052;
                              }
                              {
                                var t$10 = record;
                                var t$11 = t$10.readValue(sk$SkipProjectConfig$dtProgramUnitKind.meta);
                                tempMaybe2 = new (sk$Some)(t$11);
                              }
                              break jumpBlockOuterjumpLab$bg18052;
                            }
                            {
                              var t$12 = record;
                              var t$13 = sk$Vector.meta(sk$SkipProjectConfig$dtProgramUnitReference.meta);
                              temp3 = t$12.readValue(t$13);
                            }
                            break jumpBlockOuterjumpLab$bg18052;
                          }
                          {
                            var t$14 = record;
                            var t$15 = sk$Map.meta(sk$String.meta, sk$SkipProjectConfig$dtParameterValue.meta);
                            var t$16 = sk$Map.meta(sk$String.meta, t$15);
                            temp4 = t$14.readValue(t$16);
                          }
                          break jumpBlockOuterjumpLab$bg18052;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg18021;
                        }
                      }
                      {
                        var t$17 = string;
                        skip.throwException(sk, new (sk$Serialization$dtFieldNotInClassError)(t$17, new (sk$Array)([
                          new sk$String(('excludes')),
                          new sk$String(('kind')),
                          new sk$String(('parameters')),
                          new sk$String(('references')),
                          new sk$String(('sources'))
                        ])));
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg18022;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg18021;
    }
  }
  var t$18 = record;
  t$18.end();
  var temp2;
  {
    jumpBlockOuterjumpLab$bg18056:{
      jumpLab$bg18056:{
        jumpLab$bg18055:{
          switch (tempMaybe2.__type_switch_id) {
            case 205:
              temp2 = tempMaybe2.value;
              break jumpLab$bg18055;
            
            case 204:
              break jumpLab$bg18056;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$19 = temp0;
          var t$20 = temp1;
          var t$21 = temp2;
          var t$22 = temp3;
          var t$23 = temp4;
          return new (sk$SkipProjectConfig$dtProgramUnit)({
            excludes: t$20,
            kind: t$21,
            parameters: t$23,
            references: t$22,
            sources: t$19
          });
        }
      }
      skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('ProgramUnit')), new sk$String(('sources'))));
    }
  }
};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.serialize = function(_value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('sources')),
    new sk$String(('excludes')),
    new sk$String(('kind')),
    new sk$String(('references')),
    new sk$String(('parameters'))
  ]));
  var t$1 = record;
  var t$2 = _value;
  var t$3 = t$2.sources;
  var t$4 = sk$Vector.meta(sk$String.meta);
  t$1.writeItem(new sk$String(('sources')), t$3, t$4);
  var t$5 = record;
  var t$6 = _value;
  var t$7 = t$6.excludes;
  var t$8 = sk$Vector.meta(sk$String.meta);
  t$5.writeItem(new sk$String(('excludes')), t$7, t$8);
  var t$9 = record;
  var t$10 = _value;
  var t$11 = t$10.kind;
  t$9.writeItem(new sk$String(('kind')), t$11, sk$SkipProjectConfig$dtProgramUnitKind.meta);
  var t$12 = record;
  var t$13 = _value;
  var t$14 = t$13.references;
  var t$15 = sk$Vector.meta(sk$SkipProjectConfig$dtProgramUnitReference.meta);
  t$12.writeItem(new sk$String(('references')), t$14, t$15);
  var t$16 = record;
  var t$17 = _value;
  var t$18 = t$17.parameters;
  var t$19 = sk$Map.meta(sk$String.meta, sk$SkipProjectConfig$dtParameterValue.meta);
  var t$20 = sk$Map.meta(sk$String.meta, t$19);
  t$16.writeItem(new sk$String(('parameters')), t$18, t$20);
  var t$21 = record;
  return t$21.end();
};

sk$SkipProjectConfig$dtProgramUnitMetaClass.prototype.__bases = [
  sk$SkipProjectConfig$dtProgramUnitMetaClass,
  sk$MetaClass
];

var sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass = sk.SkipProjectConfig$dtProgramUnitReferenceMetaClass = function SkipProjectConfig$dtProgramUnitReferenceMetaClass() {};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__constructor = sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass;

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__classname = 'SkipProjectConfig.ProgramUnitReferenceMetaClass';

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.$frozen = true;

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__type_switch_id = 188;

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass)();
};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp373 = __cache.get(this);
  if (_tmp373 === undefined)
    {
      var _tmp373 = this.__copy();
      _tmp373.$frozen = true;
      __cache.set(this, _tmp373);
    }
  return _tmp373;
};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.description = function() {
  return new sk$String(('ProgramUnitReference')).toString();
};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('path')),
    new sk$String(('name'))
  ]));
  var tempMaybe0 = singleton$None;
  var temp1 = singleton$None;
  var break_val;
  {
    jumpBlockOuterbreak$bg18088:{
      break$bg18088:{
        do
          {
            jumpBlockOutercontinue$bg18089:{
              continue$bg18089:{
                {
                  var t$1 = record;
                  var $var = t$1.readKey();
                  var string;
                  {
                    jumpBlockOuterjumpLab$bg18106:{
                      jumpLab$bg18106:{
                        jumpLab$bg18105:{
                          jumpLab$bg18104:{
                            jumpLab$bg18103:{
                              jumpLab$bg18107:{
                                switch ($var.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg18105;
                                  
                                  case 205:
                                    break jumpLab$bg18107;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var _tmp374 = $var.value.__getSwitchValue();
                                switch (_tmp374) {
                                  case 'path':
                                    break jumpLab$bg18103;
                                  
                                  case 'name':
                                    break jumpLab$bg18104;
                                  
                                  default:
                                    {
                                      string = $var.value;
                                      break jumpLab$bg18106;
                                    }

                                }
                              }
                            }
                            {
                              var t$2 = record;
                              var t$3 = t$2.readValue(sk$String.meta);
                              tempMaybe0 = new (sk$Some)(t$3);
                            }
                            break jumpBlockOuterjumpLab$bg18106;
                          }
                          {
                            var t$4 = record;
                            var t$5 = sk$Option.meta(sk$String.meta);
                            temp1 = t$4.readValue(t$5);
                          }
                          break jumpBlockOuterjumpLab$bg18106;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg18088;
                        }
                      }
                      {
                        var t$6 = string;
                        skip.throwException(sk, new (sk$Serialization$dtFieldNotInClassError)(t$6, new (sk$Array)([
                          new sk$String(('name')),
                          new sk$String(('path'))
                        ])));
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg18089;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg18088;
    }
  }
  var t$7 = record;
  t$7.end();
  var temp0;
  {
    jumpBlockOuterjumpLab$bg18110:{
      jumpLab$bg18110:{
        jumpLab$bg18109:{
          switch (tempMaybe0.__type_switch_id) {
            case 205:
              temp0 = tempMaybe0.value;
              break jumpLab$bg18109;
            
            case 204:
              break jumpLab$bg18110;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$8 = temp0;
          var t$9 = temp1;
          return new (sk$SkipProjectConfig$dtProgramUnitReference)({
            name: t$9,
            path: t$8
          });
        }
      }
      skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('ProgramUnitReference')), new sk$String(('path'))));
    }
  }
};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.serialize = function(_value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('path')),
    new sk$String(('name'))
  ]));
  var t$1 = record;
  var t$2 = _value;
  var t$3 = t$2.path;
  t$1.writeItem(new sk$String(('path')), t$3, sk$String.meta);
  var t$4 = record;
  var t$5 = _value;
  var t$6 = t$5.name;
  var t$7 = sk$Option.meta(sk$String.meta);
  t$4.writeItem(new sk$String(('name')), t$6, t$7);
  var t$8 = record;
  return t$8.end();
};

sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass.prototype.__bases = [
  sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass,
  sk$MetaClass
];

var sk$SkipProjectConfig$dtProjectMetaClass = sk.SkipProjectConfig$dtProjectMetaClass = function SkipProjectConfig$dtProjectMetaClass() {};

sk$SkipProjectConfig$dtProjectMetaClass.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__constructor = sk$SkipProjectConfig$dtProjectMetaClass;

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__classname = 'SkipProjectConfig.ProjectMetaClass';

sk$SkipProjectConfig$dtProjectMetaClass.prototype.$frozen = true;

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__type_switch_id = 189;

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtProjectMetaClass)();
};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp375 = __cache.get(this);
  if (_tmp375 === undefined)
    {
      var _tmp375 = this.__copy();
      _tmp375.$frozen = true;
      __cache.set(this, _tmp375);
    }
  return _tmp375;
};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.description = function() {
  return new sk$String(('Project')).toString();
};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('skipVersion')),
    new sk$String(('programUnits')),
    new sk$String(('default')),
    new sk$String(('variables'))
  ]));
  var tempMaybe0 = singleton$None;
  var t$1 = sk$Map.createFromItems(new (sk$Array)([]));
  var temp1 = t$1;
  var temp2 = singleton$None;
  var t$2 = sk$Map.createFromItems(new (sk$Array)([]));
  var temp3 = t$2;
  var break_val;
  {
    jumpBlockOuterbreak$bg18131:{
      break$bg18131:{
        do
          {
            jumpBlockOutercontinue$bg18132:{
              continue$bg18132:{
                {
                  var t$3 = record;
                  var $var = t$3.readKey();
                  var string;
                  {
                    jumpBlockOuterjumpLab$bg18157:{
                      jumpLab$bg18157:{
                        jumpLab$bg18156:{
                          jumpLab$bg18155:{
                            jumpLab$bg18154:{
                              jumpLab$bg18153:{
                                jumpLab$bg18152:{
                                  jumpLab$bg18158:{
                                    switch ($var.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg18156;
                                      
                                      case 205:
                                        break jumpLab$bg18158;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var _tmp376 = $var.value.__getSwitchValue();
                                    switch (_tmp376) {
                                      case 'skipVersion':
                                        break jumpLab$bg18152;
                                      
                                      case 'programUnits':
                                        break jumpLab$bg18153;
                                      
                                      case 'default':
                                        break jumpLab$bg18154;
                                      
                                      case 'variables':
                                        break jumpLab$bg18155;
                                      
                                      default:
                                        {
                                          string = $var.value;
                                          break jumpLab$bg18157;
                                        }

                                    }
                                  }
                                }
                                {
                                  var t$4 = record;
                                  var t$5 = t$4.readValue(sk$String.meta);
                                  tempMaybe0 = new (sk$Some)(t$5);
                                }
                                break jumpBlockOuterjumpLab$bg18157;
                              }
                              {
                                var t$6 = record;
                                var t$7 = sk$Map.meta(sk$String.meta, sk$SkipProjectConfig$dtProgramUnit.meta);
                                temp1 = t$6.readValue(t$7);
                              }
                              break jumpBlockOuterjumpLab$bg18157;
                            }
                            {
                              var t$8 = record;
                              var t$9 = sk$Option.meta(sk$String.meta);
                              temp2 = t$8.readValue(t$9);
                            }
                            break jumpBlockOuterjumpLab$bg18157;
                          }
                          {
                            var t$10 = record;
                            var t$11 = sk$Map.meta(sk$String.meta, sk$SkipProjectConfig$dtVariable.meta);
                            temp3 = t$10.readValue(t$11);
                          }
                          break jumpBlockOuterjumpLab$bg18157;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg18131;
                        }
                      }
                      {
                        var t$12 = string;
                        skip.throwException(sk, new (sk$Serialization$dtFieldNotInClassError)(t$12, new (sk$Array)([
                          new sk$String(('default')),
                          new sk$String(('programUnits')),
                          new sk$String(('skipVersion')),
                          new sk$String(('variables'))
                        ])));
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg18132;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg18131;
    }
  }
  var t$13 = record;
  t$13.end();
  var temp0;
  {
    jumpBlockOuterjumpLab$bg18161:{
      jumpLab$bg18161:{
        jumpLab$bg18160:{
          switch (tempMaybe0.__type_switch_id) {
            case 205:
              temp0 = tempMaybe0.value;
              break jumpLab$bg18160;
            
            case 204:
              break jumpLab$bg18161;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$14 = temp0;
          var t$15 = temp1;
          var t$16 = temp2;
          var t$17 = temp3;
          return new (sk$SkipProjectConfig$dtProject)({
            $default: t$16,
            programUnits: t$15,
            skipVersion: t$14,
            variables: t$17
          });
        }
      }
      skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('Project')), new sk$String(('skipVersion'))));
    }
  }
};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.serialize = function(_value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('skipVersion')),
    new sk$String(('programUnits')),
    new sk$String(('default')),
    new sk$String(('variables'))
  ]));
  var t$1 = record;
  var t$2 = _value;
  var t$3 = t$2.skipVersion;
  t$1.writeItem(new sk$String(('skipVersion')), t$3, sk$String.meta);
  var t$4 = record;
  var t$5 = _value;
  var t$6 = t$5.programUnits;
  var t$7 = sk$Map.meta(sk$String.meta, sk$SkipProjectConfig$dtProgramUnit.meta);
  t$4.writeItem(new sk$String(('programUnits')), t$6, t$7);
  var t$8 = record;
  var t$9 = _value;
  var t$10 = t$9.$default;
  var t$11 = sk$Option.meta(sk$String.meta);
  t$8.writeItem(new sk$String(('default')), t$10, t$11);
  var t$12 = record;
  var t$13 = _value;
  var t$14 = t$13.variables;
  var t$15 = sk$Map.meta(sk$String.meta, sk$SkipProjectConfig$dtVariable.meta);
  t$12.writeItem(new sk$String(('variables')), t$14, t$15);
  var t$16 = record;
  return t$16.end();
};

sk$SkipProjectConfig$dtProjectMetaClass.prototype.__bases = [
  sk$SkipProjectConfig$dtProjectMetaClass,
  sk$MetaClass
];

var sk$SkipProjectConfig$dtVariableMetaClass = sk.SkipProjectConfig$dtVariableMetaClass = function SkipProjectConfig$dtVariableMetaClass() {};

sk$SkipProjectConfig$dtVariableMetaClass.prototype = Object.create(Object.prototype);

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__constructor = sk$SkipProjectConfig$dtVariableMetaClass;

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__classname = 'SkipProjectConfig.VariableMetaClass';

sk$SkipProjectConfig$dtVariableMetaClass.prototype.$frozen = true;

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__type_switch_id = 190;

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__copy = function() {
  return new (sk$SkipProjectConfig$dtVariableMetaClass)();
};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp377 = __cache.get(this);
  if (_tmp377 === undefined)
    {
      var _tmp377 = this.__copy();
      _tmp377.$frozen = true;
      __cache.set(this, _tmp377);
    }
  return _tmp377;
};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__init = function(__named_parameters) {};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.description = function() {
  return new sk$String(('Variable')).toString();
};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var record = t$.readRecord(new (sk$Array)([
    new sk$String(('values')),
    new sk$String(('default'))
  ]));
  var t$1 = sk$Vector.createFromItems(new (sk$Array)([]));
  var temp0 = t$1;
  var tempMaybe1 = singleton$None;
  var break_val;
  {
    jumpBlockOuterbreak$bg18189:{
      break$bg18189:{
        do
          {
            jumpBlockOutercontinue$bg18190:{
              continue$bg18190:{
                {
                  var t$2 = record;
                  var $var = t$2.readKey();
                  var string;
                  {
                    jumpBlockOuterjumpLab$bg18207:{
                      jumpLab$bg18207:{
                        jumpLab$bg18206:{
                          jumpLab$bg18205:{
                            jumpLab$bg18204:{
                              jumpLab$bg18208:{
                                switch ($var.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg18206;
                                  
                                  case 205:
                                    break jumpLab$bg18208;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var _tmp378 = $var.value.__getSwitchValue();
                                switch (_tmp378) {
                                  case 'values':
                                    break jumpLab$bg18204;
                                  
                                  case 'default':
                                    break jumpLab$bg18205;
                                  
                                  default:
                                    {
                                      string = $var.value;
                                      break jumpLab$bg18207;
                                    }

                                }
                              }
                            }
                            {
                              var t$3 = record;
                              var t$4 = sk$Vector.meta(sk$String.meta);
                              temp0 = t$3.readValue(t$4);
                            }
                            break jumpBlockOuterjumpLab$bg18207;
                          }
                          {
                            var t$5 = record;
                            var t$6 = t$5.readValue(sk$String.meta);
                            tempMaybe1 = new (sk$Some)(t$6);
                          }
                          break jumpBlockOuterjumpLab$bg18207;
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg18189;
                        }
                      }
                      {
                        var t$7 = string;
                        skip.throwException(sk, new (sk$Serialization$dtFieldNotInClassError)(t$7, new (sk$Array)([
                          new sk$String(('default')),
                          new sk$String(('values'))
                        ])));
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg18190;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg18189;
    }
  }
  var t$8 = record;
  t$8.end();
  var temp1;
  {
    jumpBlockOuterjumpLab$bg18211:{
      jumpLab$bg18211:{
        jumpLab$bg18210:{
          switch (tempMaybe1.__type_switch_id) {
            case 205:
              temp1 = tempMaybe1.value;
              break jumpLab$bg18210;
            
            case 204:
              break jumpLab$bg18211;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$9 = temp0;
          var t$10 = temp1;
          return new (sk$SkipProjectConfig$dtVariable)({
            $default: t$10,
            values: t$9
          });
        }
      }
      skip.throwException(sk, new (sk$Serialization$dtRecordMissingFieldError)(new sk$String(('Variable')), new sk$String(('values'))));
    }
  }
};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.serialize = function(_value, writer) {
  var t$ = writer;
  var record = t$.writeRecord(new (sk$Array)([
    new sk$String(('values')),
    new sk$String(('default'))
  ]));
  var t$1 = record;
  var t$2 = _value;
  var t$3 = t$2.values;
  var t$4 = sk$Vector.meta(sk$String.meta);
  t$1.writeItem(new sk$String(('values')), t$3, t$4);
  var t$5 = record;
  var t$6 = _value;
  var t$7 = t$6.$default;
  t$5.writeItem(new sk$String(('default')), t$7, sk$String.meta);
  var t$8 = record;
  return t$8.end();
};

sk$SkipProjectConfig$dtVariableMetaClass.prototype.__bases = [
  sk$SkipProjectConfig$dtVariableMetaClass,
  sk$MetaClass
];

var sk$Some = sk.Some = function Some(value) {
  this.value = value;
};

sk$Some.prototype = Object.create(Object.prototype);

sk$Some.prototype.__constructor = sk$Some;

sk$Some.prototype.__classname = 'Some';

sk$Some.prototype.$frozen = true;

sk$Some.prototype.__type_switch_id = 205;

sk$Some.prototype.__copy = function() {
  return new (sk$Some)(this.value);
};

sk$Some.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp379 = __cache.get(this);
  if (_tmp379 === undefined)
    {
      var _tmp379 = this.__copy();
      _tmp379.$frozen = true;
      __cache.set(this, _tmp379);
      _tmp379.value = skip.deepFreeze(_tmp379.value, __cache);
    }
  return _tmp379;
};

sk$Some.prototype.__init = function(__named_parameters) {};

sk$Some.prototype.$eq$eq = function(other) {
  var t$ = this;
  var x = t$.value;
  var y;
  {
    jumpBlockOuterjumpLab$bg18231:{
      jumpLab$bg18231:{
        jumpLab$bg18230:{
          switch (other.__type_switch_id) {
            case 205:
              y = other.value;
              break jumpLab$bg18230;
            
            case 204:
              break jumpLab$bg18231;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = x;
          var t$2 = y;
          return t$1.$eq$eq(t$2);
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Some.prototype.compare = function(other) {
  var t$ = this;
  var x = t$.value;
  var y;
  {
    jumpBlockOuterjumpLab$bg18239:{
      jumpLab$bg18239:{
        jumpLab$bg18238:{
          switch (other.__type_switch_id) {
            case 205:
              y = other.value;
              break jumpLab$bg18238;
            
            case 204:
              break jumpLab$bg18239;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = x;
          var t$2 = y;
          return sk$compare(t$1, t$2);
        }
      }
      return singleton$GT;
    }
  }
};

sk$Some.prototype.$default = function(x) {
  var t$ = this;
  return t$.value;
};

sk$Some.prototype.each = function(f) {
  var t$ = this;
  var value = t$.value;
  var t$1 = f;
  var t$2 = value;
  return t$1(t$2);
};

sk$Some.prototype.eachUntracked = function(f) {
  var t$ = this;
  var value = t$.value;
  var t$1 = f;
  var t$2 = value;
  return t$1(t$2);
};

sk$Some.prototype.flatMap = function(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  return t$1(t$2);
};

sk$Some.prototype.fromSome = function(msg) {
  if (msg === undefined)
    msg = ((() => 
    {
      return new sk$String(('fromSome called on None'));
    })());
  var t$ = this;
  return t$.value;
};

sk$Some.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var option = this;
  var t$ = this;
  var x = t$.value;
  var t$1 = p;
  var t$2 = x;
  if ((yield t$1(t$2)).__value)
    return option;
  else
    return singleton$None;
});

sk$Some.prototype.genMap = skip.asyncToGenerator(function*(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  var t$3 = (yield t$1(t$2));
  return new (sk$Some)(t$3);
});

sk$Some.generator = function(generator) {
  var t$ = generator;
  return new (sk$QuickCheck$dtOptionGenerator)(t$);
};

sk$Some.prototype.getClassName = function() {
  return new sk$String(('Some'));
};

sk$Some.prototype.hash = function() {
  var t$ = this;
  var x = t$.value;
  var t$1 = x;
  var t$2 = t$1.hash();
  return t$2.$pl(new sk$Int(1.0, 0.0));
};

sk$Some.prototype.isNone = function() {
  return new sk$Bool((false));
};

sk$Some.prototype.isSome = function() {
  return new sk$Bool((true));
};

sk$Some.prototype.map = function(f) {
  var t$ = this;
  var x = t$.value;
  var t$1 = f;
  var t$2 = x;
  var t$3 = t$1(t$2);
  return new (sk$Some)(t$3);
};

sk$Some.prototype.maybe = function(nothing, mjust) {
  var t$ = this;
  var x = t$.value;
  var t$1 = mjust;
  var t$2 = x;
  return t$1(t$2);
};

sk$Some.meta = function(itemClass) {
  var t$ = itemClass;
  return new (sk$OptionMetaClass)(t$);
};

sk$Some.prototype.perturb = function(rng) {
  var t$ = this;
  var x = t$.value;
  var t$1 = rng;
  t$1.perturb(new sk$Int(1.0, 0.0));
  var t$2 = x;
  var t$3 = rng;
  return t$2.perturb(t$3);
};

sk$Some.prototype.shrink = function(firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (firstShrink === undefined)
      firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    var x = t$.value;
    yield new sk$Some(singleton$None);
    var t$1 = x;
    var t$2 = firstShrink;
    var t$3 = t$1.shrink(t$2);
    var $var = t$3.values();
    var var1 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg18299:{
        break$bg18299:{
          dowhile_else$bg18298:{
            do
              {
                jumpBlockOuterdowhile_cond$bg18300:{
                  dowhile_cond$bg18300:{
                    {
                      var t$4 = $var;
                      var var2 = t$4.next();
                      var s;
                      {
                        jumpBlockOuterjumpLab$bg18307:{
                          jumpLab$bg18307:{
                            jumpLab$bg18306:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg18306;
                                
                                case 205:
                                  s = var2.value;
                                  break jumpLab$bg18307;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg18300;
                            }
                          }
                          {
                            var t$5 = s;
                            yield new sk$Some(new (sk$Some)(t$5));
                          }
                          break jumpBlockOuterjumpLab$bg18307;
                        }
                      }
                      break dowhile_cond$bg18300;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg18298;
                  break jumpBlockOuterdowhile_cond$bg18300;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg18299;
        }
        {}
        break jumpBlockOuterbreak$bg18299;
      }
    }
    return undefined;
  });
};

sk$Some.prototype.test = function(p) {
  var t$ = this;
  var x = t$.value;
  var t$1 = p;
  var t$2 = x;
  return t$1(t$2);
};

sk$Some.prototype.toString = function() {
  var t$ = this;
  var x = t$.value;
  var t$1 = new sk$String(('Some(')).toString();
  var t$2 = x;
  var t$3 = t$2.toString();
  var t$4 = t$3.toString();
  var t$5 = new sk$String((')')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$1,
    t$4,
    t$5
  ]));
};

sk$Some.prototype.__bases = [
  sk$Some,
  sk$Option
];

var sk$SortedMap$dtExact = sk.SortedMap$dtExact = function SortedMap$dtExact(__named_parameters) {
  sk$SortedMap$dtLookup.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$SortedMap$dtExact.prototype = Object.create(Object.prototype);

sk$SortedMap$dtExact.prototype.__constructor = sk$SortedMap$dtExact;

sk$SortedMap$dtExact.prototype.__classname = 'SortedMap.Exact';

sk$SortedMap$dtExact.prototype.$frozen = true;

sk$SortedMap$dtExact.prototype.__type_switch_id = 316;

sk$SortedMap$dtExact.prototype.__copy = function() {
  return new (sk$SortedMap$dtExact)(this);
};

sk$SortedMap$dtExact.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp380 = __cache.get(this);
  if (_tmp380 === undefined)
    {
      var _tmp380 = this.__copy();
      _tmp380.$frozen = true;
      __cache.set(this, _tmp380);
      _tmp380.key = skip.deepFreeze(_tmp380.key, __cache);
      _tmp380.value = skip.deepFreeze(_tmp380.value, __cache);
    }
  return _tmp380;
};

sk$SortedMap$dtExact.prototype.__init = function(__named_parameters) {
  this.key = __named_parameters.key;
  this.value = __named_parameters.value;
};

sk$SortedMap$dtExact.prototype.map = function(f) {
  var t$ = this;
  var t$1 = t$.key;
  var t$2 = f;
  var t$3 = this;
  var t$4 = t$3.value;
  var t$5 = t$2(t$4);
  return new (sk$SortedMap$dtExact)({
    key: t$1,
    value: t$5
  });
};

sk$SortedMap$dtExact.prototype.__bases = [
  sk$SortedMap$dtExact,
  sk$SortedMap$dtLookup
];

var sk$SortedMap$dtInBetween = sk.SortedMap$dtInBetween = function SortedMap$dtInBetween(__named_parameters) {
  sk$SortedMap$dtLookup.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$SortedMap$dtInBetween.prototype = Object.create(Object.prototype);

sk$SortedMap$dtInBetween.prototype.__constructor = sk$SortedMap$dtInBetween;

sk$SortedMap$dtInBetween.prototype.__classname = 'SortedMap.InBetween';

sk$SortedMap$dtInBetween.prototype.$frozen = true;

sk$SortedMap$dtInBetween.prototype.__type_switch_id = 317;

sk$SortedMap$dtInBetween.prototype.__copy = function() {
  return new (sk$SortedMap$dtInBetween)(this);
};

sk$SortedMap$dtInBetween.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp381 = __cache.get(this);
  if (_tmp381 === undefined)
    {
      var _tmp381 = this.__copy();
      _tmp381.$frozen = true;
      __cache.set(this, _tmp381);
      _tmp381.less = skip.deepFreeze(_tmp381.less, __cache);
      _tmp381.greater = skip.deepFreeze(_tmp381.greater, __cache);
    }
  return _tmp381;
};

sk$SortedMap$dtInBetween.prototype.__init = function(__named_parameters) {
  this.less = __named_parameters.less;
  this.greater = __named_parameters.greater;
};

sk$SortedMap$dtInBetween.prototype.map = function(f) {
  var t$ = this;
  var t$1 = t$.less;
  var t$2 = t$1.map(((t) => 
  {
    var t$3 = t;
    var t$4 = t$3.i0;
    var t$5 = f;
    var t$6 = t;
    var t$7 = t$6.i1;
    var t$8 = t$5(t$7);
    return new (sk$Tuple2)(t$4, t$8);
  }));
  var t$9 = this;
  var t$10 = t$9.greater;
  var t$11 = t$10.map(((t1) => 
  {
    var t$12 = t1;
    var t$13 = t$12.i0;
    var t$14 = f;
    var t$15 = t1;
    var t$16 = t$15.i1;
    var t$17 = t$14(t$16);
    return new (sk$Tuple2)(t$13, t$17);
  }));
  return new (sk$SortedMap$dtInBetween)({
    greater: t$11,
    less: t$2
  });
};

sk$SortedMap$dtInBetween.prototype.__bases = [
  sk$SortedMap$dtInBetween,
  sk$SortedMap$dtLookup
];

var sk$SortedMap$dtNil = sk.SortedMap$dtNil = function SortedMap$dtNil() {};

sk$SortedMap$dtNil.prototype = Object.create(Object.prototype);

sk$SortedMap$dtNil.prototype.__constructor = sk$SortedMap$dtNil;

sk$SortedMap$dtNil.prototype.__classname = 'SortedMap.Nil';

sk$SortedMap$dtNil.prototype.$frozen = true;

sk$SortedMap$dtNil.prototype.__type_switch_id = 314;

sk$SortedMap$dtNil.prototype.__copy = function() {
  return new (sk$SortedMap$dtNil)();
};

sk$SortedMap$dtNil.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp382 = __cache.get(this);
  if (_tmp382 === undefined)
    {
      var _tmp382 = this.__copy();
      _tmp382.$frozen = true;
      __cache.set(this, _tmp382);
    }
  return _tmp382;
};

sk$SortedMap$dtNil.prototype.__init = function(__named_parameters) {};

sk$SortedMap$dtNil.prototype.addMaxBinding = function(k, v) {
  var static1 = this.__constructor;
  var t$ = static1;
  var new_static = t$;
  var t$1 = new_static;
  var t$2 = k;
  var t$3 = v;
  return t$1.node(t$2, t$3, singleton$SortedMap$dtNil, singleton$SortedMap$dtNil);
};

sk$SortedMap$dtNil.prototype.addMinBinding = function(k, v) {
  var t$ = k;
  var t$1 = v;
  return sk$SortedMap.node(t$, t$1, singleton$SortedMap$dtNil, singleton$SortedMap$dtNil);
};

sk$SortedMap$dtNil.balance = function(k, v, l, r) {
  var t$ = l;
  var hl = t$.height();
  var t$1 = r;
  var hr = t$1.height();
  var t$2 = hl;
  var t$3 = hr;
  var t$4 = t$3.$pl(new sk$Int(2.0, 0.0));
  if (t$2.$gt(t$4).__value)
    {
      var lr;
      var ll;
      var lv;
      var lk;
      {
        jumpBlockOuterjumpLab$bg19107:{
          jumpLab$bg19107:{
            jumpLab$bg19106:{
              switch (l.__type_switch_id) {
                case 314:
                  break jumpLab$bg19106;
                
                case 315:
                  lk = l.key;
                  ll = l.left;
                  lr = l.right;
                  lv = l.value;
                  break jumpLab$bg19107;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            return sk$invariant_violation(new sk$String(('SortedMap::balance: empty left tree')));
          }
          {
            var t$5 = ll;
            var t$6 = t$5.height();
            var t$7 = lr;
            var t$8 = t$7.height();
            if (t$6.$gt$eq(t$8).__value)
              {
                var t$9 = this;
                var t$10 = lk;
                var t$11 = lv;
                var t$12 = ll;
                var t$13 = this;
                var t$14 = k;
                var t$15 = v;
                var t$16 = lr;
                var t$17 = r;
                var t$18 = t$13.node(t$14, t$15, t$16, t$17);
                return t$9.node(t$10, t$11, t$12, t$18);
              }
            else
              {
                var lrv;
                var lrl;
                var lrr;
                var lrk;
                {
                  jumpBlockOuterjumpLab$bg19104:{
                    jumpLab$bg19104:{
                      jumpLab$bg19103:{
                        switch (lr.__type_switch_id) {
                          case 314:
                            break jumpLab$bg19103;
                          
                          case 315:
                            lrk = lr.key;
                            lrl = lr.left;
                            lrr = lr.right;
                            lrv = lr.value;
                            break jumpLab$bg19104;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      return sk$invariant_violation(new sk$String(('SortedMap::balance: empty l.right tree')));
                    }
                    {
                      var t$19 = this;
                      var t$20 = lrk;
                      var t$21 = lrv;
                      var t$22 = this;
                      var t$23 = lk;
                      var t$24 = lv;
                      var t$25 = ll;
                      var t$26 = lrl;
                      var t$27 = t$22.node(t$23, t$24, t$25, t$26);
                      var t$28 = this;
                      var t$29 = k;
                      var t$30 = v;
                      var t$31 = lrr;
                      var t$32 = r;
                      var t$33 = t$28.node(t$29, t$30, t$31, t$32);
                      return t$19.node(t$20, t$21, t$27, t$33);
                    }
                  }
                }
              }
          }
        }
      }
    }
  else
    {
      var t$34 = hr;
      var t$35 = hl;
      var t$36 = t$35.$pl(new sk$Int(2.0, 0.0));
      if (t$34.$gt(t$36).__value)
        {
          var rr;
          var rl;
          var rk;
          var rv;
          {
            jumpBlockOuterjumpLab$bg19113:{
              jumpLab$bg19113:{
                jumpLab$bg19112:{
                  switch (r.__type_switch_id) {
                    case 314:
                      break jumpLab$bg19112;
                    
                    case 315:
                      rk = r.key;
                      rl = r.left;
                      rr = r.right;
                      rv = r.value;
                      break jumpLab$bg19113;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                return sk$invariant_violation(new sk$String(('SortedMap::balance empty right tree')));
              }
              {
                var t$37 = rr;
                var t$38 = t$37.height();
                var t$39 = rl;
                var t$40 = t$39.height();
                if (t$38.$gt$eq(t$40).__value)
                  {
                    var t$41 = this;
                    var t$42 = rk;
                    var t$43 = rv;
                    var t$44 = this;
                    var t$45 = k;
                    var t$46 = v;
                    var t$47 = l;
                    var t$48 = rl;
                    var t$49 = t$44.node(t$45, t$46, t$47, t$48);
                    var t$50 = rr;
                    return t$41.node(t$42, t$43, t$49, t$50);
                  }
                else
                  {
                    var rlv;
                    var rlk;
                    var rlr;
                    var rll;
                    {
                      jumpBlockOuterjumpLab$bg19110:{
                        jumpLab$bg19110:{
                          jumpLab$bg19109:{
                            switch (rl.__type_switch_id) {
                              case 314:
                                break jumpLab$bg19109;
                              
                              case 315:
                                rlk = rl.key;
                                rll = rl.left;
                                rlr = rl.right;
                                rlv = rl.value;
                                break jumpLab$bg19110;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          return sk$invariant_violation(new sk$String(('SortedMap::balance empty r.left tree')));
                        }
                        {
                          var t$51 = this;
                          var t$52 = rlk;
                          var t$53 = rlv;
                          var t$54 = this;
                          var t$55 = k;
                          var t$56 = v;
                          var t$57 = l;
                          var t$58 = rll;
                          var t$59 = t$54.node(t$55, t$56, t$57, t$58);
                          var t$60 = this;
                          var t$61 = rk;
                          var t$62 = rv;
                          var t$63 = rlr;
                          var t$64 = rr;
                          var t$65 = t$60.node(t$61, t$62, t$63, t$64);
                          return t$51.node(t$52, t$53, t$59, t$65);
                        }
                      }
                    }
                  }
              }
            }
          }
        }
      else
        {
          var t$66 = this;
          var t$67 = k;
          var t$68 = v;
          var t$69 = l;
          var t$70 = r;
          return t$66.node(t$67, t$68, t$69, t$70);
        }
    }
};

sk$SortedMap$dtNil.prototype.checkInvariants = function() {
  return sk.__.$void;
};

sk$SortedMap$dtNil.compareLoop = function(iter1, iter2) {
  do
    {
      jumpBlockOuterloop_end$bg19138:{
        loop_end$bg19138:{
          {
            var t$ = iter1;
            var $var = t$.next();
            var kv1;
            {
              jumpBlockOuterjumpLab$bg19136:{
                jumpLab$bg19136:{
                  jumpLab$bg19135:{
                    switch ($var.__type_switch_id) {
                      case 204:
                        break jumpLab$bg19135;
                      
                      case 205:
                        kv1 = $var.value;
                        break jumpLab$bg19136;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$1 = iter2;
                    var t$2 = t$1.next();
                    if (t$2.isNone().__value)
                      return singleton$EQ;
                    else
                      return singleton$LT;
                  }
                }
                {
                  var t$3 = iter2;
                  var var1 = t$3.next();
                  var kv2;
                  {
                    jumpBlockOuterjumpLab$bg19132:{
                      jumpLab$bg19132:{
                        jumpLab$bg19131:{
                          switch (var1.__type_switch_id) {
                            case 204:
                              break jumpLab$bg19131;
                            
                            case 205:
                              kv2 = var1.value;
                              break jumpLab$bg19132;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        return singleton$GT;
                      }
                      {
                        var t$4 = kv1;
                        var t$5 = kv2;
                        var var2 = t$4.compare(t$5);
                        var c;
                        {
                          jumpBlockOuterjumpLab$bg19128:{
                            jumpLab$bg19128:{
                              jumpLab$bg19127:{
                                switch (var2.__type_switch_id) {
                                  case 206:
                                    break jumpLab$bg19127;
                                  
                                  default:
                                    c = var2;
                                    break jumpLab$bg19128;

                                }
                              }
                              {
                                var t$6 = this;
                                var t$7 = iter1;
                                var t$8 = iter2;
                                var t$9 = t$7;
                                var t$10 = t$8;
                                iter1 = t$9;
                                iter2 = t$10;
                                break loop_end$bg19138;
                              }
                            }
                            return c;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19138;
      }
    }
  while (true);
};

sk$SortedMap$dtNil.concat = function(l, r) {
  jumpBlockOuterjumpLab$bg19156:{
    jumpLab$bg19156:{
      jumpLab$bg19155:{
        switch (l.__type_switch_id) {
          case 314:
            break jumpLab$bg19155;
          
          case 315:
            break jumpLab$bg19156;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      return r;
    }
    {
      var t$ = r;
      var $var = t$.minimum();
      var p;
      {
        jumpBlockOuterjumpLab$bg19153:{
          jumpLab$bg19153:{
            jumpLab$bg19152:{
              switch ($var.__type_switch_id) {
                case 204:
                  break jumpLab$bg19152;
                
                case 205:
                  p = $var.value;
                  break jumpLab$bg19153;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            return l;
          }
          {
            var var1;
            var var2;
            {
              jumpBlockOuterjumpLab$bg19149:{
                jumpLab$bg19149:{
                  switch (p.__type_switch_id) {
                    case 392:
                      var1 = p.i0;
                      var2 = p.i1;
                      break jumpLab$bg19149;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var v = var2;
                  var k = var1;
                  var t$1 = this;
                  var t$2 = k;
                  var t$3 = v;
                  var t$4 = l;
                  var t$5 = r;
                  var t$6 = t$5.removeMin();
                  return t$1.balance(t$2, t$3, t$4, t$6);
                }
              }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNil.concatOrJoin = function(k, x, l, r) {
  var v;
  {
    jumpBlockOuterjumpLab$bg19168:{
      jumpLab$bg19168:{
        jumpLab$bg19167:{
          switch (x.__type_switch_id) {
            case 204:
              break jumpLab$bg19167;
            
            case 205:
              v = x.value;
              break jumpLab$bg19168;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = l;
          var t$2 = r;
          return t$.concat(t$1, t$2);
        }
      }
      {
        var t$3 = this;
        var t$4 = k;
        var t$5 = v;
        var t$6 = l;
        var t$7 = r;
        return t$3.mergeImpl(t$4, t$5, t$6, t$7);
      }
    }
  }
};

sk$SortedMap$dtNil.containsKeyImpl = function(map, k) {
  do
    {
      jumpBlockOuterloop_end$bg19187:{
        loop_end$bg19187:{
          {
            var right;
            var left;
            var key;
            {
              jumpBlockOuterjumpLab$bg19185:{
                jumpLab$bg19185:{
                  jumpLab$bg19184:{
                    switch (map.__type_switch_id) {
                      case 314:
                        break jumpLab$bg19184;
                      
                      case 315:
                        key = map.key;
                        left = map.left;
                        right = map.right;
                        break jumpLab$bg19185;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return new sk$Bool((false));
                }
                {
                  var t$ = k;
                  var t$1 = key;
                  var $var = sk$compare(t$, t$1);
                  {
                    jumpBlockOuterjumpLab$bg19182:{
                      jumpLab$bg19182:{
                        jumpLab$bg19181:{
                          jumpLab$bg19180:{
                            switch ($var.__type_switch_id) {
                              case 208:
                                break jumpLab$bg19180;
                              
                              case 206:
                                break jumpLab$bg19181;
                              
                              case 207:
                                break jumpLab$bg19182;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var t$2 = this;
                            var t$3 = left;
                            var t$4 = k;
                            var t$5 = t$3;
                            var t$6 = t$4;
                            map = t$5;
                            k = t$6;
                            break loop_end$bg19187;
                          }
                        }
                        return new sk$Bool((true));
                      }
                      {
                        var t$7 = this;
                        var t$8 = right;
                        var t$9 = k;
                        var t$10 = t$8;
                        var t$11 = t$9;
                        map = t$10;
                        k = t$11;
                        break loop_end$bg19187;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19187;
      }
    }
  while (true);
};

sk$SortedMap$dtNil.create = function() {
  return singleton$SortedMap$dtNil;
};

sk$SortedMap$dtNil.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m, p) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg19201:{
        jumpLab$bg19201:{
          switch (p.__type_switch_id) {
            case 392:
              $var = p.i0;
              var1 = p.i1;
              break jumpLab$bg19201;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$3 = m;
          var t$4 = k;
          var t$5 = v;
          return t$3.set(t$4, t$5);
        }
      }
    }
  }), t$2);
};

sk$SortedMap$dtNil.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m, p) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg19211:{
        jumpLab$bg19211:{
          switch (p.__type_switch_id) {
            case 392:
              $var = p.i0;
              var1 = p.i1;
              break jumpLab$bg19211;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$3 = m;
          var t$4 = k;
          var t$5 = v;
          return t$3.set(t$4, t$5);
        }
      }
    }
  }), t$2);
};

sk$SortedMap$dtNil.eqByLoop = function(iter1, iter2, eq) {
  do
    {
      jumpBlockOuterloop_end$bg19241:{
        loop_end$bg19241:{
          {
            var t$ = iter1;
            var t$1 = t$.next();
            var t$2 = iter2;
            var t$3 = t$2.next();
            var $var = new (sk$Tuple2)(t$1, t$3);
            var kv2;
            var kv1;
            {
              jumpBlockOuterjumpLab$bg19236:{
                jumpLab$bg19236:{
                  jumpLab$bg19235:{
                    jumpLab$bg19234:{
                      jumpLab$bg19237:{
                        jumpLab$bg19238:{
                          jumpLab$bg19239:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg19239;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 205:
                              break jumpLab$bg19237;
                            
                            case 204:
                              break jumpLab$bg19238;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 204:
                            break jumpLab$bg19235;
                          
                          default:
                            break jumpLab$bg19236;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 205:
                          kv1 = $var.i0.value;
                          kv2 = $var.i1.value;
                          break jumpLab$bg19234;
                        
                        default:
                          break jumpLab$bg19236;

                      }
                    }
                    {
                      var t$4 = kv1;
                      var t$5 = t$4.i0;
                      var t$6 = kv2;
                      var t$7 = t$6.i0;
                      var t$8;
                      if (t$5.$eq$eq(t$7).__value)
                        {
                          var t$9 = eq;
                          var t$10 = kv1;
                          var t$11 = t$10.i1;
                          var t$12 = kv2;
                          var t$13 = t$12.i1;
                          t$8 = t$9(t$11, t$13);
                        }
                      else
                        t$8 = new sk$Bool((false));
                      if (t$8.__value)
                        {
                          var t$14 = this;
                          var t$15 = iter1;
                          var t$16 = iter2;
                          var t$17 = eq;
                          var t$18 = t$15;
                          var t$19 = t$16;
                          var t$20 = t$17;
                          iter1 = t$18;
                          iter2 = t$19;
                          eq = t$20;
                          break loop_end$bg19241;
                        }
                      else
                        return new sk$Bool((false));
                    }
                  }
                  return new sk$Bool((true));
                }
                return new sk$Bool((false));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19241;
      }
    }
  while (true);
};

sk$SortedMap$dtNil.eqLoop = function(iter1, iter2) {
  do
    {
      jumpBlockOuterloop_end$bg19271:{
        loop_end$bg19271:{
          {
            var t$ = iter1;
            var t$1 = t$.next();
            var t$2 = iter2;
            var t$3 = t$2.next();
            var $var = new (sk$Tuple2)(t$1, t$3);
            var kv2;
            var kv1;
            {
              jumpBlockOuterjumpLab$bg19266:{
                jumpLab$bg19266:{
                  jumpLab$bg19265:{
                    jumpLab$bg19264:{
                      jumpLab$bg19267:{
                        jumpLab$bg19268:{
                          jumpLab$bg19269:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg19269;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 205:
                              break jumpLab$bg19267;
                            
                            case 204:
                              break jumpLab$bg19268;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 204:
                            break jumpLab$bg19265;
                          
                          default:
                            break jumpLab$bg19266;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 205:
                          kv1 = $var.i0.value;
                          kv2 = $var.i1.value;
                          break jumpLab$bg19264;
                        
                        default:
                          break jumpLab$bg19266;

                      }
                    }
                    {
                      var t$4 = kv1;
                      var t$5 = t$4.i0;
                      var t$6 = kv2;
                      var t$7 = t$6.i0;
                      var t$8;
                      if (t$5.$eq$eq(t$7).__value)
                        {
                          var t$9 = kv1;
                          var t$10 = t$9.i1;
                          var t$11 = kv2;
                          var t$12 = t$11.i1;
                          t$8 = t$10.$eq$eq(t$12);
                        }
                      else
                        t$8 = new sk$Bool((false));
                      if (t$8.__value)
                        {
                          var t$13 = this;
                          var t$14 = iter1;
                          var t$15 = iter2;
                          var t$16 = t$14;
                          var t$17 = t$15;
                          iter1 = t$16;
                          iter2 = t$17;
                          break loop_end$bg19271;
                        }
                      else
                        return new sk$Bool((false));
                    }
                  }
                  return new sk$Bool((true));
                }
                return new sk$Bool((false));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19271;
      }
    }
  while (true);
};

sk$SortedMap$dtNil.prototype.filter = function(f) {
  return this;
};

sk$SortedMap$dtNil.prototype.genFilter = skip.asyncToGenerator(function*(f) {
  return this;
});

sk$SortedMap$dtNil.prototype.genFilterWithKey = skip.asyncToGenerator(function*(f) {
  return this;
});

sk$SortedMap$dtNil.prototype.genMap = skip.asyncToGenerator(function*(f) {
  return singleton$SortedMap$dtNil;
});

sk$SortedMap$dtNil.prototype.getClassName = function() {
  return new sk$String(('SortedMap.Nil'));
};

sk$SortedMap$dtNil.prototype.getWithMiss = function(k) {
  return new (sk$SortedMap$dtInBetween)({
    greater: singleton$None,
    less: singleton$None
  });
};

sk$SortedMap$dtNil.prototype.height = function() {
  return new sk$Int(0.0, 0.0);
};

sk$SortedMap$dtNil.prototype.isEmpty = function() {
  return new sk$Bool((true));
};

sk$SortedMap$dtNil.prototype.map = function(f) {
  return singleton$SortedMap$dtNil;
};

sk$SortedMap$dtNil.prototype.mapAcc = function(f, init) {
  var t$ = init;
  return new (sk$Tuple2)(t$, singleton$SortedMap$dtNil);
};

sk$SortedMap$dtNil.prototype.maximum = function() {
  return singleton$None;
};

sk$SortedMap$dtNil.prototype.maybeGetItem = function(k) {
  return singleton$None;
};

sk$SortedMap$dtNil.prototype.merge = function(map2) {
  return map2;
};

sk$SortedMap$dtNil.mergeAll = function(maps) {
  var t$ = maps;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m1, m2) => 
  {
    var t$3 = m1;
    var t$4 = m2;
    return t$3.merge(t$4);
  }), t$2);
};

sk$SortedMap$dtNil.mergeImpl = function(k, v, l, r) {
  var t$ = l;
  var lh = t$.height();
  var t$1 = r;
  var rh = t$1.height();
  var ln;
  {
    jumpBlockOuterjumpLab$bg19350:{
      jumpLab$bg19350:{
        jumpLab$bg19349:{
          switch (l.__type_switch_id) {
            case 314:
              break jumpLab$bg19349;
            
            case 315:
              ln = l;
              break jumpLab$bg19350;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = r;
          var t$3 = k;
          var t$4 = v;
          return t$2.addMinBinding(t$3, t$4);
        }
      }
      {
        var rn;
        {
          jumpBlockOuterjumpLab$bg19347:{
            jumpLab$bg19347:{
              jumpLab$bg19346:{
                switch (r.__type_switch_id) {
                  case 314:
                    break jumpLab$bg19346;
                  
                  case 315:
                    rn = r;
                    break jumpLab$bg19347;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$5 = l;
                var t$6 = k;
                var t$7 = v;
                return t$5.addMaxBinding(t$6, t$7);
              }
            }
            {
              var t$8 = lh;
              var t$9 = rh;
              var t$10 = t$9.$pl(new sk$Int(2.0, 0.0));
              if (t$8.$gt(t$10).__value)
                {
                  var t$11 = this;
                  var t$12 = ln;
                  var t$13 = t$12.key;
                  var t$14 = ln;
                  var t$15 = t$14.value;
                  var t$16 = ln;
                  var t$17 = t$16.left;
                  var t$18 = this;
                  var t$19 = k;
                  var t$20 = v;
                  var t$21 = ln;
                  var t$22 = t$21.right;
                  var t$23 = r;
                  var t$24 = t$18.mergeImpl(t$19, t$20, t$22, t$23);
                  return t$11.balance(t$13, t$15, t$17, t$24);
                }
              else
                {
                  var t$25 = rh;
                  var t$26 = lh;
                  var t$27 = t$26.$pl(new sk$Int(2.0, 0.0));
                  if (t$25.$gt(t$27).__value)
                    {
                      var t$28 = this;
                      var t$29 = rn;
                      var t$30 = t$29.key;
                      var t$31 = rn;
                      var t$32 = t$31.value;
                      var t$33 = this;
                      var t$34 = k;
                      var t$35 = v;
                      var t$36 = l;
                      var t$37 = rn;
                      var t$38 = t$37.left;
                      var t$39 = t$33.mergeImpl(t$34, t$35, t$36, t$38);
                      var t$40 = rn;
                      var t$41 = t$40.right;
                      return t$28.balance(t$30, t$32, t$39, t$41);
                    }
                  else
                    {
                      var t$42 = this;
                      var t$43 = k;
                      var t$44 = v;
                      var t$45 = l;
                      var t$46 = r;
                      return t$42.node(t$43, t$44, t$45, t$46);
                    }
                }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNil.prototype.minimum = function() {
  return singleton$None;
};

sk$SortedMap$dtNil.node = function(k, v, l, r) {
  var t$ = l;
  var t$1 = t$.size();
  var t$2 = r;
  var t$3 = t$2.size();
  var t$4 = t$1.$pl(t$3);
  var t$5 = t$4.$pl(new sk$Int(1.0, 0.0));
  var t$6 = l;
  var t$7 = t$6.height();
  var t$8 = r;
  var t$9 = t$8.height();
  var t$10 = sk$max(t$7, t$9);
  var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
  var t$12 = k;
  var t$13 = v;
  var t$14 = l;
  var t$15 = r;
  return new (sk$SortedMap$dtNode)({
    h: t$11,
    key: t$12,
    left: t$14,
    n: t$5,
    right: t$15,
    value: t$13
  });
};

sk$SortedMap$dtNil.prototype.remove = function(key) {
  return this;
};

sk$SortedMap$dtNil.prototype.removeMin = function() {
  return sk$invariant_violation(new sk$String(('SortedMap.removeMin called on Nil')));
};

sk$SortedMap$dtNil.prototype.setWith = function(key, value, f) {
  var t$ = key;
  var t$1 = value;
  return sk$SortedMap.node(t$, t$1, singleton$SortedMap$dtNil, singleton$SortedMap$dtNil);
};

sk$SortedMap$dtNil.prototype.size = function() {
  return new sk$Int(0.0, 0.0);
};

sk$SortedMap$dtNil.prototype.split = function(k) {
  return new (sk$Tuple3)(singleton$SortedMap$dtNil, singleton$None, singleton$SortedMap$dtNil);
};

sk$SortedMap$dtNil.toStringRecursive = function(m, vec, offset) {
  var right;
  var left;
  var key;
  var value;
  {
    jumpBlockOuterjumpLab$bg19404:{
      jumpLab$bg19404:{
        jumpLab$bg19403:{
          switch (m.__type_switch_id) {
            case 314:
              break jumpLab$bg19403;
            
            case 315:
              key = m.key;
              left = m.left;
              right = m.right;
              value = m.value;
              break jumpLab$bg19404;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = new sk$String(('SortedMap::toStringRecursive(): Expected callers')).$pl(new sk$String(('to check size() > 0')));
          return sk$invariant_violation(t$);
        }
      }
      {
        var t$1 = left;
        var t$2 = t$1.isEmpty();
        if (t$2.$bg().__value)
          {
            var t$3 = left;
            var t$4 = vec;
            var t$5 = offset;
            sk$SortedMap.toStringRecursive(t$3, t$4, t$5);
          }
        else
          {}
        var t$6 = offset;
        var t$7 = left;
        var t$8 = t$7.size();
        var t$9 = t$6.$pl(t$8);
        var newOffset = t$9;
        var t$10 = vec;
        var t$11 = newOffset;
        var t$12 = key;
        var t$13 = t$12.toString();
        var t$14 = t$13.$pl(new sk$String((' => ')));
        var t$15 = value;
        var t$16 = t$14.$pl(t$15);
        t$10.set(t$11, t$16);
        var t$17 = right;
        var t$18 = t$17.isEmpty();
        if (t$18.$bg().__value)
          {
            var t$19 = right;
            var t$20 = vec;
            var t$21 = newOffset;
            var t$22 = t$21.$pl(new sk$Int(1.0, 0.0));
            sk$SortedMap.toStringRecursive(t$19, t$20, t$22);
          }
        else
          {}
        return sk.__.$void;
      }
    }
  }
};

sk$SortedMap$dtNil.prototype.__bases = [
  sk$SortedMap$dtNil,
  sk$SortedMap
];

var sk$SortedMap$dtNode = sk.SortedMap$dtNode = function SortedMap$dtNode(__named_parameters) {
  sk$SortedMap.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$SortedMap$dtNode.prototype = Object.create(Object.prototype);

sk$SortedMap$dtNode.prototype.__constructor = sk$SortedMap$dtNode;

sk$SortedMap$dtNode.prototype.__classname = 'SortedMap.Node';

sk$SortedMap$dtNode.prototype.$frozen = true;

sk$SortedMap$dtNode.prototype.__type_switch_id = 315;

sk$SortedMap$dtNode.prototype.__copy = function() {
  return new (sk$SortedMap$dtNode)(this);
};

sk$SortedMap$dtNode.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp383 = __cache.get(this);
  if (_tmp383 === undefined)
    {
      var _tmp383 = this.__copy();
      _tmp383.$frozen = true;
      __cache.set(this, _tmp383);
      _tmp383.n = skip.deepFreeze(_tmp383.n, __cache);
      _tmp383.h = skip.deepFreeze(_tmp383.h, __cache);
      _tmp383.key = skip.deepFreeze(_tmp383.key, __cache);
      _tmp383.value = skip.deepFreeze(_tmp383.value, __cache);
      _tmp383.left = skip.deepFreeze(_tmp383.left, __cache);
      _tmp383.right = skip.deepFreeze(_tmp383.right, __cache);
    }
  return _tmp383;
};

sk$SortedMap$dtNode.prototype.__init = function(__named_parameters) {
  this.n = __named_parameters.n;
  this.h = __named_parameters.h;
  this.key = __named_parameters.key;
  this.value = __named_parameters.value;
  this.left = __named_parameters.left;
  this.right = __named_parameters.right;
};

sk$SortedMap$dtNode.prototype.addMaxBinding = function(k, v) {
  var static1 = this.__constructor;
  var t$ = static1;
  var new_static = t$;
  var t$1 = new_static;
  var t$2 = this;
  var t$3 = t$2.key;
  var t$4 = this;
  var t$5 = t$4.value;
  var t$6 = this;
  var t$7 = t$6.left;
  var t$8 = this;
  var t$9 = t$8.right;
  var t$10 = k;
  var t$11 = v;
  var t$12 = t$9.addMaxBinding(t$10, t$11);
  return t$1.balance(t$3, t$5, t$7, t$12);
};

sk$SortedMap$dtNode.prototype.addMinBinding = function(k, v) {
  var t$ = this;
  var t$1 = t$.key;
  var t$2 = this;
  var t$3 = t$2.value;
  var t$4 = this;
  var t$5 = t$4.left;
  var t$6 = k;
  var t$7 = v;
  var t$8 = t$5.addMinBinding(t$6, t$7);
  var t$9 = this;
  var t$10 = t$9.right;
  return sk$SortedMap.balance(t$1, t$3, t$8, t$10);
};

sk$SortedMap$dtNode.balance = function(k, v, l, r) {
  var t$ = l;
  var hl = t$.height();
  var t$1 = r;
  var hr = t$1.height();
  var t$2 = hl;
  var t$3 = hr;
  var t$4 = t$3.$pl(new sk$Int(2.0, 0.0));
  if (t$2.$gt(t$4).__value)
    {
      var lr;
      var ll;
      var lv;
      var lk;
      {
        jumpBlockOuterjumpLab$bg19516:{
          jumpLab$bg19516:{
            jumpLab$bg19515:{
              switch (l.__type_switch_id) {
                case 314:
                  break jumpLab$bg19515;
                
                case 315:
                  lk = l.key;
                  ll = l.left;
                  lr = l.right;
                  lv = l.value;
                  break jumpLab$bg19516;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            return sk$invariant_violation(new sk$String(('SortedMap::balance: empty left tree')));
          }
          {
            var t$5 = ll;
            var t$6 = t$5.height();
            var t$7 = lr;
            var t$8 = t$7.height();
            if (t$6.$gt$eq(t$8).__value)
              {
                var t$9 = this;
                var t$10 = lk;
                var t$11 = lv;
                var t$12 = ll;
                var t$13 = this;
                var t$14 = k;
                var t$15 = v;
                var t$16 = lr;
                var t$17 = r;
                var t$18 = t$13.node(t$14, t$15, t$16, t$17);
                return t$9.node(t$10, t$11, t$12, t$18);
              }
            else
              {
                var lrv;
                var lrl;
                var lrr;
                var lrk;
                {
                  jumpBlockOuterjumpLab$bg19513:{
                    jumpLab$bg19513:{
                      jumpLab$bg19512:{
                        switch (lr.__type_switch_id) {
                          case 314:
                            break jumpLab$bg19512;
                          
                          case 315:
                            lrk = lr.key;
                            lrl = lr.left;
                            lrr = lr.right;
                            lrv = lr.value;
                            break jumpLab$bg19513;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      return sk$invariant_violation(new sk$String(('SortedMap::balance: empty l.right tree')));
                    }
                    {
                      var t$19 = this;
                      var t$20 = lrk;
                      var t$21 = lrv;
                      var t$22 = this;
                      var t$23 = lk;
                      var t$24 = lv;
                      var t$25 = ll;
                      var t$26 = lrl;
                      var t$27 = t$22.node(t$23, t$24, t$25, t$26);
                      var t$28 = this;
                      var t$29 = k;
                      var t$30 = v;
                      var t$31 = lrr;
                      var t$32 = r;
                      var t$33 = t$28.node(t$29, t$30, t$31, t$32);
                      return t$19.node(t$20, t$21, t$27, t$33);
                    }
                  }
                }
              }
          }
        }
      }
    }
  else
    {
      var t$34 = hr;
      var t$35 = hl;
      var t$36 = t$35.$pl(new sk$Int(2.0, 0.0));
      if (t$34.$gt(t$36).__value)
        {
          var rr;
          var rl;
          var rk;
          var rv;
          {
            jumpBlockOuterjumpLab$bg19522:{
              jumpLab$bg19522:{
                jumpLab$bg19521:{
                  switch (r.__type_switch_id) {
                    case 314:
                      break jumpLab$bg19521;
                    
                    case 315:
                      rk = r.key;
                      rl = r.left;
                      rr = r.right;
                      rv = r.value;
                      break jumpLab$bg19522;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                return sk$invariant_violation(new sk$String(('SortedMap::balance empty right tree')));
              }
              {
                var t$37 = rr;
                var t$38 = t$37.height();
                var t$39 = rl;
                var t$40 = t$39.height();
                if (t$38.$gt$eq(t$40).__value)
                  {
                    var t$41 = this;
                    var t$42 = rk;
                    var t$43 = rv;
                    var t$44 = this;
                    var t$45 = k;
                    var t$46 = v;
                    var t$47 = l;
                    var t$48 = rl;
                    var t$49 = t$44.node(t$45, t$46, t$47, t$48);
                    var t$50 = rr;
                    return t$41.node(t$42, t$43, t$49, t$50);
                  }
                else
                  {
                    var rlv;
                    var rlk;
                    var rlr;
                    var rll;
                    {
                      jumpBlockOuterjumpLab$bg19519:{
                        jumpLab$bg19519:{
                          jumpLab$bg19518:{
                            switch (rl.__type_switch_id) {
                              case 314:
                                break jumpLab$bg19518;
                              
                              case 315:
                                rlk = rl.key;
                                rll = rl.left;
                                rlr = rl.right;
                                rlv = rl.value;
                                break jumpLab$bg19519;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          return sk$invariant_violation(new sk$String(('SortedMap::balance empty r.left tree')));
                        }
                        {
                          var t$51 = this;
                          var t$52 = rlk;
                          var t$53 = rlv;
                          var t$54 = this;
                          var t$55 = k;
                          var t$56 = v;
                          var t$57 = l;
                          var t$58 = rll;
                          var t$59 = t$54.node(t$55, t$56, t$57, t$58);
                          var t$60 = this;
                          var t$61 = rk;
                          var t$62 = rv;
                          var t$63 = rlr;
                          var t$64 = rr;
                          var t$65 = t$60.node(t$61, t$62, t$63, t$64);
                          return t$51.node(t$52, t$53, t$59, t$65);
                        }
                      }
                    }
                  }
              }
            }
          }
        }
      else
        {
          var t$66 = this;
          var t$67 = k;
          var t$68 = v;
          var t$69 = l;
          var t$70 = r;
          return t$66.node(t$67, t$68, t$69, t$70);
        }
    }
};

sk$SortedMap$dtNode.prototype.checkInvariants = function() {
  var t$ = this;
  var t$1 = t$.left;
  t$1.checkInvariants();
  var t$2 = this;
  var t$3 = t$2.right;
  t$3.checkInvariants();
  var t$4 = this;
  var t$5 = t$4.n;
  var t$6 = this;
  var t$7 = t$6.left;
  var t$8 = t$7.size();
  var t$9 = new sk$Int(1.0, 0.0).$pl(t$8);
  var t$10 = this;
  var t$11 = t$10.right;
  var t$12 = t$11.size();
  var t$13 = t$9.$pl(t$12);
  if (t$5.$bg$eq(t$13).__value)
    sk$invariant_violation(new sk$String(('Wrong size')));
  else
    {}
  var t$14 = this;
  var t$15 = t$14.h;
  var t$16 = this;
  var t$17 = t$16.left;
  var t$18 = t$17.height();
  var t$19 = this;
  var t$20 = t$19.right;
  var t$21 = t$20.height();
  var t$22 = sk$max(t$18, t$21);
  var t$23 = new sk$Int(1.0, 0.0).$pl(t$22);
  if (t$15.$bg$eq(t$23).__value)
    sk$invariant_violation(new sk$String(('Wrong height')));
  else
    {}
  var t$24 = this;
  var t$25 = t$24.left;
  var t$26 = t$25.keys();
  var t$27 = t$26.all(((k) => 
  {
    var t$28 = k;
    var t$29 = this;
    var t$30 = t$29.key;
    return t$28.$lt(t$30);
  }));
  if (t$27.$bg().__value)
    sk$invariant_violation(new sk$String(('Left subtree has key larger than root')));
  else
    {}
  var t$31 = this;
  var t$32 = t$31.right;
  var t$33 = t$32.keys();
  var t$34 = t$33.all(((k1) => 
  {
    var t$35 = k1;
    var t$36 = this;
    var t$37 = t$36.key;
    return t$35.$gt(t$37);
  }));
  if (t$34.$bg().__value)
    sk$invariant_violation(new sk$String(('Right subtree has key larger than root')));
  else
    {}
  var t$38 = this;
  var t$39 = t$38.left;
  var t$40 = t$39.height();
  var t$41 = this;
  var t$42 = t$41.right;
  var t$43 = t$42.height();
  var heightDifference = t$40.$mi(t$43);
  var t$44 = heightDifference;
  var t$45;
  if (new sk$Int(4294967294.0, 4294967295.0).$lt$eq(t$44).__value)
    {
      var t$46 = heightDifference;
      t$45 = t$46.$lt$eq(new sk$Int(2.0, 0.0));
    }
  else
    t$45 = new sk$Bool((false));
  var t$47 = t$45;
  if (t$47.$bg().__value)
    sk$invariant_violation(new sk$String(('Unbalanced tree')));
  else
    {}
  return sk.__.$void;
};

sk$SortedMap$dtNode.compareLoop = function(iter1, iter2) {
  do
    {
      jumpBlockOuterloop_end$bg19599:{
        loop_end$bg19599:{
          {
            var t$ = iter1;
            var $var = t$.next();
            var kv1;
            {
              jumpBlockOuterjumpLab$bg19597:{
                jumpLab$bg19597:{
                  jumpLab$bg19596:{
                    switch ($var.__type_switch_id) {
                      case 204:
                        break jumpLab$bg19596;
                      
                      case 205:
                        kv1 = $var.value;
                        break jumpLab$bg19597;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$1 = iter2;
                    var t$2 = t$1.next();
                    if (t$2.isNone().__value)
                      return singleton$EQ;
                    else
                      return singleton$LT;
                  }
                }
                {
                  var t$3 = iter2;
                  var var1 = t$3.next();
                  var kv2;
                  {
                    jumpBlockOuterjumpLab$bg19593:{
                      jumpLab$bg19593:{
                        jumpLab$bg19592:{
                          switch (var1.__type_switch_id) {
                            case 204:
                              break jumpLab$bg19592;
                            
                            case 205:
                              kv2 = var1.value;
                              break jumpLab$bg19593;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        return singleton$GT;
                      }
                      {
                        var t$4 = kv1;
                        var t$5 = kv2;
                        var var2 = t$4.compare(t$5);
                        var c;
                        {
                          jumpBlockOuterjumpLab$bg19589:{
                            jumpLab$bg19589:{
                              jumpLab$bg19588:{
                                switch (var2.__type_switch_id) {
                                  case 206:
                                    break jumpLab$bg19588;
                                  
                                  default:
                                    c = var2;
                                    break jumpLab$bg19589;

                                }
                              }
                              {
                                var t$6 = this;
                                var t$7 = iter1;
                                var t$8 = iter2;
                                var t$9 = t$7;
                                var t$10 = t$8;
                                iter1 = t$9;
                                iter2 = t$10;
                                break loop_end$bg19599;
                              }
                            }
                            return c;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19599;
      }
    }
  while (true);
};

sk$SortedMap$dtNode.concat = function(l, r) {
  jumpBlockOuterjumpLab$bg19617:{
    jumpLab$bg19617:{
      jumpLab$bg19616:{
        switch (l.__type_switch_id) {
          case 314:
            break jumpLab$bg19616;
          
          case 315:
            break jumpLab$bg19617;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      return r;
    }
    {
      var t$ = r;
      var $var = t$.minimum();
      var p;
      {
        jumpBlockOuterjumpLab$bg19614:{
          jumpLab$bg19614:{
            jumpLab$bg19613:{
              switch ($var.__type_switch_id) {
                case 204:
                  break jumpLab$bg19613;
                
                case 205:
                  p = $var.value;
                  break jumpLab$bg19614;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            return l;
          }
          {
            var var1;
            var var2;
            {
              jumpBlockOuterjumpLab$bg19610:{
                jumpLab$bg19610:{
                  switch (p.__type_switch_id) {
                    case 392:
                      var1 = p.i0;
                      var2 = p.i1;
                      break jumpLab$bg19610;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var v = var2;
                  var k = var1;
                  var t$1 = this;
                  var t$2 = k;
                  var t$3 = v;
                  var t$4 = l;
                  var t$5 = r;
                  var t$6 = t$5.removeMin();
                  return t$1.balance(t$2, t$3, t$4, t$6);
                }
              }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNode.concatOrJoin = function(k, x, l, r) {
  var v;
  {
    jumpBlockOuterjumpLab$bg19629:{
      jumpLab$bg19629:{
        jumpLab$bg19628:{
          switch (x.__type_switch_id) {
            case 204:
              break jumpLab$bg19628;
            
            case 205:
              v = x.value;
              break jumpLab$bg19629;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = l;
          var t$2 = r;
          return t$.concat(t$1, t$2);
        }
      }
      {
        var t$3 = this;
        var t$4 = k;
        var t$5 = v;
        var t$6 = l;
        var t$7 = r;
        return t$3.mergeImpl(t$4, t$5, t$6, t$7);
      }
    }
  }
};

sk$SortedMap$dtNode.containsKeyImpl = function(map, k) {
  do
    {
      jumpBlockOuterloop_end$bg19648:{
        loop_end$bg19648:{
          {
            var right;
            var left;
            var key;
            {
              jumpBlockOuterjumpLab$bg19646:{
                jumpLab$bg19646:{
                  jumpLab$bg19645:{
                    switch (map.__type_switch_id) {
                      case 314:
                        break jumpLab$bg19645;
                      
                      case 315:
                        key = map.key;
                        left = map.left;
                        right = map.right;
                        break jumpLab$bg19646;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return new sk$Bool((false));
                }
                {
                  var t$ = k;
                  var t$1 = key;
                  var $var = sk$compare(t$, t$1);
                  {
                    jumpBlockOuterjumpLab$bg19643:{
                      jumpLab$bg19643:{
                        jumpLab$bg19642:{
                          jumpLab$bg19641:{
                            switch ($var.__type_switch_id) {
                              case 208:
                                break jumpLab$bg19641;
                              
                              case 206:
                                break jumpLab$bg19642;
                              
                              case 207:
                                break jumpLab$bg19643;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var t$2 = this;
                            var t$3 = left;
                            var t$4 = k;
                            var t$5 = t$3;
                            var t$6 = t$4;
                            map = t$5;
                            k = t$6;
                            break loop_end$bg19648;
                          }
                        }
                        return new sk$Bool((true));
                      }
                      {
                        var t$7 = this;
                        var t$8 = right;
                        var t$9 = k;
                        var t$10 = t$8;
                        var t$11 = t$9;
                        map = t$10;
                        k = t$11;
                        break loop_end$bg19648;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19648;
      }
    }
  while (true);
};

sk$SortedMap$dtNode.create = function() {
  return singleton$SortedMap$dtNil;
};

sk$SortedMap$dtNode.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m, p) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg19662:{
        jumpLab$bg19662:{
          switch (p.__type_switch_id) {
            case 392:
              $var = p.i0;
              var1 = p.i1;
              break jumpLab$bg19662;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$3 = m;
          var t$4 = k;
          var t$5 = v;
          return t$3.set(t$4, t$5);
        }
      }
    }
  }), t$2);
};

sk$SortedMap$dtNode.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m, p) => 
  {
    var $var;
    var var1;
    {
      jumpBlockOuterjumpLab$bg19672:{
        jumpLab$bg19672:{
          switch (p.__type_switch_id) {
            case 392:
              $var = p.i0;
              var1 = p.i1;
              break jumpLab$bg19672;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v = var1;
          var k = $var;
          var t$3 = m;
          var t$4 = k;
          var t$5 = v;
          return t$3.set(t$4, t$5);
        }
      }
    }
  }), t$2);
};

sk$SortedMap$dtNode.eqByLoop = function(iter1, iter2, eq) {
  do
    {
      jumpBlockOuterloop_end$bg19702:{
        loop_end$bg19702:{
          {
            var t$ = iter1;
            var t$1 = t$.next();
            var t$2 = iter2;
            var t$3 = t$2.next();
            var $var = new (sk$Tuple2)(t$1, t$3);
            var kv2;
            var kv1;
            {
              jumpBlockOuterjumpLab$bg19697:{
                jumpLab$bg19697:{
                  jumpLab$bg19696:{
                    jumpLab$bg19695:{
                      jumpLab$bg19698:{
                        jumpLab$bg19699:{
                          jumpLab$bg19700:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg19700;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 205:
                              break jumpLab$bg19698;
                            
                            case 204:
                              break jumpLab$bg19699;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 204:
                            break jumpLab$bg19696;
                          
                          default:
                            break jumpLab$bg19697;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 205:
                          kv1 = $var.i0.value;
                          kv2 = $var.i1.value;
                          break jumpLab$bg19695;
                        
                        default:
                          break jumpLab$bg19697;

                      }
                    }
                    {
                      var t$4 = kv1;
                      var t$5 = t$4.i0;
                      var t$6 = kv2;
                      var t$7 = t$6.i0;
                      var t$8;
                      if (t$5.$eq$eq(t$7).__value)
                        {
                          var t$9 = eq;
                          var t$10 = kv1;
                          var t$11 = t$10.i1;
                          var t$12 = kv2;
                          var t$13 = t$12.i1;
                          t$8 = t$9(t$11, t$13);
                        }
                      else
                        t$8 = new sk$Bool((false));
                      if (t$8.__value)
                        {
                          var t$14 = this;
                          var t$15 = iter1;
                          var t$16 = iter2;
                          var t$17 = eq;
                          var t$18 = t$15;
                          var t$19 = t$16;
                          var t$20 = t$17;
                          iter1 = t$18;
                          iter2 = t$19;
                          eq = t$20;
                          break loop_end$bg19702;
                        }
                      else
                        return new sk$Bool((false));
                    }
                  }
                  return new sk$Bool((true));
                }
                return new sk$Bool((false));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19702;
      }
    }
  while (true);
};

sk$SortedMap$dtNode.eqLoop = function(iter1, iter2) {
  do
    {
      jumpBlockOuterloop_end$bg19732:{
        loop_end$bg19732:{
          {
            var t$ = iter1;
            var t$1 = t$.next();
            var t$2 = iter2;
            var t$3 = t$2.next();
            var $var = new (sk$Tuple2)(t$1, t$3);
            var kv2;
            var kv1;
            {
              jumpBlockOuterjumpLab$bg19727:{
                jumpLab$bg19727:{
                  jumpLab$bg19726:{
                    jumpLab$bg19725:{
                      jumpLab$bg19728:{
                        jumpLab$bg19729:{
                          jumpLab$bg19730:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                break jumpLab$bg19730;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          switch ($var.i0.__type_switch_id) {
                            case 205:
                              break jumpLab$bg19728;
                            
                            case 204:
                              break jumpLab$bg19729;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch ($var.i1.__type_switch_id) {
                          case 204:
                            break jumpLab$bg19726;
                          
                          default:
                            break jumpLab$bg19727;

                        }
                      }
                      switch ($var.i1.__type_switch_id) {
                        case 205:
                          kv1 = $var.i0.value;
                          kv2 = $var.i1.value;
                          break jumpLab$bg19725;
                        
                        default:
                          break jumpLab$bg19727;

                      }
                    }
                    {
                      var t$4 = kv1;
                      var t$5 = t$4.i0;
                      var t$6 = kv2;
                      var t$7 = t$6.i0;
                      var t$8;
                      if (t$5.$eq$eq(t$7).__value)
                        {
                          var t$9 = kv1;
                          var t$10 = t$9.i1;
                          var t$11 = kv2;
                          var t$12 = t$11.i1;
                          t$8 = t$10.$eq$eq(t$12);
                        }
                      else
                        t$8 = new sk$Bool((false));
                      if (t$8.__value)
                        {
                          var t$13 = this;
                          var t$14 = iter1;
                          var t$15 = iter2;
                          var t$16 = t$14;
                          var t$17 = t$15;
                          iter1 = t$16;
                          iter2 = t$17;
                          break loop_end$bg19732;
                        }
                      else
                        return new sk$Bool((false));
                    }
                  }
                  return new sk$Bool((true));
                }
                return new sk$Bool((false));
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg19732;
      }
    }
  while (true);
};

sk$SortedMap$dtNode.prototype.filter = function(f) {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = f;
  var l2 = t$1.filter(t$2);
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = f;
  var r2 = t$4.filter(t$5);
  var t$6 = f;
  var t$7 = this;
  var t$8 = t$7.key;
  var t$9 = this;
  var t$10 = t$9.value;
  if (t$6(t$8, t$10).__value)
    {
      var t$11 = static1;
      var t$12 = this;
      var t$13 = t$12.key;
      var t$14 = this;
      var t$15 = t$14.value;
      var t$16 = l2;
      var t$17 = r2;
      return t$11.balance(t$13, t$15, t$16, t$17);
    }
  else
    {
      var t$18 = static1;
      var t$19 = l2;
      var t$20 = r2;
      return t$18.concat(t$19, t$20);
    }
};

sk$SortedMap$dtNode.prototype.genFilter = skip.asyncToGenerator(function*(f) {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = f;
  var l2 = (yield t$1.genFilter(t$2));
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = f;
  var r2 = (yield t$4.genFilter(t$5));
  var t$6 = f;
  var t$7 = this;
  var t$8 = t$7.value;
  if ((yield t$6(t$8)).__value)
    {
      var t$9 = static1;
      var t$10 = this;
      var t$11 = t$10.key;
      var t$12 = this;
      var t$13 = t$12.value;
      var t$14 = l2;
      var t$15 = r2;
      return t$9.balance(t$11, t$13, t$14, t$15);
    }
  else
    {
      var t$16 = static1;
      var t$17 = l2;
      var t$18 = r2;
      return t$16.concat(t$17, t$18);
    }
});

sk$SortedMap$dtNode.prototype.genFilterWithKey = skip.asyncToGenerator(function*(f) {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = f;
  var l2 = (yield t$1.genFilterWithKey(t$2));
  var t$3 = this;
  var t$4 = t$3.right;
  var t$5 = f;
  var r2 = (yield t$4.genFilterWithKey(t$5));
  var t$6 = f;
  var t$7 = this;
  var t$8 = t$7.key;
  var t$9 = this;
  var t$10 = t$9.value;
  if ((yield t$6(t$8, t$10)).__value)
    {
      var t$11 = static1;
      var t$12 = this;
      var t$13 = t$12.key;
      var t$14 = this;
      var t$15 = t$14.value;
      var t$16 = l2;
      var t$17 = r2;
      return t$11.balance(t$13, t$15, t$16, t$17);
    }
  else
    {
      var t$18 = static1;
      var t$19 = l2;
      var t$20 = r2;
      return t$18.concat(t$19, t$20);
    }
});

sk$SortedMap$dtNode.prototype.genMap = skip.asyncToGenerator(function*(f) {
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = f;
  var t$3 = t$1.genMap(t$2);
  var t$4 = f;
  var t$5 = this;
  var t$6 = t$5.value;
  var t$7 = t$4(t$6);
  var t$8 = this;
  var t$9 = t$8.right;
  var t$10 = f;
  var t$11 = t$9.genMap(t$10);
  var $var = (yield sk$ASIO$dtjoin3(t$3, t$7, t$11));
  var var1;
  var var2;
  var var3;
  {
    jumpBlockOuterjumpLab$bg19826:{
      jumpLab$bg19826:{
        switch ($var.__type_switch_id) {
          case 393:
            var1 = $var.i0;
            var2 = $var.i1;
            var3 = $var.i2;
            break jumpLab$bg19826;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var right = var3;
        var value = var2;
        var left = var1;
        var t$12 = left;
        var t$13 = this;
        var t$14 = t$13.key;
        var t$15 = value;
        var t$16 = right;
        var t$17 = this;
        var t$18 = t$17.h;
        var t$19 = this;
        var t$20 = t$19.n;
        return new (sk$SortedMap$dtNode)({
          h: t$18,
          key: t$14,
          left: t$12,
          n: t$20,
          right: t$16,
          value: t$15
        });
      }
    }
  }
});

sk$SortedMap$dtNode.prototype.getClassName = function() {
  return new sk$String(('SortedMap.Node'));
};

sk$SortedMap$dtNode.prototype.getWithMiss = function(k) {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var right_ = t$1.right;
  var t$2 = this;
  var left_ = t$2.left;
  var t$3 = this;
  var key_ = t$3.key;
  var t$4 = left_;
  var left = t$4;
  var t$5 = right_;
  var right = t$5;
  var t$6 = key_;
  var key = t$6;
  var t$7 = k;
  var t$8 = key;
  var $var = t$7.compare(t$8);
  {
    jumpBlockOuterjumpLab$bg19875:{
      jumpLab$bg19875:{
        jumpLab$bg19874:{
          jumpLab$bg19873:{
            switch ($var.__type_switch_id) {
              case 208:
                break jumpLab$bg19873;
              
              case 206:
                break jumpLab$bg19874;
              
              case 207:
                break jumpLab$bg19875;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$9 = left;
            var t$10 = k;
            var var1 = t$9.getWithMiss(t$10);
            var x;
            var x1;
            {
              jumpBlockOuterjumpLab$bg19866:{
                jumpLab$bg19866:{
                  jumpLab$bg19865:{
                    switch (var1.__type_switch_id) {
                      case 316:
                        x1 = var1;
                        break jumpLab$bg19865;
                      
                      case 317:
                        x = var1;
                        break jumpLab$bg19866;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return x1;
                }
                {
                  var t$11 = x;
                  var t$12 = x;
                  var t$13 = t$12.less;
                  var t$14 = key;
                  var t$15 = value;
                  var t$16 = new (sk$Tuple2)(t$14, t$15);
                  var t$17 = t$13.$default(t$16);
                  var t$18 = new (sk$Some)(t$17);
                  return ((() => 
                  {
                    var _tmp384 = t$11.__copy();
                    _tmp384.less = t$18;
                    return _tmp384;
                  })());
                }
              }
            }
          }
        }
        {
          var t$19 = key;
          var t$20 = value;
          return new (sk$SortedMap$dtExact)({
            key: t$19,
            value: t$20
          });
        }
      }
      {
        var t$21 = right;
        var t$22 = k;
        var var2 = t$21.getWithMiss(t$22);
        var x2;
        var x3;
        {
          jumpBlockOuterjumpLab$bg19870:{
            jumpLab$bg19870:{
              jumpLab$bg19869:{
                switch (var2.__type_switch_id) {
                  case 316:
                    x2 = var2;
                    break jumpLab$bg19869;
                  
                  case 317:
                    x3 = var2;
                    break jumpLab$bg19870;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              return x2;
            }
            {
              var t$23 = x3;
              var t$24 = x3;
              var t$25 = t$24.greater;
              var t$26 = key;
              var t$27 = value;
              var t$28 = new (sk$Tuple2)(t$26, t$27);
              var t$29 = t$25.$default(t$28);
              var t$30 = new (sk$Some)(t$29);
              return ((() => 
              {
                var _tmp385 = t$23.__copy();
                _tmp385.greater = t$30;
                return _tmp385;
              })());
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.height = function() {
  var t$ = this;
  return t$.h;
};

sk$SortedMap$dtNode.prototype.isEmpty = function() {
  return new sk$Bool((false));
};

sk$SortedMap$dtNode.prototype.map = function(f) {
  var t$ = this;
  var t$1 = t$.n;
  var t$2 = this;
  var t$3 = t$2.h;
  var t$4 = this;
  var t$5 = t$4.key;
  var t$6 = this;
  var t$7 = t$6.left;
  var t$8 = f;
  var t$9 = t$7.map(t$8);
  var t$10 = f;
  var t$11 = this;
  var t$12 = t$11.key;
  var t$13 = this;
  var t$14 = t$13.value;
  var t$15 = t$10(t$12, t$14);
  var t$16 = this;
  var t$17 = t$16.right;
  var t$18 = f;
  var t$19 = t$17.map(t$18);
  return new (sk$SortedMap$dtNode)({
    h: t$3,
    key: t$5,
    left: t$9,
    n: t$1,
    right: t$19,
    value: t$15
  });
};

sk$SortedMap$dtNode.prototype.mapAcc = function(f, init) {
  var t$ = this;
  var t$1 = t$.left;
  var t$2 = f;
  var t$3 = init;
  var $var = t$1.mapAcc(t$2, t$3);
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg19933:{
      jumpLab$bg19933:{
        switch ($var.__type_switch_id) {
          case 392:
            var2 = $var.i0;
            var1 = $var.i1;
            break jumpLab$bg19933;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var left = var1;
        var r = var2;
        var t$4 = f;
        var t$5 = r;
        var t$6 = this;
        var t$7 = t$6.key;
        var t$8 = this;
        var t$9 = t$8.value;
        var var3 = t$4(t$5, t$7, t$9);
        var var4;
        var var5;
        {
          jumpBlockOuterjumpLab$bg19930:{
            jumpLab$bg19930:{
              switch (var3.__type_switch_id) {
                case 392:
                  var5 = var3.i0;
                  var4 = var3.i1;
                  break jumpLab$bg19930;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            {
              var value = var4;
              r = var5;
              var t$10 = this;
              var t$11 = t$10.right;
              var t$12 = f;
              var t$13 = r;
              var var6 = t$11.mapAcc(t$12, t$13);
              var var7;
              var var8;
              {
                jumpBlockOuterjumpLab$bg19927:{
                  jumpLab$bg19927:{
                    switch (var6.__type_switch_id) {
                      case 392:
                        var8 = var6.i0;
                        var7 = var6.i1;
                        break jumpLab$bg19927;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var right = var7;
                    r = var8;
                    var t$14 = this;
                    var t$15 = t$14.key;
                    var t$16 = value;
                    var t$17 = left;
                    var t$18 = right;
                    var m = sk$SortedMap$dtNode.node(t$15, t$16, t$17, t$18);
                    var t$19 = r;
                    var t$20 = m;
                    return new (sk$Tuple2)(t$19, t$20);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.maximum = function() {
  var t$ = this;
  var $var = t$.right;
  {
    jumpBlockOuterjumpLab$bg19947:{
      jumpLab$bg19947:{
        jumpLab$bg19946:{
          switch ($var.__type_switch_id) {
            case 314:
              break jumpLab$bg19946;
            
            default:
              break jumpLab$bg19947;

          }
        }
        {
          var t$1 = this;
          var t$2 = t$1.key;
          var t$3 = this;
          var t$4 = t$3.value;
          var t$5 = new (sk$Tuple2)(t$2, t$4);
          return new (sk$Some)(t$5);
        }
      }
      {
        var t$6 = this;
        var t$7 = t$6.right;
        return t$7.maximum();
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.maybeGetItem = function(k) {
  var t$ = this;
  var value = t$.value;
  var t$1 = this;
  var right = t$1.right;
  var t$2 = this;
  var left = t$2.left;
  var t$3 = this;
  var key = t$3.key;
  var t$4 = k;
  var t$5 = key;
  var $var = sk$compare(t$4, t$5);
  {
    jumpBlockOuterjumpLab$bg19967:{
      jumpLab$bg19967:{
        jumpLab$bg19966:{
          jumpLab$bg19965:{
            switch ($var.__type_switch_id) {
              case 208:
                break jumpLab$bg19965;
              
              case 206:
                break jumpLab$bg19966;
              
              case 207:
                break jumpLab$bg19967;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$6 = left;
            var t$7 = k;
            return t$6.maybeGetItem(t$7);
          }
        }
        {
          var t$8 = key;
          var t$9 = value;
          var t$10 = new (sk$Tuple2)(t$8, t$9);
          return new (sk$Some)(t$10);
        }
      }
      {
        var t$11 = right;
        var t$12 = k;
        return t$11.maybeGetItem(t$12);
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.merge = function(map2) {
  var static1 = this.__constructor;
  var m2;
  {
    jumpBlockOuterjumpLab$bg20038:{
      jumpLab$bg20038:{
        jumpLab$bg20037:{
          switch (map2.__type_switch_id) {
            case 314:
              break jumpLab$bg20037;
            
            case 315:
              m2 = map2;
              break jumpLab$bg20038;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return this;
      }
      {
        var t$ = this;
        var t$1 = t$.key;
        var key = t$1;
        var t$2 = this;
        var value = t$2.value;
        var t$3 = this;
        var left = t$3.left;
        var t$4 = this;
        var right = t$4.right;
        var t$5 = static1;
        var new_static = t$5;
        var t$6 = this;
        var t$7 = t$6.height();
        var t$8 = m2;
        var t$9 = t$8.height();
        if (t$7.$gt$eq(t$9).__value)
          {
            var t$10 = key;
            var t$11 = value;
            var t$12 = left;
            var t$13 = right;
            var $var = new (sk$Tuple4)(t$10, t$11, t$12, t$13);
            var var1;
            var var2;
            var var3;
            var var4;
            {
              jumpBlockOuterjumpLab$bg20029:{
                jumpLab$bg20029:{
                  switch ($var.__type_switch_id) {
                    case 394:
                      var2 = $var.i0;
                      var1 = $var.i1;
                      var4 = $var.i2;
                      var3 = $var.i3;
                      break jumpLab$bg20029;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var r1 = var3;
                  var l1 = var4;
                  var v1 = var1;
                  var k = var2;
                  var t$14 = m2;
                  var t$15 = key;
                  var var5 = t$14.split(t$15);
                  var var6;
                  var var7;
                  var var8;
                  {
                    jumpBlockOuterjumpLab$bg20026:{
                      jumpLab$bg20026:{
                        switch (var5.__type_switch_id) {
                          case 393:
                            var6 = var5.i0;
                            var8 = var5.i1;
                            var7 = var5.i2;
                            break jumpLab$bg20026;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var r2 = var7;
                        var v2 = var8;
                        var l2 = var6;
                        var t$16;
                        var v;
                        {
                          jumpBlockOuterjumpLab$bg20023:{
                            jumpLab$bg20023:{
                              jumpLab$bg20022:{
                                switch (v2.__type_switch_id) {
                                  case 205:
                                    v = v2.value;
                                    break jumpLab$bg20022;
                                  
                                  default:
                                    break jumpLab$bg20023;

                                }
                              }
                              t$16 = v;
                              break jumpBlockOuterjumpLab$bg20023;
                            }
                            t$16 = v1;
                            break jumpBlockOuterjumpLab$bg20023;
                          }
                        }
                        var v3 = t$16;
                        var t$17 = new_static;
                        var t$18 = k;
                        var t$19 = v3;
                        var t$20 = l1;
                        var t$21 = l2;
                        var t$22 = t$20.merge(t$21);
                        var t$23 = r1;
                        var t$24 = r2;
                        var t$25 = t$23.merge(t$24);
                        return t$17.mergeImpl(t$18, t$19, t$22, t$25);
                      }
                    }
                  }
                }
              }
            }
          }
        else
          {
            var t$26 = this;
            var t$27 = m2;
            var t$28 = t$27.key;
            var var9 = t$26.split(t$28);
            var var10;
            var var11;
            {
              jumpBlockOuterjumpLab$bg20035:{
                jumpLab$bg20035:{
                  switch (var9.__type_switch_id) {
                    case 393:
                      var11 = var9.i0;
                      var10 = var9.i2;
                      break jumpLab$bg20035;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var r11 = var10;
                  var l11 = var11;
                  var t$29 = m2;
                  var t$30 = t$29.key;
                  var t$31 = m2;
                  var t$32 = t$31.value;
                  var t$33 = m2;
                  var t$34 = t$33.left;
                  var t$35 = m2;
                  var t$36 = t$35.right;
                  var var12 = new (sk$Tuple4)(t$30, t$32, t$34, t$36);
                  var var13;
                  var var14;
                  var var15;
                  var var16;
                  {
                    jumpBlockOuterjumpLab$bg20032:{
                      jumpLab$bg20032:{
                        switch (var12.__type_switch_id) {
                          case 394:
                            var16 = var12.i0;
                            var13 = var12.i1;
                            var14 = var12.i2;
                            var15 = var12.i3;
                            break jumpLab$bg20032;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var r21 = var15;
                        var l21 = var14;
                        var v21 = var13;
                        var k1 = var16;
                        var t$37 = new_static;
                        var t$38 = k1;
                        var t$39 = v21;
                        var t$40 = l11;
                        var t$41 = l21;
                        var t$42 = t$40.merge(t$41);
                        var t$43 = r11;
                        var t$44 = r21;
                        var t$45 = t$43.merge(t$44);
                        return t$37.mergeImpl(t$38, t$39, t$42, t$45);
                      }
                    }
                  }
                }
              }
            }
          }
      }
    }
  }
};

sk$SortedMap$dtNode.mergeAll = function(maps) {
  var t$ = maps;
  var t$1 = t$;
  var t$2 = sk$SortedMap.create();
  return t$1.foldl(((m1, m2) => 
  {
    var t$3 = m1;
    var t$4 = m2;
    return t$3.merge(t$4);
  }), t$2);
};

sk$SortedMap$dtNode.mergeImpl = function(k, v, l, r) {
  var t$ = l;
  var lh = t$.height();
  var t$1 = r;
  var rh = t$1.height();
  var ln;
  {
    jumpBlockOuterjumpLab$bg20102:{
      jumpLab$bg20102:{
        jumpLab$bg20101:{
          switch (l.__type_switch_id) {
            case 314:
              break jumpLab$bg20101;
            
            case 315:
              ln = l;
              break jumpLab$bg20102;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = r;
          var t$3 = k;
          var t$4 = v;
          return t$2.addMinBinding(t$3, t$4);
        }
      }
      {
        var rn;
        {
          jumpBlockOuterjumpLab$bg20099:{
            jumpLab$bg20099:{
              jumpLab$bg20098:{
                switch (r.__type_switch_id) {
                  case 314:
                    break jumpLab$bg20098;
                  
                  case 315:
                    rn = r;
                    break jumpLab$bg20099;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$5 = l;
                var t$6 = k;
                var t$7 = v;
                return t$5.addMaxBinding(t$6, t$7);
              }
            }
            {
              var t$8 = lh;
              var t$9 = rh;
              var t$10 = t$9.$pl(new sk$Int(2.0, 0.0));
              if (t$8.$gt(t$10).__value)
                {
                  var t$11 = this;
                  var t$12 = ln;
                  var t$13 = t$12.key;
                  var t$14 = ln;
                  var t$15 = t$14.value;
                  var t$16 = ln;
                  var t$17 = t$16.left;
                  var t$18 = this;
                  var t$19 = k;
                  var t$20 = v;
                  var t$21 = ln;
                  var t$22 = t$21.right;
                  var t$23 = r;
                  var t$24 = t$18.mergeImpl(t$19, t$20, t$22, t$23);
                  return t$11.balance(t$13, t$15, t$17, t$24);
                }
              else
                {
                  var t$25 = rh;
                  var t$26 = lh;
                  var t$27 = t$26.$pl(new sk$Int(2.0, 0.0));
                  if (t$25.$gt(t$27).__value)
                    {
                      var t$28 = this;
                      var t$29 = rn;
                      var t$30 = t$29.key;
                      var t$31 = rn;
                      var t$32 = t$31.value;
                      var t$33 = this;
                      var t$34 = k;
                      var t$35 = v;
                      var t$36 = l;
                      var t$37 = rn;
                      var t$38 = t$37.left;
                      var t$39 = t$33.mergeImpl(t$34, t$35, t$36, t$38);
                      var t$40 = rn;
                      var t$41 = t$40.right;
                      return t$28.balance(t$30, t$32, t$39, t$41);
                    }
                  else
                    {
                      var t$42 = this;
                      var t$43 = k;
                      var t$44 = v;
                      var t$45 = l;
                      var t$46 = r;
                      return t$42.node(t$43, t$44, t$45, t$46);
                    }
                }
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.minimum = function() {
  var t$ = this;
  var $var = t$.left;
  {
    jumpBlockOuterjumpLab$bg20116:{
      jumpLab$bg20116:{
        jumpLab$bg20115:{
          switch ($var.__type_switch_id) {
            case 314:
              break jumpLab$bg20115;
            
            default:
              break jumpLab$bg20116;

          }
        }
        {
          var t$1 = this;
          var t$2 = t$1.key;
          var t$3 = this;
          var t$4 = t$3.value;
          var t$5 = new (sk$Tuple2)(t$2, t$4);
          return new (sk$Some)(t$5);
        }
      }
      {
        var t$6 = this;
        var t$7 = t$6.left;
        return t$7.minimum();
      }
    }
  }
};

sk$SortedMap$dtNode.node = function(k, v, l, r) {
  var t$ = l;
  var t$1 = t$.size();
  var t$2 = r;
  var t$3 = t$2.size();
  var t$4 = t$1.$pl(t$3);
  var t$5 = t$4.$pl(new sk$Int(1.0, 0.0));
  var t$6 = l;
  var t$7 = t$6.height();
  var t$8 = r;
  var t$9 = t$8.height();
  var t$10 = sk$max(t$7, t$9);
  var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
  var t$12 = k;
  var t$13 = v;
  var t$14 = l;
  var t$15 = r;
  return new (sk$SortedMap$dtNode)({
    h: t$11,
    key: t$12,
    left: t$14,
    n: t$5,
    right: t$15,
    value: t$13
  });
};

sk$SortedMap$dtNode.prototype.remove = function(key) {
  var static1 = this.__constructor;
  var t$ = this;
  var l = t$.left;
  var t$1 = this;
  var r = t$1.right;
  var t$2 = this;
  var k = t$2.key;
  var t$3 = this;
  var v = t$3.value;
  var t$4 = key;
  var t$5 = k;
  var $var = sk$compare(t$4, t$5);
  {
    jumpBlockOuterjumpLab$bg20163:{
      jumpLab$bg20163:{
        jumpLab$bg20162:{
          jumpLab$bg20161:{
            switch ($var.__type_switch_id) {
              case 208:
                break jumpLab$bg20161;
              
              case 207:
                break jumpLab$bg20162;
              
              case 206:
                break jumpLab$bg20163;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$6 = static1;
            var t$7 = k;
            var t$8 = v;
            var t$9 = l;
            var t$10 = key;
            var t$11 = t$9.remove(t$10);
            var t$12 = r;
            return t$6.balance(t$7, t$8, t$11, t$12);
          }
        }
        {
          var t$13 = static1;
          var t$14 = k;
          var t$15 = v;
          var t$16 = l;
          var t$17 = r;
          var t$18 = key;
          var t$19 = t$17.remove(t$18);
          return t$13.balance(t$14, t$15, t$16, t$19);
        }
      }
      {
        var t$20 = static1;
        var t$21 = l;
        var t$22 = r;
        return t$20.concat(t$21, t$22);
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.removeMin = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var $var = t$.left;
  {
    jumpBlockOuterjumpLab$bg20181:{
      jumpLab$bg20181:{
        jumpLab$bg20180:{
          switch ($var.__type_switch_id) {
            case 314:
              break jumpLab$bg20180;
            
            default:
              break jumpLab$bg20181;

          }
        }
        {
          var t$1 = this;
          return t$1.right;
        }
      }
      {
        var t$2 = static1;
        var t$3 = this;
        var t$4 = t$3.key;
        var t$5 = this;
        var t$6 = t$5.value;
        var t$7 = this;
        var t$8 = t$7.left;
        var t$9 = t$8.removeMin();
        var t$10 = this;
        var t$11 = t$10.right;
        return t$2.balance(t$4, t$6, t$9, t$11);
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.setWith = function(key, value, f) {
  var t$ = this;
  var t$1 = t$.left;
  var l = t$1;
  var t$2 = this;
  var t$3 = t$2.right;
  var r = t$3;
  var t$4 = this;
  var t$5 = t$4.key;
  var k = t$5;
  var t$6 = this;
  var t$7 = t$6.value;
  var v = t$7;
  var t$8 = key;
  var t$9 = this;
  var t$10 = t$9.key;
  var $var = sk$compare(t$8, t$10);
  {
    jumpBlockOuterjumpLab$bg20222:{
      jumpLab$bg20222:{
        jumpLab$bg20221:{
          jumpLab$bg20220:{
            switch ($var.__type_switch_id) {
              case 208:
                break jumpLab$bg20220;
              
              case 206:
                break jumpLab$bg20221;
              
              case 207:
                break jumpLab$bg20222;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$11 = k;
            var t$12 = v;
            var t$13 = l;
            var t$14 = key;
            var t$15 = value;
            var t$16 = f;
            var t$17 = t$13.setWith(t$14, t$15, t$16);
            var t$18 = r;
            return sk$SortedMap.balance(t$11, t$12, t$17, t$18);
          }
        }
        {
          var t$19 = k;
          var t$20 = f;
          var t$21 = v;
          var t$22 = value;
          var t$23 = t$20(t$21, t$22);
          var t$24 = l;
          var t$25 = r;
          return sk$SortedMap.node(t$19, t$23, t$24, t$25);
        }
      }
      {
        var t$26 = k;
        var t$27 = v;
        var t$28 = l;
        var t$29 = r;
        var t$30 = key;
        var t$31 = value;
        var t$32 = f;
        var t$33 = t$29.setWith(t$30, t$31, t$32);
        return sk$SortedMap.balance(t$26, t$27, t$28, t$33);
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.size = function() {
  var t$ = this;
  return t$.n;
};

sk$SortedMap$dtNode.prototype.split = function(k) {
  var static1 = this.__constructor;
  var t$ = k;
  var t$1 = this;
  var t$2 = t$1.key;
  var $var = sk$compare(t$, t$2);
  {
    jumpBlockOuterjumpLab$bg20277:{
      jumpLab$bg20277:{
        jumpLab$bg20276:{
          jumpLab$bg20275:{
            switch ($var.__type_switch_id) {
              case 208:
                break jumpLab$bg20275;
              
              case 206:
                break jumpLab$bg20276;
              
              case 207:
                break jumpLab$bg20277;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$3 = this;
            var t$4 = t$3.left;
            var t$5 = k;
            var var1 = t$4.split(t$5);
            var var2;
            var var3;
            var var4;
            {
              jumpBlockOuterjumpLab$bg20269:{
                jumpLab$bg20269:{
                  switch (var1.__type_switch_id) {
                    case 393:
                      var4 = var1.i0;
                      var3 = var1.i1;
                      var2 = var1.i2;
                      break jumpLab$bg20269;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var rl = var2;
                  var v = var3;
                  var ll = var4;
                  var t$6 = ll;
                  var t$7 = v;
                  var t$8 = static1;
                  var t$9 = this;
                  var t$10 = t$9.key;
                  var t$11 = this;
                  var t$12 = t$11.value;
                  var t$13 = rl;
                  var t$14 = this;
                  var t$15 = t$14.right;
                  var t$16 = t$8.mergeImpl(t$10, t$12, t$13, t$15);
                  return new (sk$Tuple3)(t$6, t$7, t$16);
                }
              }
            }
          }
        }
        {
          var t$17 = this;
          var t$18 = t$17.left;
          var t$19 = this;
          var t$20 = t$19.value;
          var t$21 = new (sk$Some)(t$20);
          var t$22 = this;
          var t$23 = t$22.right;
          return new (sk$Tuple3)(t$18, t$21, t$23);
        }
      }
      {
        var t$24 = this;
        var t$25 = t$24.right;
        var t$26 = k;
        var var5 = t$25.split(t$26);
        var var6;
        var var7;
        var var8;
        {
          jumpBlockOuterjumpLab$bg20272:{
            jumpLab$bg20272:{
              switch (var5.__type_switch_id) {
                case 393:
                  var6 = var5.i0;
                  var7 = var5.i1;
                  var8 = var5.i2;
                  break jumpLab$bg20272;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            {
              var rr = var8;
              var v1 = var7;
              var lr = var6;
              var t$27 = static1;
              var t$28 = this;
              var t$29 = t$28.key;
              var t$30 = this;
              var t$31 = t$30.value;
              var t$32 = this;
              var t$33 = t$32.left;
              var t$34 = lr;
              var t$35 = t$27.mergeImpl(t$29, t$31, t$33, t$34);
              var t$36 = v1;
              var t$37 = rr;
              return new (sk$Tuple3)(t$35, t$36, t$37);
            }
          }
        }
      }
    }
  }
};

sk$SortedMap$dtNode.toStringRecursive = function(m, vec, offset) {
  var right;
  var left;
  var key;
  var value;
  {
    jumpBlockOuterjumpLab$bg20306:{
      jumpLab$bg20306:{
        jumpLab$bg20305:{
          switch (m.__type_switch_id) {
            case 314:
              break jumpLab$bg20305;
            
            case 315:
              key = m.key;
              left = m.left;
              right = m.right;
              value = m.value;
              break jumpLab$bg20306;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = new sk$String(('SortedMap::toStringRecursive(): Expected callers')).$pl(new sk$String(('to check size() > 0')));
          return sk$invariant_violation(t$);
        }
      }
      {
        var t$1 = left;
        var t$2 = t$1.isEmpty();
        if (t$2.$bg().__value)
          {
            var t$3 = left;
            var t$4 = vec;
            var t$5 = offset;
            sk$SortedMap.toStringRecursive(t$3, t$4, t$5);
          }
        else
          {}
        var t$6 = offset;
        var t$7 = left;
        var t$8 = t$7.size();
        var t$9 = t$6.$pl(t$8);
        var newOffset = t$9;
        var t$10 = vec;
        var t$11 = newOffset;
        var t$12 = key;
        var t$13 = t$12.toString();
        var t$14 = t$13.$pl(new sk$String((' => ')));
        var t$15 = value;
        var t$16 = t$14.$pl(t$15);
        t$10.set(t$11, t$16);
        var t$17 = right;
        var t$18 = t$17.isEmpty();
        if (t$18.$bg().__value)
          {
            var t$19 = right;
            var t$20 = vec;
            var t$21 = newOffset;
            var t$22 = t$21.$pl(new sk$Int(1.0, 0.0));
            sk$SortedMap.toStringRecursive(t$19, t$20, t$22);
          }
        else
          {}
        return sk.__.$void;
      }
    }
  }
};

sk$SortedMap$dtNode.prototype.__bases = [
  sk$SortedMap$dtNode,
  sk$SortedMap
];

var sk$SortedMap$dtSortedMapIterator = sk.SortedMap$dtSortedMapIterator = function SortedMap$dtSortedMapIterator(nodes) {
  this.nodes = nodes;
};

sk$SortedMap$dtSortedMapIterator.prototype = Object.create(Object.prototype);

sk$SortedMap$dtSortedMapIterator.prototype.__constructor = sk$SortedMap$dtSortedMapIterator;

sk$SortedMap$dtSortedMapIterator.prototype.__classname = 'SortedMap.SortedMapIterator';

sk$SortedMap$dtSortedMapIterator.prototype.$frozen = undefined;

sk$SortedMap$dtSortedMapIterator.prototype.__type_switch_id = -1;

sk$SortedMap$dtSortedMapIterator.prototype.__copy = function() {
  return new (sk$SortedMap$dtSortedMapIterator)(this.nodes);
};

sk$SortedMap$dtSortedMapIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp386 = __cache.get(this);
  if (_tmp386 === undefined)
    {
      var _tmp386 = this.__copy();
      _tmp386.$frozen = true;
      __cache.set(this, _tmp386);
      _tmp386.nodes = skip.deepFreeze(_tmp386.nodes, __cache);
    }
  return _tmp386;
};

sk$SortedMap$dtSortedMapIterator.prototype.__init = function(__named_parameters) {};

sk$SortedMap$dtSortedMapIterator.extend = function(nodes, node) {
  var break_val;
  {
    jumpBlockOuterbreak$bg20310:{
      break$bg20310:{
        do
          {
            jumpBlockOutercontinue$bg20311:{
              continue$bg20311:{
                {
                  var current;
                  {
                    jumpBlockOuterjumpLab$bg20318:{
                      jumpLab$bg20318:{
                        jumpLab$bg20317:{
                          switch (node.__type_switch_id) {
                            case 314:
                              break jumpLab$bg20317;
                            
                            case 315:
                              current = node;
                              break jumpLab$bg20318;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg20310;
                        }
                      }
                      {
                        var t$ = nodes;
                        var t$1 = current;
                        t$.push(t$1);
                        var t$2 = current;
                        node = t$2.left;
                      }
                      break jumpBlockOuterjumpLab$bg20318;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg20311;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg20310;
    }
  }
  return break_val;
};

sk$SortedMap$dtSortedMapIterator.prototype.next = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.nodes;
  var t$2 = t$1.size();
  if (t$2.$lt$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = t$3.nodes;
      var node = t$4.pop();
      var t$5 = this;
      var t$6 = node;
      var t$7 = t$5.extractNodeValue(t$6);
      var v = new (sk$Some)(t$7);
      var t$8 = static1;
      var t$9 = this;
      var t$10 = t$9.nodes;
      var t$11 = node;
      var t$12 = t$11.right;
      t$8.extend(t$10, t$12);
      return v;
    }
};

sk$SortedMap$dtSortedMapIterator.prototype.__bases = [
  sk$SortedMap$dtSortedMapIterator,
  sk$Iterator
];

var sk$String$dtAscii = sk.String$dtAscii = function String$dtAscii() {};

sk$String$dtAscii.prototype = Object.create(Object.prototype);

sk$String$dtAscii.prototype.__constructor = sk$String$dtAscii;

sk$String$dtAscii.prototype.__classname = 'String.Ascii';

sk$String$dtAscii.prototype.$frozen = true;

sk$String$dtAscii.prototype.__type_switch_id = 320;

sk$String$dtAscii.prototype.__copy = function() {
  return new (sk$String$dtAscii)();
};

sk$String$dtAscii.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp387 = __cache.get(this);
  if (_tmp387 === undefined)
    {
      var _tmp387 = this.__copy();
      _tmp387.$frozen = true;
      __cache.set(this, _tmp387);
    }
  return _tmp387;
};

sk$String$dtAscii.prototype.__init = function(__named_parameters) {};

sk$String$dtAscii.prototype.code = function() {
  return new sk$String(('ascii'));
};

sk$String$dtAscii.prototype.__bases = [
  sk$String$dtAscii,
  sk$String$dtEncoding
];

var sk$String$dtCp437 = sk.String$dtCp437 = function String$dtCp437() {};

sk$String$dtCp437.prototype = Object.create(Object.prototype);

sk$String$dtCp437.prototype.__constructor = sk$String$dtCp437;

sk$String$dtCp437.prototype.__classname = 'String.Cp437';

sk$String$dtCp437.prototype.$frozen = true;

sk$String$dtCp437.prototype.__type_switch_id = 321;

sk$String$dtCp437.prototype.__copy = function() {
  return new (sk$String$dtCp437)();
};

sk$String$dtCp437.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp388 = __cache.get(this);
  if (_tmp388 === undefined)
    {
      var _tmp388 = this.__copy();
      _tmp388.$frozen = true;
      __cache.set(this, _tmp388);
    }
  return _tmp388;
};

sk$String$dtCp437.prototype.__init = function(__named_parameters) {};

sk$String$dtCp437.prototype.code = function() {
  return new sk$String(('cp437'));
};

sk$String$dtCp437.prototype.__bases = [
  sk$String$dtCp437,
  sk$String$dtEncoding
];

var sk$String$dtCustomEncoding = sk.String$dtCustomEncoding = function String$dtCustomEncoding(name) {
  this.name = name;
};

sk$String$dtCustomEncoding.prototype = Object.create(Object.prototype);

sk$String$dtCustomEncoding.prototype.__constructor = sk$String$dtCustomEncoding;

sk$String$dtCustomEncoding.prototype.__classname = 'String.CustomEncoding';

sk$String$dtCustomEncoding.prototype.$frozen = true;

sk$String$dtCustomEncoding.prototype.__type_switch_id = 322;

sk$String$dtCustomEncoding.prototype.__copy = function() {
  return new (sk$String$dtCustomEncoding)(this.name);
};

sk$String$dtCustomEncoding.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp389 = __cache.get(this);
  if (_tmp389 === undefined)
    {
      var _tmp389 = this.__copy();
      _tmp389.$frozen = true;
      __cache.set(this, _tmp389);
      _tmp389.name = skip.deepFreeze(_tmp389.name, __cache);
    }
  return _tmp389;
};

sk$String$dtCustomEncoding.prototype.__init = function(__named_parameters) {};

sk$String$dtCustomEncoding.prototype.code = function() {
  var t$ = this;
  return t$.name;
};

sk$String$dtCustomEncoding.prototype.__bases = [
  sk$String$dtCustomEncoding,
  sk$String$dtEncoding
];

var sk$String$dtIso8859_1 = sk.String$dtIso8859_1 = function String$dtIso8859_1() {};

sk$String$dtIso8859_1.prototype = Object.create(Object.prototype);

sk$String$dtIso8859_1.prototype.__constructor = sk$String$dtIso8859_1;

sk$String$dtIso8859_1.prototype.__classname = 'String.Iso8859_1';

sk$String$dtIso8859_1.prototype.$frozen = true;

sk$String$dtIso8859_1.prototype.__type_switch_id = 323;

sk$String$dtIso8859_1.prototype.__copy = function() {
  return new (sk$String$dtIso8859_1)();
};

sk$String$dtIso8859_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp390 = __cache.get(this);
  if (_tmp390 === undefined)
    {
      var _tmp390 = this.__copy();
      _tmp390.$frozen = true;
      __cache.set(this, _tmp390);
    }
  return _tmp390;
};

sk$String$dtIso8859_1.prototype.__init = function(__named_parameters) {};

sk$String$dtIso8859_1.prototype.code = function() {
  return new sk$String(('iso8859-1'));
};

sk$String$dtIso8859_1.prototype.__bases = [
  sk$String$dtIso8859_1,
  sk$String$dtEncoding
];

var sk$String$dtStringIterator = sk.String$dtStringIterator = function String$dtStringIterator(s, i, length) {
  this.s = s;
  this.i = i;
  this.length = length;
};

sk$String$dtStringIterator.prototype = Object.create(Object.prototype);

sk$String$dtStringIterator.prototype.__constructor = sk$String$dtStringIterator;

sk$String$dtStringIterator.prototype.__classname = 'String.StringIterator';

sk$String$dtStringIterator.prototype.$frozen = false;

sk$String$dtStringIterator.prototype.__type_switch_id = 145;

sk$String$dtStringIterator.prototype.__copy = function() {
  return new (sk$String$dtStringIterator)(this.s, this.i, this.length);
};

sk$String$dtStringIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp391 = __cache.get(this);
  if (_tmp391 === undefined)
    {
      var _tmp391 = this.__copy();
      _tmp391.$frozen = true;
      __cache.set(this, _tmp391);
      _tmp391.s = skip.deepFreeze(_tmp391.s, __cache);
      _tmp391.i = skip.deepFreeze(_tmp391.i, __cache);
      _tmp391.length = skip.deepFreeze(_tmp391.length, __cache);
    }
  return _tmp391;
};

sk$String$dtStringIterator.prototype.__init = function(__named_parameters) {};

sk$String$dtStringIterator.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$String$dtStringIterator.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg21282:{
      jumpLab$bg21282:{
        jumpLab$bg21281:{
          switch (other.__type_switch_id) {
            case 145:
              otherTyped = other;
              break jumpLab$bg21281;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = this;
          var t$1 = t$.s;
          var t$2 = otherTyped;
          var t$3 = t$2.s;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.i;
          var t$7 = otherTyped;
          var t$8 = t$7.i;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$10 = this;
          var t$11 = t$10.length;
          var t$12 = otherTyped;
          var t$13 = t$12.length;
          var t$14 = sk$isEqual(t$11, t$13);
          if (t$14.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$String$dtStringIterator.prototype.atEnd = function() {
  var t$ = this;
  var t$1 = t$.i;
  var t$2 = this;
  var t$3 = t$2.length;
  return t$1.$gt$eq(t$3);
};

sk$String$dtStringIterator.prototype.clone = function() {
  var t$ = this;
  var t$1 = t$.s;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = this;
  var t$5 = t$4.length;
  return new (sk$String$dtStringIterator)(t$1, t$3, t$5);
};

sk$String$dtStringIterator.prototype.current = function() {
  var t$ = this;
  if (t$.atEnd().__value)
    return singleton$None;
  else
    {
      var t$1 = this;
      var t$2 = t$1.s;
      var t$3 = this;
      var t$4 = t$3.i;
      var t$5 = t$2.get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$String$dtStringIterator.prototype.drop = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Called StringIterator::drop with negative number')));
  var $var = this;
  var t$2 = $var;
  var t$3 = this;
  var t$4 = t$3.length;
  var t$5 = this;
  var t$6 = t$5.i;
  var t$7 = n;
  var t$8 = t$6.$pl(t$7);
  var t$9 = t$2;
  t$9.i = sk$min(t$4, t$8);
  return this;
};

sk$String$dtStringIterator.make = function(s) {
  var t$ = s;
  var t$1 = s;
  var t$2 = t$1.length();
  return new (sk$String$dtStringIterator)(t$, new sk$Int(0.0, 0.0), t$2);
};

sk$String$dtStringIterator.prototype.next = function() {
  var t$ = this;
  var result = t$.current();
  var t$1 = result;
  if (t$1.isSome().__value)
    {
      var $var = this;
      var t$2 = $var;
      var t$3 = this;
      var t$4 = t$3.i;
      var t$5 = t$2;
      t$5.i = t$4.$pl(new sk$Int(1.0, 0.0));
    }
  else
    {}
  return result;
};

sk$String$dtStringIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.length;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = t$1.$mi(t$3);
  return new (sk$Some)(t$4);
};

sk$String$dtStringIterator.prototype.substring = function(end) {
  var t$ = this;
  var t$1 = t$.s;
  var t$2 = this;
  var t$3 = t$2.i;
  var t$4 = end;
  var t$5 = t$4.i;
  var t$6 = this;
  var t$7 = t$6.i;
  var t$8 = t$5.$mi(t$7);
  return t$1.sub(t$3, t$8);
};

sk$String$dtStringIterator.prototype.__bases = [
  sk$String$dtStringIterator,
  sk$Iterator
];

var sk$String$dtUtf16BE = sk.String$dtUtf16BE = function String$dtUtf16BE() {};

sk$String$dtUtf16BE.prototype = Object.create(Object.prototype);

sk$String$dtUtf16BE.prototype.__constructor = sk$String$dtUtf16BE;

sk$String$dtUtf16BE.prototype.__classname = 'String.Utf16BE';

sk$String$dtUtf16BE.prototype.$frozen = true;

sk$String$dtUtf16BE.prototype.__type_switch_id = 324;

sk$String$dtUtf16BE.prototype.__copy = function() {
  return new (sk$String$dtUtf16BE)();
};

sk$String$dtUtf16BE.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp392 = __cache.get(this);
  if (_tmp392 === undefined)
    {
      var _tmp392 = this.__copy();
      _tmp392.$frozen = true;
      __cache.set(this, _tmp392);
    }
  return _tmp392;
};

sk$String$dtUtf16BE.prototype.__init = function(__named_parameters) {};

sk$String$dtUtf16BE.prototype.code = function() {
  return new sk$String(('utf16be'));
};

sk$String$dtUtf16BE.prototype.__bases = [
  sk$String$dtUtf16BE,
  sk$String$dtEncoding
];

var sk$String$dtUtf16LE = sk.String$dtUtf16LE = function String$dtUtf16LE() {};

sk$String$dtUtf16LE.prototype = Object.create(Object.prototype);

sk$String$dtUtf16LE.prototype.__constructor = sk$String$dtUtf16LE;

sk$String$dtUtf16LE.prototype.__classname = 'String.Utf16LE';

sk$String$dtUtf16LE.prototype.$frozen = true;

sk$String$dtUtf16LE.prototype.__type_switch_id = 325;

sk$String$dtUtf16LE.prototype.__copy = function() {
  return new (sk$String$dtUtf16LE)();
};

sk$String$dtUtf16LE.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp393 = __cache.get(this);
  if (_tmp393 === undefined)
    {
      var _tmp393 = this.__copy();
      _tmp393.$frozen = true;
      __cache.set(this, _tmp393);
    }
  return _tmp393;
};

sk$String$dtUtf16LE.prototype.__init = function(__named_parameters) {};

sk$String$dtUtf16LE.prototype.code = function() {
  return new sk$String(('utf16le'));
};

sk$String$dtUtf16LE.prototype.__bases = [
  sk$String$dtUtf16LE,
  sk$String$dtEncoding
];

var sk$String$dtUtf8 = sk.String$dtUtf8 = function String$dtUtf8() {};

sk$String$dtUtf8.prototype = Object.create(Object.prototype);

sk$String$dtUtf8.prototype.__constructor = sk$String$dtUtf8;

sk$String$dtUtf8.prototype.__classname = 'String.Utf8';

sk$String$dtUtf8.prototype.$frozen = true;

sk$String$dtUtf8.prototype.__type_switch_id = 326;

sk$String$dtUtf8.prototype.__copy = function() {
  return new (sk$String$dtUtf8)();
};

sk$String$dtUtf8.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp394 = __cache.get(this);
  if (_tmp394 === undefined)
    {
      var _tmp394 = this.__copy();
      _tmp394.$frozen = true;
      __cache.set(this, _tmp394);
    }
  return _tmp394;
};

sk$String$dtUtf8.prototype.__init = function(__named_parameters) {};

sk$String$dtUtf8.prototype.code = function() {
  return new sk$String(('utf8'));
};

sk$String$dtUtf8.prototype.__bases = [
  sk$String$dtUtf8,
  sk$String$dtEncoding
];

var sk$StringMetaClass = sk.StringMetaClass = function StringMetaClass() {};

sk$StringMetaClass.prototype = Object.create(Object.prototype);

sk$StringMetaClass.prototype.__constructor = sk$StringMetaClass;

sk$StringMetaClass.prototype.__classname = 'StringMetaClass';

sk$StringMetaClass.prototype.$frozen = true;

sk$StringMetaClass.prototype.__type_switch_id = 191;

sk$StringMetaClass.prototype.__copy = function() {
  return new (sk$StringMetaClass)();
};

sk$StringMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp395 = __cache.get(this);
  if (_tmp395 === undefined)
    {
      var _tmp395 = this.__copy();
      _tmp395.$frozen = true;
      __cache.set(this, _tmp395);
    }
  return _tmp395;
};

sk$StringMetaClass.prototype.__init = function(__named_parameters) {};

sk$StringMetaClass.prototype.description = function() {
  return new sk$String(('String')).toString();
};

sk$StringMetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  return t$.readString();
};

sk$StringMetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var t$1 = value;
  return t$.writeString(t$1);
};

sk$StringMetaClass.prototype.__bases = [
  sk$StringMetaClass,
  sk$MetaClass
];

var sk$Subprocess$dtEmptyArgumentsError = sk.Subprocess$dtEmptyArgumentsError = function Subprocess$dtEmptyArgumentsError() {};

sk$Subprocess$dtEmptyArgumentsError.prototype = Object.create(Object.prototype);

sk$Subprocess$dtEmptyArgumentsError.prototype.__constructor = sk$Subprocess$dtEmptyArgumentsError;

sk$Subprocess$dtEmptyArgumentsError.prototype.__classname = 'Subprocess.EmptyArgumentsError';

sk$Subprocess$dtEmptyArgumentsError.prototype.$frozen = true;

sk$Subprocess$dtEmptyArgumentsError.prototype.__type_switch_id = 78;

sk$Subprocess$dtEmptyArgumentsError.prototype.__copy = function() {
  return new (sk$Subprocess$dtEmptyArgumentsError)();
};

sk$Subprocess$dtEmptyArgumentsError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp396 = __cache.get(this);
  if (_tmp396 === undefined)
    {
      var _tmp396 = this.__copy();
      _tmp396.$frozen = true;
      __cache.set(this, _tmp396);
    }
  return _tmp396;
};

sk$Subprocess$dtEmptyArgumentsError.prototype.__init = function(__named_parameters) {};

sk$Subprocess$dtEmptyArgumentsError.prototype.getMessage = function() {
  return new sk$String(('Empty arguments to sub-process'));
};

sk$Subprocess$dtEmptyArgumentsError.prototype.__bases = [
  sk$Subprocess$dtEmptyArgumentsError,
  sk$Exception
];

var sk$Success = sk.Success = function Success(value) {
  this.value = value;
};

sk$Success.prototype = Object.create(Object.prototype);

sk$Success.prototype.__constructor = sk$Success;

sk$Success.prototype.__classname = 'Success';

sk$Success.prototype.$frozen = true;

sk$Success.prototype.__type_switch_id = 259;

sk$Success.prototype.__copy = function() {
  return new (sk$Success)(this.value);
};

sk$Success.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp397 = __cache.get(this);
  if (_tmp397 === undefined)
    {
      var _tmp397 = this.__copy();
      _tmp397.$frozen = true;
      __cache.set(this, _tmp397);
      _tmp397.value = skip.deepFreeze(_tmp397.value, __cache);
    }
  return _tmp397;
};

sk$Success.prototype.__init = function(__named_parameters) {};

sk$Success.prototype.compare = function(other) {
  var t$ = this;
  var value1 = t$.value;
  var value2;
  {
    jumpBlockOuterjumpLab$bg21652:{
      jumpLab$bg21652:{
        jumpLab$bg21651:{
          switch (other.__type_switch_id) {
            case 259:
              value2 = other.value;
              break jumpLab$bg21651;
            
            default:
              break jumpLab$bg21652;

          }
        }
        {
          var t$1 = value1;
          var t$2 = value2;
          return sk$compare(t$1, t$2);
        }
      }
      return singleton$GT;
    }
  }
};

sk$Success.prototype.flatMap = function(f) {
  var t$ = this;
  var value = t$.value;
  var t$1 = f;
  var t$2 = value;
  return t$1(t$2);
};

sk$Success.prototype.fromFailure = function(message) {
  if (message === undefined)
    message = ((() => 
    {
      return new sk$String(('fromFailure() called on Success'));
    })());
  var t$ = message;
  return sk$invariant_violation(t$);
};

sk$Success.prototype.fromSuccess = function(message) {
  if (message === undefined)
    message = ((() => 
    {
      return new sk$String(('fromSuccess() called on Failure'));
    })());
  var t$ = this;
  return t$.value;
};

sk$Success.generator = function(successGenerator, failureGenerator) {
  var t$ = successGenerator;
  var t$1 = failureGenerator;
  return new (sk$QuickCheck$dtResultGenerator)(t$, t$1);
};

sk$Success.guard = function(f) {
  try {
    {
      var t$ = f;
      var t$1 = t$();
      return new (sk$Success)(t$1);
    }
  }catch ($var){
    {
      var exn;
      {
        jumpBlockOuterjumpLab$bg21670:{
          jumpLab$bg21670:{
            {
              exn = $var;
              break jumpLab$bg21670;
            }
          }
          {
            var t$2 = exn;
            return new (sk$Failure)(t$2);
          }
        }
      }
    }
  }
};

sk$Success.prototype.isFailure = function() {
  return new sk$Bool((false));
};

sk$Success.prototype.isSuccess = function() {
  return new sk$Bool((true));
};

sk$Success.prototype.map = function(f) {
  var t$ = this;
  var value = t$.value;
  var t$1 = f;
  var t$2 = value;
  var t$3 = t$1(t$2);
  return new (sk$Success)(t$3);
};

sk$Success.prototype.maybeFailure = function() {
  return singleton$None;
};

sk$Success.prototype.maybeSuccess = function() {
  var t$ = this;
  var value = t$.value;
  var t$1 = value;
  return new (sk$Some)(t$1);
};

sk$Success.prototype.perturb = function(rng) {
  var t$ = this;
  var s = t$.value;
  var t$1 = rng;
  t$1.perturb(new sk$Int(0.0, 0.0));
  var t$2 = s;
  var t$3 = rng;
  return t$2.perturb(t$3);
};

sk$Success.prototype.property = function() {
  return new (sk$QuickCheck$dtTestResultProperty)(singleton$QuickCheck$dtTestSuccess);
};

sk$Success.prototype.shrink = function(firstShrink) {
  if (firstShrink === undefined)
    firstShrink = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = this;
  var s = t$.value;
  var t$1 = s;
  var t$2 = firstShrink;
  var t$3 = t$1.shrink(t$2);
  return t$3.map(((s2) => 
  {
    var t$4 = s2;
    var t$5 = new (sk$Success)(t$4);
    return t$5;
  }));
};

sk$Success.prototype.__bases = [
  sk$Success,
  sk$Result
];

var sk$Test$dtMixedInt = sk.Test$dtMixedInt = function Test$dtMixedInt($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Test$dtMixedInt.prototype = Object.create(Object.prototype);

sk$Test$dtMixedInt.prototype.__constructor = sk$Test$dtMixedInt;

sk$Test$dtMixedInt.prototype.__classname = 'Test.MixedInt';

sk$Test$dtMixedInt.prototype.$frozen = true;

sk$Test$dtMixedInt.prototype.__type_switch_id = 329;

sk$Test$dtMixedInt.prototype.__copy = function() {
  return new (sk$Test$dtMixedInt)(this.$atparam0);
};

sk$Test$dtMixedInt.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp398 = __cache.get(this);
  if (_tmp398 === undefined)
    {
      var _tmp398 = this.__copy();
      _tmp398.$frozen = true;
      __cache.set(this, _tmp398);
      _tmp398.$atparam0 = skip.deepFreeze(_tmp398.$atparam0, __cache);
    }
  return _tmp398;
};

sk$Test$dtMixedInt.prototype.__init = function(__named_parameters) {};

sk$Test$dtMixedInt.prototype.asInt = function() {
  var t$ = this;
  return t$.$atparam0;
};

sk$Test$dtMixedInt.prototype.asString = function() {
  return sk$invariant_violation(new sk$String(('asString() called on MixedInt')));
};

sk$Test$dtMixedInt.prototype.toString = function() {
  var t$ = this;
  var i = t$.$atparam0;
  var t$1 = i;
  return t$1.toString();
};

sk$Test$dtMixedInt.prototype.__bases = [
  sk$Test$dtMixedInt,
  sk$Test$dtMixedScalar
];

var sk$Test$dtMixedString = sk.Test$dtMixedString = function Test$dtMixedString($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Test$dtMixedString.prototype = Object.create(Object.prototype);

sk$Test$dtMixedString.prototype.__constructor = sk$Test$dtMixedString;

sk$Test$dtMixedString.prototype.__classname = 'Test.MixedString';

sk$Test$dtMixedString.prototype.$frozen = true;

sk$Test$dtMixedString.prototype.__type_switch_id = 330;

sk$Test$dtMixedString.prototype.__copy = function() {
  return new (sk$Test$dtMixedString)(this.$atparam0);
};

sk$Test$dtMixedString.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp399 = __cache.get(this);
  if (_tmp399 === undefined)
    {
      var _tmp399 = this.__copy();
      _tmp399.$frozen = true;
      __cache.set(this, _tmp399);
      _tmp399.$atparam0 = skip.deepFreeze(_tmp399.$atparam0, __cache);
    }
  return _tmp399;
};

sk$Test$dtMixedString.prototype.__init = function(__named_parameters) {};

sk$Test$dtMixedString.prototype.asInt = function() {
  return sk$invariant_violation(new sk$String(('asString() called on MixedInt')));
};

sk$Test$dtMixedString.prototype.asString = function() {
  var t$ = this;
  return t$.$atparam0;
};

sk$Test$dtMixedString.prototype.toString = function() {
  var t$ = this;
  return t$.$atparam0;
};

sk$Test$dtMixedString.prototype.__bases = [
  sk$Test$dtMixedString,
  sk$Test$dtMixedScalar
];

var sk$TokenKind$dtBEGINNING_OF_FILE = sk.TokenKind$dtBEGINNING_OF_FILE = function TokenKind$dtBEGINNING_OF_FILE() {};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype = Object.create(Object.prototype);

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__constructor = sk$TokenKind$dtBEGINNING_OF_FILE;

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__classname = 'TokenKind.BEGINNING_OF_FILE';

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$frozen = true;

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__type_switch_id = 334;

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__copy = function() {
  return new (sk$TokenKind$dtBEGINNING_OF_FILE)();
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp400 = __cache.get(this);
  if (_tmp400 === undefined)
    {
      var _tmp400 = this.__copy();
      _tmp400.$frozen = true;
      __cache.set(this, _tmp400);
    }
  return _tmp400;
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__init = function(__named_parameters) {};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.compare = function(other) {
  jumpBlockOuterjumpLab$bg21997:{
    jumpLab$bg21997:{
      jumpLab$bg21996:{
        switch (other.__type_switch_id) {
          case 334:
            break jumpLab$bg21996;
          
          default:
            break jumpLab$bg21997;

        }
      }
      return singleton$EQ;
    }
    {
      var t$ = this;
      var t$1 = t$.getClassName();
      var t$2 = other;
      var t$3 = t$2.getClassName();
      return t$1.compare(t$3);
    }
  }
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.getClassName = function() {
  return new sk$String(('TokenKind.BEGINNING_OF_FILE'));
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.hash = function() {
  return new sk$String(('TokenKind.BEGINNING_OF_FILE')).hash();
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.toString = function() {
  return new sk$String(('begining of file'));
};

sk$TokenKind$dtBEGINNING_OF_FILE.prototype.__bases = [
  sk$TokenKind$dtBEGINNING_OF_FILE,
  sk$TokenKind$dtTokenKind
];

var sk$TokenKind$dtEND_OF_FILE = sk.TokenKind$dtEND_OF_FILE = function TokenKind$dtEND_OF_FILE() {};

sk$TokenKind$dtEND_OF_FILE.prototype = Object.create(Object.prototype);

sk$TokenKind$dtEND_OF_FILE.prototype.__constructor = sk$TokenKind$dtEND_OF_FILE;

sk$TokenKind$dtEND_OF_FILE.prototype.__classname = 'TokenKind.END_OF_FILE';

sk$TokenKind$dtEND_OF_FILE.prototype.$frozen = true;

sk$TokenKind$dtEND_OF_FILE.prototype.__type_switch_id = 335;

sk$TokenKind$dtEND_OF_FILE.prototype.__copy = function() {
  return new (sk$TokenKind$dtEND_OF_FILE)();
};

sk$TokenKind$dtEND_OF_FILE.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp401 = __cache.get(this);
  if (_tmp401 === undefined)
    {
      var _tmp401 = this.__copy();
      _tmp401.$frozen = true;
      __cache.set(this, _tmp401);
    }
  return _tmp401;
};

sk$TokenKind$dtEND_OF_FILE.prototype.__init = function(__named_parameters) {};

sk$TokenKind$dtEND_OF_FILE.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$TokenKind$dtEND_OF_FILE.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$TokenKind$dtEND_OF_FILE.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$TokenKind$dtEND_OF_FILE.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$TokenKind$dtEND_OF_FILE.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$TokenKind$dtEND_OF_FILE.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$TokenKind$dtEND_OF_FILE.prototype.compare = function(other) {
  jumpBlockOuterjumpLab$bg22025:{
    jumpLab$bg22025:{
      jumpLab$bg22024:{
        switch (other.__type_switch_id) {
          case 335:
            break jumpLab$bg22024;
          
          default:
            break jumpLab$bg22025;

        }
      }
      return singleton$EQ;
    }
    {
      var t$ = this;
      var t$1 = t$.getClassName();
      var t$2 = other;
      var t$3 = t$2.getClassName();
      return t$1.compare(t$3);
    }
  }
};

sk$TokenKind$dtEND_OF_FILE.prototype.getClassName = function() {
  return new sk$String(('TokenKind.END_OF_FILE'));
};

sk$TokenKind$dtEND_OF_FILE.prototype.hash = function() {
  return new sk$String(('TokenKind.END_OF_FILE')).hash();
};

sk$TokenKind$dtEND_OF_FILE.prototype.toString = function() {
  return new sk$String(('end of file'));
};

sk$TokenKind$dtEND_OF_FILE.prototype.__bases = [
  sk$TokenKind$dtEND_OF_FILE,
  sk$TokenKind$dtTokenKind
];

var sk$TokenKind$dtERROR = sk.TokenKind$dtERROR = function TokenKind$dtERROR() {};

sk$TokenKind$dtERROR.prototype = Object.create(Object.prototype);

sk$TokenKind$dtERROR.prototype.__constructor = sk$TokenKind$dtERROR;

sk$TokenKind$dtERROR.prototype.__classname = 'TokenKind.ERROR';

sk$TokenKind$dtERROR.prototype.$frozen = true;

sk$TokenKind$dtERROR.prototype.__type_switch_id = 336;

sk$TokenKind$dtERROR.prototype.__copy = function() {
  return new (sk$TokenKind$dtERROR)();
};

sk$TokenKind$dtERROR.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp402 = __cache.get(this);
  if (_tmp402 === undefined)
    {
      var _tmp402 = this.__copy();
      _tmp402.$frozen = true;
      __cache.set(this, _tmp402);
    }
  return _tmp402;
};

sk$TokenKind$dtERROR.prototype.__init = function(__named_parameters) {};

sk$TokenKind$dtERROR.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$TokenKind$dtERROR.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$TokenKind$dtERROR.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$TokenKind$dtERROR.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$TokenKind$dtERROR.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$TokenKind$dtERROR.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$TokenKind$dtERROR.prototype.compare = function(other) {
  jumpBlockOuterjumpLab$bg22053:{
    jumpLab$bg22053:{
      jumpLab$bg22052:{
        switch (other.__type_switch_id) {
          case 336:
            break jumpLab$bg22052;
          
          default:
            break jumpLab$bg22053;

        }
      }
      return singleton$EQ;
    }
    {
      var t$ = this;
      var t$1 = t$.getClassName();
      var t$2 = other;
      var t$3 = t$2.getClassName();
      return t$1.compare(t$3);
    }
  }
};

sk$TokenKind$dtERROR.prototype.getClassName = function() {
  return new sk$String(('TokenKind.ERROR'));
};

sk$TokenKind$dtERROR.prototype.hash = function() {
  return new sk$String(('TokenKind.ERROR')).hash();
};

sk$TokenKind$dtERROR.prototype.toString = function() {
  return new sk$String(('<ERROR>'));
};

sk$TokenKind$dtERROR.prototype.__bases = [
  sk$TokenKind$dtERROR,
  sk$TokenKind$dtTokenKind
];

var sk$Tuple$dtC10_0 = sk.Tuple$dtC10_0 = function Tuple$dtC10_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_0.prototype.__constructor = sk$Tuple$dtC10_0;

sk$Tuple$dtC10_0.prototype.__classname = 'Tuple.C10_0';

sk$Tuple$dtC10_0.prototype.$frozen = true;

sk$Tuple$dtC10_0.prototype.__type_switch_id = 337;

sk$Tuple$dtC10_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_0)(this.$atparam0);
};

sk$Tuple$dtC10_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp403 = __cache.get(this);
  if (_tmp403 === undefined)
    {
      var _tmp403 = this.__copy();
      _tmp403.$frozen = true;
      __cache.set(this, _tmp403);
      _tmp403.$atparam0 = skip.deepFreeze(_tmp403.$atparam0, __cache);
    }
  return _tmp403;
};

sk$Tuple$dtC10_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_0.prototype.__bases = [
  sk$Tuple$dtC10_0,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_1 = sk.Tuple$dtC10_1 = function Tuple$dtC10_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_1.prototype.__constructor = sk$Tuple$dtC10_1;

sk$Tuple$dtC10_1.prototype.__classname = 'Tuple.C10_1';

sk$Tuple$dtC10_1.prototype.$frozen = true;

sk$Tuple$dtC10_1.prototype.__type_switch_id = 338;

sk$Tuple$dtC10_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_1)(this.$atparam0);
};

sk$Tuple$dtC10_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp404 = __cache.get(this);
  if (_tmp404 === undefined)
    {
      var _tmp404 = this.__copy();
      _tmp404.$frozen = true;
      __cache.set(this, _tmp404);
      _tmp404.$atparam0 = skip.deepFreeze(_tmp404.$atparam0, __cache);
    }
  return _tmp404;
};

sk$Tuple$dtC10_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_1.prototype.__bases = [
  sk$Tuple$dtC10_1,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_2 = sk.Tuple$dtC10_2 = function Tuple$dtC10_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_2.prototype.__constructor = sk$Tuple$dtC10_2;

sk$Tuple$dtC10_2.prototype.__classname = 'Tuple.C10_2';

sk$Tuple$dtC10_2.prototype.$frozen = true;

sk$Tuple$dtC10_2.prototype.__type_switch_id = 339;

sk$Tuple$dtC10_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_2)(this.$atparam0);
};

sk$Tuple$dtC10_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp405 = __cache.get(this);
  if (_tmp405 === undefined)
    {
      var _tmp405 = this.__copy();
      _tmp405.$frozen = true;
      __cache.set(this, _tmp405);
      _tmp405.$atparam0 = skip.deepFreeze(_tmp405.$atparam0, __cache);
    }
  return _tmp405;
};

sk$Tuple$dtC10_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_2.prototype.__bases = [
  sk$Tuple$dtC10_2,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_3 = sk.Tuple$dtC10_3 = function Tuple$dtC10_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_3.prototype.__constructor = sk$Tuple$dtC10_3;

sk$Tuple$dtC10_3.prototype.__classname = 'Tuple.C10_3';

sk$Tuple$dtC10_3.prototype.$frozen = true;

sk$Tuple$dtC10_3.prototype.__type_switch_id = 340;

sk$Tuple$dtC10_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_3)(this.$atparam0);
};

sk$Tuple$dtC10_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp406 = __cache.get(this);
  if (_tmp406 === undefined)
    {
      var _tmp406 = this.__copy();
      _tmp406.$frozen = true;
      __cache.set(this, _tmp406);
      _tmp406.$atparam0 = skip.deepFreeze(_tmp406.$atparam0, __cache);
    }
  return _tmp406;
};

sk$Tuple$dtC10_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_3.prototype.__bases = [
  sk$Tuple$dtC10_3,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_4 = sk.Tuple$dtC10_4 = function Tuple$dtC10_4($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_4.prototype.__constructor = sk$Tuple$dtC10_4;

sk$Tuple$dtC10_4.prototype.__classname = 'Tuple.C10_4';

sk$Tuple$dtC10_4.prototype.$frozen = true;

sk$Tuple$dtC10_4.prototype.__type_switch_id = 341;

sk$Tuple$dtC10_4.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_4)(this.$atparam0);
};

sk$Tuple$dtC10_4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp407 = __cache.get(this);
  if (_tmp407 === undefined)
    {
      var _tmp407 = this.__copy();
      _tmp407.$frozen = true;
      __cache.set(this, _tmp407);
      _tmp407.$atparam0 = skip.deepFreeze(_tmp407.$atparam0, __cache);
    }
  return _tmp407;
};

sk$Tuple$dtC10_4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_4.prototype.__bases = [
  sk$Tuple$dtC10_4,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_5 = sk.Tuple$dtC10_5 = function Tuple$dtC10_5($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_5.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_5.prototype.__constructor = sk$Tuple$dtC10_5;

sk$Tuple$dtC10_5.prototype.__classname = 'Tuple.C10_5';

sk$Tuple$dtC10_5.prototype.$frozen = true;

sk$Tuple$dtC10_5.prototype.__type_switch_id = 342;

sk$Tuple$dtC10_5.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_5)(this.$atparam0);
};

sk$Tuple$dtC10_5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp408 = __cache.get(this);
  if (_tmp408 === undefined)
    {
      var _tmp408 = this.__copy();
      _tmp408.$frozen = true;
      __cache.set(this, _tmp408);
      _tmp408.$atparam0 = skip.deepFreeze(_tmp408.$atparam0, __cache);
    }
  return _tmp408;
};

sk$Tuple$dtC10_5.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_5.prototype.__bases = [
  sk$Tuple$dtC10_5,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_6 = sk.Tuple$dtC10_6 = function Tuple$dtC10_6($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_6.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_6.prototype.__constructor = sk$Tuple$dtC10_6;

sk$Tuple$dtC10_6.prototype.__classname = 'Tuple.C10_6';

sk$Tuple$dtC10_6.prototype.$frozen = true;

sk$Tuple$dtC10_6.prototype.__type_switch_id = 343;

sk$Tuple$dtC10_6.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_6)(this.$atparam0);
};

sk$Tuple$dtC10_6.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp409 = __cache.get(this);
  if (_tmp409 === undefined)
    {
      var _tmp409 = this.__copy();
      _tmp409.$frozen = true;
      __cache.set(this, _tmp409);
      _tmp409.$atparam0 = skip.deepFreeze(_tmp409.$atparam0, __cache);
    }
  return _tmp409;
};

sk$Tuple$dtC10_6.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_6.prototype.__bases = [
  sk$Tuple$dtC10_6,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_7 = sk.Tuple$dtC10_7 = function Tuple$dtC10_7($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_7.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_7.prototype.__constructor = sk$Tuple$dtC10_7;

sk$Tuple$dtC10_7.prototype.__classname = 'Tuple.C10_7';

sk$Tuple$dtC10_7.prototype.$frozen = true;

sk$Tuple$dtC10_7.prototype.__type_switch_id = 344;

sk$Tuple$dtC10_7.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_7)(this.$atparam0);
};

sk$Tuple$dtC10_7.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp410 = __cache.get(this);
  if (_tmp410 === undefined)
    {
      var _tmp410 = this.__copy();
      _tmp410.$frozen = true;
      __cache.set(this, _tmp410);
      _tmp410.$atparam0 = skip.deepFreeze(_tmp410.$atparam0, __cache);
    }
  return _tmp410;
};

sk$Tuple$dtC10_7.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_7.prototype.__bases = [
  sk$Tuple$dtC10_7,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_8 = sk.Tuple$dtC10_8 = function Tuple$dtC10_8($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_8.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_8.prototype.__constructor = sk$Tuple$dtC10_8;

sk$Tuple$dtC10_8.prototype.__classname = 'Tuple.C10_8';

sk$Tuple$dtC10_8.prototype.$frozen = true;

sk$Tuple$dtC10_8.prototype.__type_switch_id = 345;

sk$Tuple$dtC10_8.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_8)(this.$atparam0);
};

sk$Tuple$dtC10_8.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp411 = __cache.get(this);
  if (_tmp411 === undefined)
    {
      var _tmp411 = this.__copy();
      _tmp411.$frozen = true;
      __cache.set(this, _tmp411);
      _tmp411.$atparam0 = skip.deepFreeze(_tmp411.$atparam0, __cache);
    }
  return _tmp411;
};

sk$Tuple$dtC10_8.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_8.prototype.__bases = [
  sk$Tuple$dtC10_8,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC10_9 = sk.Tuple$dtC10_9 = function Tuple$dtC10_9($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC10_9.prototype = Object.create(Object.prototype);

sk$Tuple$dtC10_9.prototype.__constructor = sk$Tuple$dtC10_9;

sk$Tuple$dtC10_9.prototype.__classname = 'Tuple.C10_9';

sk$Tuple$dtC10_9.prototype.$frozen = true;

sk$Tuple$dtC10_9.prototype.__type_switch_id = 346;

sk$Tuple$dtC10_9.prototype.__copy = function() {
  return new (sk$Tuple$dtC10_9)(this.$atparam0);
};

sk$Tuple$dtC10_9.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp412 = __cache.get(this);
  if (_tmp412 === undefined)
    {
      var _tmp412 = this.__copy();
      _tmp412.$frozen = true;
      __cache.set(this, _tmp412);
      _tmp412.$atparam0 = skip.deepFreeze(_tmp412.$atparam0, __cache);
    }
  return _tmp412;
};

sk$Tuple$dtC10_9.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC10_9.prototype.__bases = [
  sk$Tuple$dtC10_9,
  sk$Tuple$dtC10
];

var sk$Tuple$dtC2_0 = sk.Tuple$dtC2_0 = function Tuple$dtC2_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC2_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC2_0.prototype.__constructor = sk$Tuple$dtC2_0;

sk$Tuple$dtC2_0.prototype.__classname = 'Tuple.C2_0';

sk$Tuple$dtC2_0.prototype.$frozen = true;

sk$Tuple$dtC2_0.prototype.__type_switch_id = 347;

sk$Tuple$dtC2_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC2_0)(this.$atparam0);
};

sk$Tuple$dtC2_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp413 = __cache.get(this);
  if (_tmp413 === undefined)
    {
      var _tmp413 = this.__copy();
      _tmp413.$frozen = true;
      __cache.set(this, _tmp413);
      _tmp413.$atparam0 = skip.deepFreeze(_tmp413.$atparam0, __cache);
    }
  return _tmp413;
};

sk$Tuple$dtC2_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC2_0.prototype.__bases = [
  sk$Tuple$dtC2_0,
  sk$Tuple$dtC2
];

var sk$Tuple$dtC2_1 = sk.Tuple$dtC2_1 = function Tuple$dtC2_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC2_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC2_1.prototype.__constructor = sk$Tuple$dtC2_1;

sk$Tuple$dtC2_1.prototype.__classname = 'Tuple.C2_1';

sk$Tuple$dtC2_1.prototype.$frozen = true;

sk$Tuple$dtC2_1.prototype.__type_switch_id = 348;

sk$Tuple$dtC2_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC2_1)(this.$atparam0);
};

sk$Tuple$dtC2_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp414 = __cache.get(this);
  if (_tmp414 === undefined)
    {
      var _tmp414 = this.__copy();
      _tmp414.$frozen = true;
      __cache.set(this, _tmp414);
      _tmp414.$atparam0 = skip.deepFreeze(_tmp414.$atparam0, __cache);
    }
  return _tmp414;
};

sk$Tuple$dtC2_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC2_1.prototype.__bases = [
  sk$Tuple$dtC2_1,
  sk$Tuple$dtC2
];

var sk$Tuple$dtC3_0 = sk.Tuple$dtC3_0 = function Tuple$dtC3_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC3_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC3_0.prototype.__constructor = sk$Tuple$dtC3_0;

sk$Tuple$dtC3_0.prototype.__classname = 'Tuple.C3_0';

sk$Tuple$dtC3_0.prototype.$frozen = true;

sk$Tuple$dtC3_0.prototype.__type_switch_id = 349;

sk$Tuple$dtC3_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC3_0)(this.$atparam0);
};

sk$Tuple$dtC3_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp415 = __cache.get(this);
  if (_tmp415 === undefined)
    {
      var _tmp415 = this.__copy();
      _tmp415.$frozen = true;
      __cache.set(this, _tmp415);
      _tmp415.$atparam0 = skip.deepFreeze(_tmp415.$atparam0, __cache);
    }
  return _tmp415;
};

sk$Tuple$dtC3_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC3_0.prototype.__bases = [
  sk$Tuple$dtC3_0,
  sk$Tuple$dtC3
];

var sk$Tuple$dtC3_1 = sk.Tuple$dtC3_1 = function Tuple$dtC3_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC3_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC3_1.prototype.__constructor = sk$Tuple$dtC3_1;

sk$Tuple$dtC3_1.prototype.__classname = 'Tuple.C3_1';

sk$Tuple$dtC3_1.prototype.$frozen = true;

sk$Tuple$dtC3_1.prototype.__type_switch_id = 350;

sk$Tuple$dtC3_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC3_1)(this.$atparam0);
};

sk$Tuple$dtC3_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp416 = __cache.get(this);
  if (_tmp416 === undefined)
    {
      var _tmp416 = this.__copy();
      _tmp416.$frozen = true;
      __cache.set(this, _tmp416);
      _tmp416.$atparam0 = skip.deepFreeze(_tmp416.$atparam0, __cache);
    }
  return _tmp416;
};

sk$Tuple$dtC3_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC3_1.prototype.__bases = [
  sk$Tuple$dtC3_1,
  sk$Tuple$dtC3
];

var sk$Tuple$dtC3_2 = sk.Tuple$dtC3_2 = function Tuple$dtC3_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC3_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC3_2.prototype.__constructor = sk$Tuple$dtC3_2;

sk$Tuple$dtC3_2.prototype.__classname = 'Tuple.C3_2';

sk$Tuple$dtC3_2.prototype.$frozen = true;

sk$Tuple$dtC3_2.prototype.__type_switch_id = 351;

sk$Tuple$dtC3_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC3_2)(this.$atparam0);
};

sk$Tuple$dtC3_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp417 = __cache.get(this);
  if (_tmp417 === undefined)
    {
      var _tmp417 = this.__copy();
      _tmp417.$frozen = true;
      __cache.set(this, _tmp417);
      _tmp417.$atparam0 = skip.deepFreeze(_tmp417.$atparam0, __cache);
    }
  return _tmp417;
};

sk$Tuple$dtC3_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC3_2.prototype.__bases = [
  sk$Tuple$dtC3_2,
  sk$Tuple$dtC3
];

var sk$Tuple$dtC4_0 = sk.Tuple$dtC4_0 = function Tuple$dtC4_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC4_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC4_0.prototype.__constructor = sk$Tuple$dtC4_0;

sk$Tuple$dtC4_0.prototype.__classname = 'Tuple.C4_0';

sk$Tuple$dtC4_0.prototype.$frozen = true;

sk$Tuple$dtC4_0.prototype.__type_switch_id = 352;

sk$Tuple$dtC4_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC4_0)(this.$atparam0);
};

sk$Tuple$dtC4_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp418 = __cache.get(this);
  if (_tmp418 === undefined)
    {
      var _tmp418 = this.__copy();
      _tmp418.$frozen = true;
      __cache.set(this, _tmp418);
      _tmp418.$atparam0 = skip.deepFreeze(_tmp418.$atparam0, __cache);
    }
  return _tmp418;
};

sk$Tuple$dtC4_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC4_0.prototype.__bases = [
  sk$Tuple$dtC4_0,
  sk$Tuple$dtC4
];

var sk$Tuple$dtC4_1 = sk.Tuple$dtC4_1 = function Tuple$dtC4_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC4_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC4_1.prototype.__constructor = sk$Tuple$dtC4_1;

sk$Tuple$dtC4_1.prototype.__classname = 'Tuple.C4_1';

sk$Tuple$dtC4_1.prototype.$frozen = true;

sk$Tuple$dtC4_1.prototype.__type_switch_id = 353;

sk$Tuple$dtC4_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC4_1)(this.$atparam0);
};

sk$Tuple$dtC4_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp419 = __cache.get(this);
  if (_tmp419 === undefined)
    {
      var _tmp419 = this.__copy();
      _tmp419.$frozen = true;
      __cache.set(this, _tmp419);
      _tmp419.$atparam0 = skip.deepFreeze(_tmp419.$atparam0, __cache);
    }
  return _tmp419;
};

sk$Tuple$dtC4_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC4_1.prototype.__bases = [
  sk$Tuple$dtC4_1,
  sk$Tuple$dtC4
];

var sk$Tuple$dtC4_2 = sk.Tuple$dtC4_2 = function Tuple$dtC4_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC4_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC4_2.prototype.__constructor = sk$Tuple$dtC4_2;

sk$Tuple$dtC4_2.prototype.__classname = 'Tuple.C4_2';

sk$Tuple$dtC4_2.prototype.$frozen = true;

sk$Tuple$dtC4_2.prototype.__type_switch_id = 354;

sk$Tuple$dtC4_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC4_2)(this.$atparam0);
};

sk$Tuple$dtC4_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp420 = __cache.get(this);
  if (_tmp420 === undefined)
    {
      var _tmp420 = this.__copy();
      _tmp420.$frozen = true;
      __cache.set(this, _tmp420);
      _tmp420.$atparam0 = skip.deepFreeze(_tmp420.$atparam0, __cache);
    }
  return _tmp420;
};

sk$Tuple$dtC4_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC4_2.prototype.__bases = [
  sk$Tuple$dtC4_2,
  sk$Tuple$dtC4
];

var sk$Tuple$dtC4_3 = sk.Tuple$dtC4_3 = function Tuple$dtC4_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC4_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC4_3.prototype.__constructor = sk$Tuple$dtC4_3;

sk$Tuple$dtC4_3.prototype.__classname = 'Tuple.C4_3';

sk$Tuple$dtC4_3.prototype.$frozen = true;

sk$Tuple$dtC4_3.prototype.__type_switch_id = 355;

sk$Tuple$dtC4_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC4_3)(this.$atparam0);
};

sk$Tuple$dtC4_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp421 = __cache.get(this);
  if (_tmp421 === undefined)
    {
      var _tmp421 = this.__copy();
      _tmp421.$frozen = true;
      __cache.set(this, _tmp421);
      _tmp421.$atparam0 = skip.deepFreeze(_tmp421.$atparam0, __cache);
    }
  return _tmp421;
};

sk$Tuple$dtC4_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC4_3.prototype.__bases = [
  sk$Tuple$dtC4_3,
  sk$Tuple$dtC4
];

var sk$Tuple$dtC5_0 = sk.Tuple$dtC5_0 = function Tuple$dtC5_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC5_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC5_0.prototype.__constructor = sk$Tuple$dtC5_0;

sk$Tuple$dtC5_0.prototype.__classname = 'Tuple.C5_0';

sk$Tuple$dtC5_0.prototype.$frozen = true;

sk$Tuple$dtC5_0.prototype.__type_switch_id = 356;

sk$Tuple$dtC5_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC5_0)(this.$atparam0);
};

sk$Tuple$dtC5_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp422 = __cache.get(this);
  if (_tmp422 === undefined)
    {
      var _tmp422 = this.__copy();
      _tmp422.$frozen = true;
      __cache.set(this, _tmp422);
      _tmp422.$atparam0 = skip.deepFreeze(_tmp422.$atparam0, __cache);
    }
  return _tmp422;
};

sk$Tuple$dtC5_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC5_0.prototype.__bases = [
  sk$Tuple$dtC5_0,
  sk$Tuple$dtC5
];

var sk$Tuple$dtC5_1 = sk.Tuple$dtC5_1 = function Tuple$dtC5_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC5_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC5_1.prototype.__constructor = sk$Tuple$dtC5_1;

sk$Tuple$dtC5_1.prototype.__classname = 'Tuple.C5_1';

sk$Tuple$dtC5_1.prototype.$frozen = true;

sk$Tuple$dtC5_1.prototype.__type_switch_id = 357;

sk$Tuple$dtC5_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC5_1)(this.$atparam0);
};

sk$Tuple$dtC5_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp423 = __cache.get(this);
  if (_tmp423 === undefined)
    {
      var _tmp423 = this.__copy();
      _tmp423.$frozen = true;
      __cache.set(this, _tmp423);
      _tmp423.$atparam0 = skip.deepFreeze(_tmp423.$atparam0, __cache);
    }
  return _tmp423;
};

sk$Tuple$dtC5_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC5_1.prototype.__bases = [
  sk$Tuple$dtC5_1,
  sk$Tuple$dtC5
];

var sk$Tuple$dtC5_2 = sk.Tuple$dtC5_2 = function Tuple$dtC5_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC5_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC5_2.prototype.__constructor = sk$Tuple$dtC5_2;

sk$Tuple$dtC5_2.prototype.__classname = 'Tuple.C5_2';

sk$Tuple$dtC5_2.prototype.$frozen = true;

sk$Tuple$dtC5_2.prototype.__type_switch_id = 358;

sk$Tuple$dtC5_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC5_2)(this.$atparam0);
};

sk$Tuple$dtC5_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp424 = __cache.get(this);
  if (_tmp424 === undefined)
    {
      var _tmp424 = this.__copy();
      _tmp424.$frozen = true;
      __cache.set(this, _tmp424);
      _tmp424.$atparam0 = skip.deepFreeze(_tmp424.$atparam0, __cache);
    }
  return _tmp424;
};

sk$Tuple$dtC5_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC5_2.prototype.__bases = [
  sk$Tuple$dtC5_2,
  sk$Tuple$dtC5
];

var sk$Tuple$dtC5_3 = sk.Tuple$dtC5_3 = function Tuple$dtC5_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC5_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC5_3.prototype.__constructor = sk$Tuple$dtC5_3;

sk$Tuple$dtC5_3.prototype.__classname = 'Tuple.C5_3';

sk$Tuple$dtC5_3.prototype.$frozen = true;

sk$Tuple$dtC5_3.prototype.__type_switch_id = 359;

sk$Tuple$dtC5_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC5_3)(this.$atparam0);
};

sk$Tuple$dtC5_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp425 = __cache.get(this);
  if (_tmp425 === undefined)
    {
      var _tmp425 = this.__copy();
      _tmp425.$frozen = true;
      __cache.set(this, _tmp425);
      _tmp425.$atparam0 = skip.deepFreeze(_tmp425.$atparam0, __cache);
    }
  return _tmp425;
};

sk$Tuple$dtC5_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC5_3.prototype.__bases = [
  sk$Tuple$dtC5_3,
  sk$Tuple$dtC5
];

var sk$Tuple$dtC5_4 = sk.Tuple$dtC5_4 = function Tuple$dtC5_4($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC5_4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC5_4.prototype.__constructor = sk$Tuple$dtC5_4;

sk$Tuple$dtC5_4.prototype.__classname = 'Tuple.C5_4';

sk$Tuple$dtC5_4.prototype.$frozen = true;

sk$Tuple$dtC5_4.prototype.__type_switch_id = 360;

sk$Tuple$dtC5_4.prototype.__copy = function() {
  return new (sk$Tuple$dtC5_4)(this.$atparam0);
};

sk$Tuple$dtC5_4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp426 = __cache.get(this);
  if (_tmp426 === undefined)
    {
      var _tmp426 = this.__copy();
      _tmp426.$frozen = true;
      __cache.set(this, _tmp426);
      _tmp426.$atparam0 = skip.deepFreeze(_tmp426.$atparam0, __cache);
    }
  return _tmp426;
};

sk$Tuple$dtC5_4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC5_4.prototype.__bases = [
  sk$Tuple$dtC5_4,
  sk$Tuple$dtC5
];

var sk$Tuple$dtC6_0 = sk.Tuple$dtC6_0 = function Tuple$dtC6_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC6_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6_0.prototype.__constructor = sk$Tuple$dtC6_0;

sk$Tuple$dtC6_0.prototype.__classname = 'Tuple.C6_0';

sk$Tuple$dtC6_0.prototype.$frozen = true;

sk$Tuple$dtC6_0.prototype.__type_switch_id = 361;

sk$Tuple$dtC6_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC6_0)(this.$atparam0);
};

sk$Tuple$dtC6_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp427 = __cache.get(this);
  if (_tmp427 === undefined)
    {
      var _tmp427 = this.__copy();
      _tmp427.$frozen = true;
      __cache.set(this, _tmp427);
      _tmp427.$atparam0 = skip.deepFreeze(_tmp427.$atparam0, __cache);
    }
  return _tmp427;
};

sk$Tuple$dtC6_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6_0.prototype.__bases = [
  sk$Tuple$dtC6_0,
  sk$Tuple$dtC6
];

var sk$Tuple$dtC6_1 = sk.Tuple$dtC6_1 = function Tuple$dtC6_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC6_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6_1.prototype.__constructor = sk$Tuple$dtC6_1;

sk$Tuple$dtC6_1.prototype.__classname = 'Tuple.C6_1';

sk$Tuple$dtC6_1.prototype.$frozen = true;

sk$Tuple$dtC6_1.prototype.__type_switch_id = 362;

sk$Tuple$dtC6_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC6_1)(this.$atparam0);
};

sk$Tuple$dtC6_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp428 = __cache.get(this);
  if (_tmp428 === undefined)
    {
      var _tmp428 = this.__copy();
      _tmp428.$frozen = true;
      __cache.set(this, _tmp428);
      _tmp428.$atparam0 = skip.deepFreeze(_tmp428.$atparam0, __cache);
    }
  return _tmp428;
};

sk$Tuple$dtC6_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6_1.prototype.__bases = [
  sk$Tuple$dtC6_1,
  sk$Tuple$dtC6
];

var sk$Tuple$dtC6_2 = sk.Tuple$dtC6_2 = function Tuple$dtC6_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC6_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6_2.prototype.__constructor = sk$Tuple$dtC6_2;

sk$Tuple$dtC6_2.prototype.__classname = 'Tuple.C6_2';

sk$Tuple$dtC6_2.prototype.$frozen = true;

sk$Tuple$dtC6_2.prototype.__type_switch_id = 363;

sk$Tuple$dtC6_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC6_2)(this.$atparam0);
};

sk$Tuple$dtC6_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp429 = __cache.get(this);
  if (_tmp429 === undefined)
    {
      var _tmp429 = this.__copy();
      _tmp429.$frozen = true;
      __cache.set(this, _tmp429);
      _tmp429.$atparam0 = skip.deepFreeze(_tmp429.$atparam0, __cache);
    }
  return _tmp429;
};

sk$Tuple$dtC6_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6_2.prototype.__bases = [
  sk$Tuple$dtC6_2,
  sk$Tuple$dtC6
];

var sk$Tuple$dtC6_3 = sk.Tuple$dtC6_3 = function Tuple$dtC6_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC6_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6_3.prototype.__constructor = sk$Tuple$dtC6_3;

sk$Tuple$dtC6_3.prototype.__classname = 'Tuple.C6_3';

sk$Tuple$dtC6_3.prototype.$frozen = true;

sk$Tuple$dtC6_3.prototype.__type_switch_id = 364;

sk$Tuple$dtC6_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC6_3)(this.$atparam0);
};

sk$Tuple$dtC6_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp430 = __cache.get(this);
  if (_tmp430 === undefined)
    {
      var _tmp430 = this.__copy();
      _tmp430.$frozen = true;
      __cache.set(this, _tmp430);
      _tmp430.$atparam0 = skip.deepFreeze(_tmp430.$atparam0, __cache);
    }
  return _tmp430;
};

sk$Tuple$dtC6_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6_3.prototype.__bases = [
  sk$Tuple$dtC6_3,
  sk$Tuple$dtC6
];

var sk$Tuple$dtC6_4 = sk.Tuple$dtC6_4 = function Tuple$dtC6_4($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC6_4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6_4.prototype.__constructor = sk$Tuple$dtC6_4;

sk$Tuple$dtC6_4.prototype.__classname = 'Tuple.C6_4';

sk$Tuple$dtC6_4.prototype.$frozen = true;

sk$Tuple$dtC6_4.prototype.__type_switch_id = 365;

sk$Tuple$dtC6_4.prototype.__copy = function() {
  return new (sk$Tuple$dtC6_4)(this.$atparam0);
};

sk$Tuple$dtC6_4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp431 = __cache.get(this);
  if (_tmp431 === undefined)
    {
      var _tmp431 = this.__copy();
      _tmp431.$frozen = true;
      __cache.set(this, _tmp431);
      _tmp431.$atparam0 = skip.deepFreeze(_tmp431.$atparam0, __cache);
    }
  return _tmp431;
};

sk$Tuple$dtC6_4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6_4.prototype.__bases = [
  sk$Tuple$dtC6_4,
  sk$Tuple$dtC6
];

var sk$Tuple$dtC6_5 = sk.Tuple$dtC6_5 = function Tuple$dtC6_5($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC6_5.prototype = Object.create(Object.prototype);

sk$Tuple$dtC6_5.prototype.__constructor = sk$Tuple$dtC6_5;

sk$Tuple$dtC6_5.prototype.__classname = 'Tuple.C6_5';

sk$Tuple$dtC6_5.prototype.$frozen = true;

sk$Tuple$dtC6_5.prototype.__type_switch_id = 366;

sk$Tuple$dtC6_5.prototype.__copy = function() {
  return new (sk$Tuple$dtC6_5)(this.$atparam0);
};

sk$Tuple$dtC6_5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp432 = __cache.get(this);
  if (_tmp432 === undefined)
    {
      var _tmp432 = this.__copy();
      _tmp432.$frozen = true;
      __cache.set(this, _tmp432);
      _tmp432.$atparam0 = skip.deepFreeze(_tmp432.$atparam0, __cache);
    }
  return _tmp432;
};

sk$Tuple$dtC6_5.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC6_5.prototype.__bases = [
  sk$Tuple$dtC6_5,
  sk$Tuple$dtC6
];

var sk$Tuple$dtC7_0 = sk.Tuple$dtC7_0 = function Tuple$dtC7_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_0.prototype.__constructor = sk$Tuple$dtC7_0;

sk$Tuple$dtC7_0.prototype.__classname = 'Tuple.C7_0';

sk$Tuple$dtC7_0.prototype.$frozen = true;

sk$Tuple$dtC7_0.prototype.__type_switch_id = 367;

sk$Tuple$dtC7_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_0)(this.$atparam0);
};

sk$Tuple$dtC7_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp433 = __cache.get(this);
  if (_tmp433 === undefined)
    {
      var _tmp433 = this.__copy();
      _tmp433.$frozen = true;
      __cache.set(this, _tmp433);
      _tmp433.$atparam0 = skip.deepFreeze(_tmp433.$atparam0, __cache);
    }
  return _tmp433;
};

sk$Tuple$dtC7_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_0.prototype.__bases = [
  sk$Tuple$dtC7_0,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC7_1 = sk.Tuple$dtC7_1 = function Tuple$dtC7_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_1.prototype.__constructor = sk$Tuple$dtC7_1;

sk$Tuple$dtC7_1.prototype.__classname = 'Tuple.C7_1';

sk$Tuple$dtC7_1.prototype.$frozen = true;

sk$Tuple$dtC7_1.prototype.__type_switch_id = 368;

sk$Tuple$dtC7_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_1)(this.$atparam0);
};

sk$Tuple$dtC7_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp434 = __cache.get(this);
  if (_tmp434 === undefined)
    {
      var _tmp434 = this.__copy();
      _tmp434.$frozen = true;
      __cache.set(this, _tmp434);
      _tmp434.$atparam0 = skip.deepFreeze(_tmp434.$atparam0, __cache);
    }
  return _tmp434;
};

sk$Tuple$dtC7_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_1.prototype.__bases = [
  sk$Tuple$dtC7_1,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC7_2 = sk.Tuple$dtC7_2 = function Tuple$dtC7_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_2.prototype.__constructor = sk$Tuple$dtC7_2;

sk$Tuple$dtC7_2.prototype.__classname = 'Tuple.C7_2';

sk$Tuple$dtC7_2.prototype.$frozen = true;

sk$Tuple$dtC7_2.prototype.__type_switch_id = 369;

sk$Tuple$dtC7_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_2)(this.$atparam0);
};

sk$Tuple$dtC7_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp435 = __cache.get(this);
  if (_tmp435 === undefined)
    {
      var _tmp435 = this.__copy();
      _tmp435.$frozen = true;
      __cache.set(this, _tmp435);
      _tmp435.$atparam0 = skip.deepFreeze(_tmp435.$atparam0, __cache);
    }
  return _tmp435;
};

sk$Tuple$dtC7_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_2.prototype.__bases = [
  sk$Tuple$dtC7_2,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC7_3 = sk.Tuple$dtC7_3 = function Tuple$dtC7_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_3.prototype.__constructor = sk$Tuple$dtC7_3;

sk$Tuple$dtC7_3.prototype.__classname = 'Tuple.C7_3';

sk$Tuple$dtC7_3.prototype.$frozen = true;

sk$Tuple$dtC7_3.prototype.__type_switch_id = 370;

sk$Tuple$dtC7_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_3)(this.$atparam0);
};

sk$Tuple$dtC7_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp436 = __cache.get(this);
  if (_tmp436 === undefined)
    {
      var _tmp436 = this.__copy();
      _tmp436.$frozen = true;
      __cache.set(this, _tmp436);
      _tmp436.$atparam0 = skip.deepFreeze(_tmp436.$atparam0, __cache);
    }
  return _tmp436;
};

sk$Tuple$dtC7_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_3.prototype.__bases = [
  sk$Tuple$dtC7_3,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC7_4 = sk.Tuple$dtC7_4 = function Tuple$dtC7_4($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_4.prototype.__constructor = sk$Tuple$dtC7_4;

sk$Tuple$dtC7_4.prototype.__classname = 'Tuple.C7_4';

sk$Tuple$dtC7_4.prototype.$frozen = true;

sk$Tuple$dtC7_4.prototype.__type_switch_id = 371;

sk$Tuple$dtC7_4.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_4)(this.$atparam0);
};

sk$Tuple$dtC7_4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp437 = __cache.get(this);
  if (_tmp437 === undefined)
    {
      var _tmp437 = this.__copy();
      _tmp437.$frozen = true;
      __cache.set(this, _tmp437);
      _tmp437.$atparam0 = skip.deepFreeze(_tmp437.$atparam0, __cache);
    }
  return _tmp437;
};

sk$Tuple$dtC7_4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_4.prototype.__bases = [
  sk$Tuple$dtC7_4,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC7_5 = sk.Tuple$dtC7_5 = function Tuple$dtC7_5($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_5.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_5.prototype.__constructor = sk$Tuple$dtC7_5;

sk$Tuple$dtC7_5.prototype.__classname = 'Tuple.C7_5';

sk$Tuple$dtC7_5.prototype.$frozen = true;

sk$Tuple$dtC7_5.prototype.__type_switch_id = 372;

sk$Tuple$dtC7_5.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_5)(this.$atparam0);
};

sk$Tuple$dtC7_5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp438 = __cache.get(this);
  if (_tmp438 === undefined)
    {
      var _tmp438 = this.__copy();
      _tmp438.$frozen = true;
      __cache.set(this, _tmp438);
      _tmp438.$atparam0 = skip.deepFreeze(_tmp438.$atparam0, __cache);
    }
  return _tmp438;
};

sk$Tuple$dtC7_5.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_5.prototype.__bases = [
  sk$Tuple$dtC7_5,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC7_6 = sk.Tuple$dtC7_6 = function Tuple$dtC7_6($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC7_6.prototype = Object.create(Object.prototype);

sk$Tuple$dtC7_6.prototype.__constructor = sk$Tuple$dtC7_6;

sk$Tuple$dtC7_6.prototype.__classname = 'Tuple.C7_6';

sk$Tuple$dtC7_6.prototype.$frozen = true;

sk$Tuple$dtC7_6.prototype.__type_switch_id = 373;

sk$Tuple$dtC7_6.prototype.__copy = function() {
  return new (sk$Tuple$dtC7_6)(this.$atparam0);
};

sk$Tuple$dtC7_6.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp439 = __cache.get(this);
  if (_tmp439 === undefined)
    {
      var _tmp439 = this.__copy();
      _tmp439.$frozen = true;
      __cache.set(this, _tmp439);
      _tmp439.$atparam0 = skip.deepFreeze(_tmp439.$atparam0, __cache);
    }
  return _tmp439;
};

sk$Tuple$dtC7_6.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC7_6.prototype.__bases = [
  sk$Tuple$dtC7_6,
  sk$Tuple$dtC7
];

var sk$Tuple$dtC8_0 = sk.Tuple$dtC8_0 = function Tuple$dtC8_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_0.prototype.__constructor = sk$Tuple$dtC8_0;

sk$Tuple$dtC8_0.prototype.__classname = 'Tuple.C8_0';

sk$Tuple$dtC8_0.prototype.$frozen = true;

sk$Tuple$dtC8_0.prototype.__type_switch_id = 374;

sk$Tuple$dtC8_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_0)(this.$atparam0);
};

sk$Tuple$dtC8_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp440 = __cache.get(this);
  if (_tmp440 === undefined)
    {
      var _tmp440 = this.__copy();
      _tmp440.$frozen = true;
      __cache.set(this, _tmp440);
      _tmp440.$atparam0 = skip.deepFreeze(_tmp440.$atparam0, __cache);
    }
  return _tmp440;
};

sk$Tuple$dtC8_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_0.prototype.__bases = [
  sk$Tuple$dtC8_0,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_1 = sk.Tuple$dtC8_1 = function Tuple$dtC8_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_1.prototype.__constructor = sk$Tuple$dtC8_1;

sk$Tuple$dtC8_1.prototype.__classname = 'Tuple.C8_1';

sk$Tuple$dtC8_1.prototype.$frozen = true;

sk$Tuple$dtC8_1.prototype.__type_switch_id = 375;

sk$Tuple$dtC8_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_1)(this.$atparam0);
};

sk$Tuple$dtC8_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp441 = __cache.get(this);
  if (_tmp441 === undefined)
    {
      var _tmp441 = this.__copy();
      _tmp441.$frozen = true;
      __cache.set(this, _tmp441);
      _tmp441.$atparam0 = skip.deepFreeze(_tmp441.$atparam0, __cache);
    }
  return _tmp441;
};

sk$Tuple$dtC8_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_1.prototype.__bases = [
  sk$Tuple$dtC8_1,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_2 = sk.Tuple$dtC8_2 = function Tuple$dtC8_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_2.prototype.__constructor = sk$Tuple$dtC8_2;

sk$Tuple$dtC8_2.prototype.__classname = 'Tuple.C8_2';

sk$Tuple$dtC8_2.prototype.$frozen = true;

sk$Tuple$dtC8_2.prototype.__type_switch_id = 376;

sk$Tuple$dtC8_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_2)(this.$atparam0);
};

sk$Tuple$dtC8_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp442 = __cache.get(this);
  if (_tmp442 === undefined)
    {
      var _tmp442 = this.__copy();
      _tmp442.$frozen = true;
      __cache.set(this, _tmp442);
      _tmp442.$atparam0 = skip.deepFreeze(_tmp442.$atparam0, __cache);
    }
  return _tmp442;
};

sk$Tuple$dtC8_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_2.prototype.__bases = [
  sk$Tuple$dtC8_2,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_3 = sk.Tuple$dtC8_3 = function Tuple$dtC8_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_3.prototype.__constructor = sk$Tuple$dtC8_3;

sk$Tuple$dtC8_3.prototype.__classname = 'Tuple.C8_3';

sk$Tuple$dtC8_3.prototype.$frozen = true;

sk$Tuple$dtC8_3.prototype.__type_switch_id = 377;

sk$Tuple$dtC8_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_3)(this.$atparam0);
};

sk$Tuple$dtC8_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp443 = __cache.get(this);
  if (_tmp443 === undefined)
    {
      var _tmp443 = this.__copy();
      _tmp443.$frozen = true;
      __cache.set(this, _tmp443);
      _tmp443.$atparam0 = skip.deepFreeze(_tmp443.$atparam0, __cache);
    }
  return _tmp443;
};

sk$Tuple$dtC8_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_3.prototype.__bases = [
  sk$Tuple$dtC8_3,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_4 = sk.Tuple$dtC8_4 = function Tuple$dtC8_4($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_4.prototype.__constructor = sk$Tuple$dtC8_4;

sk$Tuple$dtC8_4.prototype.__classname = 'Tuple.C8_4';

sk$Tuple$dtC8_4.prototype.$frozen = true;

sk$Tuple$dtC8_4.prototype.__type_switch_id = 378;

sk$Tuple$dtC8_4.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_4)(this.$atparam0);
};

sk$Tuple$dtC8_4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp444 = __cache.get(this);
  if (_tmp444 === undefined)
    {
      var _tmp444 = this.__copy();
      _tmp444.$frozen = true;
      __cache.set(this, _tmp444);
      _tmp444.$atparam0 = skip.deepFreeze(_tmp444.$atparam0, __cache);
    }
  return _tmp444;
};

sk$Tuple$dtC8_4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_4.prototype.__bases = [
  sk$Tuple$dtC8_4,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_5 = sk.Tuple$dtC8_5 = function Tuple$dtC8_5($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_5.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_5.prototype.__constructor = sk$Tuple$dtC8_5;

sk$Tuple$dtC8_5.prototype.__classname = 'Tuple.C8_5';

sk$Tuple$dtC8_5.prototype.$frozen = true;

sk$Tuple$dtC8_5.prototype.__type_switch_id = 379;

sk$Tuple$dtC8_5.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_5)(this.$atparam0);
};

sk$Tuple$dtC8_5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp445 = __cache.get(this);
  if (_tmp445 === undefined)
    {
      var _tmp445 = this.__copy();
      _tmp445.$frozen = true;
      __cache.set(this, _tmp445);
      _tmp445.$atparam0 = skip.deepFreeze(_tmp445.$atparam0, __cache);
    }
  return _tmp445;
};

sk$Tuple$dtC8_5.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_5.prototype.__bases = [
  sk$Tuple$dtC8_5,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_6 = sk.Tuple$dtC8_6 = function Tuple$dtC8_6($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_6.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_6.prototype.__constructor = sk$Tuple$dtC8_6;

sk$Tuple$dtC8_6.prototype.__classname = 'Tuple.C8_6';

sk$Tuple$dtC8_6.prototype.$frozen = true;

sk$Tuple$dtC8_6.prototype.__type_switch_id = 380;

sk$Tuple$dtC8_6.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_6)(this.$atparam0);
};

sk$Tuple$dtC8_6.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp446 = __cache.get(this);
  if (_tmp446 === undefined)
    {
      var _tmp446 = this.__copy();
      _tmp446.$frozen = true;
      __cache.set(this, _tmp446);
      _tmp446.$atparam0 = skip.deepFreeze(_tmp446.$atparam0, __cache);
    }
  return _tmp446;
};

sk$Tuple$dtC8_6.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_6.prototype.__bases = [
  sk$Tuple$dtC8_6,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC8_7 = sk.Tuple$dtC8_7 = function Tuple$dtC8_7($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC8_7.prototype = Object.create(Object.prototype);

sk$Tuple$dtC8_7.prototype.__constructor = sk$Tuple$dtC8_7;

sk$Tuple$dtC8_7.prototype.__classname = 'Tuple.C8_7';

sk$Tuple$dtC8_7.prototype.$frozen = true;

sk$Tuple$dtC8_7.prototype.__type_switch_id = 381;

sk$Tuple$dtC8_7.prototype.__copy = function() {
  return new (sk$Tuple$dtC8_7)(this.$atparam0);
};

sk$Tuple$dtC8_7.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp447 = __cache.get(this);
  if (_tmp447 === undefined)
    {
      var _tmp447 = this.__copy();
      _tmp447.$frozen = true;
      __cache.set(this, _tmp447);
      _tmp447.$atparam0 = skip.deepFreeze(_tmp447.$atparam0, __cache);
    }
  return _tmp447;
};

sk$Tuple$dtC8_7.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC8_7.prototype.__bases = [
  sk$Tuple$dtC8_7,
  sk$Tuple$dtC8
];

var sk$Tuple$dtC9_0 = sk.Tuple$dtC9_0 = function Tuple$dtC9_0($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_0.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_0.prototype.__constructor = sk$Tuple$dtC9_0;

sk$Tuple$dtC9_0.prototype.__classname = 'Tuple.C9_0';

sk$Tuple$dtC9_0.prototype.$frozen = true;

sk$Tuple$dtC9_0.prototype.__type_switch_id = 382;

sk$Tuple$dtC9_0.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_0)(this.$atparam0);
};

sk$Tuple$dtC9_0.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp448 = __cache.get(this);
  if (_tmp448 === undefined)
    {
      var _tmp448 = this.__copy();
      _tmp448.$frozen = true;
      __cache.set(this, _tmp448);
      _tmp448.$atparam0 = skip.deepFreeze(_tmp448.$atparam0, __cache);
    }
  return _tmp448;
};

sk$Tuple$dtC9_0.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_0.prototype.__bases = [
  sk$Tuple$dtC9_0,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_1 = sk.Tuple$dtC9_1 = function Tuple$dtC9_1($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_1.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_1.prototype.__constructor = sk$Tuple$dtC9_1;

sk$Tuple$dtC9_1.prototype.__classname = 'Tuple.C9_1';

sk$Tuple$dtC9_1.prototype.$frozen = true;

sk$Tuple$dtC9_1.prototype.__type_switch_id = 383;

sk$Tuple$dtC9_1.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_1)(this.$atparam0);
};

sk$Tuple$dtC9_1.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp449 = __cache.get(this);
  if (_tmp449 === undefined)
    {
      var _tmp449 = this.__copy();
      _tmp449.$frozen = true;
      __cache.set(this, _tmp449);
      _tmp449.$atparam0 = skip.deepFreeze(_tmp449.$atparam0, __cache);
    }
  return _tmp449;
};

sk$Tuple$dtC9_1.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_1.prototype.__bases = [
  sk$Tuple$dtC9_1,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_2 = sk.Tuple$dtC9_2 = function Tuple$dtC9_2($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_2.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_2.prototype.__constructor = sk$Tuple$dtC9_2;

sk$Tuple$dtC9_2.prototype.__classname = 'Tuple.C9_2';

sk$Tuple$dtC9_2.prototype.$frozen = true;

sk$Tuple$dtC9_2.prototype.__type_switch_id = 384;

sk$Tuple$dtC9_2.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_2)(this.$atparam0);
};

sk$Tuple$dtC9_2.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp450 = __cache.get(this);
  if (_tmp450 === undefined)
    {
      var _tmp450 = this.__copy();
      _tmp450.$frozen = true;
      __cache.set(this, _tmp450);
      _tmp450.$atparam0 = skip.deepFreeze(_tmp450.$atparam0, __cache);
    }
  return _tmp450;
};

sk$Tuple$dtC9_2.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_2.prototype.__bases = [
  sk$Tuple$dtC9_2,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_3 = sk.Tuple$dtC9_3 = function Tuple$dtC9_3($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_3.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_3.prototype.__constructor = sk$Tuple$dtC9_3;

sk$Tuple$dtC9_3.prototype.__classname = 'Tuple.C9_3';

sk$Tuple$dtC9_3.prototype.$frozen = true;

sk$Tuple$dtC9_3.prototype.__type_switch_id = 385;

sk$Tuple$dtC9_3.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_3)(this.$atparam0);
};

sk$Tuple$dtC9_3.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp451 = __cache.get(this);
  if (_tmp451 === undefined)
    {
      var _tmp451 = this.__copy();
      _tmp451.$frozen = true;
      __cache.set(this, _tmp451);
      _tmp451.$atparam0 = skip.deepFreeze(_tmp451.$atparam0, __cache);
    }
  return _tmp451;
};

sk$Tuple$dtC9_3.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_3.prototype.__bases = [
  sk$Tuple$dtC9_3,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_4 = sk.Tuple$dtC9_4 = function Tuple$dtC9_4($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_4.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_4.prototype.__constructor = sk$Tuple$dtC9_4;

sk$Tuple$dtC9_4.prototype.__classname = 'Tuple.C9_4';

sk$Tuple$dtC9_4.prototype.$frozen = true;

sk$Tuple$dtC9_4.prototype.__type_switch_id = 386;

sk$Tuple$dtC9_4.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_4)(this.$atparam0);
};

sk$Tuple$dtC9_4.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp452 = __cache.get(this);
  if (_tmp452 === undefined)
    {
      var _tmp452 = this.__copy();
      _tmp452.$frozen = true;
      __cache.set(this, _tmp452);
      _tmp452.$atparam0 = skip.deepFreeze(_tmp452.$atparam0, __cache);
    }
  return _tmp452;
};

sk$Tuple$dtC9_4.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_4.prototype.__bases = [
  sk$Tuple$dtC9_4,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_5 = sk.Tuple$dtC9_5 = function Tuple$dtC9_5($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_5.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_5.prototype.__constructor = sk$Tuple$dtC9_5;

sk$Tuple$dtC9_5.prototype.__classname = 'Tuple.C9_5';

sk$Tuple$dtC9_5.prototype.$frozen = true;

sk$Tuple$dtC9_5.prototype.__type_switch_id = 387;

sk$Tuple$dtC9_5.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_5)(this.$atparam0);
};

sk$Tuple$dtC9_5.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp453 = __cache.get(this);
  if (_tmp453 === undefined)
    {
      var _tmp453 = this.__copy();
      _tmp453.$frozen = true;
      __cache.set(this, _tmp453);
      _tmp453.$atparam0 = skip.deepFreeze(_tmp453.$atparam0, __cache);
    }
  return _tmp453;
};

sk$Tuple$dtC9_5.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_5.prototype.__bases = [
  sk$Tuple$dtC9_5,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_6 = sk.Tuple$dtC9_6 = function Tuple$dtC9_6($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_6.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_6.prototype.__constructor = sk$Tuple$dtC9_6;

sk$Tuple$dtC9_6.prototype.__classname = 'Tuple.C9_6';

sk$Tuple$dtC9_6.prototype.$frozen = true;

sk$Tuple$dtC9_6.prototype.__type_switch_id = 388;

sk$Tuple$dtC9_6.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_6)(this.$atparam0);
};

sk$Tuple$dtC9_6.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp454 = __cache.get(this);
  if (_tmp454 === undefined)
    {
      var _tmp454 = this.__copy();
      _tmp454.$frozen = true;
      __cache.set(this, _tmp454);
      _tmp454.$atparam0 = skip.deepFreeze(_tmp454.$atparam0, __cache);
    }
  return _tmp454;
};

sk$Tuple$dtC9_6.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_6.prototype.__bases = [
  sk$Tuple$dtC9_6,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_7 = sk.Tuple$dtC9_7 = function Tuple$dtC9_7($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_7.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_7.prototype.__constructor = sk$Tuple$dtC9_7;

sk$Tuple$dtC9_7.prototype.__classname = 'Tuple.C9_7';

sk$Tuple$dtC9_7.prototype.$frozen = true;

sk$Tuple$dtC9_7.prototype.__type_switch_id = 389;

sk$Tuple$dtC9_7.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_7)(this.$atparam0);
};

sk$Tuple$dtC9_7.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp455 = __cache.get(this);
  if (_tmp455 === undefined)
    {
      var _tmp455 = this.__copy();
      _tmp455.$frozen = true;
      __cache.set(this, _tmp455);
      _tmp455.$atparam0 = skip.deepFreeze(_tmp455.$atparam0, __cache);
    }
  return _tmp455;
};

sk$Tuple$dtC9_7.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_7.prototype.__bases = [
  sk$Tuple$dtC9_7,
  sk$Tuple$dtC9
];

var sk$Tuple$dtC9_8 = sk.Tuple$dtC9_8 = function Tuple$dtC9_8($atparam0) {
  this.$atparam0 = $atparam0;
};

sk$Tuple$dtC9_8.prototype = Object.create(Object.prototype);

sk$Tuple$dtC9_8.prototype.__constructor = sk$Tuple$dtC9_8;

sk$Tuple$dtC9_8.prototype.__classname = 'Tuple.C9_8';

sk$Tuple$dtC9_8.prototype.$frozen = true;

sk$Tuple$dtC9_8.prototype.__type_switch_id = 390;

sk$Tuple$dtC9_8.prototype.__copy = function() {
  return new (sk$Tuple$dtC9_8)(this.$atparam0);
};

sk$Tuple$dtC9_8.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp456 = __cache.get(this);
  if (_tmp456 === undefined)
    {
      var _tmp456 = this.__copy();
      _tmp456.$frozen = true;
      __cache.set(this, _tmp456);
      _tmp456.$atparam0 = skip.deepFreeze(_tmp456.$atparam0, __cache);
    }
  return _tmp456;
};

sk$Tuple$dtC9_8.prototype.__init = function(__named_parameters) {};

sk$Tuple$dtC9_8.prototype.__bases = [
  sk$Tuple$dtC9_8,
  sk$Tuple$dtC9
];

var sk$Tuple10MetaClass = sk.Tuple10MetaClass = function Tuple10MetaClass(class0, class1, class2, class3, class4, class5, class6, class7, class8, class9) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
  this.class4 = class4;
  this.class5 = class5;
  this.class6 = class6;
  this.class7 = class7;
  this.class8 = class8;
  this.class9 = class9;
};

sk$Tuple10MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple10MetaClass.prototype.__constructor = sk$Tuple10MetaClass;

sk$Tuple10MetaClass.prototype.__classname = 'Tuple10MetaClass';

sk$Tuple10MetaClass.prototype.$frozen = true;

sk$Tuple10MetaClass.prototype.__type_switch_id = 192;

sk$Tuple10MetaClass.prototype.__copy = function() {
  return new (sk$Tuple10MetaClass)(this.class0, this.class1, this.class2, this.class3, this.class4, this.class5, this.class6, this.class7, this.class8, this.class9);
};

sk$Tuple10MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp457 = __cache.get(this);
  if (_tmp457 === undefined)
    {
      var _tmp457 = this.__copy();
      _tmp457.$frozen = true;
      __cache.set(this, _tmp457);
      _tmp457.class0 = skip.deepFreeze(_tmp457.class0, __cache);
      _tmp457.class1 = skip.deepFreeze(_tmp457.class1, __cache);
      _tmp457.class2 = skip.deepFreeze(_tmp457.class2, __cache);
      _tmp457.class3 = skip.deepFreeze(_tmp457.class3, __cache);
      _tmp457.class4 = skip.deepFreeze(_tmp457.class4, __cache);
      _tmp457.class5 = skip.deepFreeze(_tmp457.class5, __cache);
      _tmp457.class6 = skip.deepFreeze(_tmp457.class6, __cache);
      _tmp457.class7 = skip.deepFreeze(_tmp457.class7, __cache);
      _tmp457.class8 = skip.deepFreeze(_tmp457.class8, __cache);
      _tmp457.class9 = skip.deepFreeze(_tmp457.class9, __cache);
    }
  return _tmp457;
};

sk$Tuple10MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple10MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple10<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String((', ')).toString();
  var t$25 = this;
  var t$26 = t$25.class4;
  var t$27 = t$26;
  var t$28 = t$27.description();
  var t$29 = t$28.toString();
  var t$30 = new sk$String((', ')).toString();
  var t$31 = this;
  var t$32 = t$31.class5;
  var t$33 = t$32;
  var t$34 = t$33.description();
  var t$35 = t$34.toString();
  var t$36 = new sk$String((', ')).toString();
  var t$37 = this;
  var t$38 = t$37.class6;
  var t$39 = t$38;
  var t$40 = t$39.description();
  var t$41 = t$40.toString();
  var t$42 = new sk$String((', ')).toString();
  var t$43 = this;
  var t$44 = t$43.class7;
  var t$45 = t$44;
  var t$46 = t$45.description();
  var t$47 = t$46.toString();
  var t$48 = new sk$String((', ')).toString();
  var t$49 = this;
  var t$50 = t$49.class8;
  var t$51 = t$50;
  var t$52 = t$51.description();
  var t$53 = t$52.toString();
  var t$54 = new sk$String((', ')).toString();
  var t$55 = this;
  var t$56 = t$55.class9;
  var t$57 = t$56;
  var t$58 = t$57.description();
  var t$59 = t$58.toString();
  var t$60 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24,
    t$29,
    t$30,
    t$35,
    t$36,
    t$41,
    t$42,
    t$47,
    t$48,
    t$53,
    t$54,
    t$59,
    t$60
  ]));
};

sk$Tuple10MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(10.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  var t$10 = this;
  var t$11 = t$10.class4;
  var t$12 = this;
  var t$13 = t$12.class5;
  var t$14 = this;
  var t$15 = t$14.class6;
  var t$16 = this;
  var t$17 = t$16.class7;
  var t$18 = this;
  var t$19 = t$18.class8;
  var t$20 = this;
  var t$21 = t$20.class9;
  return t$1.readTuple10(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21);
};

sk$Tuple10MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(10.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  var t$18 = value;
  var t$19 = t$18.i4;
  var t$20 = this;
  var t$21 = t$20.class4;
  var t$22 = value;
  var t$23 = t$22.i5;
  var t$24 = this;
  var t$25 = t$24.class5;
  var t$26 = value;
  var t$27 = t$26.i6;
  var t$28 = this;
  var t$29 = t$28.class6;
  var t$30 = value;
  var t$31 = t$30.i7;
  var t$32 = this;
  var t$33 = t$32.class7;
  var t$34 = value;
  var t$35 = t$34.i8;
  var t$36 = this;
  var t$37 = t$36.class8;
  var t$38 = value;
  var t$39 = t$38.i9;
  var t$40 = this;
  var t$41 = t$40.class9;
  return t$1.writeTuple10(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21, t$23, t$25, t$27, t$29, t$31, t$33, t$35, t$37, t$39, t$41);
};

sk$Tuple10MetaClass.prototype.__bases = [
  sk$Tuple10MetaClass,
  sk$MetaClass
];

var sk$Tuple2MetaClass = sk.Tuple2MetaClass = function Tuple2MetaClass(class0, class1) {
  this.class0 = class0;
  this.class1 = class1;
};

sk$Tuple2MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple2MetaClass.prototype.__constructor = sk$Tuple2MetaClass;

sk$Tuple2MetaClass.prototype.__classname = 'Tuple2MetaClass';

sk$Tuple2MetaClass.prototype.$frozen = true;

sk$Tuple2MetaClass.prototype.__type_switch_id = 193;

sk$Tuple2MetaClass.prototype.__copy = function() {
  return new (sk$Tuple2MetaClass)(this.class0, this.class1);
};

sk$Tuple2MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp458 = __cache.get(this);
  if (_tmp458 === undefined)
    {
      var _tmp458 = this.__copy();
      _tmp458.$frozen = true;
      __cache.set(this, _tmp458);
      _tmp458.class0 = skip.deepFreeze(_tmp458.class0, __cache);
      _tmp458.class1 = skip.deepFreeze(_tmp458.class1, __cache);
    }
  return _tmp458;
};

sk$Tuple2MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple2MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple2<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12
  ]));
};

sk$Tuple2MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(2.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  return t$1.readTuple2(t$3, t$5);
};

sk$Tuple2MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(2.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  return t$1.writeTuple2(t$3, t$5, t$7, t$9);
};

sk$Tuple2MetaClass.prototype.__bases = [
  sk$Tuple2MetaClass,
  sk$MetaClass
];

var sk$Tuple3MetaClass = sk.Tuple3MetaClass = function Tuple3MetaClass(class0, class1, class2) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
};

sk$Tuple3MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple3MetaClass.prototype.__constructor = sk$Tuple3MetaClass;

sk$Tuple3MetaClass.prototype.__classname = 'Tuple3MetaClass';

sk$Tuple3MetaClass.prototype.$frozen = true;

sk$Tuple3MetaClass.prototype.__type_switch_id = 194;

sk$Tuple3MetaClass.prototype.__copy = function() {
  return new (sk$Tuple3MetaClass)(this.class0, this.class1, this.class2);
};

sk$Tuple3MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp459 = __cache.get(this);
  if (_tmp459 === undefined)
    {
      var _tmp459 = this.__copy();
      _tmp459.$frozen = true;
      __cache.set(this, _tmp459);
      _tmp459.class0 = skip.deepFreeze(_tmp459.class0, __cache);
      _tmp459.class1 = skip.deepFreeze(_tmp459.class1, __cache);
      _tmp459.class2 = skip.deepFreeze(_tmp459.class2, __cache);
    }
  return _tmp459;
};

sk$Tuple3MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple3MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple3<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18
  ]));
};

sk$Tuple3MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(3.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  return t$1.readTuple3(t$3, t$5, t$7);
};

sk$Tuple3MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(3.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  return t$1.writeTuple3(t$3, t$5, t$7, t$9, t$11, t$13);
};

sk$Tuple3MetaClass.prototype.__bases = [
  sk$Tuple3MetaClass,
  sk$MetaClass
];

var sk$Tuple4MetaClass = sk.Tuple4MetaClass = function Tuple4MetaClass(class0, class1, class2, class3) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
};

sk$Tuple4MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple4MetaClass.prototype.__constructor = sk$Tuple4MetaClass;

sk$Tuple4MetaClass.prototype.__classname = 'Tuple4MetaClass';

sk$Tuple4MetaClass.prototype.$frozen = true;

sk$Tuple4MetaClass.prototype.__type_switch_id = 195;

sk$Tuple4MetaClass.prototype.__copy = function() {
  return new (sk$Tuple4MetaClass)(this.class0, this.class1, this.class2, this.class3);
};

sk$Tuple4MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp460 = __cache.get(this);
  if (_tmp460 === undefined)
    {
      var _tmp460 = this.__copy();
      _tmp460.$frozen = true;
      __cache.set(this, _tmp460);
      _tmp460.class0 = skip.deepFreeze(_tmp460.class0, __cache);
      _tmp460.class1 = skip.deepFreeze(_tmp460.class1, __cache);
      _tmp460.class2 = skip.deepFreeze(_tmp460.class2, __cache);
      _tmp460.class3 = skip.deepFreeze(_tmp460.class3, __cache);
    }
  return _tmp460;
};

sk$Tuple4MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple4MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple4<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24
  ]));
};

sk$Tuple4MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(4.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  return t$1.readTuple4(t$3, t$5, t$7, t$9);
};

sk$Tuple4MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(4.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  return t$1.writeTuple4(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17);
};

sk$Tuple4MetaClass.prototype.__bases = [
  sk$Tuple4MetaClass,
  sk$MetaClass
];

var sk$Tuple5MetaClass = sk.Tuple5MetaClass = function Tuple5MetaClass(class0, class1, class2, class3, class4) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
  this.class4 = class4;
};

sk$Tuple5MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple5MetaClass.prototype.__constructor = sk$Tuple5MetaClass;

sk$Tuple5MetaClass.prototype.__classname = 'Tuple5MetaClass';

sk$Tuple5MetaClass.prototype.$frozen = true;

sk$Tuple5MetaClass.prototype.__type_switch_id = 196;

sk$Tuple5MetaClass.prototype.__copy = function() {
  return new (sk$Tuple5MetaClass)(this.class0, this.class1, this.class2, this.class3, this.class4);
};

sk$Tuple5MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp461 = __cache.get(this);
  if (_tmp461 === undefined)
    {
      var _tmp461 = this.__copy();
      _tmp461.$frozen = true;
      __cache.set(this, _tmp461);
      _tmp461.class0 = skip.deepFreeze(_tmp461.class0, __cache);
      _tmp461.class1 = skip.deepFreeze(_tmp461.class1, __cache);
      _tmp461.class2 = skip.deepFreeze(_tmp461.class2, __cache);
      _tmp461.class3 = skip.deepFreeze(_tmp461.class3, __cache);
      _tmp461.class4 = skip.deepFreeze(_tmp461.class4, __cache);
    }
  return _tmp461;
};

sk$Tuple5MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple5MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple5<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String((', ')).toString();
  var t$25 = this;
  var t$26 = t$25.class4;
  var t$27 = t$26;
  var t$28 = t$27.description();
  var t$29 = t$28.toString();
  var t$30 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24,
    t$29,
    t$30
  ]));
};

sk$Tuple5MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(5.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  var t$10 = this;
  var t$11 = t$10.class4;
  return t$1.readTuple5(t$3, t$5, t$7, t$9, t$11);
};

sk$Tuple5MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(5.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  var t$18 = value;
  var t$19 = t$18.i4;
  var t$20 = this;
  var t$21 = t$20.class4;
  return t$1.writeTuple5(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21);
};

sk$Tuple5MetaClass.prototype.__bases = [
  sk$Tuple5MetaClass,
  sk$MetaClass
];

var sk$Tuple6MetaClass = sk.Tuple6MetaClass = function Tuple6MetaClass(class0, class1, class2, class3, class4, class5) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
  this.class4 = class4;
  this.class5 = class5;
};

sk$Tuple6MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple6MetaClass.prototype.__constructor = sk$Tuple6MetaClass;

sk$Tuple6MetaClass.prototype.__classname = 'Tuple6MetaClass';

sk$Tuple6MetaClass.prototype.$frozen = true;

sk$Tuple6MetaClass.prototype.__type_switch_id = 197;

sk$Tuple6MetaClass.prototype.__copy = function() {
  return new (sk$Tuple6MetaClass)(this.class0, this.class1, this.class2, this.class3, this.class4, this.class5);
};

sk$Tuple6MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp462 = __cache.get(this);
  if (_tmp462 === undefined)
    {
      var _tmp462 = this.__copy();
      _tmp462.$frozen = true;
      __cache.set(this, _tmp462);
      _tmp462.class0 = skip.deepFreeze(_tmp462.class0, __cache);
      _tmp462.class1 = skip.deepFreeze(_tmp462.class1, __cache);
      _tmp462.class2 = skip.deepFreeze(_tmp462.class2, __cache);
      _tmp462.class3 = skip.deepFreeze(_tmp462.class3, __cache);
      _tmp462.class4 = skip.deepFreeze(_tmp462.class4, __cache);
      _tmp462.class5 = skip.deepFreeze(_tmp462.class5, __cache);
    }
  return _tmp462;
};

sk$Tuple6MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple6MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple6<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String((', ')).toString();
  var t$25 = this;
  var t$26 = t$25.class4;
  var t$27 = t$26;
  var t$28 = t$27.description();
  var t$29 = t$28.toString();
  var t$30 = new sk$String((', ')).toString();
  var t$31 = this;
  var t$32 = t$31.class5;
  var t$33 = t$32;
  var t$34 = t$33.description();
  var t$35 = t$34.toString();
  var t$36 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24,
    t$29,
    t$30,
    t$35,
    t$36
  ]));
};

sk$Tuple6MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(6.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  var t$10 = this;
  var t$11 = t$10.class4;
  var t$12 = this;
  var t$13 = t$12.class5;
  return t$1.readTuple6(t$3, t$5, t$7, t$9, t$11, t$13);
};

sk$Tuple6MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(6.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  var t$18 = value;
  var t$19 = t$18.i4;
  var t$20 = this;
  var t$21 = t$20.class4;
  var t$22 = value;
  var t$23 = t$22.i5;
  var t$24 = this;
  var t$25 = t$24.class5;
  return t$1.writeTuple6(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21, t$23, t$25);
};

sk$Tuple6MetaClass.prototype.__bases = [
  sk$Tuple6MetaClass,
  sk$MetaClass
];

var sk$Tuple7MetaClass = sk.Tuple7MetaClass = function Tuple7MetaClass(class0, class1, class2, class3, class4, class5, class6) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
  this.class4 = class4;
  this.class5 = class5;
  this.class6 = class6;
};

sk$Tuple7MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple7MetaClass.prototype.__constructor = sk$Tuple7MetaClass;

sk$Tuple7MetaClass.prototype.__classname = 'Tuple7MetaClass';

sk$Tuple7MetaClass.prototype.$frozen = true;

sk$Tuple7MetaClass.prototype.__type_switch_id = 198;

sk$Tuple7MetaClass.prototype.__copy = function() {
  return new (sk$Tuple7MetaClass)(this.class0, this.class1, this.class2, this.class3, this.class4, this.class5, this.class6);
};

sk$Tuple7MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp463 = __cache.get(this);
  if (_tmp463 === undefined)
    {
      var _tmp463 = this.__copy();
      _tmp463.$frozen = true;
      __cache.set(this, _tmp463);
      _tmp463.class0 = skip.deepFreeze(_tmp463.class0, __cache);
      _tmp463.class1 = skip.deepFreeze(_tmp463.class1, __cache);
      _tmp463.class2 = skip.deepFreeze(_tmp463.class2, __cache);
      _tmp463.class3 = skip.deepFreeze(_tmp463.class3, __cache);
      _tmp463.class4 = skip.deepFreeze(_tmp463.class4, __cache);
      _tmp463.class5 = skip.deepFreeze(_tmp463.class5, __cache);
      _tmp463.class6 = skip.deepFreeze(_tmp463.class6, __cache);
    }
  return _tmp463;
};

sk$Tuple7MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple7MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple7<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String((', ')).toString();
  var t$25 = this;
  var t$26 = t$25.class4;
  var t$27 = t$26;
  var t$28 = t$27.description();
  var t$29 = t$28.toString();
  var t$30 = new sk$String((', ')).toString();
  var t$31 = this;
  var t$32 = t$31.class5;
  var t$33 = t$32;
  var t$34 = t$33.description();
  var t$35 = t$34.toString();
  var t$36 = new sk$String((', ')).toString();
  var t$37 = this;
  var t$38 = t$37.class6;
  var t$39 = t$38;
  var t$40 = t$39.description();
  var t$41 = t$40.toString();
  var t$42 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24,
    t$29,
    t$30,
    t$35,
    t$36,
    t$41,
    t$42
  ]));
};

sk$Tuple7MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(7.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  var t$10 = this;
  var t$11 = t$10.class4;
  var t$12 = this;
  var t$13 = t$12.class5;
  var t$14 = this;
  var t$15 = t$14.class6;
  return t$1.readTuple7(t$3, t$5, t$7, t$9, t$11, t$13, t$15);
};

sk$Tuple7MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(7.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  var t$18 = value;
  var t$19 = t$18.i4;
  var t$20 = this;
  var t$21 = t$20.class4;
  var t$22 = value;
  var t$23 = t$22.i5;
  var t$24 = this;
  var t$25 = t$24.class5;
  var t$26 = value;
  var t$27 = t$26.i6;
  var t$28 = this;
  var t$29 = t$28.class6;
  return t$1.writeTuple7(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21, t$23, t$25, t$27, t$29);
};

sk$Tuple7MetaClass.prototype.__bases = [
  sk$Tuple7MetaClass,
  sk$MetaClass
];

var sk$Tuple8MetaClass = sk.Tuple8MetaClass = function Tuple8MetaClass(class0, class1, class2, class3, class4, class5, class6, class7) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
  this.class4 = class4;
  this.class5 = class5;
  this.class6 = class6;
  this.class7 = class7;
};

sk$Tuple8MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple8MetaClass.prototype.__constructor = sk$Tuple8MetaClass;

sk$Tuple8MetaClass.prototype.__classname = 'Tuple8MetaClass';

sk$Tuple8MetaClass.prototype.$frozen = true;

sk$Tuple8MetaClass.prototype.__type_switch_id = 199;

sk$Tuple8MetaClass.prototype.__copy = function() {
  return new (sk$Tuple8MetaClass)(this.class0, this.class1, this.class2, this.class3, this.class4, this.class5, this.class6, this.class7);
};

sk$Tuple8MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp464 = __cache.get(this);
  if (_tmp464 === undefined)
    {
      var _tmp464 = this.__copy();
      _tmp464.$frozen = true;
      __cache.set(this, _tmp464);
      _tmp464.class0 = skip.deepFreeze(_tmp464.class0, __cache);
      _tmp464.class1 = skip.deepFreeze(_tmp464.class1, __cache);
      _tmp464.class2 = skip.deepFreeze(_tmp464.class2, __cache);
      _tmp464.class3 = skip.deepFreeze(_tmp464.class3, __cache);
      _tmp464.class4 = skip.deepFreeze(_tmp464.class4, __cache);
      _tmp464.class5 = skip.deepFreeze(_tmp464.class5, __cache);
      _tmp464.class6 = skip.deepFreeze(_tmp464.class6, __cache);
      _tmp464.class7 = skip.deepFreeze(_tmp464.class7, __cache);
    }
  return _tmp464;
};

sk$Tuple8MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple8MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple8<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String((', ')).toString();
  var t$25 = this;
  var t$26 = t$25.class4;
  var t$27 = t$26;
  var t$28 = t$27.description();
  var t$29 = t$28.toString();
  var t$30 = new sk$String((', ')).toString();
  var t$31 = this;
  var t$32 = t$31.class5;
  var t$33 = t$32;
  var t$34 = t$33.description();
  var t$35 = t$34.toString();
  var t$36 = new sk$String((', ')).toString();
  var t$37 = this;
  var t$38 = t$37.class6;
  var t$39 = t$38;
  var t$40 = t$39.description();
  var t$41 = t$40.toString();
  var t$42 = new sk$String((', ')).toString();
  var t$43 = this;
  var t$44 = t$43.class7;
  var t$45 = t$44;
  var t$46 = t$45.description();
  var t$47 = t$46.toString();
  var t$48 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24,
    t$29,
    t$30,
    t$35,
    t$36,
    t$41,
    t$42,
    t$47,
    t$48
  ]));
};

sk$Tuple8MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(8.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  var t$10 = this;
  var t$11 = t$10.class4;
  var t$12 = this;
  var t$13 = t$12.class5;
  var t$14 = this;
  var t$15 = t$14.class6;
  var t$16 = this;
  var t$17 = t$16.class7;
  return t$1.readTuple8(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17);
};

sk$Tuple8MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(8.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  var t$18 = value;
  var t$19 = t$18.i4;
  var t$20 = this;
  var t$21 = t$20.class4;
  var t$22 = value;
  var t$23 = t$22.i5;
  var t$24 = this;
  var t$25 = t$24.class5;
  var t$26 = value;
  var t$27 = t$26.i6;
  var t$28 = this;
  var t$29 = t$28.class6;
  var t$30 = value;
  var t$31 = t$30.i7;
  var t$32 = this;
  var t$33 = t$32.class7;
  return t$1.writeTuple8(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21, t$23, t$25, t$27, t$29, t$31, t$33);
};

sk$Tuple8MetaClass.prototype.__bases = [
  sk$Tuple8MetaClass,
  sk$MetaClass
];

var sk$Tuple9MetaClass = sk.Tuple9MetaClass = function Tuple9MetaClass(class0, class1, class2, class3, class4, class5, class6, class7, class8) {
  this.class0 = class0;
  this.class1 = class1;
  this.class2 = class2;
  this.class3 = class3;
  this.class4 = class4;
  this.class5 = class5;
  this.class6 = class6;
  this.class7 = class7;
  this.class8 = class8;
};

sk$Tuple9MetaClass.prototype = Object.create(Object.prototype);

sk$Tuple9MetaClass.prototype.__constructor = sk$Tuple9MetaClass;

sk$Tuple9MetaClass.prototype.__classname = 'Tuple9MetaClass';

sk$Tuple9MetaClass.prototype.$frozen = true;

sk$Tuple9MetaClass.prototype.__type_switch_id = 200;

sk$Tuple9MetaClass.prototype.__copy = function() {
  return new (sk$Tuple9MetaClass)(this.class0, this.class1, this.class2, this.class3, this.class4, this.class5, this.class6, this.class7, this.class8);
};

sk$Tuple9MetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp465 = __cache.get(this);
  if (_tmp465 === undefined)
    {
      var _tmp465 = this.__copy();
      _tmp465.$frozen = true;
      __cache.set(this, _tmp465);
      _tmp465.class0 = skip.deepFreeze(_tmp465.class0, __cache);
      _tmp465.class1 = skip.deepFreeze(_tmp465.class1, __cache);
      _tmp465.class2 = skip.deepFreeze(_tmp465.class2, __cache);
      _tmp465.class3 = skip.deepFreeze(_tmp465.class3, __cache);
      _tmp465.class4 = skip.deepFreeze(_tmp465.class4, __cache);
      _tmp465.class5 = skip.deepFreeze(_tmp465.class5, __cache);
      _tmp465.class6 = skip.deepFreeze(_tmp465.class6, __cache);
      _tmp465.class7 = skip.deepFreeze(_tmp465.class7, __cache);
      _tmp465.class8 = skip.deepFreeze(_tmp465.class8, __cache);
    }
  return _tmp465;
};

sk$Tuple9MetaClass.prototype.__init = function(__named_parameters) {};

sk$Tuple9MetaClass.prototype.description = function() {
  var t$ = new sk$String(('Tuple9<')).toString();
  var t$1 = this;
  var t$2 = t$1.class0;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String((', ')).toString();
  var t$7 = this;
  var t$8 = t$7.class1;
  var t$9 = t$8;
  var t$10 = t$9.description();
  var t$11 = t$10.toString();
  var t$12 = new sk$String((', ')).toString();
  var t$13 = this;
  var t$14 = t$13.class2;
  var t$15 = t$14;
  var t$16 = t$15.description();
  var t$17 = t$16.toString();
  var t$18 = new sk$String((', ')).toString();
  var t$19 = this;
  var t$20 = t$19.class3;
  var t$21 = t$20;
  var t$22 = t$21.description();
  var t$23 = t$22.toString();
  var t$24 = new sk$String((', ')).toString();
  var t$25 = this;
  var t$26 = t$25.class4;
  var t$27 = t$26;
  var t$28 = t$27.description();
  var t$29 = t$28.toString();
  var t$30 = new sk$String((', ')).toString();
  var t$31 = this;
  var t$32 = t$31.class5;
  var t$33 = t$32;
  var t$34 = t$33.description();
  var t$35 = t$34.toString();
  var t$36 = new sk$String((', ')).toString();
  var t$37 = this;
  var t$38 = t$37.class6;
  var t$39 = t$38;
  var t$40 = t$39.description();
  var t$41 = t$40.toString();
  var t$42 = new sk$String((', ')).toString();
  var t$43 = this;
  var t$44 = t$43.class7;
  var t$45 = t$44;
  var t$46 = t$45.description();
  var t$47 = t$46.toString();
  var t$48 = new sk$String((', ')).toString();
  var t$49 = this;
  var t$50 = t$49.class8;
  var t$51 = t$50;
  var t$52 = t$51.description();
  var t$53 = t$52.toString();
  var t$54 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6,
    t$11,
    t$12,
    t$17,
    t$18,
    t$23,
    t$24,
    t$29,
    t$30,
    t$35,
    t$36,
    t$41,
    t$42,
    t$47,
    t$48,
    t$53,
    t$54
  ]));
};

sk$Tuple9MetaClass.prototype.deserialize = function(reader) {
  var t$ = reader;
  var tupleReader = t$.readTuple(new sk$Int(9.0, 0.0));
  var t$1 = tupleReader;
  var t$2 = this;
  var t$3 = t$2.class0;
  var t$4 = this;
  var t$5 = t$4.class1;
  var t$6 = this;
  var t$7 = t$6.class2;
  var t$8 = this;
  var t$9 = t$8.class3;
  var t$10 = this;
  var t$11 = t$10.class4;
  var t$12 = this;
  var t$13 = t$12.class5;
  var t$14 = this;
  var t$15 = t$14.class6;
  var t$16 = this;
  var t$17 = t$16.class7;
  var t$18 = this;
  var t$19 = t$18.class8;
  return t$1.readTuple9(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19);
};

sk$Tuple9MetaClass.prototype.serialize = function(value, writer) {
  var t$ = writer;
  var tupleWriter = t$.writeTuple(new sk$Int(9.0, 0.0));
  var t$1 = tupleWriter;
  var t$2 = value;
  var t$3 = t$2.i0;
  var t$4 = this;
  var t$5 = t$4.class0;
  var t$6 = value;
  var t$7 = t$6.i1;
  var t$8 = this;
  var t$9 = t$8.class1;
  var t$10 = value;
  var t$11 = t$10.i2;
  var t$12 = this;
  var t$13 = t$12.class2;
  var t$14 = value;
  var t$15 = t$14.i3;
  var t$16 = this;
  var t$17 = t$16.class3;
  var t$18 = value;
  var t$19 = t$18.i4;
  var t$20 = this;
  var t$21 = t$20.class4;
  var t$22 = value;
  var t$23 = t$22.i5;
  var t$24 = this;
  var t$25 = t$24.class5;
  var t$26 = value;
  var t$27 = t$26.i6;
  var t$28 = this;
  var t$29 = t$28.class6;
  var t$30 = value;
  var t$31 = t$30.i7;
  var t$32 = this;
  var t$33 = t$32.class7;
  var t$34 = value;
  var t$35 = t$34.i8;
  var t$36 = this;
  var t$37 = t$36.class8;
  return t$1.writeTuple9(t$3, t$5, t$7, t$9, t$11, t$13, t$15, t$17, t$19, t$21, t$23, t$25, t$27, t$29, t$31, t$33, t$35, t$37);
};

sk$Tuple9MetaClass.prototype.__bases = [
  sk$Tuple9MetaClass,
  sk$MetaClass
];

var sk$UniqueSequence = sk.UniqueSequence = function UniqueSequence() {};

sk$UniqueSequence.prototype = Object.create(Object.prototype);

sk$UniqueSequence.prototype.__constructor = sk$UniqueSequence;

sk$UniqueSequence.prototype.__classname = 'UniqueSequence';

sk$UniqueSequence.prototype.$frozen = undefined;

sk$UniqueSequence.prototype.__type_switch_id = -1;

sk$UniqueSequence.prototype.__copy = function() {};

sk$UniqueSequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp466 = __cache.get(this);
  if (_tmp466 === undefined)
    {
      var _tmp466 = this.__copy();
      _tmp466.$frozen = true;
      __cache.set(this, _tmp466);
    }
  return _tmp466;
};

sk$UniqueSequence.prototype.__init = function(__named_parameters) {};

sk$UniqueSequence.prototype.containsAll = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.all(((_tmp25405) => 
  {
    return t$3.contains(_tmp25405);
  }));
};

sk$UniqueSequence.prototype.containsAny = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.any(((_tmp25410) => 
  {
    return t$3.contains(_tmp25410);
  }));
};

sk$UniqueSequence.prototype.extend = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    return t$2.insert(t$3);
  }));
};

sk$UniqueSequence.prototype.filter = function(p) {
  var static1 = this.__constructor;
  var t$ = static1;
  var set = t$.mcreate(undefined);
  var t$1 = this;
  t$1.each(((x) => 
  {
    var t$2 = p;
    var t$3 = x;
    if (t$2(t$3).__value)
      {
        var t$4 = set;
        var t$5 = x;
        return t$4.add(t$5);
      }
    else
      return sk.__.$void;
  }));
  return skip.deepFreeze(set, new Map());
};

sk$UniqueSequence.prototype.filterNone = function() {
  return sk$invariant_violation(new sk$String(('UniqueSequence.filterNone(): undefined method, UniqueSequence<?_> cannot exist.')));
};

sk$UniqueSequence.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$UniqueSequence.prototype.subtract = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    t$2.maybeRemove(t$3);
    return sk.__.$void;
  }));
};

sk$UniqueSequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$UniqueSequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$UniqueSequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$UniqueSequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$UniqueSequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$UniqueSequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$UniqueSequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$UniqueSequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$UniqueSequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$UniqueSequence.prototype.__bases = [
  sk$UniqueSequence,
  sk$Sequence
];

var sk$Vector$dtItemsIterator = sk.Vector$dtItemsIterator = function Vector$dtItemsIterator(vector, inner, sz, indexMinusGeneration) {
  this.vector = vector;
  this.inner = inner;
  this.sz = sz;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Vector$dtItemsIterator.prototype = Object.create(Object.prototype);

sk$Vector$dtItemsIterator.prototype.__constructor = sk$Vector$dtItemsIterator;

sk$Vector$dtItemsIterator.prototype.__classname = 'Vector.ItemsIterator';

sk$Vector$dtItemsIterator.prototype.$frozen = false;

sk$Vector$dtItemsIterator.prototype.__type_switch_id = 146;

sk$Vector$dtItemsIterator.prototype.__copy = function() {
  return new (sk$Vector$dtItemsIterator)(this.vector, this.inner, this.sz, this.indexMinusGeneration);
};

sk$Vector$dtItemsIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp467 = __cache.get(this);
  if (_tmp467 === undefined)
    {
      var _tmp467 = this.__copy();
      _tmp467.$frozen = true;
      __cache.set(this, _tmp467);
      _tmp467.vector = skip.deepFreeze(_tmp467.vector, __cache);
      _tmp467.inner = skip.deepFreeze(_tmp467.inner, __cache);
      _tmp467.sz = skip.deepFreeze(_tmp467.sz, __cache);
      _tmp467.indexMinusGeneration = skip.deepFreeze(_tmp467.indexMinusGeneration, __cache);
    }
  return _tmp467;
};

sk$Vector$dtItemsIterator.prototype.__init = function(__named_parameters) {};

sk$Vector$dtItemsIterator.prototype.getItemValue = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = index;
  var t$4 = sk$Vector$dtunsafeGet(t$2, t$3);
  return new (sk$Tuple2)(t$, t$4);
};

sk$Vector$dtItemsIterator.make = function(vector, inner, sz) {
  var t$ = vector;
  var t$1 = inner;
  var t$2 = sz;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Vector$dtItemsIterator)(t$, t$1, t$2, t$5);
};

sk$Vector$dtItemsIterator.prototype.next = function() {
  var t$ = this;
  var vector = t$.vector;
  var t$1 = this;
  var t$2 = t$1.indexMinusGeneration;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$2.$pl(t$4);
  var t$5 = index;
  var t$6 = this;
  var t$7 = t$6.sz;
  if (t$5.uge(t$7).__value)
    {
      var t$8 = index;
      if (t$8.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
        sk$throwContainerChanged();
      else
        {}
      return singleton$None;
    }
  else
    {
      var $var = this;
      var t$9 = $var;
      var t$10 = this;
      var t$11 = t$10.indexMinusGeneration;
      var t$12 = t$9;
      t$12.indexMinusGeneration = t$11.$pl(new sk$Int(1.0, 0.0));
      var t$13 = this;
      var t$14 = index;
      var t$15 = t$13.getItemValue(t$14);
      return new (sk$Some)(t$15);
    }
};

sk$Vector$dtItemsIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var sz = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = sz;
  return new (sk$Some)(t$9);
};

sk$Vector$dtItemsIterator.prototype.__bases = [
  sk$Vector$dtItemsIterator,
  sk$Iterator
];

var sk$Vector$dtKeysIterator = sk.Vector$dtKeysIterator = function Vector$dtKeysIterator(vector, inner, sz, indexMinusGeneration) {
  this.vector = vector;
  this.inner = inner;
  this.sz = sz;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Vector$dtKeysIterator.prototype = Object.create(Object.prototype);

sk$Vector$dtKeysIterator.prototype.__constructor = sk$Vector$dtKeysIterator;

sk$Vector$dtKeysIterator.prototype.__classname = 'Vector.KeysIterator';

sk$Vector$dtKeysIterator.prototype.$frozen = false;

sk$Vector$dtKeysIterator.prototype.__type_switch_id = 147;

sk$Vector$dtKeysIterator.prototype.__copy = function() {
  return new (sk$Vector$dtKeysIterator)(this.vector, this.inner, this.sz, this.indexMinusGeneration);
};

sk$Vector$dtKeysIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp468 = __cache.get(this);
  if (_tmp468 === undefined)
    {
      var _tmp468 = this.__copy();
      _tmp468.$frozen = true;
      __cache.set(this, _tmp468);
      _tmp468.vector = skip.deepFreeze(_tmp468.vector, __cache);
      _tmp468.inner = skip.deepFreeze(_tmp468.inner, __cache);
      _tmp468.sz = skip.deepFreeze(_tmp468.sz, __cache);
      _tmp468.indexMinusGeneration = skip.deepFreeze(_tmp468.indexMinusGeneration, __cache);
    }
  return _tmp468;
};

sk$Vector$dtKeysIterator.prototype.__init = function(__named_parameters) {};

sk$Vector$dtKeysIterator.prototype.getItemValue = function(index) {
  return index;
};

sk$Vector$dtKeysIterator.make = function(vector, inner, sz) {
  var t$ = vector;
  var t$1 = inner;
  var t$2 = sz;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Vector$dtKeysIterator)(t$, t$1, t$2, t$5);
};

sk$Vector$dtKeysIterator.prototype.next = function() {
  var t$ = this;
  var vector = t$.vector;
  var t$1 = this;
  var t$2 = t$1.indexMinusGeneration;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$2.$pl(t$4);
  var t$5 = index;
  var t$6 = this;
  var t$7 = t$6.sz;
  if (t$5.uge(t$7).__value)
    {
      var t$8 = index;
      if (t$8.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
        sk$throwContainerChanged();
      else
        {}
      return singleton$None;
    }
  else
    {
      var $var = this;
      var t$9 = $var;
      var t$10 = this;
      var t$11 = t$10.indexMinusGeneration;
      var t$12 = t$9;
      t$12.indexMinusGeneration = t$11.$pl(new sk$Int(1.0, 0.0));
      var t$13 = this;
      var t$14 = index;
      var t$15 = t$13.getItemValue(t$14);
      return new (sk$Some)(t$15);
    }
};

sk$Vector$dtKeysIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var sz = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = sz;
  return new (sk$Some)(t$9);
};

sk$Vector$dtKeysIterator.prototype.__bases = [
  sk$Vector$dtKeysIterator,
  sk$Iterator
];

var sk$Vector$dtReversedValuesIterator = sk.Vector$dtReversedValuesIterator = function Vector$dtReversedValuesIterator(vector, inner, sz, indexMinusGeneration) {
  this.vector = vector;
  this.inner = inner;
  this.sz = sz;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Vector$dtReversedValuesIterator.prototype = Object.create(Object.prototype);

sk$Vector$dtReversedValuesIterator.prototype.__constructor = sk$Vector$dtReversedValuesIterator;

sk$Vector$dtReversedValuesIterator.prototype.__classname = 'Vector.ReversedValuesIterator';

sk$Vector$dtReversedValuesIterator.prototype.$frozen = false;

sk$Vector$dtReversedValuesIterator.prototype.__type_switch_id = 148;

sk$Vector$dtReversedValuesIterator.prototype.__copy = function() {
  return new (sk$Vector$dtReversedValuesIterator)(this.vector, this.inner, this.sz, this.indexMinusGeneration);
};

sk$Vector$dtReversedValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp469 = __cache.get(this);
  if (_tmp469 === undefined)
    {
      var _tmp469 = this.__copy();
      _tmp469.$frozen = true;
      __cache.set(this, _tmp469);
      _tmp469.vector = skip.deepFreeze(_tmp469.vector, __cache);
      _tmp469.inner = skip.deepFreeze(_tmp469.inner, __cache);
      _tmp469.sz = skip.deepFreeze(_tmp469.sz, __cache);
      _tmp469.indexMinusGeneration = skip.deepFreeze(_tmp469.indexMinusGeneration, __cache);
    }
  return _tmp469;
};

sk$Vector$dtReversedValuesIterator.prototype.__init = function(__named_parameters) {};

sk$Vector$dtReversedValuesIterator.prototype.getItemValue = function(index) {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = index;
  var t$3 = t$1.$mi(t$2);
  index = t$3.$mi(new sk$Int(1.0, 0.0));
  var t$4 = this;
  var t$5 = t$4.inner;
  var t$6 = index;
  return sk$Vector$dtunsafeGet(t$5, t$6);
};

sk$Vector$dtReversedValuesIterator.make = function(vector, inner, sz) {
  var t$ = vector;
  var t$1 = inner;
  var t$2 = sz;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Vector$dtReversedValuesIterator)(t$, t$1, t$2, t$5);
};

sk$Vector$dtReversedValuesIterator.prototype.next = function() {
  var t$ = this;
  var vector = t$.vector;
  var t$1 = this;
  var t$2 = t$1.indexMinusGeneration;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$2.$pl(t$4);
  var t$5 = index;
  var t$6 = this;
  var t$7 = t$6.sz;
  if (t$5.uge(t$7).__value)
    {
      var t$8 = index;
      if (t$8.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
        sk$throwContainerChanged();
      else
        {}
      return singleton$None;
    }
  else
    {
      var $var = this;
      var t$9 = $var;
      var t$10 = this;
      var t$11 = t$10.indexMinusGeneration;
      var t$12 = t$9;
      t$12.indexMinusGeneration = t$11.$pl(new sk$Int(1.0, 0.0));
      var t$13 = this;
      var t$14 = index;
      var t$15 = t$13.getItemValue(t$14);
      return new (sk$Some)(t$15);
    }
};

sk$Vector$dtReversedValuesIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var sz = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = sz;
  return new (sk$Some)(t$9);
};

sk$Vector$dtReversedValuesIterator.prototype.__bases = [
  sk$Vector$dtReversedValuesIterator,
  sk$Iterator
];

var sk$Vector$dtValuesIterator = sk.Vector$dtValuesIterator = function Vector$dtValuesIterator(vector, inner, sz, indexMinusGeneration) {
  this.vector = vector;
  this.inner = inner;
  this.sz = sz;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Vector$dtValuesIterator.prototype = Object.create(Object.prototype);

sk$Vector$dtValuesIterator.prototype.__constructor = sk$Vector$dtValuesIterator;

sk$Vector$dtValuesIterator.prototype.__classname = 'Vector.ValuesIterator';

sk$Vector$dtValuesIterator.prototype.$frozen = false;

sk$Vector$dtValuesIterator.prototype.__type_switch_id = 149;

sk$Vector$dtValuesIterator.prototype.__copy = function() {
  return new (sk$Vector$dtValuesIterator)(this.vector, this.inner, this.sz, this.indexMinusGeneration);
};

sk$Vector$dtValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp470 = __cache.get(this);
  if (_tmp470 === undefined)
    {
      var _tmp470 = this.__copy();
      _tmp470.$frozen = true;
      __cache.set(this, _tmp470);
      _tmp470.vector = skip.deepFreeze(_tmp470.vector, __cache);
      _tmp470.inner = skip.deepFreeze(_tmp470.inner, __cache);
      _tmp470.sz = skip.deepFreeze(_tmp470.sz, __cache);
      _tmp470.indexMinusGeneration = skip.deepFreeze(_tmp470.indexMinusGeneration, __cache);
    }
  return _tmp470;
};

sk$Vector$dtValuesIterator.prototype.__init = function(__named_parameters) {};

sk$Vector$dtValuesIterator.prototype.getItemValue = function(index) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = index;
  return sk$Vector$dtunsafeGet(t$1, t$2);
};

sk$Vector$dtValuesIterator.make = function(vector, inner, sz) {
  var t$ = vector;
  var t$1 = inner;
  var t$2 = sz;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Vector$dtValuesIterator)(t$, t$1, t$2, t$5);
};

sk$Vector$dtValuesIterator.prototype.next = function() {
  var t$ = this;
  var vector = t$.vector;
  var t$1 = this;
  var t$2 = t$1.indexMinusGeneration;
  var t$3 = vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$2.$pl(t$4);
  var t$5 = index;
  var t$6 = this;
  var t$7 = t$6.sz;
  if (t$5.uge(t$7).__value)
    {
      var t$8 = index;
      if (t$8.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
        sk$throwContainerChanged();
      else
        {}
      return singleton$None;
    }
  else
    {
      var $var = this;
      var t$9 = $var;
      var t$10 = this;
      var t$11 = t$10.indexMinusGeneration;
      var t$12 = t$9;
      t$12.indexMinusGeneration = t$11.$pl(new sk$Int(1.0, 0.0));
      var t$13 = this;
      var t$14 = index;
      var t$15 = t$13.getItemValue(t$14);
      return new (sk$Some)(t$15);
    }
};

sk$Vector$dtValuesIterator.prototype.sizeHint = function() {
  var t$ = this;
  var t$1 = t$.indexMinusGeneration;
  var t$2 = this;
  var t$3 = t$2.vector;
  var t$4 = t$3.generation_PRIVATE;
  var index = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = t$5.sz;
  var t$7 = index;
  var t$8 = t$6.$mi(t$7);
  var sz = sk$max(new sk$Int(0.0, 0.0), t$8);
  var t$9 = sz;
  return new (sk$Some)(t$9);
};

sk$Vector$dtValuesIterator.prototype.__bases = [
  sk$Vector$dtValuesIterator,
  sk$Iterator
];

var sk$VectorMetaClass = sk.VectorMetaClass = function VectorMetaClass(itemClass) {
  this.itemClass = itemClass;
};

sk$VectorMetaClass.prototype = Object.create(Object.prototype);

sk$VectorMetaClass.prototype.__constructor = sk$VectorMetaClass;

sk$VectorMetaClass.prototype.__classname = 'VectorMetaClass';

sk$VectorMetaClass.prototype.$frozen = true;

sk$VectorMetaClass.prototype.__type_switch_id = 201;

sk$VectorMetaClass.prototype.__copy = function() {
  return new (sk$VectorMetaClass)(this.itemClass);
};

sk$VectorMetaClass.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp471 = __cache.get(this);
  if (_tmp471 === undefined)
    {
      var _tmp471 = this.__copy();
      _tmp471.$frozen = true;
      __cache.set(this, _tmp471);
      _tmp471.itemClass = skip.deepFreeze(_tmp471.itemClass, __cache);
    }
  return _tmp471;
};

sk$VectorMetaClass.prototype.__init = function(__named_parameters) {};

sk$VectorMetaClass.prototype.description = function() {
  var t$ = new sk$String(('Vector<')).toString();
  var t$1 = this;
  var t$2 = t$1.itemClass;
  var t$3 = t$2;
  var t$4 = t$3.description();
  var t$5 = t$4.toString();
  var t$6 = new sk$String(('>')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$5,
    t$6
  ]));
};

sk$VectorMetaClass.prototype.deserialize = function(reader) {
  var t$ = this;
  var itemClass = t$.itemClass;
  var t$1 = reader;
  var t$2 = itemClass;
  var t$3 = t$1.readSequence(t$2);
  var sequence = t$3;
  var t$4 = sequence;
  var t$5 = t$4.sizeHint();
  var sizeHint = t$5.$default(new sk$Int(0.0, 0.0));
  var t$6 = sizeHint;
  var vector = sk$Vector.mcreate(t$6);
  var break_val;
  {
    jumpBlockOuterbreak$bg28687:{
      break$bg28687:{
        do
          {
            jumpBlockOutercontinue$bg28688:{
              continue$bg28688:{
                {
                  var t$7 = sequence;
                  var $var = t$7.readValue();
                  var item;
                  {
                    jumpBlockOuterjumpLab$bg28698:{
                      jumpLab$bg28698:{
                        jumpLab$bg28697:{
                          switch ($var.__type_switch_id) {
                            case 205:
                              item = $var.value;
                              break jumpLab$bg28697;
                            
                            case 204:
                              break jumpLab$bg28698;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var t$8 = vector;
                          var t$9 = item;
                          t$8.push(t$9);
                        }
                        break jumpBlockOuterjumpLab$bg28698;
                      }
                      {
                        break_val = sk.__.$void;
                        break break$bg28687;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg28688;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg28687;
    }
  }
  var t$10 = sequence;
  t$10.end();
  var t$11 = vector;
  return t$11;
};

sk$VectorMetaClass.prototype.expectedType = function() {
  var t$ = this;
  return t$.description();
};

sk$VectorMetaClass.prototype.serialize = function(value, writer) {
  var t$ = this;
  var itemClass = t$.itemClass;
  var t$1 = writer;
  var t$2 = itemClass;
  var t$3 = value;
  var t$4 = t$3.size();
  var t$5 = new (sk$Some)(t$4);
  var sequence = t$1.writeSequence(t$2, t$5);
  var t$6 = value;
  var $var = t$6.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg28712:{
      break$bg28712:{
        dowhile_else$bg28711:{
          do
            {
              jumpBlockOuterdowhile_cond$bg28713:{
                dowhile_cond$bg28713:{
                  {
                    var t$7 = $var;
                    var var2 = t$7.next();
                    var item;
                    {
                      jumpBlockOuterjumpLab$bg28722:{
                        jumpLab$bg28722:{
                          jumpLab$bg28721:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg28721;
                              
                              case 205:
                                item = var2.value;
                                break jumpLab$bg28722;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg28713;
                          }
                        }
                        {
                          var t$8 = sequence;
                          var t$9 = item;
                          t$8.writeValue(t$9);
                        }
                        break jumpBlockOuterjumpLab$bg28722;
                      }
                    }
                    break dowhile_cond$bg28713;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg28711;
                break jumpBlockOuterdowhile_cond$bg28713;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg28712;
      }
      {}
      break jumpBlockOuterbreak$bg28712;
    }
  }
  var t$10 = sequence;
  return t$10.end();
};

sk$VectorMetaClass.prototype.__bases = [
  sk$VectorMetaClass,
  sk$MetaClass
];

var sk$ArgumentParser$dtInvalidValueError = sk.ArgumentParser$dtInvalidValueError = function ArgumentParser$dtInvalidValueError(name, hint) {
  this.name = name;
  this.hint = hint;
};

sk$ArgumentParser$dtInvalidValueError.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtInvalidValueError.prototype.__constructor = sk$ArgumentParser$dtInvalidValueError;

sk$ArgumentParser$dtInvalidValueError.prototype.__classname = 'ArgumentParser.InvalidValueError';

sk$ArgumentParser$dtInvalidValueError.prototype.$frozen = true;

sk$ArgumentParser$dtInvalidValueError.prototype.__type_switch_id = 44;

sk$ArgumentParser$dtInvalidValueError.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtInvalidValueError)(this.name, this.hint);
};

sk$ArgumentParser$dtInvalidValueError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp472 = __cache.get(this);
  if (_tmp472 === undefined)
    {
      var _tmp472 = this.__copy();
      _tmp472.$frozen = true;
      __cache.set(this, _tmp472);
      _tmp472.name = skip.deepFreeze(_tmp472.name, __cache);
      _tmp472.hint = skip.deepFreeze(_tmp472.hint, __cache);
    }
  return _tmp472;
};

sk$ArgumentParser$dtInvalidValueError.prototype.__init = function(__named_parameters) {};

sk$ArgumentParser$dtInvalidValueError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$ArgumentParser$dtInvalidValueError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg38:{
      jumpLab$bg38:{
        jumpLab$bg37:{
          switch (other.__type_switch_id) {
            case 44:
              otherTyped = other;
              break jumpLab$bg37;
            
            default:
              break jumpLab$bg38;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.name;
          var t$2 = otherTyped;
          var t$3 = t$2.name;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.hint;
          var t$7 = otherTyped;
          var t$8 = t$7.hint;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$ArgumentParser$dtInvalidValueError.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.hint;
  var t$2;
  if (t$1.isEmpty().__value)
    t$2 = new sk$String((''));
  else
    {
      var t$3 = this;
      var t$4 = t$3.hint;
      t$2 = new sk$String((' ')).$pl(t$4);
    }
  var hint = t$2;
  var t$5 = new sk$String(('Invalid value for argument \'')).toString();
  var t$6 = this;
  var t$7 = t$6.name;
  var t$8 = t$7.toString();
  var t$9 = new sk$String(('\'.')).toString();
  var t$10 = hint;
  var t$11 = t$10.toString();
  var t$12 = new sk$String(('.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$5,
    t$8,
    t$9,
    t$11,
    t$12
  ]));
};

sk$ArgumentParser$dtInvalidValueError.prototype.__bases = [
  sk$ArgumentParser$dtInvalidValueError,
  sk$Exception,
  sk$ArgumentParser$dtArgumentError
];

var sk$ArgumentParser$dtMissingValueError = sk.ArgumentParser$dtMissingValueError = function ArgumentParser$dtMissingValueError(name) {
  this.name = name;
};

sk$ArgumentParser$dtMissingValueError.prototype = Object.create(Object.prototype);

sk$ArgumentParser$dtMissingValueError.prototype.__constructor = sk$ArgumentParser$dtMissingValueError;

sk$ArgumentParser$dtMissingValueError.prototype.__classname = 'ArgumentParser.MissingValueError';

sk$ArgumentParser$dtMissingValueError.prototype.$frozen = true;

sk$ArgumentParser$dtMissingValueError.prototype.__type_switch_id = 45;

sk$ArgumentParser$dtMissingValueError.prototype.__copy = function() {
  return new (sk$ArgumentParser$dtMissingValueError)(this.name);
};

sk$ArgumentParser$dtMissingValueError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp473 = __cache.get(this);
  if (_tmp473 === undefined)
    {
      var _tmp473 = this.__copy();
      _tmp473.$frozen = true;
      __cache.set(this, _tmp473);
      _tmp473.name = skip.deepFreeze(_tmp473.name, __cache);
    }
  return _tmp473;
};

sk$ArgumentParser$dtMissingValueError.prototype.__init = function(__named_parameters) {};

sk$ArgumentParser$dtMissingValueError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$ArgumentParser$dtMissingValueError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg66:{
      jumpLab$bg66:{
        jumpLab$bg65:{
          switch (other.__type_switch_id) {
            case 45:
              otherTyped = other;
              break jumpLab$bg65;
            
            default:
              break jumpLab$bg66;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.name;
          var t$2 = otherTyped;
          var t$3 = t$2.name;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$ArgumentParser$dtMissingValueError.prototype.getMessage = function() {
  var t$ = new sk$String(('No value provided for required argument ')).toString();
  var t$1 = this;
  var t$2 = t$1.name;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4
  ]));
};

sk$ArgumentParser$dtMissingValueError.prototype.__bases = [
  sk$ArgumentParser$dtMissingValueError,
  sk$Exception,
  sk$ArgumentParser$dtArgumentError
];

var sk$Doc$dtHardLine = sk.Doc$dtHardLine = function Doc$dtHardLine() {};

sk$Doc$dtHardLine.prototype = Object.create(Object.prototype);

sk$Doc$dtHardLine.prototype.__constructor = sk$Doc$dtHardLine;

sk$Doc$dtHardLine.prototype.__classname = 'Doc.HardLine';

sk$Doc$dtHardLine.prototype.$frozen = true;

sk$Doc$dtHardLine.prototype.__type_switch_id = 26;

sk$Doc$dtHardLine.prototype.__copy = function() {
  return new (sk$Doc$dtHardLine)();
};

sk$Doc$dtHardLine.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp474 = __cache.get(this);
  if (_tmp474 === undefined)
    {
      var _tmp474 = this.__copy();
      _tmp474.$frozen = true;
      __cache.set(this, _tmp474);
    }
  return _tmp474;
};

sk$Doc$dtHardLine.prototype.__init = function(__named_parameters) {};

sk$Doc$dtHardLine.prototype.__bases = [
  sk$Doc$dtHardLine,
  sk$Doc,
  sk$Doc$dtGenericLine
];

var sk$Doc$dtLine = sk.Doc$dtLine = function Doc$dtLine() {};

sk$Doc$dtLine.prototype = Object.create(Object.prototype);

sk$Doc$dtLine.prototype.__constructor = sk$Doc$dtLine;

sk$Doc$dtLine.prototype.__classname = 'Doc.Line';

sk$Doc$dtLine.prototype.$frozen = true;

sk$Doc$dtLine.prototype.__type_switch_id = 27;

sk$Doc$dtLine.prototype.__copy = function() {
  return new (sk$Doc$dtLine)();
};

sk$Doc$dtLine.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp475 = __cache.get(this);
  if (_tmp475 === undefined)
    {
      var _tmp475 = this.__copy();
      _tmp475.$frozen = true;
      __cache.set(this, _tmp475);
    }
  return _tmp475;
};

sk$Doc$dtLine.prototype.__init = function(__named_parameters) {};

sk$Doc$dtLine.prototype.__bases = [
  sk$Doc$dtLine,
  sk$Doc,
  sk$Doc$dtGenericLine
];

var sk$Doc$dtSoftLine = sk.Doc$dtSoftLine = function Doc$dtSoftLine() {};

sk$Doc$dtSoftLine.prototype = Object.create(Object.prototype);

sk$Doc$dtSoftLine.prototype.__constructor = sk$Doc$dtSoftLine;

sk$Doc$dtSoftLine.prototype.__classname = 'Doc.SoftLine';

sk$Doc$dtSoftLine.prototype.$frozen = true;

sk$Doc$dtSoftLine.prototype.__type_switch_id = 28;

sk$Doc$dtSoftLine.prototype.__copy = function() {
  return new (sk$Doc$dtSoftLine)();
};

sk$Doc$dtSoftLine.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp476 = __cache.get(this);
  if (_tmp476 === undefined)
    {
      var _tmp476 = this.__copy();
      _tmp476.$frozen = true;
      __cache.set(this, _tmp476);
    }
  return _tmp476;
};

sk$Doc$dtSoftLine.prototype.__init = function(__named_parameters) {};

sk$Doc$dtSoftLine.prototype.__bases = [
  sk$Doc$dtSoftLine,
  sk$Doc,
  sk$Doc$dtGenericLine
];

var sk$HH$dtArraybacked = sk.HH$dtArraybacked = function HH$dtArraybacked() {};

sk$HH$dtArraybacked.prototype = Object.create(Object.prototype);

sk$HH$dtArraybacked.prototype.__constructor = sk$HH$dtArraybacked;

sk$HH$dtArraybacked.prototype.__classname = 'HH.Arraybacked';

sk$HH$dtArraybacked.prototype.$frozen = undefined;

sk$HH$dtArraybacked.prototype.__type_switch_id = -1;

sk$HH$dtArraybacked.prototype.__copy = function() {};

sk$HH$dtArraybacked.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp477 = __cache.get(this);
  if (_tmp477 === undefined)
    {
      var _tmp477 = this.__copy();
      _tmp477.$frozen = true;
      __cache.set(this, _tmp477);
    }
  return _tmp477;
};

sk$HH$dtArraybacked.prototype.__init = function(__named_parameters) {};

sk$HH$dtArraybacked.prototype.__bases = [
  sk$HH$dtArraybacked,
  sk$HH$dtMixed,
  sk$HH$dtNonnull
];

var sk$HH$dtObject = sk.HH$dtObject = function HH$dtObject() {};

sk$HH$dtObject.prototype = Object.create(Object.prototype);

sk$HH$dtObject.prototype.__constructor = sk$HH$dtObject;

sk$HH$dtObject.prototype.__classname = 'HH.Object';

sk$HH$dtObject.prototype.$frozen = undefined;

sk$HH$dtObject.prototype.__type_switch_id = -1;

sk$HH$dtObject.prototype.__copy = function() {};

sk$HH$dtObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp478 = __cache.get(this);
  if (_tmp478 === undefined)
    {
      var _tmp478 = this.__copy();
      _tmp478.$frozen = true;
      __cache.set(this, _tmp478);
    }
  return _tmp478;
};

sk$HH$dtObject.prototype.__init = function(__named_parameters) {};

sk$HH$dtObject.prototype.__bases = [
  sk$HH$dtObject,
  sk$HH$dtMixed,
  sk$HH$dtNonnull
];

var sk$HH$dtPrimitive = sk.HH$dtPrimitive = function HH$dtPrimitive() {};

sk$HH$dtPrimitive.prototype = Object.create(Object.prototype);

sk$HH$dtPrimitive.prototype.__constructor = sk$HH$dtPrimitive;

sk$HH$dtPrimitive.prototype.__classname = 'HH.Primitive';

sk$HH$dtPrimitive.prototype.$frozen = undefined;

sk$HH$dtPrimitive.prototype.__type_switch_id = -1;

sk$HH$dtPrimitive.prototype.__copy = function() {};

sk$HH$dtPrimitive.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp479 = __cache.get(this);
  if (_tmp479 === undefined)
    {
      var _tmp479 = this.__copy();
      _tmp479.$frozen = true;
      __cache.set(this, _tmp479);
    }
  return _tmp479;
};

sk$HH$dtPrimitive.prototype.__init = function(__named_parameters) {};

sk$HH$dtPrimitive.prototype.__bases = [
  sk$HH$dtPrimitive,
  sk$HH$dtMixed,
  sk$HH$dtNonnull
];

var sk$HH$dtResource = sk.HH$dtResource = function HH$dtResource() {};

sk$HH$dtResource.prototype = Object.create(Object.prototype);

sk$HH$dtResource.prototype.__constructor = sk$HH$dtResource;

sk$HH$dtResource.prototype.__classname = 'HH.Resource';

sk$HH$dtResource.prototype.$frozen = undefined;

sk$HH$dtResource.prototype.__type_switch_id = -1;

sk$HH$dtResource.prototype.__copy = function() {};

sk$HH$dtResource.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp480 = __cache.get(this);
  if (_tmp480 === undefined)
    {
      var _tmp480 = this.__copy();
      _tmp480.$frozen = true;
      __cache.set(this, _tmp480);
    }
  return _tmp480;
};

sk$HH$dtResource.prototype.__init = function(__named_parameters) {};

sk$HH$dtResource.prototype.__bases = [
  sk$HH$dtResource,
  sk$HH$dtMixed,
  sk$HH$dtNonnull
];

var sk$Integral = sk.Integral = function Integral() {};

sk$Integral.prototype = Object.create(Object.prototype);

sk$Integral.prototype.__constructor = sk$Integral;

sk$Integral.prototype.__classname = 'Integral';

sk$Integral.prototype.$frozen = undefined;

sk$Integral.prototype.__type_switch_id = -1;

sk$Integral.prototype.__copy = function() {};

sk$Integral.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp481 = __cache.get(this);
  if (_tmp481 === undefined)
    {
      var _tmp481 = this.__copy();
      _tmp481.$frozen = true;
      __cache.set(this, _tmp481);
    }
  return _tmp481;
};

sk$Integral.prototype.__init = function(__named_parameters) {};

sk$Integral.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$bg$eq(t$2);
};

sk$Integral.prototype.$pc = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pc(t$2);
};

sk$Integral.prototype.$ti = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$ti(t$2);
};

sk$Integral.prototype.$pl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$pl(t$2);
};

sk$Integral.prototype.$mi = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$mi(t$2);
};

sk$Integral.prototype.$dv = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$dv(t$2);
};

sk$Integral.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt(t$2);
};

sk$Integral.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$lt$eq(t$2);
};

sk$Integral.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$eq$eq(t$2);
};

sk$Integral.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt(t$2);
};

sk$Integral.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.$gt$eq(t$2);
};

sk$Integral.prototype.and = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.and(t$2);
};

sk$Integral.prototype.chr = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.chr();
};

sk$Integral.prototype.clz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.clz();
};

sk$Integral.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.compare(t$2);
};

sk$Integral.prototype.ctz = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.ctz();
};

sk$Integral.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.hash();
};

sk$Integral.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.inspect();
};

sk$Integral.prototype.negate = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.negate();
};

sk$Integral.prototype.not = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.not();
};

sk$Integral.prototype.or = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.or(t$2);
};

sk$Integral.prototype.popcount = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.popcount();
};

sk$Integral.prototype.shl = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shl(t$2);
};

sk$Integral.prototype.shr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.shr(t$2);
};

sk$Integral.prototype.toFloat = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toFloat();
};

sk$Integral.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.toInt();
  return t$1.toString();
};

sk$Integral.prototype.uge = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.uge(t$2);
};

sk$Integral.prototype.ugt = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ugt(t$2);
};

sk$Integral.prototype.ule = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ule(t$2);
};

sk$Integral.prototype.ult = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ult(t$2);
};

sk$Integral.prototype.ushr = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.ushr(t$2);
};

sk$Integral.prototype.xor = function(other) {
  var t$ = this;
  var t$1 = t$.toInt();
  var t$2 = other;
  return t$1.xor(t$2);
};

sk$Integral.prototype.__bases = [
  sk$Integral,
  sk$Equality,
  sk$HasClassName,
  sk$Hashable,
  sk$Show,
  sk$Orderable
];

var sk$JSON$dtFloatNumber = sk.JSON$dtFloatNumber = function JSON$dtFloatNumber(value) {
  this.value = value;
};

sk$JSON$dtFloatNumber.prototype = Object.create(Object.prototype);

sk$JSON$dtFloatNumber.prototype.__constructor = sk$JSON$dtFloatNumber;

sk$JSON$dtFloatNumber.prototype.__classname = 'JSON.FloatNumber';

sk$JSON$dtFloatNumber.prototype.$frozen = true;

sk$JSON$dtFloatNumber.prototype.__type_switch_id = 157;

sk$JSON$dtFloatNumber.prototype.__copy = function() {
  return new (sk$JSON$dtFloatNumber)(this.value);
};

sk$JSON$dtFloatNumber.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp482 = __cache.get(this);
  if (_tmp482 === undefined)
    {
      var _tmp482 = this.__copy();
      _tmp482.$frozen = true;
      __cache.set(this, _tmp482);
      _tmp482.value = skip.deepFreeze(_tmp482.value, __cache);
    }
  return _tmp482;
};

sk$JSON$dtFloatNumber.prototype.__init = function(__named_parameters) {};

sk$JSON$dtFloatNumber.prototype.expectArray = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Array'))));
};

sk$JSON$dtFloatNumber.prototype.expectBool = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Bool'))));
};

sk$JSON$dtFloatNumber.prototype.expectFloat = function() {
  var t$ = this;
  return t$.value;
};

sk$JSON$dtFloatNumber.prototype.expectInt = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Int'))));
};

sk$JSON$dtFloatNumber.prototype.expectObject = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Object'))));
};

sk$JSON$dtFloatNumber.prototype.expectString = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('String'))));
};

sk$JSON$dtFloatNumber.prototype.set = function(name, value) {
  skip.throwException(sk, singleton$JSON$dtJSONSetNonObjectError);
};

sk$JSON$dtFloatNumber.prototype.writeToStream = function(write, _space, _depth) {
  if (_space === undefined)
    _space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (_depth === undefined)
    _depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = write;
  var t$1 = this;
  var t$2 = t$1.value;
  var t$3 = t$2.toString();
  return t$(t$3);
};

sk$JSON$dtFloatNumber.prototype.__bases = [
  sk$JSON$dtFloatNumber,
  sk$JSON$dtValue,
  sk$JSON$dtNumber
];

var sk$JSON$dtIntNumber = sk.JSON$dtIntNumber = function JSON$dtIntNumber(value) {
  this.value = value;
};

sk$JSON$dtIntNumber.prototype = Object.create(Object.prototype);

sk$JSON$dtIntNumber.prototype.__constructor = sk$JSON$dtIntNumber;

sk$JSON$dtIntNumber.prototype.__classname = 'JSON.IntNumber';

sk$JSON$dtIntNumber.prototype.$frozen = true;

sk$JSON$dtIntNumber.prototype.__type_switch_id = 158;

sk$JSON$dtIntNumber.prototype.__copy = function() {
  return new (sk$JSON$dtIntNumber)(this.value);
};

sk$JSON$dtIntNumber.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp483 = __cache.get(this);
  if (_tmp483 === undefined)
    {
      var _tmp483 = this.__copy();
      _tmp483.$frozen = true;
      __cache.set(this, _tmp483);
      _tmp483.value = skip.deepFreeze(_tmp483.value, __cache);
    }
  return _tmp483;
};

sk$JSON$dtIntNumber.prototype.__init = function(__named_parameters) {};

sk$JSON$dtIntNumber.prototype.asInt = function() {
  var t$ = this;
  return t$.value;
};

sk$JSON$dtIntNumber.prototype.expectArray = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Array'))));
};

sk$JSON$dtIntNumber.prototype.expectBool = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Bool'))));
};

sk$JSON$dtIntNumber.prototype.expectFloat = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Float'))));
};

sk$JSON$dtIntNumber.prototype.expectInt = function() {
  var t$ = this;
  return t$.value;
};

sk$JSON$dtIntNumber.prototype.expectObject = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('Object'))));
};

sk$JSON$dtIntNumber.prototype.expectString = function() {
  skip.throwException(sk, new (sk$JSON$dtJSONValueExpectedError)(new sk$String(('String'))));
};

sk$JSON$dtIntNumber.prototype.set = function(name, value) {
  skip.throwException(sk, singleton$JSON$dtJSONSetNonObjectError);
};

sk$JSON$dtIntNumber.prototype.writeToStream = function(write, _space, _depth) {
  if (_space === undefined)
    _space = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  if (_depth === undefined)
    _depth = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = write;
  var t$1 = this;
  var t$2 = t$1.value;
  var t$3 = t$2.toString();
  return t$(t$3);
};

sk$JSON$dtIntNumber.prototype.__bases = [
  sk$JSON$dtIntNumber,
  sk$JSON$dtValue,
  sk$JSON$dtNumber
];

var sk$JSON$dtInvalidJSONError = sk.JSON$dtInvalidJSONError = function JSON$dtInvalidJSONError(position, message) {
  this.position = position;
  this.message = message;
};

sk$JSON$dtInvalidJSONError.prototype = Object.create(Object.prototype);

sk$JSON$dtInvalidJSONError.prototype.__constructor = sk$JSON$dtInvalidJSONError;

sk$JSON$dtInvalidJSONError.prototype.__classname = 'JSON.InvalidJSONError';

sk$JSON$dtInvalidJSONError.prototype.$frozen = true;

sk$JSON$dtInvalidJSONError.prototype.__type_switch_id = 48;

sk$JSON$dtInvalidJSONError.prototype.__copy = function() {
  return new (sk$JSON$dtInvalidJSONError)(this.position, this.message);
};

sk$JSON$dtInvalidJSONError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp484 = __cache.get(this);
  if (_tmp484 === undefined)
    {
      var _tmp484 = this.__copy();
      _tmp484.$frozen = true;
      __cache.set(this, _tmp484);
      _tmp484.position = skip.deepFreeze(_tmp484.position, __cache);
      _tmp484.message = skip.deepFreeze(_tmp484.message, __cache);
    }
  return _tmp484;
};

sk$JSON$dtInvalidJSONError.prototype.__init = function(__named_parameters) {};

sk$JSON$dtInvalidJSONError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$JSON$dtInvalidJSONError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg4953:{
      jumpLab$bg4953:{
        jumpLab$bg4952:{
          switch (other.__type_switch_id) {
            case 48:
              otherTyped = other;
              break jumpLab$bg4952;
            
            default:
              break jumpLab$bg4953;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.position;
          var t$2 = otherTyped;
          var t$3 = t$2.position;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.message;
          var t$7 = otherTyped;
          var t$8 = t$7.message;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$JSON$dtInvalidJSONError.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.position;
  var t$2 = t$1.toString();
  var t$3 = new sk$String((': Invalid JSON. ')).toString();
  var t$4 = this;
  var t$5 = t$4.message;
  var t$6 = t$5.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$3,
    t$6
  ]));
};

sk$JSON$dtInvalidJSONError.prototype.toString = function() {
  var t$ = new sk$String(('InvalidJSONError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$JSON$dtInvalidJSONError.prototype.__bases = [
  sk$JSON$dtInvalidJSONError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$JSON$dtJSONError = sk.JSON$dtJSONError = function JSON$dtJSONError() {};

sk$JSON$dtJSONError.prototype = Object.create(Object.prototype);

sk$JSON$dtJSONError.prototype.__constructor = sk$JSON$dtJSONError;

sk$JSON$dtJSONError.prototype.__classname = 'JSON.JSONError';

sk$JSON$dtJSONError.prototype.$frozen = undefined;

sk$JSON$dtJSONError.prototype.__type_switch_id = -1;

sk$JSON$dtJSONError.prototype.__copy = function() {
  return new (sk$JSON$dtJSONError)();
};

sk$JSON$dtJSONError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp485 = __cache.get(this);
  if (_tmp485 === undefined)
    {
      var _tmp485 = this.__copy();
      _tmp485.$frozen = true;
      __cache.set(this, _tmp485);
    }
  return _tmp485;
};

sk$JSON$dtJSONError.prototype.__init = function(__named_parameters) {};

sk$JSON$dtJSONError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$JSON$dtJSONError.prototype.__bases = [
  sk$JSON$dtJSONError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$JSON$dtKeyNotFoundError = sk.JSON$dtKeyNotFoundError = function JSON$dtKeyNotFoundError(key) {
  this.key = key;
};

sk$JSON$dtKeyNotFoundError.prototype = Object.create(Object.prototype);

sk$JSON$dtKeyNotFoundError.prototype.__constructor = sk$JSON$dtKeyNotFoundError;

sk$JSON$dtKeyNotFoundError.prototype.__classname = 'JSON.KeyNotFoundError';

sk$JSON$dtKeyNotFoundError.prototype.$frozen = true;

sk$JSON$dtKeyNotFoundError.prototype.__type_switch_id = 49;

sk$JSON$dtKeyNotFoundError.prototype.__copy = function() {
  return new (sk$JSON$dtKeyNotFoundError)(this.key);
};

sk$JSON$dtKeyNotFoundError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp486 = __cache.get(this);
  if (_tmp486 === undefined)
    {
      var _tmp486 = this.__copy();
      _tmp486.$frozen = true;
      __cache.set(this, _tmp486);
      _tmp486.key = skip.deepFreeze(_tmp486.key, __cache);
    }
  return _tmp486;
};

sk$JSON$dtKeyNotFoundError.prototype.__init = function(__named_parameters) {};

sk$JSON$dtKeyNotFoundError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$JSON$dtKeyNotFoundError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg5079:{
      jumpLab$bg5079:{
        jumpLab$bg5078:{
          switch (other.__type_switch_id) {
            case 49:
              otherTyped = other;
              break jumpLab$bg5078;
            
            default:
              break jumpLab$bg5079;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.key;
          var t$2 = otherTyped;
          var t$3 = t$2.key;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$JSON$dtKeyNotFoundError.prototype.getMessage = function() {
  var t$ = this;
  var t$1 = t$.key;
  var t$2 = new sk$String(('Key \'')).$pl(t$1);
  return t$2.$pl(new sk$String(('\'not found')));
};

sk$JSON$dtKeyNotFoundError.prototype.toString = function() {
  var t$ = new sk$String(('KeyNotFoundError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$JSON$dtKeyNotFoundError.prototype.__bases = [
  sk$JSON$dtKeyNotFoundError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$JSON$dtOptionReader = sk.JSON$dtOptionReader = function JSON$dtOptionReader(iter) {
  this.iter = iter;
};

sk$JSON$dtOptionReader.prototype = Object.create(Object.prototype);

sk$JSON$dtOptionReader.prototype.__constructor = sk$JSON$dtOptionReader;

sk$JSON$dtOptionReader.prototype.__classname = 'JSON.OptionReader';

sk$JSON$dtOptionReader.prototype.$frozen = false;

sk$JSON$dtOptionReader.prototype.__type_switch_id = 284;

sk$JSON$dtOptionReader.prototype.__copy = function() {
  return new (sk$JSON$dtOptionReader)(this.iter);
};

sk$JSON$dtOptionReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp487 = __cache.get(this);
  if (_tmp487 === undefined)
    {
      var _tmp487 = this.__copy();
      _tmp487.$frozen = true;
      __cache.set(this, _tmp487);
      _tmp487.iter = skip.deepFreeze(_tmp487.iter, __cache);
    }
  return _tmp487;
};

sk$JSON$dtOptionReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtOptionReader.prototype.readOption = function(_serializer) {
  var t$ = new sk$String(('readOption()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtOptionReader.prototype.__bases = [
  sk$JSON$dtOptionReader,
  sk$Serialization$dtReader,
  sk$JSON$dtDefaultReader
];

var sk$JSON$dtOptionWriter = sk.JSON$dtOptionWriter = function JSON$dtOptionWriter(jsonFormatter) {
  this.jsonFormatter = jsonFormatter;
};

sk$JSON$dtOptionWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtOptionWriter.prototype.__constructor = sk$JSON$dtOptionWriter;

sk$JSON$dtOptionWriter.prototype.__classname = 'JSON.OptionWriter';

sk$JSON$dtOptionWriter.prototype.$frozen = false;

sk$JSON$dtOptionWriter.prototype.__type_switch_id = 288;

sk$JSON$dtOptionWriter.prototype.__copy = function() {
  return new (sk$JSON$dtOptionWriter)(this.jsonFormatter);
};

sk$JSON$dtOptionWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp488 = __cache.get(this);
  if (_tmp488 === undefined)
    {
      var _tmp488 = this.__copy();
      _tmp488.$frozen = true;
      __cache.set(this, _tmp488);
      _tmp488.jsonFormatter = skip.deepFreeze(_tmp488.jsonFormatter, __cache);
    }
  return _tmp488;
};

sk$JSON$dtOptionWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtOptionWriter.prototype.writeOption = function(_value, _serializer) {
  var t$ = new sk$String(('writeOption()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtOptionWriter.prototype.__bases = [
  sk$JSON$dtOptionWriter,
  sk$Serialization$dtWriter,
  sk$JSON$dtDefaultWriter
];

var sk$JSON$dtReader = sk.JSON$dtReader = function JSON$dtReader(iter) {
  this.iter = iter;
};

sk$JSON$dtReader.prototype = Object.create(Object.prototype);

sk$JSON$dtReader.prototype.__constructor = sk$JSON$dtReader;

sk$JSON$dtReader.prototype.__classname = 'JSON.Reader';

sk$JSON$dtReader.prototype.$frozen = false;

sk$JSON$dtReader.prototype.__type_switch_id = 285;

sk$JSON$dtReader.prototype.__copy = function() {
  return new (sk$JSON$dtReader)(this.iter);
};

sk$JSON$dtReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp489 = __cache.get(this);
  if (_tmp489 === undefined)
    {
      var _tmp489 = this.__copy();
      _tmp489.$frozen = true;
      __cache.set(this, _tmp489);
      _tmp489.iter = skip.deepFreeze(_tmp489.iter, __cache);
    }
  return _tmp489;
};

sk$JSON$dtReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtReader.prototype.__bases = [
  sk$JSON$dtReader,
  sk$Serialization$dtReader,
  sk$JSON$dtDefaultReader
];

var sk$JSON$dtStringReader = sk.JSON$dtStringReader = function JSON$dtStringReader(iter) {
  this.iter = iter;
};

sk$JSON$dtStringReader.prototype = Object.create(Object.prototype);

sk$JSON$dtStringReader.prototype.__constructor = sk$JSON$dtStringReader;

sk$JSON$dtStringReader.prototype.__classname = 'JSON.StringReader';

sk$JSON$dtStringReader.prototype.$frozen = false;

sk$JSON$dtStringReader.prototype.__type_switch_id = 286;

sk$JSON$dtStringReader.prototype.__copy = function() {
  return new (sk$JSON$dtStringReader)(this.iter);
};

sk$JSON$dtStringReader.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp490 = __cache.get(this);
  if (_tmp490 === undefined)
    {
      var _tmp490 = this.__copy();
      _tmp490.$frozen = true;
      __cache.set(this, _tmp490);
      _tmp490.iter = skip.deepFreeze(_tmp490.iter, __cache);
    }
  return _tmp490;
};

sk$JSON$dtStringReader.prototype.__init = function(__named_parameters) {};

sk$JSON$dtStringReader.prototype.readString = function() {
  var t$ = this;
  var t$1 = t$.iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = this;
  var t$3 = t$2.iter;
  return sk$JSON$dtdecodeString(t$3);
};

sk$JSON$dtStringReader.prototype.__bases = [
  sk$JSON$dtStringReader,
  sk$Serialization$dtReader,
  sk$Serialization$dtDefaultReader
];

var sk$JSON$dtStringWriter = sk.JSON$dtStringWriter = function JSON$dtStringWriter(jsonFormatter) {
  this.jsonFormatter = jsonFormatter;
};

sk$JSON$dtStringWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtStringWriter.prototype.__constructor = sk$JSON$dtStringWriter;

sk$JSON$dtStringWriter.prototype.__classname = 'JSON.StringWriter';

sk$JSON$dtStringWriter.prototype.$frozen = false;

sk$JSON$dtStringWriter.prototype.__type_switch_id = 290;

sk$JSON$dtStringWriter.prototype.__copy = function() {
  return new (sk$JSON$dtStringWriter)(this.jsonFormatter);
};

sk$JSON$dtStringWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp491 = __cache.get(this);
  if (_tmp491 === undefined)
    {
      var _tmp491 = this.__copy();
      _tmp491.$frozen = true;
      __cache.set(this, _tmp491);
      _tmp491.jsonFormatter = skip.deepFreeze(_tmp491.jsonFormatter, __cache);
    }
  return _tmp491;
};

sk$JSON$dtStringWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtStringWriter.prototype.result = function() {
  return sk.__.$void;
};

sk$JSON$dtStringWriter.prototype.writeBool = function(_value) {
  var t$ = new sk$String(('writeBool()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeFloat = function(_value) {
  var t$ = new sk$String(('writeFloat()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeInt = function(_value) {
  var t$ = new sk$String(('writeInt()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeKeyedSequence = function(_keySerializer, _valueSerializer, _sizeHint) {
  if (_sizeHint === undefined)
    _sizeHint = ((() => 
    {
      return singleton$None;
    })());
  var t$ = new sk$String(('writeKeyedSequence()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeOption = function(_value, _serializer) {
  var t$ = new sk$String(('writeOption()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeRecord = function(_fieldNames) {
  var t$ = new sk$String(('writeRecord()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeSequence = function(_serializer, _sizeHint) {
  if (_sizeHint === undefined)
    _sizeHint = ((() => 
    {
      return singleton$None;
    })());
  var t$ = new sk$String(('writeSequence()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeString = function(value) {
  var t$ = this;
  var t$1 = t$.jsonFormatter;
  var t$2 = t$1;
  var t$3 = value;
  return sk$JSON$dtwriteStringValue(((_tmp5435) => 
  {
    return t$2.writeRaw(_tmp5435);
  }), t$3);
};

sk$JSON$dtStringWriter.prototype.writeTuple = function(_size) {
  var t$ = new sk$String(('writeTuple()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeType = function(_name) {
  var t$ = new sk$String(('writeType()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeVariant = function(_childName, _value, _serializer) {
  var t$ = new sk$String(('writeVariant()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.writeVoid = function() {
  var t$ = new sk$String(('writeVoid()')).toString();
  var t$1 = t$;
  skip.throwException(sk, new (sk$Serialization$dtNotSupportedError)(t$1));
};

sk$JSON$dtStringWriter.prototype.__bases = [
  sk$JSON$dtStringWriter,
  sk$Serialization$dtWriter,
  sk$Serialization$dtDefaultWriter
];

var sk$JSON$dtWriter = sk.JSON$dtWriter = function JSON$dtWriter(jsonFormatter) {
  this.jsonFormatter = jsonFormatter;
};

sk$JSON$dtWriter.prototype = Object.create(Object.prototype);

sk$JSON$dtWriter.prototype.__constructor = sk$JSON$dtWriter;

sk$JSON$dtWriter.prototype.__classname = 'JSON.Writer';

sk$JSON$dtWriter.prototype.$frozen = false;

sk$JSON$dtWriter.prototype.__type_switch_id = 289;

sk$JSON$dtWriter.prototype.__copy = function() {
  return new (sk$JSON$dtWriter)(this.jsonFormatter);
};

sk$JSON$dtWriter.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp492 = __cache.get(this);
  if (_tmp492 === undefined)
    {
      var _tmp492 = this.__copy();
      _tmp492.$frozen = true;
      __cache.set(this, _tmp492);
      _tmp492.jsonFormatter = skip.deepFreeze(_tmp492.jsonFormatter, __cache);
    }
  return _tmp492;
};

sk$JSON$dtWriter.prototype.__init = function(__named_parameters) {};

sk$JSON$dtWriter.prototype.__bases = [
  sk$JSON$dtWriter,
  sk$Serialization$dtWriter,
  sk$JSON$dtDefaultWriter
];

var sk$List$dtCons = sk.List$dtCons = function List$dtCons(head, tail) {
  this.head = head;
  this.tail = tail;
};

sk$List$dtCons.prototype = Object.create(Object.prototype);

sk$List$dtCons.prototype.__constructor = sk$List$dtCons;

sk$List$dtCons.prototype.__classname = 'List.Cons';

sk$List$dtCons.prototype.$frozen = false;

sk$List$dtCons.prototype.__type_switch_id = 268;

sk$List$dtCons.prototype.__copy = function() {
  return new (sk$List$dtCons)(this.head, this.tail);
};

sk$List$dtCons.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp493 = __cache.get(this);
  if (_tmp493 === undefined)
    {
      var _tmp493 = this.__copy();
      _tmp493.$frozen = true;
      __cache.set(this, _tmp493);
      _tmp493.head = skip.deepFreeze(_tmp493.head, __cache);
      _tmp493.tail = skip.deepFreeze(_tmp493.tail, __cache);
    }
  return _tmp493;
};

sk$List$dtCons.prototype.__init = function(__named_parameters) {};

sk$List$dtCons.all2 = function(values1, values2, predicate) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg6653:{
      jumpLab$bg6653:{
        jumpLab$bg6652:{
          jumpLab$bg6651:{
            jumpLab$bg6654:{
              jumpLab$bg6655:{
                jumpLab$bg6656:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg6656;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg6654;
                  
                  case 268:
                    break jumpLab$bg6655;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg6652;
                
                default:
                  break jumpLab$bg6653;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg6651;
              
              default:
                break jumpLab$bg6653;

            }
          }
          return new sk$Bool((true));
        }
        {
          var t$2 = predicate;
          var t$3 = head1;
          var t$4 = head2;
          if (t$2(t$3, t$4).__value)
            {
              var t$5 = tail1;
              var t$6 = tail2;
              var t$7 = predicate;
              return sk$List.all2(t$5, t$6, t$7);
            }
          else
            return new sk$Bool((false));
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched sizes in List.all2')));
    }
  }
};

sk$List$dtCons.combine = function(values1, values2) {
  var t$ = this;
  var t$1 = values1;
  var t$2 = values2;
  return t$.map2(((a, b) => 
  {
    var t$3 = a;
    var t$4 = b;
    return new (sk$Tuple2)(t$3, t$4);
  }), t$1, t$2);
};

sk$List$dtCons.prototype.compare = function(other) {
  var t$ = this;
  var tail1 = t$.tail;
  var t$1 = this;
  var head1 = t$1.head;
  var head2;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg6678:{
      jumpLab$bg6678:{
        jumpLab$bg6677:{
          switch (other.__type_switch_id) {
            case 269:
              break jumpLab$bg6677;
            
            case 268:
              head2 = other.head;
              tail2 = other.tail;
              break jumpLab$bg6678;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return singleton$GT;
      }
      {
        var t$2 = head1;
        var t$3 = head2;
        var $var = sk$compare(t$2, t$3);
        var c;
        {
          jumpBlockOuterjumpLab$bg6675:{
            jumpLab$bg6675:{
              jumpLab$bg6674:{
                switch ($var.__type_switch_id) {
                  case 206:
                    break jumpLab$bg6674;
                  
                  default:
                    c = $var;
                    break jumpLab$bg6675;

                }
              }
              {
                var t$4 = tail1;
                var t$5 = tail2;
                return t$4.compare(t$5);
              }
            }
            return c;
          }
        }
      }
    }
  }
};

sk$List$dtCons.create = function() {
  return singleton$List$dtNil;
};

sk$List$dtCons.createFromItems = function(items) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6686:{
      break$bg6686:{
        dowhile_else$bg6685:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6687:{
                dowhile_cond$bg6687:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg6702:{
                        jumpLab$bg6702:{
                          jumpLab$bg6701:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6701;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg6702;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6687;
                          }
                        }
                        {
                          var t$3 = x;
                          var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                          var t$4;
                          var p;
                          {
                            jumpBlockOuterjumpLab$bg6698:{
                              jumpLab$bg6698:{
                                jumpLab$bg6697:{
                                  switch (prev.__type_switch_id) {
                                    case 205:
                                      p = prev.value;
                                      break jumpLab$bg6697;
                                    
                                    case 204:
                                      break jumpLab$bg6698;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var var3 = p;
                                  var t$5 = var3;
                                  var t$6 = t$5;
                                  t$6.tail = c;
                                  t$4 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg6698;
                              }
                              {
                                result = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg6698;
                            }
                          }
                          var t$7 = c;
                          prev = new (sk$Some)(t$7);
                        }
                        break jumpBlockOuterjumpLab$bg6702;
                      }
                    }
                    break dowhile_cond$bg6687;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6685;
                break jumpBlockOuterdowhile_cond$bg6687;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6686;
      }
      {}
      break jumpBlockOuterbreak$bg6686;
    }
  }
  var t$8 = result;
  return t$8;
};

sk$List$dtCons.createFromIterator = function(items) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6709:{
      break$bg6709:{
        dowhile_else$bg6708:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6710:{
                dowhile_cond$bg6710:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg6725:{
                        jumpLab$bg6725:{
                          jumpLab$bg6724:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6724;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg6725;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6710;
                          }
                        }
                        {
                          var t$3 = x;
                          var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                          var t$4;
                          var p;
                          {
                            jumpBlockOuterjumpLab$bg6721:{
                              jumpLab$bg6721:{
                                jumpLab$bg6720:{
                                  switch (prev.__type_switch_id) {
                                    case 205:
                                      p = prev.value;
                                      break jumpLab$bg6720;
                                    
                                    case 204:
                                      break jumpLab$bg6721;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var var3 = p;
                                  var t$5 = var3;
                                  var t$6 = t$5;
                                  t$6.tail = c;
                                  t$4 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg6721;
                              }
                              {
                                result = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg6721;
                            }
                          }
                          var t$7 = c;
                          prev = new (sk$Some)(t$7);
                        }
                        break jumpBlockOuterjumpLab$bg6725;
                      }
                    }
                    break dowhile_cond$bg6710;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6708;
                break jumpBlockOuterdowhile_cond$bg6710;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6709;
      }
      {}
      break jumpBlockOuterbreak$bg6709;
    }
  }
  var t$8 = result;
  return t$8;
};

sk$List$dtCons.fold2 = function(l1, l2, fn, initial) {
  var break_val;
  {
    jumpBlockOuterbreak$bg6729:{
      break$bg6729:{
        do
          {
            jumpBlockOutercontinue$bg6730:{
              continue$bg6730:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var $var = new (sk$Tuple2)(t$, t$1);
                  var tail1;
                  var head2;
                  var head1;
                  var _;
                  var tail2;
                  {
                    jumpBlockOuterjumpLab$bg6742:{
                      jumpLab$bg6742:{
                        jumpLab$bg6741:{
                          jumpLab$bg6740:{
                            jumpLab$bg6743:{
                              jumpLab$bg6744:{
                                jumpLab$bg6745:{
                                  switch ($var.__type_switch_id) {
                                    case 392:
                                      break jumpLab$bg6745;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 268:
                                    break jumpLab$bg6743;
                                  
                                  case 269:
                                    break jumpLab$bg6744;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 269:
                                  break jumpLab$bg6741;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg6742;

                              }
                            }
                            switch ($var.i1.__type_switch_id) {
                              case 268:
                                head1 = $var.i0.head;
                                tail1 = $var.i0.tail;
                                head2 = $var.i1.head;
                                tail2 = $var.i1.tail;
                                break jumpLab$bg6740;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg6742;

                            }
                          }
                          {
                            l1 = tail1;
                            l2 = tail2;
                            var t$2 = fn;
                            var t$3 = initial;
                            var t$4 = head1;
                            var t$5 = head2;
                            initial = t$2(t$3, t$4, t$5);
                          }
                          break jumpBlockOuterjumpLab$bg6742;
                        }
                        {
                          break_val = initial;
                          break break$bg6729;
                        }
                      }
                      sk$invariant_violation(new sk$String(('Mismatched list sizes')));
                      break jumpBlockOuterjumpLab$bg6742;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6730;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6729;
    }
  }
  return break_val;
};

sk$List$dtCons.fold3 = function(l1, l2, l3, fn, initial) {
  var break_val;
  {
    jumpBlockOuterbreak$bg6749:{
      break$bg6749:{
        do
          {
            jumpBlockOutercontinue$bg6750:{
              continue$bg6750:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var t$2 = l3;
                  var $var = new (sk$Tuple3)(t$, t$1, t$2);
                  var tail1;
                  var _;
                  var head3;
                  var head2;
                  var head1;
                  var tail3;
                  var tail2;
                  {
                    jumpBlockOuterjumpLab$bg6764:{
                      jumpLab$bg6764:{
                        jumpLab$bg6763:{
                          jumpLab$bg6762:{
                            jumpLab$bg6765:{
                              jumpLab$bg6766:{
                                jumpLab$bg6767:{
                                  jumpLab$bg6768:{
                                    jumpLab$bg6769:{
                                      switch ($var.__type_switch_id) {
                                        case 393:
                                          break jumpLab$bg6769;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    switch ($var.i0.__type_switch_id) {
                                      case 268:
                                        break jumpLab$bg6766;
                                      
                                      case 269:
                                        break jumpLab$bg6768;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  switch ($var.i1.__type_switch_id) {
                                    case 269:
                                      break jumpLab$bg6767;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg6764;

                                  }
                                }
                                switch ($var.i2.__type_switch_id) {
                                  case 269:
                                    break jumpLab$bg6763;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg6764;

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 268:
                                  break jumpLab$bg6765;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg6764;

                              }
                            }
                            switch ($var.i2.__type_switch_id) {
                              case 268:
                                head1 = $var.i0.head;
                                tail1 = $var.i0.tail;
                                head2 = $var.i1.head;
                                tail2 = $var.i1.tail;
                                head3 = $var.i2.head;
                                tail3 = $var.i2.tail;
                                break jumpLab$bg6762;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg6764;

                            }
                          }
                          {
                            l1 = tail1;
                            l2 = tail2;
                            l3 = tail3;
                            var t$3 = fn;
                            var t$4 = initial;
                            var t$5 = head1;
                            var t$6 = head2;
                            var t$7 = head3;
                            initial = t$3(t$4, t$5, t$6, t$7);
                          }
                          break jumpBlockOuterjumpLab$bg6764;
                        }
                        {
                          break_val = initial;
                          break break$bg6749;
                        }
                      }
                      sk$invariant_violation(new sk$String(('Mismatched list sizes')));
                      break jumpBlockOuterjumpLab$bg6764;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg6750;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg6749;
    }
  }
  return break_val;
};

sk$List$dtCons.foldr2 = function(values1, values2, fn, initial) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg6786:{
      jumpLab$bg6786:{
        jumpLab$bg6785:{
          jumpLab$bg6784:{
            jumpLab$bg6787:{
              jumpLab$bg6788:{
                jumpLab$bg6789:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg6789;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg6787;
                  
                  case 268:
                    break jumpLab$bg6788;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg6785;
                
                default:
                  break jumpLab$bg6786;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg6784;
              
              default:
                break jumpLab$bg6786;

            }
          }
          return initial;
        }
        {
          var t$2 = fn;
          var t$3 = this;
          var t$4 = tail1;
          var t$5 = tail2;
          var t$6 = fn;
          var t$7 = initial;
          var t$8 = t$3.foldr2(t$4, t$5, t$6, t$7);
          var t$9 = head1;
          var t$10 = head2;
          return t$2(t$8, t$9, t$10);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched list sizes')));
    }
  }
};

sk$List$dtCons.prototype.genFoldl = skip.asyncToGenerator(function*(f, init) {
  var t$ = this;
  var rest = t$.tail;
  var t$1 = this;
  var x = t$1.head;
  var t$2 = rest;
  var t$3 = f;
  var t$4 = f;
  var t$5 = init;
  var t$6 = x;
  var t$7 = (yield t$4(t$5, t$6));
  return (yield t$2.genFoldl(t$3, t$7));
});

sk$List$dtCons.prototype.genReverseHelp = skip.asyncToGenerator(function*(tl) {
  var t$ = this;
  var rest = t$.tail;
  var t$1 = this;
  var x = t$1.head;
  var t$2 = rest;
  var t$3 = (yield x);
  var t$4 = tl;
  var t$5 = new (sk$List$dtCons)(t$3, t$4);
  return (yield t$2.genReverseHelp(t$5));
});

sk$List$dtCons.prototype.getClassName = function() {
  return new sk$String(('List.Cons'));
};

sk$List$dtCons.prototype.getHead = function() {
  var t$ = this;
  return t$.head;
};

sk$List$dtCons.prototype.getTail = function() {
  var t$ = this;
  return t$.tail;
};

sk$List$dtCons.prototype.inspect = function() {
  var items = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = items;
    var t$2 = value;
    var t$3 = sk$inspect(t$2);
    return t$1.push(t$3);
  }));
  var t$4 = items;
  var t$5 = t$4.toArray();
  return new (sk$InspectVector)(new sk$String(('List')), t$5);
};

sk$List$dtCons.prototype.isEmpty = function() {
  return new sk$Bool((false));
};

sk$List$dtCons.iter2 = function(values1, values2, fn) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg6833:{
      jumpLab$bg6833:{
        jumpLab$bg6832:{
          jumpLab$bg6831:{
            jumpLab$bg6834:{
              jumpLab$bg6835:{
                jumpLab$bg6836:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg6836;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg6834;
                  
                  case 268:
                    break jumpLab$bg6835;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg6832;
                
                default:
                  break jumpLab$bg6833;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg6831;
              
              default:
                break jumpLab$bg6833;

            }
          }
          return sk.__.$void;
        }
        {
          var t$2 = fn;
          var t$3 = head1;
          var t$4 = head2;
          t$2(t$3, t$4);
          var t$5 = tail1;
          var t$6 = tail2;
          var t$7 = fn;
          return sk$List.iter2(t$5, t$6, t$7);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched sizes in List.iter2')));
    }
  }
};

sk$List$dtCons.map2 = function(f, a, b) {
  var t$ = a;
  var t$1 = b;
  var $var = new (sk$Tuple2)(t$, t$1);
  var bhd;
  var ahd;
  var btl;
  var atl;
  {
    jumpBlockOuterjumpLab$bg6853:{
      jumpLab$bg6853:{
        jumpLab$bg6852:{
          jumpLab$bg6851:{
            jumpLab$bg6854:{
              jumpLab$bg6855:{
                jumpLab$bg6856:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg6856;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg6854;
                  
                  case 268:
                    break jumpLab$bg6855;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  ahd = $var.i0.head;
                  atl = $var.i0.tail;
                  bhd = $var.i1.head;
                  btl = $var.i1.tail;
                  break jumpLab$bg6852;
                
                default:
                  break jumpLab$bg6853;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg6851;
              
              default:
                break jumpLab$bg6853;

            }
          }
          return singleton$List$dtNil;
        }
        {
          var t$2 = f;
          var t$3 = ahd;
          var t$4 = bhd;
          var t$5 = t$2(t$3, t$4);
          var t$6 = this;
          var t$7 = f;
          var t$8 = atl;
          var t$9 = btl;
          var t$10 = t$6.map2(t$7, t$8, t$9);
          return new (sk$List$dtCons)(t$5, t$10);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched list sizes')));
    }
  }
};

sk$List$dtCons.mapRev = function(f, acc, list) {
  var t;
  var h;
  {
    jumpBlockOuterjumpLab$bg6867:{
      jumpLab$bg6867:{
        jumpLab$bg6866:{
          switch (list.__type_switch_id) {
            case 269:
              break jumpLab$bg6866;
            
            case 268:
              h = list.head;
              t = list.tail;
              break jumpLab$bg6867;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return acc;
      }
      {
        var t$ = f;
        var t$1 = f;
        var t$2 = h;
        var t$3 = t$1(t$2);
        var t$4 = acc;
        var t$5 = new (sk$List$dtCons)(t$3, t$4);
        var t$6 = t;
        return sk$List.mapRev(t$, t$5, t$6);
      }
    }
  }
};

sk$List$dtCons.prototype.maybeHead = function() {
  var t$ = this;
  var value = t$.head;
  var t$1 = value;
  return new (sk$Some)(t$1);
};

sk$List$dtCons.prototype.maybeTail = function() {
  var t$ = this;
  var tail = t$.tail;
  var t$1 = tail;
  return new (sk$Some)(t$1);
};

sk$List$dtCons.of = function(element) {
  var t$ = element;
  var t$1 = new (sk$Array)([
    t$
  ]);
  return sk$List.createFromItems(t$1);
};

sk$List$dtCons.reverseFromIterator = function(items) {
  var result = singleton$List$dtNil;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg6885:{
      break$bg6885:{
        dowhile_else$bg6884:{
          do
            {
              jumpBlockOuterdowhile_cond$bg6886:{
                dowhile_cond$bg6886:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var element;
                    {
                      jumpBlockOuterjumpLab$bg6894:{
                        jumpLab$bg6894:{
                          jumpLab$bg6893:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg6893;
                              
                              case 205:
                                element = var2.value;
                                break jumpLab$bg6894;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg6886;
                          }
                        }
                        {
                          var t$3 = element;
                          var t$4 = result;
                          result = new (sk$List$dtCons)(t$3, t$4);
                        }
                        break jumpBlockOuterjumpLab$bg6894;
                      }
                    }
                    break dowhile_cond$bg6886;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg6884;
                break jumpBlockOuterdowhile_cond$bg6886;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg6885;
      }
      {}
      break jumpBlockOuterbreak$bg6885;
    }
  }
  return result;
};

sk$List$dtCons.tabulate = function(size, f) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('List.tabulate: negative size')));
  var t$2 = this;
  var t$3 = size;
  var t$4 = f;
  return t$2.tabulateFrom(t$3, t$4, singleton$List$dtNil);
};

sk$List$dtCons.tabulateFrom = function(i, f, rest) {
  do
    {
      jumpBlockOuterloop_end$bg6914:{
        loop_end$bg6914:{
          {
            var t$ = i;
            if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
              return rest;
            else
              {
                var t$1 = this;
                var t$2 = i;
                var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
                var t$4 = f;
                var t$5 = f;
                var t$6 = i;
                var t$7 = t$6.$mi(new sk$Int(1.0, 0.0));
                var t$8 = t$5(t$7);
                var t$9 = rest;
                var t$10 = new (sk$List$dtCons)(t$8, t$9);
                var t$11 = t$3;
                var t$12 = t$4;
                var t$13 = t$10;
                i = t$11;
                f = t$12;
                rest = t$13;
                break loop_end$bg6914;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg6914;
      }
    }
  while (true);
};

sk$List$dtCons.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$List$dtCons.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$List$dtCons.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$List$dtCons.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$List$dtCons.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$List$dtCons.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$List$dtCons.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$List$dtCons.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$List$dtCons.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$List$dtCons.prototype.__bases = [
  sk$List$dtCons,
  sk$Sequence,
  sk$List
];

var sk$List$dtNil = sk.List$dtNil = function List$dtNil() {};

sk$List$dtNil.prototype = Object.create(Object.prototype);

sk$List$dtNil.prototype.__constructor = sk$List$dtNil;

sk$List$dtNil.prototype.__classname = 'List.Nil';

sk$List$dtNil.prototype.$frozen = true;

sk$List$dtNil.prototype.__type_switch_id = 269;

sk$List$dtNil.prototype.__copy = function() {
  return new (sk$List$dtNil)();
};

sk$List$dtNil.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp494 = __cache.get(this);
  if (_tmp494 === undefined)
    {
      var _tmp494 = this.__copy();
      _tmp494.$frozen = true;
      __cache.set(this, _tmp494);
    }
  return _tmp494;
};

sk$List$dtNil.prototype.__init = function(__named_parameters) {};

sk$List$dtNil.all2 = function(values1, values2, predicate) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg7008:{
      jumpLab$bg7008:{
        jumpLab$bg7007:{
          jumpLab$bg7006:{
            jumpLab$bg7009:{
              jumpLab$bg7010:{
                jumpLab$bg7011:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg7011;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg7009;
                  
                  case 268:
                    break jumpLab$bg7010;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg7007;
                
                default:
                  break jumpLab$bg7008;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg7006;
              
              default:
                break jumpLab$bg7008;

            }
          }
          return new sk$Bool((true));
        }
        {
          var t$2 = predicate;
          var t$3 = head1;
          var t$4 = head2;
          if (t$2(t$3, t$4).__value)
            {
              var t$5 = tail1;
              var t$6 = tail2;
              var t$7 = predicate;
              return sk$List.all2(t$5, t$6, t$7);
            }
          else
            return new sk$Bool((false));
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched sizes in List.all2')));
    }
  }
};

sk$List$dtNil.combine = function(values1, values2) {
  var t$ = this;
  var t$1 = values1;
  var t$2 = values2;
  return t$.map2(((a, b) => 
  {
    var t$3 = a;
    var t$4 = b;
    return new (sk$Tuple2)(t$3, t$4);
  }), t$1, t$2);
};

sk$List$dtNil.prototype.compare = function(other) {
  jumpBlockOuterjumpLab$bg7022:{
    jumpLab$bg7022:{
      jumpLab$bg7021:{
        switch (other.__type_switch_id) {
          case 269:
            break jumpLab$bg7021;
          
          default:
            break jumpLab$bg7022;

        }
      }
      return singleton$EQ;
    }
    return singleton$LT;
  }
};

sk$List$dtNil.create = function() {
  return singleton$List$dtNil;
};

sk$List$dtNil.createFromItems = function(items) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg7030:{
      break$bg7030:{
        dowhile_else$bg7029:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7031:{
                dowhile_cond$bg7031:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg7046:{
                        jumpLab$bg7046:{
                          jumpLab$bg7045:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg7045;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg7046;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg7031;
                          }
                        }
                        {
                          var t$3 = x;
                          var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                          var t$4;
                          var p;
                          {
                            jumpBlockOuterjumpLab$bg7042:{
                              jumpLab$bg7042:{
                                jumpLab$bg7041:{
                                  switch (prev.__type_switch_id) {
                                    case 205:
                                      p = prev.value;
                                      break jumpLab$bg7041;
                                    
                                    case 204:
                                      break jumpLab$bg7042;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var var3 = p;
                                  var t$5 = var3;
                                  var t$6 = t$5;
                                  t$6.tail = c;
                                  t$4 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg7042;
                              }
                              {
                                result = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg7042;
                            }
                          }
                          var t$7 = c;
                          prev = new (sk$Some)(t$7);
                        }
                        break jumpBlockOuterjumpLab$bg7046;
                      }
                    }
                    break dowhile_cond$bg7031;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg7029;
                break jumpBlockOuterdowhile_cond$bg7031;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg7030;
      }
      {}
      break jumpBlockOuterbreak$bg7030;
    }
  }
  var t$8 = result;
  return t$8;
};

sk$List$dtNil.createFromIterator = function(items) {
  var result = singleton$List$dtNil;
  var prev = singleton$None;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg7053:{
      break$bg7053:{
        dowhile_else$bg7052:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7054:{
                dowhile_cond$bg7054:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg7069:{
                        jumpLab$bg7069:{
                          jumpLab$bg7068:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg7068;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg7069;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg7054;
                          }
                        }
                        {
                          var t$3 = x;
                          var c = new (sk$List$dtCons)(t$3, singleton$List$dtNil);
                          var t$4;
                          var p;
                          {
                            jumpBlockOuterjumpLab$bg7065:{
                              jumpLab$bg7065:{
                                jumpLab$bg7064:{
                                  switch (prev.__type_switch_id) {
                                    case 205:
                                      p = prev.value;
                                      break jumpLab$bg7064;
                                    
                                    case 204:
                                      break jumpLab$bg7065;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var var3 = p;
                                  var t$5 = var3;
                                  var t$6 = t$5;
                                  t$6.tail = c;
                                  t$4 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg7065;
                              }
                              {
                                result = c;
                                t$4 = sk.__.$void;
                              }
                              break jumpBlockOuterjumpLab$bg7065;
                            }
                          }
                          var t$7 = c;
                          prev = new (sk$Some)(t$7);
                        }
                        break jumpBlockOuterjumpLab$bg7069;
                      }
                    }
                    break dowhile_cond$bg7054;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg7052;
                break jumpBlockOuterdowhile_cond$bg7054;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg7053;
      }
      {}
      break jumpBlockOuterbreak$bg7053;
    }
  }
  var t$8 = result;
  return t$8;
};

sk$List$dtNil.fold2 = function(l1, l2, fn, initial) {
  var break_val;
  {
    jumpBlockOuterbreak$bg7073:{
      break$bg7073:{
        do
          {
            jumpBlockOutercontinue$bg7074:{
              continue$bg7074:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var $var = new (sk$Tuple2)(t$, t$1);
                  var tail1;
                  var head2;
                  var head1;
                  var _;
                  var tail2;
                  {
                    jumpBlockOuterjumpLab$bg7086:{
                      jumpLab$bg7086:{
                        jumpLab$bg7085:{
                          jumpLab$bg7084:{
                            jumpLab$bg7087:{
                              jumpLab$bg7088:{
                                jumpLab$bg7089:{
                                  switch ($var.__type_switch_id) {
                                    case 392:
                                      break jumpLab$bg7089;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 268:
                                    break jumpLab$bg7087;
                                  
                                  case 269:
                                    break jumpLab$bg7088;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 269:
                                  break jumpLab$bg7085;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg7086;

                              }
                            }
                            switch ($var.i1.__type_switch_id) {
                              case 268:
                                head1 = $var.i0.head;
                                tail1 = $var.i0.tail;
                                head2 = $var.i1.head;
                                tail2 = $var.i1.tail;
                                break jumpLab$bg7084;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg7086;

                            }
                          }
                          {
                            l1 = tail1;
                            l2 = tail2;
                            var t$2 = fn;
                            var t$3 = initial;
                            var t$4 = head1;
                            var t$5 = head2;
                            initial = t$2(t$3, t$4, t$5);
                          }
                          break jumpBlockOuterjumpLab$bg7086;
                        }
                        {
                          break_val = initial;
                          break break$bg7073;
                        }
                      }
                      sk$invariant_violation(new sk$String(('Mismatched list sizes')));
                      break jumpBlockOuterjumpLab$bg7086;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg7074;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg7073;
    }
  }
  return break_val;
};

sk$List$dtNil.fold3 = function(l1, l2, l3, fn, initial) {
  var break_val;
  {
    jumpBlockOuterbreak$bg7093:{
      break$bg7093:{
        do
          {
            jumpBlockOutercontinue$bg7094:{
              continue$bg7094:{
                {
                  var t$ = l1;
                  var t$1 = l2;
                  var t$2 = l3;
                  var $var = new (sk$Tuple3)(t$, t$1, t$2);
                  var tail1;
                  var _;
                  var head3;
                  var head2;
                  var head1;
                  var tail3;
                  var tail2;
                  {
                    jumpBlockOuterjumpLab$bg7108:{
                      jumpLab$bg7108:{
                        jumpLab$bg7107:{
                          jumpLab$bg7106:{
                            jumpLab$bg7109:{
                              jumpLab$bg7110:{
                                jumpLab$bg7111:{
                                  jumpLab$bg7112:{
                                    jumpLab$bg7113:{
                                      switch ($var.__type_switch_id) {
                                        case 393:
                                          break jumpLab$bg7113;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    switch ($var.i0.__type_switch_id) {
                                      case 268:
                                        break jumpLab$bg7110;
                                      
                                      case 269:
                                        break jumpLab$bg7112;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  switch ($var.i1.__type_switch_id) {
                                    case 269:
                                      break jumpLab$bg7111;
                                    
                                    default:
                                      _ = $var;
                                      break jumpLab$bg7108;

                                  }
                                }
                                switch ($var.i2.__type_switch_id) {
                                  case 269:
                                    break jumpLab$bg7107;
                                  
                                  default:
                                    _ = $var;
                                    break jumpLab$bg7108;

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 268:
                                  break jumpLab$bg7109;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg7108;

                              }
                            }
                            switch ($var.i2.__type_switch_id) {
                              case 268:
                                head1 = $var.i0.head;
                                tail1 = $var.i0.tail;
                                head2 = $var.i1.head;
                                tail2 = $var.i1.tail;
                                head3 = $var.i2.head;
                                tail3 = $var.i2.tail;
                                break jumpLab$bg7106;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg7108;

                            }
                          }
                          {
                            l1 = tail1;
                            l2 = tail2;
                            l3 = tail3;
                            var t$3 = fn;
                            var t$4 = initial;
                            var t$5 = head1;
                            var t$6 = head2;
                            var t$7 = head3;
                            initial = t$3(t$4, t$5, t$6, t$7);
                          }
                          break jumpBlockOuterjumpLab$bg7108;
                        }
                        {
                          break_val = initial;
                          break break$bg7093;
                        }
                      }
                      sk$invariant_violation(new sk$String(('Mismatched list sizes')));
                      break jumpBlockOuterjumpLab$bg7108;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg7094;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg7093;
    }
  }
  return break_val;
};

sk$List$dtNil.foldr2 = function(values1, values2, fn, initial) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg7130:{
      jumpLab$bg7130:{
        jumpLab$bg7129:{
          jumpLab$bg7128:{
            jumpLab$bg7131:{
              jumpLab$bg7132:{
                jumpLab$bg7133:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg7133;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg7131;
                  
                  case 268:
                    break jumpLab$bg7132;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg7129;
                
                default:
                  break jumpLab$bg7130;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg7128;
              
              default:
                break jumpLab$bg7130;

            }
          }
          return initial;
        }
        {
          var t$2 = fn;
          var t$3 = this;
          var t$4 = tail1;
          var t$5 = tail2;
          var t$6 = fn;
          var t$7 = initial;
          var t$8 = t$3.foldr2(t$4, t$5, t$6, t$7);
          var t$9 = head1;
          var t$10 = head2;
          return t$2(t$8, t$9, t$10);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched list sizes')));
    }
  }
};

sk$List$dtNil.prototype.genFoldl = skip.asyncToGenerator(function*(f, init) {
  return init;
});

sk$List$dtNil.prototype.genReverseHelp = skip.asyncToGenerator(function*(tl) {
  return tl;
});

sk$List$dtNil.prototype.getClassName = function() {
  return new sk$String(('List.Nil'));
};

sk$List$dtNil.prototype.getHead = function() {
  return sk$invariant_violation(new sk$String(('head of empty list')));
};

sk$List$dtNil.prototype.getTail = function() {
  return sk$invariant_violation(new sk$String(('tail of empty list')));
};

sk$List$dtNil.prototype.inspect = function() {
  return new (sk$InspectVector)(new sk$String(('List')), new (sk$Array)([]));
};

sk$List$dtNil.prototype.isEmpty = function() {
  return new sk$Bool((true));
};

sk$List$dtNil.iter2 = function(values1, values2, fn) {
  var t$ = values1;
  var t$1 = values2;
  var $var = new (sk$Tuple2)(t$, t$1);
  var tail1;
  var head2;
  var head1;
  var tail2;
  {
    jumpBlockOuterjumpLab$bg7154:{
      jumpLab$bg7154:{
        jumpLab$bg7153:{
          jumpLab$bg7152:{
            jumpLab$bg7155:{
              jumpLab$bg7156:{
                jumpLab$bg7157:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg7157;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg7155;
                  
                  case 268:
                    break jumpLab$bg7156;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  head1 = $var.i0.head;
                  tail1 = $var.i0.tail;
                  head2 = $var.i1.head;
                  tail2 = $var.i1.tail;
                  break jumpLab$bg7153;
                
                default:
                  break jumpLab$bg7154;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg7152;
              
              default:
                break jumpLab$bg7154;

            }
          }
          return sk.__.$void;
        }
        {
          var t$2 = fn;
          var t$3 = head1;
          var t$4 = head2;
          t$2(t$3, t$4);
          var t$5 = tail1;
          var t$6 = tail2;
          var t$7 = fn;
          return sk$List.iter2(t$5, t$6, t$7);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched sizes in List.iter2')));
    }
  }
};

sk$List$dtNil.map2 = function(f, a, b) {
  var t$ = a;
  var t$1 = b;
  var $var = new (sk$Tuple2)(t$, t$1);
  var bhd;
  var ahd;
  var btl;
  var atl;
  {
    jumpBlockOuterjumpLab$bg7174:{
      jumpLab$bg7174:{
        jumpLab$bg7173:{
          jumpLab$bg7172:{
            jumpLab$bg7175:{
              jumpLab$bg7176:{
                jumpLab$bg7177:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg7177;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                switch ($var.i0.__type_switch_id) {
                  case 269:
                    break jumpLab$bg7175;
                  
                  case 268:
                    break jumpLab$bg7176;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              switch ($var.i1.__type_switch_id) {
                case 268:
                  ahd = $var.i0.head;
                  atl = $var.i0.tail;
                  bhd = $var.i1.head;
                  btl = $var.i1.tail;
                  break jumpLab$bg7173;
                
                default:
                  break jumpLab$bg7174;

              }
            }
            switch ($var.i1.__type_switch_id) {
              case 269:
                break jumpLab$bg7172;
              
              default:
                break jumpLab$bg7174;

            }
          }
          return singleton$List$dtNil;
        }
        {
          var t$2 = f;
          var t$3 = ahd;
          var t$4 = bhd;
          var t$5 = t$2(t$3, t$4);
          var t$6 = this;
          var t$7 = f;
          var t$8 = atl;
          var t$9 = btl;
          var t$10 = t$6.map2(t$7, t$8, t$9);
          return new (sk$List$dtCons)(t$5, t$10);
        }
      }
      return sk$invariant_violation(new sk$String(('Mismatched list sizes')));
    }
  }
};

sk$List$dtNil.mapRev = function(f, acc, list) {
  var t;
  var h;
  {
    jumpBlockOuterjumpLab$bg7188:{
      jumpLab$bg7188:{
        jumpLab$bg7187:{
          switch (list.__type_switch_id) {
            case 269:
              break jumpLab$bg7187;
            
            case 268:
              h = list.head;
              t = list.tail;
              break jumpLab$bg7188;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return acc;
      }
      {
        var t$ = f;
        var t$1 = f;
        var t$2 = h;
        var t$3 = t$1(t$2);
        var t$4 = acc;
        var t$5 = new (sk$List$dtCons)(t$3, t$4);
        var t$6 = t;
        return sk$List.mapRev(t$, t$5, t$6);
      }
    }
  }
};

sk$List$dtNil.prototype.maybeHead = function() {
  return singleton$None;
};

sk$List$dtNil.prototype.maybeTail = function() {
  return singleton$None;
};

sk$List$dtNil.of = function(element) {
  var t$ = element;
  var t$1 = new (sk$Array)([
    t$
  ]);
  return sk$List.createFromItems(t$1);
};

sk$List$dtNil.reverseFromIterator = function(items) {
  var result = singleton$List$dtNil;
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg7200:{
      break$bg7200:{
        dowhile_else$bg7199:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7201:{
                dowhile_cond$bg7201:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var element;
                    {
                      jumpBlockOuterjumpLab$bg7209:{
                        jumpLab$bg7209:{
                          jumpLab$bg7208:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg7208;
                              
                              case 205:
                                element = var2.value;
                                break jumpLab$bg7209;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg7201;
                          }
                        }
                        {
                          var t$3 = element;
                          var t$4 = result;
                          result = new (sk$List$dtCons)(t$3, t$4);
                        }
                        break jumpBlockOuterjumpLab$bg7209;
                      }
                    }
                    break dowhile_cond$bg7201;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg7199;
                break jumpBlockOuterdowhile_cond$bg7201;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg7200;
      }
      {}
      break jumpBlockOuterbreak$bg7200;
    }
  }
  return result;
};

sk$List$dtNil.tabulate = function(size, f) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('List.tabulate: negative size')));
  var t$2 = this;
  var t$3 = size;
  var t$4 = f;
  return t$2.tabulateFrom(t$3, t$4, singleton$List$dtNil);
};

sk$List$dtNil.tabulateFrom = function(i, f, rest) {
  do
    {
      jumpBlockOuterloop_end$bg7229:{
        loop_end$bg7229:{
          {
            var t$ = i;
            if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
              return rest;
            else
              {
                var t$1 = this;
                var t$2 = i;
                var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
                var t$4 = f;
                var t$5 = f;
                var t$6 = i;
                var t$7 = t$6.$mi(new sk$Int(1.0, 0.0));
                var t$8 = t$5(t$7);
                var t$9 = rest;
                var t$10 = new (sk$List$dtCons)(t$8, t$9);
                var t$11 = t$3;
                var t$12 = t$4;
                var t$13 = t$10;
                i = t$11;
                f = t$12;
                rest = t$13;
                break loop_end$bg7229;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg7229;
      }
    }
  while (true);
};

sk$List$dtNil.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$List$dtNil.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$List$dtNil.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$List$dtNil.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$List$dtNil.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$List$dtNil.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$List$dtNil.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$List$dtNil.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$List$dtNil.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$List$dtNil.prototype.__bases = [
  sk$List$dtNil,
  sk$Sequence,
  sk$List
];

var sk$Map = sk.Map = function Map(table, slots, shift, sz, used, generation_PRIVATE) {
  this.table = table;
  this.slots = slots;
  this.shift = shift;
  this.sz = sz;
  this.used = used;
  this.generation_PRIVATE = generation_PRIVATE;
};

sk$Map.prototype = Object.create(Object.prototype);

sk$Map.prototype.__constructor = sk$Map;

sk$Map.prototype.__classname = 'Map';

sk$Map.prototype.$frozen = false;

sk$Map.prototype.__type_switch_id = 168;

sk$Map.prototype.__copy = function() {
  return new (sk$Map)(this.table, this.slots, this.shift, this.sz, this.used, this.generation_PRIVATE);
};

sk$Map.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp495 = __cache.get(this);
  if (_tmp495 === undefined)
    {
      var _tmp495 = this.__copy();
      _tmp495.$frozen = true;
      __cache.set(this, _tmp495);
      _tmp495.table = skip.deepFreeze(_tmp495.table, __cache);
      _tmp495.slots = skip.deepFreeze(_tmp495.slots, __cache);
      _tmp495.shift = skip.deepFreeze(_tmp495.shift, __cache);
      _tmp495.sz = skip.deepFreeze(_tmp495.sz, __cache);
      _tmp495.used = skip.deepFreeze(_tmp495.used, __cache);
      _tmp495.generation_PRIVATE = skip.deepFreeze(_tmp495.generation_PRIVATE, __cache);
    }
  return _tmp495;
};

sk$Map.prototype.__init = function(__named_parameters) {};

sk$Map.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Map.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = other;
  var t$3 = t$2.size();
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = this;
      var t$5 = t$4;
      var t$6 = t$5.slots;
      return t$6.all(((entry) => 
      {
        var t$7 = entry;
        if (t$7.isEmpty().__value)
          return new sk$Bool((true));
        else
          {
            var t$8 = other;
            var t$9 = entry;
            var t$10 = t$9.hash;
            var t$11 = entry;
            var t$12 = t$11.unsafeKey();
            var $var = t$8.maybeGetItemLoop(t$10, t$12);
            var v;
            {
              jumpBlockOuterjumpLab$bg7322:{
                jumpLab$bg7322:{
                  jumpLab$bg7321:{
                    jumpLab$bg7323:{
                      switch ($var.__type_switch_id) {
                        case 205:
                          break jumpLab$bg7323;
                        
                        case 204:
                          break jumpLab$bg7322;
                        
                        default:
                          skip.throwException(sk, new Error('Unmatched Branch'));

                      }
                    }
                    switch ($var.value.__type_switch_id) {
                      case 392:
                        v = $var.value.i1;
                        break jumpLab$bg7321;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$13 = entry;
                    var t$14 = t$13.unsafeValue();
                    var t$15 = v;
                    return t$14.$eq$eq(t$15);
                  }
                }
                return new sk$Bool((false));
              }
            }
          }
      }));
    }
  else
    return new sk$Bool((false));
};

sk$Map.prototype.add = function(k, v) {
  var t$ = this;
  var t$1 = k;
  var t$2 = v;
  var t$3 = t$.maybeSet(t$1, t$2);
  if (t$3.$bg().__value)
    skip.throwException(sk, singleton$Duplicate);
  else
    return sk.__.$void;
};

sk$Map.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.find(((k, v) => 
  {
    var t$2 = p;
    var t$3 = k;
    var t$4 = v;
    var t$5 = t$2(t$3, t$4);
    return t$5.$bg();
  }));
  return t$1.isNone();
};

sk$Map.prototype.any = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.find(t$1);
  return t$2.isSome();
};

sk$Map.prototype.capacity = function() {
  var t$ = this;
  return t$.capacityImpl();
};

sk$Map.prototype.capacityImpl = function() {
  var t$ = this;
  var t$1 = t$.slots;
  return t$1.size();
};

sk$Map.prototype.chill = function() {
  var t$ = this;
  var t$1 = t$.table;
  var t$2 = t$1.chill();
  var t$3 = this;
  var t$4 = t$3.slots;
  var t$5 = t$4.chill();
  var t$6 = this;
  var t$7 = t$6.shift;
  var t$8 = this;
  var t$9 = t$8.sz;
  var t$10 = this;
  var t$11 = t$10.used;
  return new (sk$Map)(t$2, t$5, t$7, t$9, t$11, new sk$Int(0.0, 0.0));
};

sk$Map.prototype.clear = function() {
  var t$ = this;
  t$.invalidateIterators();
  var t$1 = this;
  var t$2 = t$1.sz;
  if (t$2.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = this;
      var table = t$3.table;
      var t$4 = table;
      var t$5 = t$4.size();
      var t$6 = new (sk$Range)(new sk$Int(0.0, 0.0), t$5);
      var $var = t$6.values();
      var var1 = new sk$Bool((true));
      {
        jumpBlockOuterbreak$bg7368:{
          break$bg7368:{
            dowhile_else$bg7367:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg7369:{
                    dowhile_cond$bg7369:{
                      {
                        var t$7 = $var;
                        var var2 = t$7.next();
                        var i;
                        {
                          jumpBlockOuterjumpLab$bg7396:{
                            jumpLab$bg7396:{
                              jumpLab$bg7395:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg7395;
                                  
                                  case 205:
                                    i = var2.value;
                                    break jumpLab$bg7396;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg7369;
                              }
                            }
                            {
                              var t$8 = table;
                              var t$9 = i;
                              var t$10 = sk$Map$dtMapIndex.empty();
                              sk$Map$dtunsafeSet(t$8, t$9, t$10);
                            }
                            break jumpBlockOuterjumpLab$bg7396;
                          }
                        }
                        break dowhile_cond$bg7369;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg7367;
                    break jumpBlockOuterdowhile_cond$bg7369;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg7368;
          }
          {}
          break jumpBlockOuterbreak$bg7368;
        }
      }
    }
  else
    {}
  var t$11 = this;
  var slots = t$11.slots;
  var t$12 = this;
  var t$13 = t$12.used;
  var t$14 = new (sk$Range)(new sk$Int(0.0, 0.0), t$13);
  var var3 = t$14.values();
  var var4 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg7382:{
      break$bg7382:{
        dowhile_else$bg7381:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7383:{
                dowhile_cond$bg7383:{
                  {
                    var t$15 = var3;
                    var var5 = t$15.next();
                    var i1;
                    {
                      jumpBlockOuterjumpLab$bg7400:{
                        jumpLab$bg7400:{
                          jumpLab$bg7399:{
                            switch (var5.__type_switch_id) {
                              case 204:
                                break jumpLab$bg7399;
                              
                              case 205:
                                i1 = var5.value;
                                break jumpLab$bg7400;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var4 = new sk$Bool((false));
                            break dowhile_cond$bg7383;
                          }
                        }
                        {
                          var t$16 = slots;
                          var t$17 = i1;
                          var t$18 = sk$Map$dtMapEntry.empty();
                          sk$Map$dtunsafeSet(t$16, t$17, t$18);
                        }
                        break jumpBlockOuterjumpLab$bg7400;
                      }
                    }
                    break dowhile_cond$bg7383;
                  }
                }
                if (var4.__value)
                  {}
                else
                  break dowhile_else$bg7381;
                break jumpBlockOuterdowhile_cond$bg7383;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg7382;
      }
      {}
      break jumpBlockOuterbreak$bg7382;
    }
  }
  var var6 = this;
  var t$19 = var6;
  var t$20 = t$19;
  t$20.sz = new sk$Int(0.0, 0.0);
  var var7 = this;
  var t$21 = var7;
  var t$22 = t$21;
  t$22.used = new sk$Int(0.0, 0.0);
  return sk.__.$void;
};

sk$Map.prototype.clone = function(reserveCapacity) {
  if (reserveCapacity === undefined)
    reserveCapacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = reserveCapacity;
  var capacity = t$1.$pl(t$2);
  var t$3 = capacity;
  var t$4 = this;
  var t$5 = t$4.capacityImpl();
  if (t$3.ule(t$5).__value)
    {
      var t$6 = this;
      var t$7 = t$6.table;
      var t$8 = t$7.clone();
      var t$9 = this;
      var t$10 = t$9.slots;
      var t$11 = t$10.clone();
      var t$12 = this;
      var t$13 = t$12.shift;
      var t$14 = this;
      var t$15 = t$14.sz;
      var t$16 = this;
      var t$17 = t$16.used;
      return new (sk$Map)(t$8, t$11, t$13, t$15, t$17, new sk$Int(0.0, 0.0));
    }
  else
    {
      var t$18 = capacity;
      var map = sk$Map.mcreate(t$18);
      var t$19 = this;
      t$19.unsafeEach(((entry) => 
      {
        var t$20 = map;
        var t$21 = entry;
        var t$22 = t$21.hash;
        var t$23 = entry;
        var t$24 = t$23.unsafeKey();
        var t$25 = entry;
        var t$26 = t$25.unsafeValue();
        return t$20.setLoop(t$22, t$24, t$26);
      }));
      return map;
    }
};

sk$Map.prototype.containsKey = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.isSome();
};

sk$Map.createFromItems = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromItems(t$1);
  return t$2;
};

sk$Map.createFromIterator = function(iterator) {
  var t$ = this;
  var t$1 = iterator;
  var t$2 = t$.mcreateFromIterator(t$1);
  return t$2;
};

sk$Map.prototype.each = function(f) {
  var t$ = this;
  return t$.eachWhileImpl(((entry) => 
  {
    var t$1 = f;
    var t$2 = entry;
    var t$3 = t$2.unsafeKey();
    var t$4 = entry;
    var t$5 = t$4.unsafeValue();
    t$1(t$3, t$5);
    return new sk$Bool((true));
  }));
};

sk$Map.prototype.eachWhileImpl = function(f) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var used = t$1.used;
  var t$2 = this;
  var t$3 = t$2.generation_PRIVATE;
  var indexMinusGeneration = t$3.negate();
  var break_val;
  {
    jumpBlockOuterbreak$bg7454:{
      break$bg7454:{
        do
          {
            jumpBlockOutercontinue$bg7455:{
              continue$bg7455:{
                {
                  var t$4 = indexMinusGeneration;
                  var t$5 = this;
                  var t$6 = t$5.generation_PRIVATE;
                  var index = t$4.$pl(t$6);
                  var t$7 = index;
                  var t$8 = used;
                  var t$9;
                  if (t$7.uge(t$8).__value)
                    {
                      var t$10 = index;
                      var t$11;
                      if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                        t$11 = sk$throwContainerChanged();
                      else
                        t$11 = sk.__.$void;
                      break_val = sk.__.$void;
                      break break$bg7454;
                    }
                  else
                    {
                      var t$12 = slots;
                      var t$13 = index;
                      var entry = sk$Map$dtunsafeGet(t$12, t$13);
                      var t$14 = indexMinusGeneration;
                      indexMinusGeneration = t$14.$pl(new sk$Int(1.0, 0.0));
                      var t$15 = entry;
                      var t$16 = t$15.isEmpty();
                      var t$17;
                      if (t$16.$bg().__value)
                        {
                          var t$18 = f;
                          var t$19 = entry;
                          var t$20 = t$18(t$19);
                          var t$21;
                          if (t$20.$bg().__value)
                            {
                              break_val = sk.__.$void;
                              break break$bg7454;
                            }
                          else
                            t$21 = sk.__.$void;
                          t$17 = t$21;
                        }
                      else
                        t$17 = sk.__.$void;
                      t$9 = t$17;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg7455;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg7454;
    }
  }
  return break_val;
};

sk$Map.prototype.ensureCapacity = function(capacity) {
  var t$ = capacity;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Map::ensureCapacity(): Expected capacity to be nonnegative.')));
  var t$2 = capacity;
  var t$3 = this;
  var t$4 = t$3.capacityImpl();
  if (t$2.ugt(t$4).__value)
    {
      var t$5 = capacity;
      var log2NumSlots = sk$Map$dtgetLogSlotSizeForCapacity(t$5);
      var t$6 = this;
      var t$7 = log2NumSlots;
      return t$6.growCapacity(t$7);
    }
  else
    return sk.__.$void;
};

sk$Map.prototype.extend = function(second) {
  var map;
  {
    jumpBlockOuterjumpLab$bg7493:{
      jumpLab$bg7493:{
        jumpLab$bg7492:{
          switch (second.__type_switch_id) {
            case 168:
              map = second;
              break jumpLab$bg7492;
            
            default:
              break jumpLab$bg7493;

          }
        }
        {
          var t$ = this;
          var t$1 = map;
          return t$.extendMap(t$1);
        }
      }
      {
        var t$2 = this;
        var t$3 = second;
        return t$2.extendKeyedSequence(t$3);
      }
    }
  }
};

sk$Map.prototype.extendKeyedSequence = function(second) {
  var t$ = second;
  var $var = t$.items();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg7499:{
      break$bg7499:{
        dowhile_else$bg7498:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7500:{
                dowhile_cond$bg7500:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var k;
                    var v;
                    {
                      jumpBlockOuterjumpLab$bg7509:{
                        jumpLab$bg7509:{
                          jumpLab$bg7508:{
                            jumpLab$bg7510:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg7508;
                                
                                case 205:
                                  break jumpLab$bg7510;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                k = var2.value.i0;
                                v = var2.value.i1;
                                break jumpLab$bg7509;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg7500;
                          }
                        }
                        {
                          var t$2 = this;
                          var t$3 = k;
                          var t$4 = v;
                          t$2.set(t$3, t$4);
                        }
                        break jumpBlockOuterjumpLab$bg7509;
                      }
                    }
                    break dowhile_cond$bg7500;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg7498;
                break jumpBlockOuterdowhile_cond$bg7500;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg7499;
      }
      {}
      break jumpBlockOuterbreak$bg7499;
    }
  }
  return break_val;
};

sk$Map.prototype.extendMap = function(second) {
  var t$ = second;
  return t$.unsafeEach(((entry) => 
  {
    var t$1 = this;
    t$1.rehashIfFull();
    var t$2 = this;
    var t$3 = entry;
    var t$4 = t$3.hash;
    var t$5 = entry;
    var t$6 = t$5.unsafeKey();
    var t$7 = entry;
    var t$8 = t$7.unsafeValue();
    return t$2.setLoop(t$4, t$6, t$8);
  }));
};

sk$Map.prototype.filter = function(p) {
  var static1 = this.__constructor;
  var t$ = static1;
  var result = t$.mcreate(new sk$Int(0.0, 0.0));
  var t$1 = this;
  t$1.eachWhileImpl(((entry) => 
  {
    var t$2 = entry;
    var k = t$2.unsafeKey();
    var t$3 = entry;
    var v = t$3.unsafeValue();
    var t$4 = p;
    var t$5 = k;
    var t$6 = v;
    if (t$4(t$5, t$6).__value)
      {
        var t$7 = result;
        t$7.rehashIfFull();
        var t$8 = entry;
        var h = t$8.hash;
        var t$9 = result;
        var t$10 = h;
        var t$11 = k;
        var t$12 = v;
        t$9.setLoop(t$10, t$11, t$12);
      }
    else
      {}
    return new sk$Bool((true));
  }));
  var t$13 = result;
  return t$13;
};

sk$Map.prototype.filterNone = function() {
  var result = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.eachWhileImpl(((entry) => 
  {
    var t$1 = entry;
    var k = t$1.unsafeKey();
    var t$2 = entry;
    var $var = t$2.unsafeValue();
    var v;
    {
      jumpBlockOuterjumpLab$bg7550:{
        jumpLab$bg7550:{
          jumpLab$bg7549:{
            switch ($var.__type_switch_id) {
              case 205:
                v = $var.value;
                break jumpLab$bg7549;
              
              default:
                break jumpLab$bg7550;

            }
          }
          {
            var t$3 = result;
            t$3.rehashIfFull();
            var t$4 = entry;
            var h = t$4.hash;
            var t$5 = result;
            var t$6 = h;
            var t$7 = k;
            var t$8 = v;
            t$5.setLoop(t$6, t$7, t$8);
          }
          break jumpBlockOuterjumpLab$bg7550;
        }
        {}
        break jumpBlockOuterjumpLab$bg7550;
      }
    }
    return new sk$Bool((true));
  }));
  var t$9 = result;
  return t$9;
};

sk$Map.prototype.find = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.findItem(t$1);
  return t$2.map(((item) => 
  {
    var t$3 = item;
    return t$3.i1;
  }));
};

sk$Map.prototype.findItem = function(p) {
  var result = singleton$None;
  var t$ = this;
  t$.eachWhileImpl(((entry) => 
  {
    var t$1 = entry;
    var k = t$1.unsafeKey();
    var t$2 = entry;
    var v = t$2.unsafeValue();
    var t$3 = p;
    var t$4 = k;
    var t$5 = v;
    if (t$3(t$4, t$5).__value)
      {
        var t$6 = k;
        var t$7 = v;
        var t$8 = new (sk$Tuple2)(t$6, t$7);
        var t = t$8;
        var t$9 = t;
        result = new (sk$Some)(t$9);
        return new sk$Bool((false));
      }
    else
      return new sk$Bool((true));
  }));
  return result;
};

sk$Map.prototype.firstEntry = function() {
  var t$ = this;
  var t$1 = t$.slots;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg7572:{
      break$bg7572:{
        dowhile_else$bg7571:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7573:{
                dowhile_cond$bg7573:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var entry;
                    {
                      jumpBlockOuterjumpLab$bg7586:{
                        jumpLab$bg7586:{
                          jumpLab$bg7585:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg7585;
                              
                              case 205:
                                entry = var2.value;
                                break jumpLab$bg7586;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg7573;
                          }
                        }
                        {
                          var t$3 = entry;
                          var t$4 = t$3.isEmpty();
                          if (t$4.$bg().__value)
                            {
                              var t$5 = entry;
                              var t$6 = t$5.unsafeKey();
                              var t$7 = entry;
                              var t$8 = t$7.unsafeValue();
                              var t$9 = new (sk$Tuple2)(t$6, t$8);
                              break_val = new (sk$Some)(t$9);
                              break break$bg7572;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg7586;
                      }
                    }
                    break dowhile_cond$bg7573;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg7571;
                break jumpBlockOuterdowhile_cond$bg7573;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg7572;
      }
      {}
      break jumpBlockOuterbreak$bg7572;
    }
  }
  return break_val;
};

sk$Map.prototype.firstItem = function() {
  var t$ = this;
  var t$1 = t$.firstEntry();
  return t$1.fromSome(undefined);
};

sk$Map.prototype.gen = skip.asyncToGenerator(function*() {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var t$2 = t$1.used;
  var handles = sk$List.tabulate(t$2, ((index) => 
  {
    var t$3 = slots;
    var t$4 = index;
    var entry = sk$Map$dtunsafeGet(t$3, t$4);
    var t$5 = entry;
    var hash = t$5.hash;
    var t$6 = entry;
    if (t$6.isEmpty().__value)
      return (skip.asyncToGenerator(function*() {
        {}
        return sk$Map$dtMapEntry.empty();
      })());
    else
      {
        var t$7 = entry;
        var key = t$7.unsafeKey();
        return (skip.asyncToGenerator(function*() {
          {
            var t$8 = entry;
            var value = (yield t$8.unsafeValue());
            var t$9 = hash;
            var t$10 = key;
            var t$11 = value;
          }
          return sk$Map$dtMapEntry.create(t$9, t$10, t$11);
        })());
      }
  }));
  var t$12 = handles;
  var t$13 = (yield t$12.genReverse());
  var nextSlots = sk$Array.mcreateFromItems(t$13);
  var t$14 = nextSlots;
  t$14.reverse();
  var t$15 = this;
  var t$16 = t$15.table;
  var t$17 = nextSlots;
  var t$18 = t$17;
  var t$19 = this;
  var t$20 = t$19.shift;
  var t$21 = this;
  var t$22 = t$21.sz;
  var t$23 = this;
  var t$24 = t$23.used;
  return new (sk$Map)(t$16, t$18, t$20, t$22, t$24, new sk$Int(0.0, 0.0));
});

sk$Map.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var t$2 = t$1.used;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$2, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$3 = slots;
        var t$4 = index;
        var entry = sk$Map$dtunsafeGet(t$3, t$4);
        var t$5 = entry;
        var t$6 = t$5.isEmpty();
        var t$7;
        if (t$6.$bg().__value)
          {
            var t$8 = p;
            var t$9 = entry;
            var t$10 = t$9.unsafeKey();
            var t$11 = entry;
            var t$12 = t$11.unsafeValue();
            t$7 = (yield t$8(t$10, t$12));
          }
        else
          t$7 = new sk$Bool((false));
      }
      return t$7;
    })());
  })));
  var t$13 = predicates;
  var nextSize = t$13.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$14 = sum;
        return t$14.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var t$15 = nextSize;
  var t$16 = this;
  var t$17 = t$16.sz;
  if (t$15.$eq$eq(t$17).__value)
    return this;
  else
    {
      var t$18 = nextSize;
      var map = sk$Map.mcreate(t$18);
      var t$19 = this;
      var t$20 = t$19.used;
      var t$21 = new (sk$Range)(new sk$Int(0.0, 0.0), t$20);
      var $var = t$21.values();
      var var1 = new sk$Bool((true));
      {
        jumpBlockOuterbreak$bg7644:{
          break$bg7644:{
            dowhile_else$bg7643:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg7645:{
                    dowhile_cond$bg7645:{
                      {
                        var t$22 = $var;
                        var var2 = t$22.next();
                        var index1;
                        {
                          jumpBlockOuterjumpLab$bg7663:{
                            jumpLab$bg7663:{
                              jumpLab$bg7662:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg7662;
                                  
                                  case 205:
                                    index1 = var2.value;
                                    break jumpLab$bg7663;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg7645;
                              }
                            }
                            {
                              var t$23 = predicates;
                              var t$24 = index1;
                              if (sk$Map$dtunsafeGet(t$23, t$24).__value)
                                {
                                  var t$25 = slots;
                                  var t$26 = index1;
                                  var entry1 = sk$Map$dtunsafeGet(t$25, t$26);
                                  var t$27 = map;
                                  var t$28 = entry1;
                                  var t$29 = t$28.hash;
                                  var t$30 = entry1;
                                  var t$31 = t$30.unsafeKey();
                                  var t$32 = entry1;
                                  var t$33 = t$32.unsafeValue();
                                  t$27.setLoop(t$29, t$31, t$33);
                                }
                              else
                                {}
                            }
                            break jumpBlockOuterjumpLab$bg7663;
                          }
                        }
                        break dowhile_cond$bg7645;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg7643;
                    break jumpBlockOuterdowhile_cond$bg7645;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg7644;
          }
          {}
          break jumpBlockOuterbreak$bg7644;
        }
      }
      var t$34 = map;
      return t$34;
    }
});

sk$Map.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var t$2 = t$1.used;
  var nextSlots = (yield sk$ASIO$dtgenFillBy(t$2, ((index) => 
  {
    var t$3 = slots;
    var t$4 = index;
    var entry = sk$Map$dtunsafeGet(t$3, t$4);
    var t$5 = entry;
    var hash = t$5.hash;
    var t$6 = entry;
    if (t$6.isEmpty().__value)
      return (skip.asyncToGenerator(function*() {
        {}
        return sk$Map$dtMapEntry.empty();
      })());
    else
      {
        var t$7 = entry;
        var key = t$7.unsafeKey();
        var t$8 = s;
        var t$9 = key;
        var t$10 = entry;
        var t$11 = t$10.unsafeValue();
        var awaitable_value = t$8(t$9, t$11);
        return (skip.asyncToGenerator(function*() {
          {
            var value = (yield awaitable_value);
            var t$12 = hash;
            var t$13 = key;
            var t$14 = value;
          }
          return sk$Map$dtMapEntry.create(t$12, t$13, t$14);
        })());
      }
  })));
  var t$15 = this;
  var t$16 = t$15.table;
  var t$17 = nextSlots;
  var t$18 = t$17;
  var t$19 = this;
  var t$20 = t$19.shift;
  var t$21 = this;
  var t$22 = t$21.sz;
  var t$23 = this;
  var t$24 = t$23.used;
  return new (sk$Map)(t$16, t$18, t$20, t$22, t$24, new sk$Int(0.0, 0.0));
});

sk$Map.generator = function(keyGenerator, valueGenerator) {
  var t$ = keyGenerator;
  var t$1 = valueGenerator;
  return new (sk$QuickCheck$dtMapGenerator)(t$, t$1);
};

sk$Map.prototype.get = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.getItem(t$1);
  return t$2.i1;
};

sk$Map.prototype.getItem = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var p;
  {
    jumpBlockOuterjumpLab$bg7703:{
      jumpLab$bg7703:{
        jumpLab$bg7702:{
          switch ($var.__type_switch_id) {
            case 205:
              p = $var.value;
              break jumpLab$bg7702;
            
            case 204:
              break jumpLab$bg7703;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return p;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$Map.prototype.getOrAdd = function(k, f) {
  var t$ = k;
  var t$1 = t$.hash();
  var h = sk$Map$dtfinalizeHash(t$1);
  var t$2 = this;
  var t$3 = h;
  var t$4 = k;
  var $var = t$2.maybeGetItemLoop(t$3, t$4);
  var x;
  {
    jumpBlockOuterjumpLab$bg7721:{
      jumpLab$bg7721:{
        jumpLab$bg7720:{
          switch ($var.__type_switch_id) {
            case 205:
              x = $var.value;
              break jumpLab$bg7720;
            
            case 204:
              break jumpLab$bg7721;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = x;
          return t$5.i1;
        }
      }
      {
        var t$6 = f;
        var v = t$6();
        var t$7 = this;
        t$7.rehashIfFull();
        var t$8 = this;
        var t$9 = h;
        var t$10 = k;
        var t$11 = v;
        t$8.setLoop(t$9, t$10, t$11);
        return v;
      }
    }
  }
};

sk$Map.prototype.growCapacity = function(log2NumSlots) {
  var t$ = this;
  var oldSlots = t$.slots;
  var t$1 = this;
  var sz = t$1.sz;
  var t$2 = log2NumSlots;
  var shift = sk$Map$dtgetShiftForLogTableSize(t$2);
  var $var = this;
  var t$3 = $var;
  var t$4 = t$3;
  t$4.shift = shift;
  var var1 = this;
  var t$5 = var1;
  var t$6 = t$5;
  t$6.sz = new sk$Int(0.0, 0.0);
  var var2 = this;
  var t$7 = var2;
  var t$8 = t$7;
  t$8.used = new sk$Int(0.0, 0.0);
  var var3 = this;
  var t$9 = var3;
  var t$10 = log2NumSlots;
  var t$11 = new sk$Int(1.0, 0.0).shl(t$10);
  var t$12 = sk$Map$dtMapIndex.empty();
  var t$13 = t$9;
  t$13.table = sk$Array.mfill(t$11, t$12);
  var var4 = this;
  var t$14 = var4;
  var t$15 = log2NumSlots;
  var t$16 = sk$Map$dtgetSlotSizeForLogTableSize(t$15);
  var t$17 = sk$Map$dtMapEntry.empty();
  var t$18 = t$14;
  t$18.slots = sk$Array.mfill(t$16, t$17);
  var t$19 = oldSlots;
  t$19.each(((entry) => 
  {
    var t$20 = entry;
    var t$21 = t$20.isEmpty();
    if (t$21.$bg().__value)
      {
        var t$22 = this;
        var t$23 = entry;
        var t$24 = t$23.hash;
        var t$25 = entry;
        var t$26 = t$25.unsafeKey();
        var t$27 = entry;
        var t$28 = t$27.unsafeValue();
        return t$22.setLoop(t$24, t$26, t$28);
      }
    else
      return sk.__.$void;
  }));
  var t$29 = this;
  var t$30 = t$29.sz;
  var t$31 = sz;
  if (t$30.$bg$eq(t$31).__value)
    {
      var t$32 = sz;
      var t$33 = new sk$String(('Map size changed during rehashing (')).$pl(t$32);
      var t$34 = t$33.$pl(new sk$String((' to ')));
      var t$35 = this;
      var t$36 = t$35.sz;
      var t$37 = t$34.$pl(t$36);
      var t$38 = t$37.$pl(new sk$String((') ')));
      var t$39 = t$38.$pl(new sk$String(('which probably indicates a mismatch between hash and ')));
      var t$40 = t$39.$pl(new sk$String(('equality methods, or an object\'s state changing after it ')));
      var t$41 = t$40.$pl(new sk$String(('was first inserted.')));
      return sk$invariant_violation(t$41);
    }
  else
    return sk.__.$void;
};

sk$Map.prototype.hash = function() {
  var acc = new sk$Int(0.0, 0.0);
  var t$ = this;
  t$.unsafeEach(((entry) => 
  {
    var t$1 = entry;
    var kh = t$1.hash;
    var t$2 = entry;
    var t$3 = t$2.unsafeValue();
    var vh = t$3.hash();
    var t$4 = kh;
    var t$5 = new sk$Int(64.0, 0.0).$mi(new sk$Int(6.0, 0.0));
    var lshift = t$4.ushr(t$5);
    var t$6 = lshift;
    var t$7 = t$6.negate();
    var rshift = t$7.and(new sk$Int(63.0, 0.0));
    var t$8 = vh;
    var t$9 = lshift;
    var vh1 = t$8.shl(t$9);
    var t$10 = vh;
    var t$11 = rshift;
    var vh2 = t$10.ushr(t$11);
    var t$12 = vh1;
    var t$13 = vh2;
    var vRotated = t$12.or(t$13);
    var t$14 = acc;
    var t$15 = kh;
    var t$16 = t$14.$pl(t$15);
    var t$17 = vRotated;
    acc = t$16.$pl(t$17);
    return sk.__.$void;
  }));
  return acc;
};

sk$Map.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.size();
  var items = sk$Vector.mcreate(t$1);
  var t$2 = this;
  t$2.unsafeEach(((entry) => 
  {
    var t$3 = items;
    var t$4 = entry;
    var t$5 = t$4.unsafeKey();
    var t$6 = sk$inspect(t$5);
    var t$7 = entry;
    var t$8 = t$7.unsafeValue();
    var t$9 = sk$inspect(t$8);
    var t$10 = new (sk$Tuple2)(t$6, t$9);
    return t$3.push(t$10);
  }));
  var t$11 = items;
  var t$12 = t$11.toArray();
  return new (sk$InspectMap)(new sk$String(('Map')), t$12);
};

sk$Map.prototype.inspectInternal = function() {
  var t$ = this;
  var t$1 = t$.table;
  var t$2 = t$1.items();
  var t$3 = t$2.map(((item) => 
  {
    var t$4 = item;
    var t$5 = t$4.i0;
    var t$6 = t$5.toString();
    var t$7 = item;
    var t$8 = t$7.i1;
    var t$9 = sk$inspect(t$8);
    return new (sk$Tuple2)(t$6, t$9);
  }));
  var t$10 = t$3.collect(sk$Array);
  var t$11 = new (sk$InspectObject)(new sk$String(('')), t$10);
  var t$12 = new (sk$Tuple2)(new sk$String(('table')), t$11);
  var t$13 = this;
  var t$14 = t$13.slots;
  var t$15 = t$14.items();
  var t$16 = t$15.map(((item1) => 
  {
    var t$17 = item1;
    var t$18 = t$17.i0;
    var t$19 = t$18.toString();
    var t$20 = item1;
    var t$21 = t$20.i1;
    var t$22 = sk$inspect(t$21);
    return new (sk$Tuple2)(t$19, t$22);
  }));
  var t$23 = t$16.collect(sk$Array);
  var t$24 = new (sk$InspectObject)(new sk$String(('')), t$23);
  var t$25 = new (sk$Tuple2)(new sk$String(('slots')), t$24);
  var t$26 = this;
  var t$27 = t$26.sz;
  var t$28 = sk$inspect(t$27);
  var t$29 = new (sk$Tuple2)(new sk$String(('sz')), t$28);
  var t$30 = this;
  var t$31 = t$30.used;
  var t$32 = sk$inspect(t$31);
  var t$33 = new (sk$Tuple2)(new sk$String(('used')), t$32);
  var t$34 = this;
  var t$35 = t$34.shift;
  var t$36 = sk$inspect(t$35);
  var t$37 = new (sk$Tuple2)(new sk$String(('shift')), t$36);
  var t$38 = this;
  var t$39 = t$38.generation_PRIVATE;
  var t$40 = sk$inspect(t$39);
  var t$41 = new (sk$Tuple2)(new sk$String(('generation')), t$40);
  var t$42 = new (sk$Array)([
    t$12,
    t$25,
    t$29,
    t$33,
    t$37,
    t$41
  ]);
  return new (sk$InspectObject)(new sk$String(('Map')), t$42);
};

sk$Map.prototype.invalidateIteratorTransaction = function(fn) {
  var t$ = this;
  t$.invalidateIterators();
  var t$1 = this;
  var generation = t$1.generation_PRIVATE;
  var t$2 = fn;
  t$2();
  var $var = this;
  var t$3 = $var;
  var t$4 = t$3;
  t$4.generation_PRIVATE = generation;
  return sk.__.$void;
};

sk$Map.prototype.invalidateIterators = function() {
  var $var = this;
  var t$ = $var;
  var t$1 = this;
  var t$2 = t$1.generation_PRIVATE;
  var t$3 = t$;
  t$3.generation_PRIVATE = t$2.$pl((sk$Map$dtgenerationSkip()));
  return sk.__.$void;
};

sk$Map.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Map.prototype.items = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = this;
  var t$4 = t$3.used;
  var t$5 = this;
  var t$6 = t$5.slots;
  var t$7 = this;
  var t$8 = t$7.generation_PRIVATE;
  var t$9 = t$8.negate();
  return new (sk$Map$dtMapItemsIterator)(t$, t$2, t$4, t$6, t$9);
};

sk$Map.prototype.iterator = function() {
  var t$ = this;
  return t$.items();
};

sk$Map.prototype.joinKeys = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((k, _) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = k;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$Map.prototype.joinValues = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((_, v) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = v;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$Map.prototype.keys = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = this;
  var t$4 = t$3.used;
  var t$5 = this;
  var t$6 = t$5.slots;
  var t$7 = this;
  var t$8 = t$7.generation_PRIVATE;
  var t$9 = t$8.negate();
  return new (sk$Map$dtMapKeysIterator)(t$, t$2, t$4, t$6, t$9);
};

sk$Map.prototype.lastEntry = function() {
  var t$ = this;
  var t$1 = t$.slots;
  var t$2 = t$1.reversedValues();
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg7906:{
      break$bg7906:{
        dowhile_else$bg7905:{
          do
            {
              jumpBlockOuterdowhile_cond$bg7907:{
                dowhile_cond$bg7907:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var entry;
                    {
                      jumpBlockOuterjumpLab$bg7920:{
                        jumpLab$bg7920:{
                          jumpLab$bg7919:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg7919;
                              
                              case 205:
                                entry = var2.value;
                                break jumpLab$bg7920;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg7907;
                          }
                        }
                        {
                          var t$4 = entry;
                          var t$5 = t$4.isEmpty();
                          if (t$5.$bg().__value)
                            {
                              var t$6 = entry;
                              var t$7 = t$6.unsafeKey();
                              var t$8 = entry;
                              var t$9 = t$8.unsafeValue();
                              var t$10 = new (sk$Tuple2)(t$7, t$9);
                              break_val = new (sk$Some)(t$10);
                              break break$bg7906;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg7920;
                      }
                    }
                    break dowhile_cond$bg7907;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg7905;
                break jumpBlockOuterdowhile_cond$bg7907;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg7906;
      }
      {}
      break jumpBlockOuterbreak$bg7906;
    }
  }
  return break_val;
};

sk$Map.prototype.lastItem = function() {
  var t$ = this;
  var t$1 = t$.lastEntry();
  return t$1.fromSome(undefined);
};

sk$Map.prototype.map = function(f) {
  var t$ = this;
  var t$1 = t$.generation_PRIVATE;
  var indexMinusGeneration = t$1.negate();
  var t$2 = this;
  var used = t$2.used;
  var t$3 = this;
  var oldSlots = t$3.slots;
  var t$4 = oldSlots;
  var t$5 = t$4.size();
  var slots = sk$Unsafe$dtarray_make(t$5);
  var break_val;
  {
    jumpBlockOuterbreak$bg7933:{
      break$bg7933:{
        do
          {
            jumpBlockOutercontinue$bg7934:{
              continue$bg7934:{
                {
                  var t$6 = indexMinusGeneration;
                  var t$7 = this;
                  var t$8 = t$7.generation_PRIVATE;
                  var index = t$6.$pl(t$8);
                  var t$9 = index;
                  var t$10 = used;
                  var t$11;
                  if (t$9.uge(t$10).__value)
                    {
                      var t$12 = index;
                      var t$13;
                      if (t$12.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                        t$13 = sk$throwContainerChanged();
                      else
                        t$13 = sk.__.$void;
                      break_val = sk.__.$void;
                      break break$bg7933;
                    }
                  else
                    t$11 = sk.__.$void;
                  var t$14 = indexMinusGeneration;
                  indexMinusGeneration = t$14.$pl(new sk$Int(1.0, 0.0));
                  var t$15 = oldSlots;
                  var t$16 = index;
                  var entry = sk$Unsafe$dtarray_get(t$15, t$16);
                  var t$17 = entry;
                  var t$18;
                  if (t$17.isEmpty().__value)
                    t$18 = sk$Map$dtMapEntry.empty();
                  else
                    {
                      var t$19 = entry;
                      var k = t$19.unsafeKey();
                      var t$20 = entry;
                      var v = t$20.unsafeValue();
                      var t$21 = f;
                      var t$22 = k;
                      var t$23 = v;
                      var v2 = t$21(t$22, t$23);
                      var t$24 = entry;
                      var t$25 = t$24.hash;
                      var t$26 = k;
                      var t$27 = v2;
                      t$18 = sk$Map$dtMapEntry.create(t$25, t$26, t$27);
                    }
                  var nextEntry = t$18;
                  var t$28 = slots;
                  var t$29 = index;
                  var t$30 = nextEntry;
                  sk$Unsafe$dtarray_set(t$28, t$29, t$30);
                }
              }
              {}
              break jumpBlockOutercontinue$bg7934;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg7933;
    }
  }
  var t$31 = this;
  var t$32 = t$31.table;
  var t$33 = t$32.chill();
  var t$34 = slots;
  var t$35 = t$34;
  var t$36 = this;
  var t$37 = t$36.shift;
  var t$38 = this;
  var t$39 = t$38.sz;
  var t$40 = this;
  var t$41 = t$40.used;
  return new (sk$Map)(t$33, t$35, t$37, t$39, t$41, new sk$Int(0.0, 0.0));
};

sk$Map.prototype.mapItems = function(s) {
  var t$ = this;
  var t$1 = t$.sz;
  var result = sk$Map.mcreate(t$1);
  var t$2 = this;
  t$2.eachWhileImpl(((entry) => 
  {
    var t$3 = s;
    var t$4 = entry;
    var t$5 = t$4.unsafeKey();
    var t$6 = entry;
    var t$7 = t$6.unsafeValue();
    var $var = t$3(t$5, t$7);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg7991:{
        jumpLab$bg7991:{
          switch ($var.__type_switch_id) {
            case 392:
              var1 = $var.i0;
              var2 = $var.i1;
              break jumpLab$bg7991;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v2 = var2;
          var k2 = var1;
          var t$8 = k2;
          var t$9 = t$8.hash();
          var h = sk$Map$dtfinalizeHash(t$9);
          var t$10 = result;
          var t$11 = h;
          var t$12 = k2;
          var t$13 = v2;
          t$10.setLoop(t$11, t$12, t$13);
          return new sk$Bool((true));
        }
      }
    }
  }));
  var t$14 = result;
  return t$14;
};

sk$Map.prototype.maybeAddLoop = function(h, k, v) {
  var t$ = this;
  var table = t$.table;
  var t$1 = this;
  var slots = t$1.slots;
  var t$2 = this;
  var shift = t$2.shift;
  var t$3 = h;
  var t$4 = shift;
  var tableIndex = t$3.ushr(t$4);
  var t$5 = this;
  var slotsIndex = t$5.used;
  var break_val;
  {
    jumpBlockOuterbreak$bg8000:{
      break$bg8000:{
        do
          {
            jumpBlockOutercontinue$bg8001:{
              continue$bg8001:{
                {
                  var t$6 = table;
                  var t$7 = tableIndex;
                  var entryIndex = sk$Map$dtunsafeGet(t$6, t$7);
                  var t$8 = entryIndex;
                  var t$9;
                  if (t$8.isEmpty().__value)
                    {
                      var t$10 = this;
                      t$10.invalidateIterators();
                      var $var = this;
                      var t$11 = $var;
                      var t$12 = this;
                      var t$13 = t$12.sz;
                      var t$14 = t$11;
                      t$14.sz = t$13.$pl(new sk$Int(1.0, 0.0));
                      var var1 = this;
                      var t$15 = var1;
                      var t$16 = this;
                      var t$17 = t$16.used;
                      var t$18 = t$15;
                      t$18.used = t$17.$pl(new sk$Int(1.0, 0.0));
                      var t$19 = slots;
                      var t$20 = slotsIndex;
                      var t$21 = h;
                      var t$22 = k;
                      var t$23 = v;
                      var t$24 = sk$Map$dtMapEntry.create(t$21, t$22, t$23);
                      sk$Map$dtunsafeSet(t$19, t$20, t$24);
                      var t$25 = table;
                      var t$26 = tableIndex;
                      var t$27 = slotsIndex;
                      var t$28 = sk$Map$dtMapIndex.create(t$27);
                      sk$Map$dtunsafeSet(t$25, t$26, t$28);
                      break_val = new sk$Bool((true));
                      break break$bg8000;
                    }
                  else
                    {
                      var t$29 = slots;
                      var t$30 = entryIndex;
                      var t$31 = t$30.index;
                      var t$32 = t$31.toInt();
                      var entry = sk$Map$dtunsafeGet(t$29, t$32);
                      var t$33 = h;
                      var t$34 = entry;
                      var t$35 = t$34.hash;
                      var delta = t$33.$mi(t$35);
                      var t$36 = delta;
                      var t$37;
                      if (t$36.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                        {
                          var t$38 = k;
                          var t$39 = entry;
                          var t$40 = t$39.unsafeKey();
                          var t$41;
                          if (t$38.$eq$eq(t$40).__value)
                            {
                              break_val = new sk$Bool((false));
                              break break$bg8000;
                            }
                          else
                            t$41 = sk.__.$void;
                          t$37 = t$41;
                        }
                      else
                        {
                          var t$42 = delta;
                          var t$43;
                          if (t$42.$lt(new sk$Int(0.0, 0.0)).__value)
                            {
                              var t$44 = slots;
                              var t$45 = slotsIndex;
                              var t$46 = h;
                              var t$47 = k;
                              var t$48 = v;
                              var t$49 = sk$Map$dtMapEntry.create(t$46, t$47, t$48);
                              sk$Map$dtunsafeSet(t$44, t$45, t$49);
                              var t$50 = table;
                              var t$51 = tableIndex;
                              var t$52 = slotsIndex;
                              var t$53 = sk$Map$dtMapIndex.create(t$52);
                              sk$Map$dtunsafeSet(t$50, t$51, t$53);
                              var t$54 = entryIndex;
                              var t$55 = t$54.index;
                              slotsIndex = t$55.toInt();
                              var t$56 = entry;
                              h = t$56.hash;
                              var t$57 = entry;
                              k = t$57.unsafeKey();
                              var t$58 = entry;
                              v = t$58.unsafeValue();
                              t$43 = sk.__.$void;
                            }
                          else
                            t$43 = sk.__.$void;
                          t$37 = t$43;
                        }
                      var t$59 = tableIndex;
                      var t$60 = t$59.$pl(new sk$Int(1.0, 0.0));
                      var t$61 = table;
                      var t$62 = t$61.size();
                      var t$63 = t$62.$mi(new sk$Int(1.0, 0.0));
                      tableIndex = t$60.and(t$63);
                      t$9 = sk.__.$void;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8001;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8000;
    }
  }
  return break_val;
};

sk$Map.prototype.maybeFirstItem = function() {
  var t$ = this;
  return t$.firstEntry();
};

sk$Map.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var p;
  {
    jumpBlockOuterjumpLab$bg8072:{
      jumpLab$bg8072:{
        jumpLab$bg8071:{
          switch ($var.__type_switch_id) {
            case 205:
              p = $var.value;
              break jumpLab$bg8071;
            
            case 204:
              break jumpLab$bg8072;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = p;
          var t$3 = t$2.i1;
          return new (sk$Some)(t$3);
        }
      }
      return singleton$None;
    }
  }
};

sk$Map.prototype.maybeGetItem = function(k) {
  var t$ = k;
  var t$1 = t$.hash();
  var h = sk$Map$dtfinalizeHash(t$1);
  var t$2 = this;
  var t$3 = h;
  var t$4 = k;
  return t$2.maybeGetItemLoop(t$3, t$4);
};

sk$Map.prototype.maybeGetItemLoop = function(h, k) {
  var t$ = this;
  var table = t$.table;
  var t$1 = this;
  var slots = t$1.slots;
  var t$2 = h;
  var t$3 = this;
  var t$4 = t$3.shift;
  var tableIndex = t$2.ushr(t$4);
  var break_val;
  {
    jumpBlockOuterbreak$bg8087:{
      break$bg8087:{
        do
          {
            jumpBlockOutercontinue$bg8088:{
              continue$bg8088:{
                {
                  var t$5 = table;
                  var t$6 = tableIndex;
                  var entryIndex = sk$Map$dtunsafeGet(t$5, t$6);
                  var t$7 = entryIndex;
                  var t$8 = t$7.isEmpty();
                  var t$9;
                  if (t$8.$bg().__value)
                    {
                      var t$10 = slots;
                      var t$11 = entryIndex;
                      var t$12 = t$11.index;
                      var t$13 = t$12.toInt();
                      var entry = sk$Map$dtunsafeGet(t$10, t$13);
                      var t$14 = h;
                      var t$15 = entry;
                      var t$16 = t$15.hash;
                      var delta = t$14.$mi(t$16);
                      var t$17 = delta;
                      var t$18;
                      if (t$17.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                        {
                          var t$19 = k;
                          var t$20 = entry;
                          var t$21 = t$20.unsafeKey();
                          var t$22;
                          if (t$19.$eq$eq(t$21).__value)
                            {
                              var t$23 = entry;
                              var t$24 = t$23.unsafeKey();
                              var t$25 = entry;
                              var t$26 = t$25.unsafeValue();
                              var t$27 = new (sk$Tuple2)(t$24, t$26);
                              break_val = new (sk$Some)(t$27);
                              break break$bg8087;
                            }
                          else
                            t$22 = sk.__.$void;
                          t$18 = t$22;
                        }
                      else
                        {
                          var t$28 = delta;
                          var t$29;
                          if (t$28.$lt(new sk$Int(0.0, 0.0)).__value)
                            {
                              break_val = singleton$None;
                              break break$bg8087;
                            }
                          else
                            t$29 = sk.__.$void;
                          t$18 = t$29;
                        }
                      var t$30 = tableIndex;
                      var t$31 = t$30.$pl(new sk$Int(1.0, 0.0));
                      var t$32 = table;
                      var t$33 = t$32.size();
                      var t$34 = t$33.$mi(new sk$Int(1.0, 0.0));
                      tableIndex = t$31.and(t$34);
                      t$9 = sk.__.$void;
                    }
                  else
                    {
                      break_val = singleton$None;
                      break break$bg8087;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8088;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8087;
    }
  }
  return break_val;
};

sk$Map.prototype.maybeLastItem = function() {
  var t$ = this;
  return t$.lastEntry();
};

sk$Map.prototype.maybeRemove = function(k) {
  var t$ = k;
  var t$1 = t$.hash();
  var h = sk$Map$dtfinalizeHash(t$1);
  var t$2 = this;
  var t$3 = h;
  var t$4 = k;
  return t$2.maybeRemoveLoop(t$3, t$4);
};

sk$Map.prototype.maybeRemoveLoop = function(h, k) {
  var t$ = this;
  var table = t$.table;
  var t$1 = this;
  var slots = t$1.slots;
  var t$2 = this;
  var shift = t$2.shift;
  var t$3 = h;
  var t$4 = shift;
  var tableIndex = t$3.ushr(t$4);
  var break_val;
  {
    jumpBlockOuterbreak$bg8136:{
      break$bg8136:{
        do
          {
            jumpBlockOutercontinue$bg8137:{
              continue$bg8137:{
                {
                  var t$5 = table;
                  var t$6 = tableIndex;
                  var entryIndex = sk$Map$dtunsafeGet(t$5, t$6);
                  var t$7 = entryIndex;
                  var t$8;
                  if (t$7.isEmpty().__value)
                    {
                      break_val = new sk$Bool((false));
                      break break$bg8136;
                    }
                  else
                    {
                      var t$9 = slots;
                      var t$10 = entryIndex;
                      var t$11 = t$10.index;
                      var t$12 = t$11.toInt();
                      var entry = sk$Map$dtunsafeGet(t$9, t$12);
                      var t$13 = h;
                      var t$14 = entry;
                      var t$15 = t$14.hash;
                      var delta = t$13.$mi(t$15);
                      var t$16 = delta;
                      var t$17;
                      if (t$16.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                        {
                          var t$18 = k;
                          var t$19 = entry;
                          var t$20 = t$19.unsafeKey();
                          var t$21;
                          if (t$18.$eq$eq(t$20).__value)
                            {
                              var t$22 = this;
                              t$22.invalidateIterators();
                              var $var = this;
                              var t$23 = $var;
                              var t$24 = this;
                              var t$25 = t$24.sz;
                              var t$26 = t$23;
                              t$26.sz = t$25.$mi(new sk$Int(1.0, 0.0));
                              var t$27 = slots;
                              var t$28 = entryIndex;
                              var t$29 = t$28.index;
                              var t$30 = t$29.toInt();
                              var t$31 = sk$Map$dtMapEntry.empty();
                              sk$Map$dtunsafeSet(t$27, t$30, t$31);
                              var t$32 = this;
                              var t$33 = tableIndex;
                              t$32.slideOver(t$33);
                              break_val = new sk$Bool((true));
                              break break$bg8136;
                            }
                          else
                            t$21 = sk.__.$void;
                          t$17 = t$21;
                        }
                      else
                        {
                          var t$34 = delta;
                          var t$35;
                          if (t$34.$lt(new sk$Int(0.0, 0.0)).__value)
                            {
                              break_val = new sk$Bool((false));
                              break break$bg8136;
                            }
                          else
                            t$35 = sk.__.$void;
                          t$17 = t$35;
                        }
                      var t$36 = tableIndex;
                      var t$37 = t$36.$pl(new sk$Int(1.0, 0.0));
                      var t$38 = table;
                      var t$39 = t$38.size();
                      var t$40 = t$39.$mi(new sk$Int(1.0, 0.0));
                      tableIndex = t$37.and(t$40);
                      t$8 = sk.__.$void;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8137;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8136;
    }
  }
  return break_val;
};

sk$Map.prototype.maybeSet = function(k, v) {
  var t$ = this;
  t$.rehashIfFull();
  var t$1 = k;
  var t$2 = t$1.hash();
  var h = sk$Map$dtfinalizeHash(t$2);
  var t$3 = this;
  var t$4 = h;
  var t$5 = k;
  var t$6 = v;
  return t$3.maybeAddLoop(t$4, t$5, t$6);
};

sk$Map.mcreate = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = capacity;
  var log2NumSlots = sk$Map$dtgetLogSlotSizeForCapacity(t$);
  var t$1 = log2NumSlots;
  var shift = sk$Map$dtgetShiftForLogTableSize(t$1);
  var t$2 = log2NumSlots;
  var t$3 = new sk$Int(1.0, 0.0).shl(t$2);
  var t$4 = sk$Map$dtMapIndex.empty();
  var table = sk$Array.mfill(t$3, t$4);
  var t$5 = log2NumSlots;
  var t$6 = sk$Map$dtgetSlotSizeForLogTableSize(t$5);
  var t$7 = sk$Map$dtMapEntry.empty();
  var slots = sk$Array.mfill(t$6, t$7);
  var t$8 = table;
  var t$9 = slots;
  var t$10 = shift;
  return new (sk$Map)(t$8, t$9, t$10, new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
};

sk$Map.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = this;
      return t$3.mcreate(new sk$Int(4294967295.0, 4294967295.0));
    }
  else
    {
      var t$4 = this;
      var t$5 = size;
      var map = t$4.mcreate(t$5);
      var t$6 = items;
      var t$7 = t$6;
      var $var = t$7.values();
      var var1 = new sk$Bool((true));
      {
        jumpBlockOuterbreak$bg8208:{
          break$bg8208:{
            dowhile_else$bg8207:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg8209:{
                    dowhile_cond$bg8209:{
                      {
                        var t$8 = $var;
                        var var2 = t$8.next();
                        var key;
                        var value;
                        {
                          jumpBlockOuterjumpLab$bg8218:{
                            jumpLab$bg8218:{
                              jumpLab$bg8217:{
                                jumpLab$bg8219:{
                                  switch (var2.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg8217;
                                    
                                    case 205:
                                      break jumpLab$bg8219;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch (var2.value.__type_switch_id) {
                                  case 392:
                                    key = var2.value.i0;
                                    value = var2.value.i1;
                                    break jumpLab$bg8218;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg8209;
                              }
                            }
                            {
                              var t$9 = map;
                              var t$10 = key;
                              var t$11 = value;
                              t$9.set(t$10, t$11);
                            }
                            break jumpBlockOuterjumpLab$bg8218;
                          }
                        }
                        break dowhile_cond$bg8209;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg8207;
                    break jumpBlockOuterdowhile_cond$bg8209;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg8208;
          }
          {}
          break jumpBlockOuterbreak$bg8208;
        }
      }
      return map;
    }
};

sk$Map.mcreateFromIterator = function(iterator) {
  var t$ = this;
  var t$1 = iterator;
  var t$2 = t$1;
  var t$3 = t$2.sizeHint();
  var t$4 = t$3.$default(new sk$Int(0.0, 0.0));
  var map = t$.mcreate(t$4);
  var t$5 = iterator;
  var t$6 = t$5;
  var $var = t$6.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg8231:{
      break$bg8231:{
        dowhile_else$bg8230:{
          do
            {
              jumpBlockOuterdowhile_cond$bg8232:{
                dowhile_cond$bg8232:{
                  {
                    var t$7 = $var;
                    var var2 = t$7.next();
                    var key;
                    var value;
                    {
                      jumpBlockOuterjumpLab$bg8241:{
                        jumpLab$bg8241:{
                          jumpLab$bg8240:{
                            jumpLab$bg8242:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg8240;
                                
                                case 205:
                                  break jumpLab$bg8242;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                key = var2.value.i0;
                                value = var2.value.i1;
                                break jumpLab$bg8241;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg8232;
                          }
                        }
                        {
                          var t$8 = map;
                          var t$9 = key;
                          var t$10 = value;
                          t$8.set(t$9, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg8241;
                      }
                    }
                    break dowhile_cond$bg8232;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg8230;
                break jumpBlockOuterdowhile_cond$bg8232;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg8231;
      }
      {}
      break jumpBlockOuterbreak$bg8231;
    }
  }
  return map;
};

sk$Map.meta = function(keyClass, valueClass) {
  var t$ = keyClass;
  var t$1 = valueClass;
  return new (sk$MapMetaClass)(t$, t$1);
};

sk$Map.prototype.perturb = function(rng) {
  var t$ = this;
  var $var = t$.items();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg8251:{
      break$bg8251:{
        dowhile_else$bg8250:{
          do
            {
              jumpBlockOuterdowhile_cond$bg8252:{
                dowhile_cond$bg8252:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var k;
                    var v;
                    {
                      jumpBlockOuterjumpLab$bg8262:{
                        jumpLab$bg8262:{
                          jumpLab$bg8261:{
                            jumpLab$bg8263:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg8261;
                                
                                case 205:
                                  break jumpLab$bg8263;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                k = var2.value.i0;
                                v = var2.value.i1;
                                break jumpLab$bg8262;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg8252;
                          }
                        }
                        {
                          var t$2 = k;
                          var t$3 = rng;
                          t$2.perturb(t$3);
                          var t$4 = v;
                          var t$5 = rng;
                          t$4.perturb(t$5);
                        }
                        break jumpBlockOuterjumpLab$bg8262;
                      }
                    }
                    break dowhile_cond$bg8252;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg8250;
                break jumpBlockOuterdowhile_cond$bg8252;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg8251;
      }
      {}
      break jumpBlockOuterbreak$bg8251;
    }
  }
  return break_val;
};

sk$Map.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((k, v) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = k;
    var t$4 = v;
    result = t$1(t$2, t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$Map.prototype.rehashIfFull = function() {
  var t$ = this;
  var used = t$.used;
  var t$1 = used;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var t$3 = this;
  var t$4 = t$3.shift;
  var t$5 = t$2.shl(t$4);
  var mayNeedRehash = t$5.$lt(new sk$Int(0.0, 0.0));
  if (mayNeedRehash.__value)
    {
      var t$6 = this;
      var size = t$6.sz;
      var t$7 = size;
      var t$8 = t$7.$pl(new sk$Int(1.0, 0.0));
      if (t$8.$eq$eq((sk$Map$dtemptyIndex())).__value)
        {
          var t$9 = new sk$String(('Map: maximum capacity exceeded')).toString();
          var t$10 = t$9;
          sk$invariant_violation(t$10);
        }
      else
        {}
      var t$11 = this;
      return t$11.invalidateIteratorTransaction((() => 
      {
        var t$12 = used;
        var t$13 = size;
        var t$14;
        if (t$12.$eq$eq(t$13).__value)
          t$14 = new sk$Bool((true));
        else
          {
            var t$15 = size;
            var t$16 = t$15.$ti(new sk$Int(2.0, 0.0));
            var t$17 = used;
            t$14 = t$16.$gt(t$17);
          }
        if (t$14.__value)
          {
            var t$18 = this;
            var t$19 = t$18.table;
            var t$20 = t$19.size();
            var t$21 = t$20.$pl(new sk$Int(1.0, 0.0));
            var log2NumSlots = sk$Map$dtgetLogSlotSizeForCapacity(t$21);
            var t$22 = this;
            var t$23 = log2NumSlots;
            return t$22.growCapacity(t$23);
          }
        else
          {
            var t$24 = this;
            return t$24.reorderEntries();
          }
      }));
    }
  else
    return sk.__.$void;
};

sk$Map.prototype.remove = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeRemove(t$1);
  if (t$2.$bg().__value)
    return sk$throwKeyNotFound();
  else
    return sk.__.$void;
};

sk$Map.prototype.reorderEntries = function() {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var table = t$1.table;
  var t$2 = this;
  var used = t$2.used;
  var t$3 = this;
  var shift = t$3.shift;
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg8310:{
      break$bg8310:{
        while_else$bg8309:{
          do
            {
              jumpBlockOutercontinue$bg8311:{
                continue$bg8311:{
                  {
                    var t$4 = fromIndex;
                    var t$5 = used;
                    if (t$4.$lt(t$5).__value)
                      {
                        var t$6 = slots;
                        var t$7 = fromIndex;
                        var entry = sk$Map$dtunsafeGet(t$6, t$7);
                        var t$8 = entry;
                        var t$9 = t$8.isEmpty();
                        var t$10;
                        if (t$9.$bg().__value)
                          {
                            var t$11 = fromIndex;
                            var t$12 = toIndex;
                            var t$13;
                            if (t$11.$bg$eq(t$12).__value)
                              {
                                var t$14 = slots;
                                var t$15 = toIndex;
                                var t$16 = entry;
                                sk$Map$dtunsafeSet(t$14, t$15, t$16);
                                var t$17 = slots;
                                var t$18 = fromIndex;
                                var t$19 = sk$Map$dtMapEntry.empty();
                                sk$Map$dtunsafeSet(t$17, t$18, t$19);
                                var t$20 = entry;
                                var t$21 = t$20.hash;
                                var t$22 = shift;
                                var tableIndex = t$21.ushr(t$22);
                                var break_val;
                                {
                                  jumpBlockOuterbreak$bg8334:{
                                    break$bg8334:{
                                      do
                                        {
                                          jumpBlockOutercontinue$bg8335:{
                                            continue$bg8335:{
                                              {
                                                var t$23 = table;
                                                var t$24 = tableIndex;
                                                var entryIndex = sk$Map$dtunsafeGet(t$23, t$24);
                                                var t$25 = entryIndex;
                                                var t$26 = t$25.index;
                                                var t$27 = fromIndex;
                                                var t$28;
                                                if (t$26.$eq$eq(t$27).__value)
                                                  {
                                                    var t$29 = table;
                                                    var t$30 = tableIndex;
                                                    var t$31 = toIndex;
                                                    var t$32 = sk$Map$dtMapIndex.create(t$31);
                                                    sk$Map$dtunsafeSet(t$29, t$30, t$32);
                                                    break_val = sk.__.$void;
                                                    break break$bg8334;
                                                  }
                                                else
                                                  {
                                                    var t$33 = tableIndex;
                                                    var t$34 = t$33.$pl(new sk$Int(1.0, 0.0));
                                                    var t$35 = table;
                                                    var t$36 = t$35.size();
                                                    var t$37 = t$36.$mi(new sk$Int(1.0, 0.0));
                                                    tableIndex = t$34.and(t$37);
                                                    t$28 = sk.__.$void;
                                                  }
                                              }
                                            }
                                            {}
                                            break jumpBlockOutercontinue$bg8335;
                                          }
                                        }
                                      while (true);
                                    }
                                    {}
                                    break jumpBlockOuterbreak$bg8334;
                                  }
                                }
                                t$13 = break_val;
                              }
                            else
                              t$13 = sk.__.$void;
                            var t$38 = toIndex;
                            toIndex = t$38.$pl(new sk$Int(1.0, 0.0));
                            t$10 = sk.__.$void;
                          }
                        else
                          t$10 = sk.__.$void;
                        var t$39 = fromIndex;
                        fromIndex = t$39.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg8309;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg8311;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg8310;
      }
      {}
      break jumpBlockOuterbreak$bg8310;
    }
  }
  var $var = this;
  var t$40 = $var;
  var t$41 = this;
  var t$42 = t$40;
  t$42.used = t$41.sz;
  return sk.__.$void;
};

sk$Map.prototype.set = function(k, v) {
  var t$ = this;
  t$.rehashIfFull();
  var t$1 = k;
  var t$2 = t$1.hash();
  var h = sk$Map$dtfinalizeHash(t$2);
  var t$3 = this;
  var t$4 = h;
  var t$5 = k;
  var t$6 = v;
  return t$3.setLoop(t$4, t$5, t$6);
};

sk$Map.prototype.setLoop = function(h, k, v) {
  var t$ = this;
  var table = t$.table;
  var t$1 = this;
  var slots = t$1.slots;
  var t$2 = this;
  var shift = t$2.shift;
  var t$3 = h;
  var t$4 = shift;
  var tableIndex = t$3.ushr(t$4);
  var t$5 = this;
  var slotsIndex = t$5.used;
  var break_val;
  {
    jumpBlockOuterbreak$bg8374:{
      break$bg8374:{
        do
          {
            jumpBlockOutercontinue$bg8375:{
              continue$bg8375:{
                {
                  var t$6 = table;
                  var t$7 = tableIndex;
                  var entryIndex = sk$Map$dtunsafeGet(t$6, t$7);
                  var t$8 = entryIndex;
                  var t$9;
                  if (t$8.isEmpty().__value)
                    {
                      var t$10 = this;
                      t$10.invalidateIterators();
                      var $var = this;
                      var t$11 = $var;
                      var t$12 = this;
                      var t$13 = t$12.sz;
                      var t$14 = t$11;
                      t$14.sz = t$13.$pl(new sk$Int(1.0, 0.0));
                      var var1 = this;
                      var t$15 = var1;
                      var t$16 = this;
                      var t$17 = t$16.used;
                      var t$18 = t$15;
                      t$18.used = t$17.$pl(new sk$Int(1.0, 0.0));
                      var t$19 = slots;
                      var t$20 = slotsIndex;
                      var t$21 = h;
                      var t$22 = k;
                      var t$23 = v;
                      var t$24 = sk$Map$dtMapEntry.create(t$21, t$22, t$23);
                      sk$Map$dtunsafeSet(t$19, t$20, t$24);
                      var t$25 = table;
                      var t$26 = tableIndex;
                      var t$27 = slotsIndex;
                      var t$28 = sk$Map$dtMapIndex.create(t$27);
                      sk$Map$dtunsafeSet(t$25, t$26, t$28);
                      break_val = sk.__.$void;
                      break break$bg8374;
                    }
                  else
                    {
                      var t$29 = slots;
                      var t$30 = entryIndex;
                      var t$31 = t$30.index;
                      var t$32 = t$31.toInt();
                      var entry = sk$Map$dtunsafeGet(t$29, t$32);
                      var t$33 = h;
                      var t$34 = entry;
                      var t$35 = t$34.hash;
                      var delta = t$33.$mi(t$35);
                      var t$36 = delta;
                      var t$37;
                      if (t$36.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                        {
                          var t$38 = k;
                          var t$39 = entry;
                          var t$40 = t$39.unsafeKey();
                          var t$41;
                          if (t$38.$eq$eq(t$40).__value)
                            {
                              var t$42 = slots;
                              var t$43 = entryIndex;
                              var t$44 = t$43.index;
                              var t$45 = t$44.toInt();
                              var t$46 = h;
                              var t$47 = entry;
                              var t$48 = t$47.unsafeKey();
                              var t$49 = v;
                              var t$50 = sk$Map$dtMapEntry.create(t$46, t$48, t$49);
                              sk$Map$dtunsafeSet(t$42, t$45, t$50);
                              break_val = sk.__.$void;
                              break break$bg8374;
                            }
                          else
                            t$41 = sk.__.$void;
                          t$37 = t$41;
                        }
                      else
                        {
                          var t$51 = delta;
                          var t$52;
                          if (t$51.$lt(new sk$Int(0.0, 0.0)).__value)
                            {
                              var t$53 = slots;
                              var t$54 = slotsIndex;
                              var t$55 = h;
                              var t$56 = k;
                              var t$57 = v;
                              var t$58 = sk$Map$dtMapEntry.create(t$55, t$56, t$57);
                              sk$Map$dtunsafeSet(t$53, t$54, t$58);
                              var t$59 = table;
                              var t$60 = tableIndex;
                              var t$61 = slotsIndex;
                              var t$62 = sk$Map$dtMapIndex.create(t$61);
                              sk$Map$dtunsafeSet(t$59, t$60, t$62);
                              var t$63 = entryIndex;
                              var t$64 = t$63.index;
                              slotsIndex = t$64.toInt();
                              var t$65 = entry;
                              h = t$65.hash;
                              var t$66 = entry;
                              k = t$66.unsafeKey();
                              var t$67 = entry;
                              v = t$67.unsafeValue();
                              t$52 = sk.__.$void;
                            }
                          else
                            t$52 = sk.__.$void;
                          t$37 = t$52;
                        }
                      var t$68 = tableIndex;
                      var t$69 = t$68.$pl(new sk$Int(1.0, 0.0));
                      var t$70 = table;
                      var t$71 = t$70.size();
                      var t$72 = t$71.$mi(new sk$Int(1.0, 0.0));
                      tableIndex = t$69.and(t$72);
                      t$9 = sk.__.$void;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8375;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8374;
    }
  }
  return break_val;
};

sk$Map.prototype.setWith = function(k, v, collision) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGet(t$1);
  var v2;
  {
    jumpBlockOuterjumpLab$bg8460:{
      jumpLab$bg8460:{
        jumpLab$bg8459:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg8459;
            
            case 205:
              v2 = $var.value;
              break jumpLab$bg8460;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = this;
          var t$3 = k;
          var t$4 = v;
          return t$2.set(t$3, t$4);
        }
      }
      {
        var t$5 = this;
        var t$6 = k;
        var t$7 = collision;
        var t$8 = v;
        var t$9 = v2;
        var t$10 = t$7(t$8, t$9);
        return t$5.set(t$6, t$10);
      }
    }
  }
};

sk$Map.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    var t$1 = t$.isEmpty();
    if (t$1.$bg().__value)
      yield new sk$Some(sk$Map.createFromItems(new (sk$Array)([])));
    else
      {}
    return undefined;
  });
};

sk$Map.prototype.size = function() {
  var t$ = this;
  return t$.sz;
};

sk$Map.prototype.slideOver = function(tableIndex) {
  var t$ = this;
  var table = t$.table;
  var t$1 = this;
  var slots = t$1.slots;
  var t$2 = this;
  var shift = t$2.shift;
  var break_val;
  {
    jumpBlockOuterbreak$bg8472:{
      break$bg8472:{
        do
          {
            jumpBlockOutercontinue$bg8473:{
              continue$bg8473:{
                {
                  var t$3 = tableIndex;
                  var t$4 = t$3.$pl(new sk$Int(1.0, 0.0));
                  var t$5 = table;
                  var t$6 = t$5.size();
                  var t$7 = t$6.$mi(new sk$Int(1.0, 0.0));
                  var nextTableIndex = t$4.and(t$7);
                  var t$8 = table;
                  var t$9 = nextTableIndex;
                  var nextEntryIndex = sk$Map$dtunsafeGet(t$8, t$9);
                  var t$10 = nextEntryIndex;
                  var t$11;
                  if (t$10.isEmpty().__value)
                    t$11 = new sk$Bool((true));
                  else
                    {
                      var t$12 = slots;
                      var t$13 = nextEntryIndex;
                      var t$14 = t$13.index;
                      var t$15 = t$14.toInt();
                      var nextEntry = sk$Map$dtunsafeGet(t$12, t$15);
                      var t$16 = nextEntry;
                      var t$17 = t$16.hash;
                      var t$18 = shift;
                      var t$19 = t$17.ushr(t$18);
                      var t$20 = nextTableIndex;
                      t$11 = t$19.$eq$eq(t$20);
                    }
                  var t$21;
                  if (t$11.__value)
                    {
                      var t$22 = table;
                      var t$23 = tableIndex;
                      var t$24 = sk$Map$dtMapIndex.empty();
                      sk$Map$dtunsafeSet(t$22, t$23, t$24);
                      break_val = sk.__.$void;
                      break break$bg8472;
                    }
                  else
                    {
                      var t$25 = table;
                      var t$26 = tableIndex;
                      var t$27 = nextEntryIndex;
                      sk$Map$dtunsafeSet(t$25, t$26, t$27);
                      tableIndex = nextTableIndex;
                      t$21 = sk.__.$void;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg8473;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg8472;
    }
  }
  return break_val;
};

sk$Map.prototype.toString = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new sk$String(('Map{}'));
  else
    {
      var t$1 = this;
      var t$2 = t$1.size();
      var buf = sk$Array.mfill(t$2, new sk$String(('')));
      var out = new sk$Int(0.0, 0.0);
      var t$3 = this;
      t$3.unsafeEach(((entry) => 
      {
        var t$4 = buf;
        var t$5 = out;
        var t$6 = entry;
        var t$7 = t$6.unsafeKey();
        var t$8 = t$7.toString();
        var t$9 = new sk$String((' => ')).toString();
        var t$10 = entry;
        var t$11 = t$10.unsafeValue();
        var t$12 = t$11.toString();
        var t$13 = new sk$String(('')).join(new (sk$Array)([
          t$8,
          t$9,
          t$12
        ]));
        t$4.set(t$5, t$13);
        var t$14 = out;
        out = t$14.$pl(new sk$Int(1.0, 0.0));
        return sk.__.$void;
      }));
      var t$15 = out;
      var t$16 = buf;
      var t$17 = t$16.size();
      var t$18 = t$15.$eq$eq(t$17);
      sk$invariant(t$18, new sk$String(('Table size changed during iteration')));
      var t$19 = buf;
      var t$20 = t$19.join(new sk$String((', ')));
      var t$21 = new sk$String(('Map{')).$pl(t$20);
      return t$21.$pl(new sk$String(('}')));
    }
};

sk$Map.prototype.unsafeEach = function(f) {
  var t$ = this;
  var t$1 = t$.slots;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg8529:{
      break$bg8529:{
        dowhile_else$bg8528:{
          do
            {
              jumpBlockOuterdowhile_cond$bg8530:{
                dowhile_cond$bg8530:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var entry;
                    {
                      jumpBlockOuterjumpLab$bg8540:{
                        jumpLab$bg8540:{
                          jumpLab$bg8539:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg8539;
                              
                              case 205:
                                entry = var2.value;
                                break jumpLab$bg8540;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg8530;
                          }
                        }
                        {
                          var t$3 = entry;
                          var t$4 = t$3.isEmpty();
                          if (t$4.$bg().__value)
                            {
                              var t$5 = f;
                              var t$6 = entry;
                              t$5(t$6);
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg8540;
                      }
                    }
                    break dowhile_cond$bg8530;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg8528;
                break jumpBlockOuterdowhile_cond$bg8530;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg8529;
      }
      {}
      break jumpBlockOuterbreak$bg8529;
    }
  }
  return break_val;
};

sk$Map.prototype.values = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = this;
  var t$4 = t$3.used;
  var t$5 = this;
  var t$6 = t$5.slots;
  var t$7 = this;
  var t$8 = t$7.generation_PRIVATE;
  var t$9 = t$8.negate();
  return new (sk$Map$dtMapValuesIterator)(t$, t$2, t$4, t$6, t$9);
};

sk$Map.prototype.__bases = [
  sk$Map,
  sk$KeyedSequence,
  sk$MutableKeyedSequence
];

var sk$Map$dtUnorderedMapItemsIterator = sk.Map$dtUnorderedMapItemsIterator = function Map$dtUnorderedMapItemsIterator(table, slots, indexMinusGeneration) {
  this.table = table;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtUnorderedMapItemsIterator.prototype = Object.create(Object.prototype);

sk$Map$dtUnorderedMapItemsIterator.prototype.__constructor = sk$Map$dtUnorderedMapItemsIterator;

sk$Map$dtUnorderedMapItemsIterator.prototype.__classname = 'Map.UnorderedMapItemsIterator';

sk$Map$dtUnorderedMapItemsIterator.prototype.$frozen = false;

sk$Map$dtUnorderedMapItemsIterator.prototype.__type_switch_id = 120;

sk$Map$dtUnorderedMapItemsIterator.prototype.__copy = function() {
  return new (sk$Map$dtUnorderedMapItemsIterator)(this.table, this.slots, this.indexMinusGeneration);
};

sk$Map$dtUnorderedMapItemsIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp496 = __cache.get(this);
  if (_tmp496 === undefined)
    {
      var _tmp496 = this.__copy();
      _tmp496.$frozen = true;
      __cache.set(this, _tmp496);
      _tmp496.table = skip.deepFreeze(_tmp496.table, __cache);
      _tmp496.slots = skip.deepFreeze(_tmp496.slots, __cache);
      _tmp496.indexMinusGeneration = skip.deepFreeze(_tmp496.indexMinusGeneration, __cache);
    }
  return _tmp496;
};

sk$Map$dtUnorderedMapItemsIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtUnorderedMapItemsIterator.prototype.extractSlotValue = function(slot) {
  var t$ = slot;
  var t$1 = t$.key();
  var t$2 = slot;
  var t$3 = t$2.value();
  return new (sk$Tuple2)(t$1, t$3);
};

sk$Map$dtUnorderedMapItemsIterator.prototype.__bases = [
  sk$Map$dtUnorderedMapItemsIterator,
  sk$Iterator,
  sk$Map$dtUnorderedMapIterator
];

var sk$Map$dtUnorderedMapKeysIterator = sk.Map$dtUnorderedMapKeysIterator = function Map$dtUnorderedMapKeysIterator(table, slots, indexMinusGeneration) {
  this.table = table;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtUnorderedMapKeysIterator.prototype = Object.create(Object.prototype);

sk$Map$dtUnorderedMapKeysIterator.prototype.__constructor = sk$Map$dtUnorderedMapKeysIterator;

sk$Map$dtUnorderedMapKeysIterator.prototype.__classname = 'Map.UnorderedMapKeysIterator';

sk$Map$dtUnorderedMapKeysIterator.prototype.$frozen = false;

sk$Map$dtUnorderedMapKeysIterator.prototype.__type_switch_id = 121;

sk$Map$dtUnorderedMapKeysIterator.prototype.__copy = function() {
  return new (sk$Map$dtUnorderedMapKeysIterator)(this.table, this.slots, this.indexMinusGeneration);
};

sk$Map$dtUnorderedMapKeysIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp497 = __cache.get(this);
  if (_tmp497 === undefined)
    {
      var _tmp497 = this.__copy();
      _tmp497.$frozen = true;
      __cache.set(this, _tmp497);
      _tmp497.table = skip.deepFreeze(_tmp497.table, __cache);
      _tmp497.slots = skip.deepFreeze(_tmp497.slots, __cache);
      _tmp497.indexMinusGeneration = skip.deepFreeze(_tmp497.indexMinusGeneration, __cache);
    }
  return _tmp497;
};

sk$Map$dtUnorderedMapKeysIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtUnorderedMapKeysIterator.prototype.extractSlotValue = function(slot) {
  var t$ = slot;
  return t$.key();
};

sk$Map$dtUnorderedMapKeysIterator.prototype.__bases = [
  sk$Map$dtUnorderedMapKeysIterator,
  sk$Iterator,
  sk$Map$dtUnorderedMapIterator
];

var sk$Map$dtUnorderedMapValuesIterator = sk.Map$dtUnorderedMapValuesIterator = function Map$dtUnorderedMapValuesIterator(table, slots, indexMinusGeneration) {
  this.table = table;
  this.slots = slots;
  this.indexMinusGeneration = indexMinusGeneration;
};

sk$Map$dtUnorderedMapValuesIterator.prototype = Object.create(Object.prototype);

sk$Map$dtUnorderedMapValuesIterator.prototype.__constructor = sk$Map$dtUnorderedMapValuesIterator;

sk$Map$dtUnorderedMapValuesIterator.prototype.__classname = 'Map.UnorderedMapValuesIterator';

sk$Map$dtUnorderedMapValuesIterator.prototype.$frozen = false;

sk$Map$dtUnorderedMapValuesIterator.prototype.__type_switch_id = 122;

sk$Map$dtUnorderedMapValuesIterator.prototype.__copy = function() {
  return new (sk$Map$dtUnorderedMapValuesIterator)(this.table, this.slots, this.indexMinusGeneration);
};

sk$Map$dtUnorderedMapValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp498 = __cache.get(this);
  if (_tmp498 === undefined)
    {
      var _tmp498 = this.__copy();
      _tmp498.$frozen = true;
      __cache.set(this, _tmp498);
      _tmp498.table = skip.deepFreeze(_tmp498.table, __cache);
      _tmp498.slots = skip.deepFreeze(_tmp498.slots, __cache);
      _tmp498.indexMinusGeneration = skip.deepFreeze(_tmp498.indexMinusGeneration, __cache);
    }
  return _tmp498;
};

sk$Map$dtUnorderedMapValuesIterator.prototype.__init = function(__named_parameters) {};

sk$Map$dtUnorderedMapValuesIterator.prototype.extractSlotValue = function(slot) {
  var t$ = slot;
  return t$.value();
};

sk$Map$dtUnorderedMapValuesIterator.prototype.__bases = [
  sk$Map$dtUnorderedMapValuesIterator,
  sk$Iterator,
  sk$Map$dtUnorderedMapIterator
];

var sk$MutableIndexedSequence = sk.MutableIndexedSequence = function MutableIndexedSequence() {};

sk$MutableIndexedSequence.prototype = Object.create(Object.prototype);

sk$MutableIndexedSequence.prototype.__constructor = sk$MutableIndexedSequence;

sk$MutableIndexedSequence.prototype.__classname = 'MutableIndexedSequence';

sk$MutableIndexedSequence.prototype.$frozen = undefined;

sk$MutableIndexedSequence.prototype.__type_switch_id = -1;

sk$MutableIndexedSequence.prototype.__copy = function() {};

sk$MutableIndexedSequence.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp499 = __cache.get(this);
  if (_tmp499 === undefined)
    {
      var _tmp499 = this.__copy();
      _tmp499.$frozen = true;
      __cache.set(this, _tmp499);
    }
  return _tmp499;
};

sk$MutableIndexedSequence.prototype.__init = function(__named_parameters) {};

sk$MutableIndexedSequence.prototype.capacity = function() {
  var t$ = this;
  return t$.size();
};

sk$MutableIndexedSequence.prototype.clear = function() {
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg9157:{
      break$bg9157:{
        dowhile_else$bg9156:{
          do
            {
              jumpBlockOuterdowhile_cond$bg9158:{
                dowhile_cond$bg9158:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg9165:{
                        jumpLab$bg9165:{
                          jumpLab$bg9164:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg9164;
                              
                              case 205:
                                _ = var2.value;
                                break jumpLab$bg9165;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg9158;
                          }
                        }
                        {
                          var t$4 = this;
                          t$4.pop();
                        }
                        break jumpBlockOuterjumpLab$bg9165;
                      }
                    }
                    break dowhile_cond$bg9158;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg9156;
                break jumpBlockOuterdowhile_cond$bg9158;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg9157;
      }
      {}
      break jumpBlockOuterbreak$bg9157;
    }
  }
  return break_val;
};

sk$MutableIndexedSequence.prototype.clone = function(_reserveCapacity) {
  if (_reserveCapacity === undefined)
    _reserveCapacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  return t$.mcreateFromItems(t$1);
};

sk$MutableIndexedSequence.prototype.concat = function(second) {
  var t$ = this;
  var result = sk$Vector.mcreateFromItems(t$);
  var t$1 = result;
  var t$2 = second;
  t$1.extend(t$2);
  var t$3 = result;
  return t$3;
};

sk$MutableIndexedSequence.prototype.contains = function(second) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = x;
    var t$3 = second;
    return t$2.$eq$eq(t$3);
  }));
  return t$1.isSome();
};

sk$MutableIndexedSequence.prototype.$delete = function(index) {
  var t$ = this;
  var size = t$.size();
  var t$1 = index;
  var t$2 = size;
  if (t$1.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = index;
  var t$5 = t$4.$pl(new sk$Int(1.0, 0.0));
  var t$6 = index;
  var t$7 = size;
  var t$8 = index;
  var t$9 = t$7.$mi(t$8);
  var t$10 = t$9.$mi(new sk$Int(1.0, 0.0));
  t$3.move(t$5, t$6, t$10);
  var t$11 = this;
  t$11.pop();
  return sk.__.$void;
};

sk$MutableIndexedSequence.prototype.difference = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp9197) => 
  {
    return t$6.add(_tmp9197);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    var t$10 = t$8.contains(t$9);
    if (t$10.$bg().__value)
      {
        var t$11 = result;
        var t$12 = value;
        return t$11.push(t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$MutableIndexedSequence.prototype.ensureCapacity = function(_capacity) {
  return sk.__.$void;
};

sk$MutableIndexedSequence.prototype.extend = function(second) {
  var t$ = second;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.each(((_tmp9210) => 
  {
    return t$3.push(_tmp9210);
  }));
};

sk$MutableIndexedSequence.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$MutableIndexedSequence.prototype.genAll = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = (yield t$.genFind(((x) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = p;
        var t$3 = x;
        var t$4 = (yield t$2(t$3));
      }
      return t$4.$bg();
    })());
  })));
  return t$1.isNone();
});

sk$MutableIndexedSequence.prototype.genAny = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = (yield t$.genFind(t$1));
  return t$2.isSome();
});

sk$MutableIndexedSequence.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = p;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.get(t$4);
    return t$2(t$5);
  })));
  var t$6 = predicates;
  var nextSz = t$6.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$7 = sum;
        return t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var next = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg9231:{
      break$bg9231:{
        while_else$bg9230:{
          do
            {
              jumpBlockOutercontinue$bg9232:{
                continue$bg9232:{
                  {
                    var t$8 = toIndex;
                    var t$9 = nextSz;
                    if (t$8.ult(t$9).__value)
                      {
                        var t$10 = predicates;
                        var t$11 = fromIndex;
                        var t$12;
                        if (t$10.get(t$11).__value)
                          {
                            var t$13 = next;
                            var t$14 = toIndex;
                            var t$15 = this;
                            var t$16 = fromIndex;
                            var t$17 = t$15.get(t$16);
                            t$13.set(t$14, t$17);
                            var t$18 = toIndex;
                            toIndex = t$18.$pl(new sk$Int(1.0, 0.0));
                            t$12 = sk.__.$void;
                          }
                        else
                          t$12 = sk.__.$void;
                        var t$19 = fromIndex;
                        fromIndex = t$19.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg9230;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg9232;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg9231;
      }
      {}
      break jumpBlockOuterbreak$bg9231;
    }
  }
  var t$20 = next;
  return t$20;
});

sk$MutableIndexedSequence.prototype.genFind = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  return (yield t$.genFindTailLoop(t$1, new sk$Int(0.0, 0.0)));
});

sk$MutableIndexedSequence.prototype.genFindTailLoop = skip.asyncToGenerator(function*(p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var item = t$3.get(t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = p;
          var t$10 = index;
          var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindTailLoop(t$9, t$11));
        }
    }
});

sk$MutableIndexedSequence.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var nextInner = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = s;
        var t$3 = this;
        var t$4 = index;
        var t$5 = t$3.get(t$4);
        var awaitable_x = t$2(t$5);
      }
      return (yield awaitable_x);
    })());
  })));
  var t$6 = nextInner;
  return sk$Vector.createFromItems(t$6);
});

sk$MutableIndexedSequence.prototype.groupBy = function(s) {
  var result = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = s;
    var t$2 = value;
    var key = t$1(t$2);
    var t$3 = result;
    var t$4 = key;
    var items = t$3.getOrAdd(t$4, (() => 
    {
      return sk$Vector.mcreate(new sk$Int(0.0, 0.0));
    }));
    var t$5 = items;
    var t$6 = value;
    return t$5.push(t$6);
  }));
  var t$7 = result;
  var t$8 = t$7.map(((_, items1) => 
  {
    var t$9 = items1;
    return t$9;
  }));
  return t$8;
};

sk$MutableIndexedSequence.prototype.indexOf = function(predicate) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = index;
    index = t$2.$pl(new sk$Int(1.0, 0.0));
    var t$3 = x;
    var t$4 = predicate;
    return t$3.$eq$eq(t$4);
  }));
  return t$1.map(((_) => 
  {
    return index;
  }));
};

sk$MutableIndexedSequence.prototype.insert = function(index, value) {
  var t$ = this;
  var size = t$.size();
  var t$1 = index;
  var t$2 = size;
  if (t$1.ugt(t$2).__value)
    return sk$throwOutOfBounds();
  else
    {
      var t$3 = index;
      var t$4 = size;
      if (t$3.$eq$eq(t$4).__value)
        {
          var t$5 = this;
          var t$6 = value;
          return t$5.push(t$6);
        }
      else
        {
          var t$7 = this;
          var t$8 = this;
          var t$9 = index;
          var t$10 = t$8.get(t$9);
          t$7.push(t$10);
          var t$11 = this;
          var t$12 = index;
          var t$13 = index;
          var t$14 = t$13.$pl(new sk$Int(1.0, 0.0));
          var t$15 = size;
          var t$16 = index;
          var t$17 = t$15.$mi(t$16);
          t$11.move(t$12, t$14, t$17);
          var t$18 = this;
          var t$19 = index;
          var t$20 = value;
          t$18.set(t$19, t$20);
          return sk.__.$void;
        }
    }
};

sk$MutableIndexedSequence.prototype.intersection = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp9317) => 
  {
    return t$6.add(_tmp9317);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    if (t$8.contains(t$9).__value)
      {
        var t$10 = result;
        var t$11 = value;
        return t$10.push(t$11);
      }
    else
      return sk.__.$void;
  }));
  var t$12 = result;
  return t$12;
};

sk$MutableIndexedSequence.prototype.keepWhere = function(p) {
  var t$ = this;
  var size = t$.size();
  var out = new sk$Int(0.0, 0.0);
  var t$1 = size;
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg9330:{
      break$bg9330:{
        dowhile_else$bg9329:{
          do
            {
              jumpBlockOuterdowhile_cond$bg9331:{
                dowhile_cond$bg9331:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg9356:{
                        jumpLab$bg9356:{
                          jumpLab$bg9355:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg9355;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg9356;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg9331;
                          }
                        }
                        {
                          var t$4 = this;
                          var t$5 = i;
                          var src = t$4.get(t$5);
                          var t$6 = p;
                          var t$7 = src;
                          var t$8;
                          if (t$6(t$7).__value)
                            {
                              var t$9 = out;
                              var t$10 = i;
                              var t$11;
                              if (t$9.$bg$eq(t$10).__value)
                                {
                                  var t$12 = this;
                                  var t$13 = out;
                                  var t$14 = src;
                                  t$12.set(t$13, t$14);
                                  t$11 = sk.__.$void;
                                }
                              else
                                t$11 = sk.__.$void;
                              var t$15 = out;
                              out = t$15.$pl(new sk$Int(1.0, 0.0));
                              t$8 = sk.__.$void;
                            }
                          else
                            t$8 = sk.__.$void;
                        }
                        break jumpBlockOuterjumpLab$bg9356;
                      }
                    }
                    break dowhile_cond$bg9331;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg9329;
                break jumpBlockOuterdowhile_cond$bg9331;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg9330;
      }
      {}
      break jumpBlockOuterbreak$bg9330;
    }
  }
  var t$16 = out;
  if (t$16.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$17 = this;
      return t$17.clear();
    }
  else
    {
      var t$18 = this;
      var t$19 = out;
      var t$20 = this;
      var t$21 = t$20.get(new sk$Int(0.0, 0.0));
      return t$18.resize(t$19, t$21);
    }
};

sk$MutableIndexedSequence.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$MutableIndexedSequence.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$MutableIndexedSequence.prototype.maybeGet = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var t$5 = t$3.get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$MutableIndexedSequence.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$MutableIndexedSequence.prototype.move = function(src, dst, count) {
  var t$ = this;
  var size = t$.size();
  var t$1 = src;
  var t$2 = size;
  var t$3 = t$1.ule(t$2);
  sk$invariant(t$3, new sk$String(('invalid start')));
  var t$4 = dst;
  var t$5 = size;
  var t$6 = t$4.ule(t$5);
  sk$invariant(t$6, new sk$String(('invalid start2')));
  var t$7 = count;
  var t$8 = t$7.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$8, new sk$String(('invalid count')));
  var t$9 = src;
  var t$10 = count;
  var t$11 = t$9.$pl(t$10);
  var t$12 = size;
  var t$13 = t$11.$lt$eq(t$12);
  sk$invariant(t$13, new sk$String(('invalid count')));
  var t$14 = dst;
  var t$15 = count;
  var t$16 = t$14.$pl(t$15);
  var t$17 = size;
  var t$18 = t$16.$lt$eq(t$17);
  sk$invariant(t$18, new sk$String(('invalid count')));
  var t$19 = src;
  var t$20 = dst;
  if (t$19.$gt(t$20).__value)
    {
      var t$21 = count;
      var t$22 = new (sk$Range)(new sk$Int(0.0, 0.0), t$21);
      var $var = t$22.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg9400:{
          break$bg9400:{
            dowhile_else$bg9399:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg9401:{
                    dowhile_cond$bg9401:{
                      {
                        var t$23 = $var;
                        var var2 = t$23.next();
                        var i;
                        {
                          jumpBlockOuterjumpLab$bg9440:{
                            jumpLab$bg9440:{
                              jumpLab$bg9439:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg9439;
                                  
                                  case 205:
                                    i = var2.value;
                                    break jumpLab$bg9440;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg9401;
                              }
                            }
                            {
                              var t$24 = this;
                              var t$25 = dst;
                              var t$26 = i;
                              var t$27 = t$25.$pl(t$26);
                              var t$28 = this;
                              var t$29 = src;
                              var t$30 = i;
                              var t$31 = t$29.$pl(t$30);
                              var t$32 = t$28.get(t$31);
                              t$24.set(t$27, t$32);
                            }
                            break jumpBlockOuterjumpLab$bg9440;
                          }
                        }
                        break dowhile_cond$bg9401;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg9399;
                    break jumpBlockOuterdowhile_cond$bg9401;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg9400;
          }
          {}
          break jumpBlockOuterbreak$bg9400;
        }
      }
      return break_val;
    }
  else
    {
      var t$33 = src;
      var t$34 = dst;
      if (t$33.$lt(t$34).__value)
        {
          var t$35 = count;
          var t$36 = new (sk$Range)(new sk$Int(0.0, 0.0), t$35);
          var var3 = t$36.values();
          var var4 = new sk$Bool((true));
          var break_val1;
          {
            jumpBlockOuterbreak$bg9421:{
              break$bg9421:{
                dowhile_else$bg9420:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg9422:{
                        dowhile_cond$bg9422:{
                          {
                            var t$37 = var3;
                            var var5 = t$37.next();
                            var i1;
                            {
                              jumpBlockOuterjumpLab$bg9444:{
                                jumpLab$bg9444:{
                                  jumpLab$bg9443:{
                                    switch (var5.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg9443;
                                      
                                      case 205:
                                        i1 = var5.value;
                                        break jumpLab$bg9444;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var4 = new sk$Bool((false));
                                    break dowhile_cond$bg9422;
                                  }
                                }
                                {
                                  var t$38 = count;
                                  var t$39 = t$38.$mi(new sk$Int(1.0, 0.0));
                                  var t$40 = i1;
                                  var idx = t$39.$mi(t$40);
                                  var t$41 = this;
                                  var t$42 = dst;
                                  var t$43 = idx;
                                  var t$44 = t$42.$pl(t$43);
                                  var t$45 = this;
                                  var t$46 = src;
                                  var t$47 = idx;
                                  var t$48 = t$46.$pl(t$47);
                                  var t$49 = t$45.get(t$48);
                                  t$41.set(t$44, t$49);
                                }
                                break jumpBlockOuterjumpLab$bg9444;
                              }
                            }
                            break dowhile_cond$bg9422;
                          }
                        }
                        if (var4.__value)
                          {}
                        else
                          break dowhile_else$bg9420;
                        break jumpBlockOuterdowhile_cond$bg9422;
                      }
                    }
                  while (true);
                }
                break_val1 = sk.__.$void;
                break jumpBlockOuterbreak$bg9421;
              }
              {}
              break jumpBlockOuterbreak$bg9421;
            }
          }
          return break_val1;
        }
      else
        return sk.__.$void;
    }
};

sk$MutableIndexedSequence.prototype.partition = function(p) {
  var pass = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var fail = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = pass;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      {
        var t$5 = fail;
        var t$6 = value;
        return t$5.push(t$6);
      }
  }));
  var t$7 = pass;
  var t$8 = t$7;
  var t$9 = fail;
  var t$10 = t$9;
  return new (sk$Tuple2)(t$8, t$10);
};

sk$MutableIndexedSequence.prototype.pop = function() {
  var t$ = this;
  var $var = t$.maybePop();
  var v;
  {
    jumpBlockOuterjumpLab$bg9463:{
      jumpLab$bg9463:{
        jumpLab$bg9462:{
          switch ($var.__type_switch_id) {
            case 205:
              v = $var.value;
              break jumpLab$bg9462;
            
            case 204:
              break jumpLab$bg9463;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return v;
      }
      return sk$throwOutOfBounds();
    }
  }
};

sk$MutableIndexedSequence.prototype.resize = function(newSize, value) {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = newSize;
  if (t$1.$lt(t$2).__value)
    {
      var t$3 = size;
      var t$4 = newSize;
      var t$5 = new (sk$Range)(t$3, t$4);
      var $var = t$5.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg9474:{
          break$bg9474:{
            dowhile_else$bg9473:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg9475:{
                    dowhile_cond$bg9475:{
                      {
                        var t$6 = $var;
                        var var2 = t$6.next();
                        var _;
                        {
                          jumpBlockOuterjumpLab$bg9497:{
                            jumpLab$bg9497:{
                              jumpLab$bg9496:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg9496;
                                  
                                  case 205:
                                    _ = var2.value;
                                    break jumpLab$bg9497;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg9475;
                              }
                            }
                            {
                              var t$7 = this;
                              var t$8 = value;
                              t$7.push(t$8);
                            }
                            break jumpBlockOuterjumpLab$bg9497;
                          }
                        }
                        break dowhile_cond$bg9475;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg9473;
                    break jumpBlockOuterdowhile_cond$bg9475;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg9474;
          }
          {}
          break jumpBlockOuterbreak$bg9474;
        }
      }
      return break_val;
    }
  else
    {
      var t$9 = size;
      var t$10 = newSize;
      if (t$9.$gt(t$10).__value)
        {
          var t$11 = newSize;
          var t$12 = size;
          var t$13 = new (sk$Range)(t$11, t$12);
          var var3 = t$13.values();
          var var4 = new sk$Bool((true));
          var break_val1;
          {
            jumpBlockOuterbreak$bg9489:{
              break$bg9489:{
                dowhile_else$bg9488:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg9490:{
                        dowhile_cond$bg9490:{
                          {
                            var t$14 = var3;
                            var var5 = t$14.next();
                            var _1;
                            {
                              jumpBlockOuterjumpLab$bg9501:{
                                jumpLab$bg9501:{
                                  jumpLab$bg9500:{
                                    switch (var5.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg9500;
                                      
                                      case 205:
                                        _1 = var5.value;
                                        break jumpLab$bg9501;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var4 = new sk$Bool((false));
                                    break dowhile_cond$bg9490;
                                  }
                                }
                                {
                                  var t$15 = this;
                                  t$15.pop();
                                }
                                break jumpBlockOuterjumpLab$bg9501;
                              }
                            }
                            break dowhile_cond$bg9490;
                          }
                        }
                        if (var4.__value)
                          {}
                        else
                          break dowhile_else$bg9488;
                        break jumpBlockOuterdowhile_cond$bg9490;
                      }
                    }
                  while (true);
                }
                break_val1 = sk.__.$void;
                break jumpBlockOuterbreak$bg9489;
              }
              {}
              break jumpBlockOuterbreak$bg9489;
            }
          }
          return break_val1;
        }
      else
        return sk.__.$void;
    }
};

sk$MutableIndexedSequence.prototype.reverse = function() {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = t$1.$dv(new sk$Int(2.0, 0.0));
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg9509:{
      break$bg9509:{
        dowhile_else$bg9508:{
          do
            {
              jumpBlockOuterdowhile_cond$bg9510:{
                dowhile_cond$bg9510:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg9522:{
                        jumpLab$bg9522:{
                          jumpLab$bg9521:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg9521;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg9522;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg9510;
                          }
                        }
                        {
                          var t$5 = this;
                          var t$6 = i;
                          var t$7 = size;
                          var t$8 = t$7.$mi(new sk$Int(1.0, 0.0));
                          var t$9 = i;
                          var t$10 = t$8.$mi(t$9);
                          t$5.swap(t$6, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg9522;
                      }
                    }
                    break dowhile_cond$bg9510;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg9508;
                break jumpBlockOuterdowhile_cond$bg9510;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg9509;
      }
      {}
      break jumpBlockOuterbreak$bg9509;
    }
  }
  return break_val;
};

sk$MutableIndexedSequence.prototype.sample = function(rng, count) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = count;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$2 = sz;
      var t$3 = count;
      if (t$2.$lt$eq(t$3).__value)
        {
          var t$4 = this;
          return t$4.chill();
        }
      else
        {
          var t$5 = count;
          var t$6 = t$5.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$6, new sk$String(('Vector.sample(): Expected count to be nonnegative.')));
          var t$7 = this;
          var t$8 = count;
          var t$9 = t$7.slice(new sk$Int(0.0, 0.0), t$8);
          var sample = sk$Vector.mcreateFromItems(t$9);
          var t$10 = count;
          var t$11 = sz;
          var t$12 = new (sk$Range)(t$10, t$11);
          var $var = t$12.values();
          var var1 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg9541:{
              break$bg9541:{
                dowhile_else$bg9540:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg9542:{
                        dowhile_cond$bg9542:{
                          {
                            var t$13 = $var;
                            var var2 = t$13.next();
                            var index;
                            {
                              jumpBlockOuterjumpLab$bg9560:{
                                jumpLab$bg9560:{
                                  jumpLab$bg9559:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg9559;
                                      
                                      case 205:
                                        index = var2.value;
                                        break jumpLab$bg9560;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var1 = new sk$Bool((false));
                                    break dowhile_cond$bg9542;
                                  }
                                }
                                {
                                  var t$14 = rng;
                                  var t$15 = index;
                                  var t$16 = t$15.$pl(new sk$Int(1.0, 0.0));
                                  var swap = t$14.random(new sk$Int(0.0, 0.0), t$16);
                                  var t$17 = swap;
                                  var t$18 = count;
                                  var t$19;
                                  if (t$17.$lt(t$18).__value)
                                    {
                                      var t$20 = sample;
                                      var t$21 = swap;
                                      var t$22 = this;
                                      var t$23 = index;
                                      var t$24 = t$22.get(t$23);
                                      t$20.set(t$21, t$24);
                                      t$19 = sk.__.$void;
                                    }
                                  else
                                    t$19 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg9560;
                              }
                            }
                            break dowhile_cond$bg9542;
                          }
                        }
                        if (var1.__value)
                          {}
                        else
                          break dowhile_else$bg9540;
                        break jumpBlockOuterdowhile_cond$bg9542;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg9541;
              }
              {}
              break jumpBlockOuterbreak$bg9541;
            }
          }
          var t$25 = sample;
          return t$25;
        }
    }
};

sk$MutableIndexedSequence.prototype.shuffle = function(rng) {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = t$1.$mi(new sk$Int(1.0, 0.0));
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg9568:{
      break$bg9568:{
        dowhile_else$bg9567:{
          do
            {
              jumpBlockOuterdowhile_cond$bg9569:{
                dowhile_cond$bg9569:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg9581:{
                        jumpLab$bg9581:{
                          jumpLab$bg9580:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg9580;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg9581;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg9569;
                          }
                        }
                        {
                          var t$5 = rng;
                          var t$6 = i;
                          var t$7 = size;
                          var swap = t$5.random(t$6, t$7);
                          var t$8 = this;
                          var t$9 = i;
                          var t$10 = swap;
                          t$8.swap(t$9, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg9581;
                      }
                    }
                    break dowhile_cond$bg9569;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg9567;
                break jumpBlockOuterdowhile_cond$bg9569;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg9568;
      }
      {}
      break jumpBlockOuterbreak$bg9568;
    }
  }
  return break_val;
};

sk$MutableIndexedSequence.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var t$ = this;
  var sz = t$.size();
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$15 = end;
      var t$16 = start;
      var capacity = t$15.$mi(t$16);
      var t$17 = capacity;
      return sk$Vector.fillBy(t$17, ((i) => 
      {
        var t$18 = this;
        var t$19 = i;
        var t$20 = start;
        var t$21 = t$19.$pl(t$20);
        return t$18.get(t$21);
      }));
    }
};

sk$MutableIndexedSequence.prototype.sort = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortBy(((_tmp9609) => 
  {
    return sk$id(_tmp9609);
  }), t$1);
};

sk$MutableIndexedSequence.prototype.sortBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var tmp = sk$Array.mcreateFromItems(t$);
  var t$1 = tmp;
  var t$2 = selector;
  var t$3 = compare;
  t$1.sortBy(t$2, t$3);
  var t$4 = this;
  var t$5 = this;
  var t$6 = t$5.size();
  var t$7 = tmp;
  return t$4.splice(new sk$Int(0.0, 0.0), t$6, t$7);
};

sk$MutableIndexedSequence.prototype.splice = function(start, end, second) {
  var t$ = this;
  var size = t$.size();
  var t$1 = start;
  var t$2 = t$1.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$2, new sk$String(('Vector.splice(): Expected start index to be nonnegative.')));
  var t$3 = end;
  var t$4 = start;
  var t$5 = t$3.$gt$eq(t$4);
  sk$invariant(t$5, new sk$String(('Vector.splice(): Expected end to be greater than or equal to start.')));
  var t$6 = start;
  var t$7 = size;
  start = sk$min(t$6, t$7);
  var t$8 = end;
  var t$9 = size;
  end = sk$min(t$8, t$9);
  var t$10 = end;
  var t$11 = start;
  var removeSize = t$10.$mi(t$11);
  var t$12 = removeSize;
  var t$13 = size;
  if (t$12.$eq$eq(t$13).__value)
    {
      var t$14 = this;
      t$14.clear();
      var t$15 = this;
      var t$16 = second;
      t$15.extend(t$16);
      return sk.__.$void;
    }
  else
    {}
  var t$17 = second;
  var t$18 = t$17;
  var addSize = t$18.size();
  var oldSize = size;
  var t$19 = size;
  var t$20 = removeSize;
  var t$21 = t$19.$mi(t$20);
  var t$22 = addSize;
  var newSize = t$21.$pl(t$22);
  var t$23 = addSize;
  var t$24 = removeSize;
  if (t$23.$gt(t$24).__value)
    {
      size = newSize;
      var t$25 = this;
      var t$26 = size;
      var t$27 = this;
      var t$28 = t$27.get(new sk$Int(0.0, 0.0));
      t$25.resize(t$26, t$28);
    }
  else
    {}
  var t$29 = this;
  var t$30 = end;
  var t$31 = start;
  var t$32 = addSize;
  var t$33 = t$31.$pl(t$32);
  var t$34 = oldSize;
  var t$35 = end;
  var t$36 = t$34.$mi(t$35);
  t$29.move(t$30, t$33, t$36);
  var t$37 = second;
  var t$38 = t$37;
  t$38.eachWithIndex(((i, v) => 
  {
    var t$39 = this;
    var t$40 = start;
    var t$41 = i;
    var t$42 = t$40.$pl(t$41);
    var t$43 = v;
    t$39.set(t$42, t$43);
    return sk.__.$void;
  }));
  var t$44 = size;
  var t$45 = newSize;
  if (t$44.$bg$eq(t$45).__value)
    {
      var t$46 = this;
      var t$47 = newSize;
      var t$48 = this;
      var t$49 = t$48.get(new sk$Int(0.0, 0.0));
      return t$46.resize(t$47, t$49);
    }
  else
    return sk.__.$void;
};

sk$MutableIndexedSequence.prototype.swap = function(i, j) {
  var t$ = this;
  var t$1 = i;
  var tmp = t$.get(t$1);
  var t$2 = this;
  var t$3 = i;
  var t$4 = this;
  var t$5 = j;
  var t$6 = t$4.get(t$5);
  t$2.set(t$3, t$6);
  var t$7 = this;
  var t$8 = j;
  var t$9 = tmp;
  t$7.set(t$8, t$9);
  return sk.__.$void;
};

sk$MutableIndexedSequence.prototype.unique = function() {
  var set = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = set;
    var t$2 = value;
    return t$1.set(t$2, sk.__.$void);
  }));
  var t$3 = set;
  var t$4 = t$3.size();
  var result = sk$Vector.mcreate(t$4);
  var t$5 = set;
  t$5.each(((value1, _) => 
  {
    var t$6 = result;
    var t$7 = value1;
    return t$6.push(t$7);
  }));
  var t$8 = result;
  return t$8;
};

sk$MutableIndexedSequence.prototype.values = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  return new (sk$Sequence$dtIndexedSequenceIterator)(t$, new sk$Int(0.0, 0.0), t$2, new sk$Int(1.0, 0.0));
};

sk$MutableIndexedSequence.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$MutableIndexedSequence.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$MutableIndexedSequence.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$MutableIndexedSequence.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$MutableIndexedSequence.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$MutableIndexedSequence.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$MutableIndexedSequence.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$MutableIndexedSequence.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$MutableIndexedSequence.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$MutableIndexedSequence.prototype.__bases = [
  sk$MutableIndexedSequence,
  sk$Sequence,
  sk$IndexedSequence
];

var sk$Number = sk.Number = function Number() {};

sk$Number.prototype = Object.create(Object.prototype);

sk$Number.prototype.__constructor = sk$Number;

sk$Number.prototype.__classname = 'Number';

sk$Number.prototype.$frozen = undefined;

sk$Number.prototype.__type_switch_id = -1;

sk$Number.prototype.__copy = function() {};

sk$Number.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp500 = __cache.get(this);
  if (_tmp500 === undefined)
    {
      var _tmp500 = this.__copy();
      _tmp500.$frozen = true;
      __cache.set(this, _tmp500);
    }
  return _tmp500;
};

sk$Number.prototype.__init = function(__named_parameters) {};

sk$Number.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Number.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Number.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Number.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$EQ);
};

sk$Number.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Number.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Number.prototype.__bases = [
  sk$Number,
  sk$Equality,
  sk$HasClassName,
  sk$Hashable,
  sk$Show,
  sk$Orderable
];

var sk$Serialization$dtCollectionNotDoneError = sk.Serialization$dtCollectionNotDoneError = function Serialization$dtCollectionNotDoneError() {};

sk$Serialization$dtCollectionNotDoneError.prototype = Object.create(Object.prototype);

sk$Serialization$dtCollectionNotDoneError.prototype.__constructor = sk$Serialization$dtCollectionNotDoneError;

sk$Serialization$dtCollectionNotDoneError.prototype.__classname = 'Serialization.CollectionNotDoneError';

sk$Serialization$dtCollectionNotDoneError.prototype.$frozen = true;

sk$Serialization$dtCollectionNotDoneError.prototype.__type_switch_id = 50;

sk$Serialization$dtCollectionNotDoneError.prototype.__copy = function() {
  return new (sk$Serialization$dtCollectionNotDoneError)();
};

sk$Serialization$dtCollectionNotDoneError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp501 = __cache.get(this);
  if (_tmp501 === undefined)
    {
      var _tmp501 = this.__copy();
      _tmp501.$frozen = true;
      __cache.set(this, _tmp501);
    }
  return _tmp501;
};

sk$Serialization$dtCollectionNotDoneError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtCollectionNotDoneError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtCollectionNotDoneError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg15250:{
    jumpLab$bg15250:{
      jumpLab$bg15249:{
        switch (other.__type_switch_id) {
          case 50:
            break jumpLab$bg15249;
          
          default:
            break jumpLab$bg15250;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$Serialization$dtCollectionNotDoneError.prototype.getMessage = function() {
  return new sk$String(('Attempted to call end() on a collection that has not been fully read/written.')).toString();
};

sk$Serialization$dtCollectionNotDoneError.prototype.toString = function() {
  var t$ = new sk$String(('CollectionNotDoneSerializationError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtCollectionNotDoneError.prototype.__bases = [
  sk$Serialization$dtCollectionNotDoneError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtFieldNotInClassError = sk.Serialization$dtFieldNotInClassError = function Serialization$dtFieldNotInClassError(fieldName, realFieldNames) {
  this.fieldName = fieldName;
  this.realFieldNames = realFieldNames;
};

sk$Serialization$dtFieldNotInClassError.prototype = Object.create(Object.prototype);

sk$Serialization$dtFieldNotInClassError.prototype.__constructor = sk$Serialization$dtFieldNotInClassError;

sk$Serialization$dtFieldNotInClassError.prototype.__classname = 'Serialization.FieldNotInClassError';

sk$Serialization$dtFieldNotInClassError.prototype.$frozen = true;

sk$Serialization$dtFieldNotInClassError.prototype.__type_switch_id = 51;

sk$Serialization$dtFieldNotInClassError.prototype.__copy = function() {
  return new (sk$Serialization$dtFieldNotInClassError)(this.fieldName, this.realFieldNames);
};

sk$Serialization$dtFieldNotInClassError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp502 = __cache.get(this);
  if (_tmp502 === undefined)
    {
      var _tmp502 = this.__copy();
      _tmp502.$frozen = true;
      __cache.set(this, _tmp502);
      _tmp502.fieldName = skip.deepFreeze(_tmp502.fieldName, __cache);
      _tmp502.realFieldNames = skip.deepFreeze(_tmp502.realFieldNames, __cache);
    }
  return _tmp502;
};

sk$Serialization$dtFieldNotInClassError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtFieldNotInClassError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtFieldNotInClassError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15366:{
      jumpLab$bg15366:{
        jumpLab$bg15365:{
          switch (other.__type_switch_id) {
            case 51:
              otherTyped = other;
              break jumpLab$bg15365;
            
            default:
              break jumpLab$bg15366;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.fieldName;
          var t$2 = otherTyped;
          var t$3 = t$2.fieldName;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.realFieldNames;
          var t$7 = otherTyped;
          var t$8 = t$7.realFieldNames;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtFieldNotInClassError.prototype.getMessage = function() {
  var t$ = new sk$String(('Invalid field \'')).toString();
  var t$1 = this;
  var t$2 = t$1.fieldName;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('\'. Expected one of ')).toString();
  var t$5 = this;
  var t$6 = t$5.realFieldNames;
  var t$7 = t$6.map(((x) => 
  {
    var t$8 = new sk$String(('\'')).toString();
    var t$9 = x;
    var t$10 = t$9.toString();
    var t$11 = new sk$String(('\'')).toString();
    return new sk$String(('')).join(new (sk$Array)([
      t$8,
      t$10,
      t$11
    ]));
  }));
  var t$12 = t$7.join(new sk$String((', ')));
  var t$13 = t$12.toString();
  var t$14 = new sk$String(('.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$13,
    t$14
  ]));
};

sk$Serialization$dtFieldNotInClassError.prototype.toString = function() {
  var t$ = new sk$String(('FieldNotInClassSerializationError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtFieldNotInClassError.prototype.__bases = [
  sk$Serialization$dtFieldNotInClassError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtNotChildClassError = sk.Serialization$dtNotChildClassError = function Serialization$dtNotChildClassError(baseClassName, childClassName) {
  this.baseClassName = baseClassName;
  this.childClassName = childClassName;
};

sk$Serialization$dtNotChildClassError.prototype = Object.create(Object.prototype);

sk$Serialization$dtNotChildClassError.prototype.__constructor = sk$Serialization$dtNotChildClassError;

sk$Serialization$dtNotChildClassError.prototype.__classname = 'Serialization.NotChildClassError';

sk$Serialization$dtNotChildClassError.prototype.$frozen = true;

sk$Serialization$dtNotChildClassError.prototype.__type_switch_id = 52;

sk$Serialization$dtNotChildClassError.prototype.__copy = function() {
  return new (sk$Serialization$dtNotChildClassError)(this.baseClassName, this.childClassName);
};

sk$Serialization$dtNotChildClassError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp503 = __cache.get(this);
  if (_tmp503 === undefined)
    {
      var _tmp503 = this.__copy();
      _tmp503.$frozen = true;
      __cache.set(this, _tmp503);
      _tmp503.baseClassName = skip.deepFreeze(_tmp503.baseClassName, __cache);
      _tmp503.childClassName = skip.deepFreeze(_tmp503.childClassName, __cache);
    }
  return _tmp503;
};

sk$Serialization$dtNotChildClassError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtNotChildClassError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtNotChildClassError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15406:{
      jumpLab$bg15406:{
        jumpLab$bg15405:{
          switch (other.__type_switch_id) {
            case 52:
              otherTyped = other;
              break jumpLab$bg15405;
            
            default:
              break jumpLab$bg15406;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.baseClassName;
          var t$2 = otherTyped;
          var t$3 = t$2.baseClassName;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.childClassName;
          var t$7 = otherTyped;
          var t$8 = t$7.childClassName;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtNotChildClassError.prototype.getMessage = function() {
  var t$ = new sk$String(('"')).toString();
  var t$1 = this;
  var t$2 = t$1.childClassName;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('" is not a subclass of "')).toString();
  var t$5 = this;
  var t$6 = t$5.baseClassName;
  var t$7 = t$6.toString();
  var t$8 = new sk$String(('".')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7,
    t$8
  ]));
};

sk$Serialization$dtNotChildClassError.prototype.toString = function() {
  var t$ = new sk$String(('NotChildClassSerializationError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtNotChildClassError.prototype.__bases = [
  sk$Serialization$dtNotChildClassError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtNotExpectedClassError = sk.Serialization$dtNotExpectedClassError = function Serialization$dtNotExpectedClassError(className) {
  this.className = className;
};

sk$Serialization$dtNotExpectedClassError.prototype = Object.create(Object.prototype);

sk$Serialization$dtNotExpectedClassError.prototype.__constructor = sk$Serialization$dtNotExpectedClassError;

sk$Serialization$dtNotExpectedClassError.prototype.__classname = 'Serialization.NotExpectedClassError';

sk$Serialization$dtNotExpectedClassError.prototype.$frozen = true;

sk$Serialization$dtNotExpectedClassError.prototype.__type_switch_id = 53;

sk$Serialization$dtNotExpectedClassError.prototype.__copy = function() {
  return new (sk$Serialization$dtNotExpectedClassError)(this.className);
};

sk$Serialization$dtNotExpectedClassError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp504 = __cache.get(this);
  if (_tmp504 === undefined)
    {
      var _tmp504 = this.__copy();
      _tmp504.$frozen = true;
      __cache.set(this, _tmp504);
      _tmp504.className = skip.deepFreeze(_tmp504.className, __cache);
    }
  return _tmp504;
};

sk$Serialization$dtNotExpectedClassError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtNotExpectedClassError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtNotExpectedClassError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15434:{
      jumpLab$bg15434:{
        jumpLab$bg15433:{
          switch (other.__type_switch_id) {
            case 53:
              otherTyped = other;
              break jumpLab$bg15433;
            
            default:
              break jumpLab$bg15434;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.className;
          var t$2 = otherTyped;
          var t$3 = t$2.className;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtNotExpectedClassError.prototype.getMessage = function() {
  var t$ = new sk$String(('Attempted to serialize ')).toString();
  var t$1 = this;
  var t$2 = t$1.className;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('; received non-')).toString();
  var t$5 = this;
  var t$6 = t$5.className;
  var t$7 = t$6.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7
  ]));
};

sk$Serialization$dtNotExpectedClassError.prototype.toString = function() {
  var t$ = new sk$String(('NotExpectedClassError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtNotExpectedClassError.prototype.__bases = [
  sk$Serialization$dtNotExpectedClassError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtNotImplementedError = sk.Serialization$dtNotImplementedError = function Serialization$dtNotImplementedError(location) {
  this.location = location;
};

sk$Serialization$dtNotImplementedError.prototype = Object.create(Object.prototype);

sk$Serialization$dtNotImplementedError.prototype.__constructor = sk$Serialization$dtNotImplementedError;

sk$Serialization$dtNotImplementedError.prototype.__classname = 'Serialization.NotImplementedError';

sk$Serialization$dtNotImplementedError.prototype.$frozen = true;

sk$Serialization$dtNotImplementedError.prototype.__type_switch_id = 54;

sk$Serialization$dtNotImplementedError.prototype.__copy = function() {
  return new (sk$Serialization$dtNotImplementedError)(this.location);
};

sk$Serialization$dtNotImplementedError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp505 = __cache.get(this);
  if (_tmp505 === undefined)
    {
      var _tmp505 = this.__copy();
      _tmp505.$frozen = true;
      __cache.set(this, _tmp505);
      _tmp505.location = skip.deepFreeze(_tmp505.location, __cache);
    }
  return _tmp505;
};

sk$Serialization$dtNotImplementedError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtNotImplementedError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtNotImplementedError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15461:{
      jumpLab$bg15461:{
        jumpLab$bg15460:{
          switch (other.__type_switch_id) {
            case 54:
              otherTyped = other;
              break jumpLab$bg15460;
            
            default:
              break jumpLab$bg15461;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.location;
          var t$2 = otherTyped;
          var t$3 = t$2.location;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtNotImplementedError.prototype.getMessage = function() {
  var t$ = new sk$String(('Method ')).toString();
  var t$1 = this;
  var t$2 = t$1.location;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' has not been implemented.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4
  ]));
};

sk$Serialization$dtNotImplementedError.prototype.toString = function() {
  var t$ = new sk$String(('NotImplementedError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtNotImplementedError.prototype.__bases = [
  sk$Serialization$dtNotImplementedError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtNotSupportedError = sk.Serialization$dtNotSupportedError = function Serialization$dtNotSupportedError(location) {
  this.location = location;
};

sk$Serialization$dtNotSupportedError.prototype = Object.create(Object.prototype);

sk$Serialization$dtNotSupportedError.prototype.__constructor = sk$Serialization$dtNotSupportedError;

sk$Serialization$dtNotSupportedError.prototype.__classname = 'Serialization.NotSupportedError';

sk$Serialization$dtNotSupportedError.prototype.$frozen = true;

sk$Serialization$dtNotSupportedError.prototype.__type_switch_id = 55;

sk$Serialization$dtNotSupportedError.prototype.__copy = function() {
  return new (sk$Serialization$dtNotSupportedError)(this.location);
};

sk$Serialization$dtNotSupportedError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp506 = __cache.get(this);
  if (_tmp506 === undefined)
    {
      var _tmp506 = this.__copy();
      _tmp506.$frozen = true;
      __cache.set(this, _tmp506);
      _tmp506.location = skip.deepFreeze(_tmp506.location, __cache);
    }
  return _tmp506;
};

sk$Serialization$dtNotSupportedError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtNotSupportedError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtNotSupportedError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15485:{
      jumpLab$bg15485:{
        jumpLab$bg15484:{
          switch (other.__type_switch_id) {
            case 55:
              otherTyped = other;
              break jumpLab$bg15484;
            
            default:
              break jumpLab$bg15485;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.location;
          var t$2 = otherTyped;
          var t$3 = t$2.location;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtNotSupportedError.prototype.getMessage = function() {
  var t$ = new sk$String(('Method ')).toString();
  var t$1 = this;
  var t$2 = t$1.location;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' is not supported.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4
  ]));
};

sk$Serialization$dtNotSupportedError.prototype.toString = function() {
  var t$ = new sk$String(('NotSupportedError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtNotSupportedError.prototype.__bases = [
  sk$Serialization$dtNotSupportedError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtRecordMissingFieldError = sk.Serialization$dtRecordMissingFieldError = function Serialization$dtRecordMissingFieldError(recordName, fieldName) {
  this.recordName = recordName;
  this.fieldName = fieldName;
};

sk$Serialization$dtRecordMissingFieldError.prototype = Object.create(Object.prototype);

sk$Serialization$dtRecordMissingFieldError.prototype.__constructor = sk$Serialization$dtRecordMissingFieldError;

sk$Serialization$dtRecordMissingFieldError.prototype.__classname = 'Serialization.RecordMissingFieldError';

sk$Serialization$dtRecordMissingFieldError.prototype.$frozen = true;

sk$Serialization$dtRecordMissingFieldError.prototype.__type_switch_id = 56;

sk$Serialization$dtRecordMissingFieldError.prototype.__copy = function() {
  return new (sk$Serialization$dtRecordMissingFieldError)(this.recordName, this.fieldName);
};

sk$Serialization$dtRecordMissingFieldError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp507 = __cache.get(this);
  if (_tmp507 === undefined)
    {
      var _tmp507 = this.__copy();
      _tmp507.$frozen = true;
      __cache.set(this, _tmp507);
      _tmp507.recordName = skip.deepFreeze(_tmp507.recordName, __cache);
      _tmp507.fieldName = skip.deepFreeze(_tmp507.fieldName, __cache);
    }
  return _tmp507;
};

sk$Serialization$dtRecordMissingFieldError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtRecordMissingFieldError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtRecordMissingFieldError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15515:{
      jumpLab$bg15515:{
        jumpLab$bg15514:{
          switch (other.__type_switch_id) {
            case 56:
              otherTyped = other;
              break jumpLab$bg15514;
            
            default:
              break jumpLab$bg15515;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.recordName;
          var t$2 = otherTyped;
          var t$3 = t$2.recordName;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.fieldName;
          var t$7 = otherTyped;
          var t$8 = t$7.fieldName;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtRecordMissingFieldError.prototype.getMessage = function() {
  var t$ = new sk$String(('Attempted to read class \'')).toString();
  var t$1 = this;
  var t$2 = t$1.recordName;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('\' but \'')).toString();
  var t$5 = this;
  var t$6 = t$5.fieldName;
  var t$7 = t$6.toString();
  var t$8 = new sk$String(('\' value missing.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7,
    t$8
  ]));
};

sk$Serialization$dtRecordMissingFieldError.prototype.toString = function() {
  var t$ = new sk$String(('RecordMissingFieldSerializationError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtRecordMissingFieldError.prototype.__bases = [
  sk$Serialization$dtRecordMissingFieldError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtRecordNoValuesLeftError = sk.Serialization$dtRecordNoValuesLeftError = function Serialization$dtRecordNoValuesLeftError() {};

sk$Serialization$dtRecordNoValuesLeftError.prototype = Object.create(Object.prototype);

sk$Serialization$dtRecordNoValuesLeftError.prototype.__constructor = sk$Serialization$dtRecordNoValuesLeftError;

sk$Serialization$dtRecordNoValuesLeftError.prototype.__classname = 'Serialization.RecordNoValuesLeftError';

sk$Serialization$dtRecordNoValuesLeftError.prototype.$frozen = true;

sk$Serialization$dtRecordNoValuesLeftError.prototype.__type_switch_id = 57;

sk$Serialization$dtRecordNoValuesLeftError.prototype.__copy = function() {
  return new (sk$Serialization$dtRecordNoValuesLeftError)();
};

sk$Serialization$dtRecordNoValuesLeftError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp508 = __cache.get(this);
  if (_tmp508 === undefined)
    {
      var _tmp508 = this.__copy();
      _tmp508.$frozen = true;
      __cache.set(this, _tmp508);
    }
  return _tmp508;
};

sk$Serialization$dtRecordNoValuesLeftError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtRecordNoValuesLeftError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtRecordNoValuesLeftError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg15537:{
    jumpLab$bg15537:{
      jumpLab$bg15536:{
        switch (other.__type_switch_id) {
          case 57:
            break jumpLab$bg15536;
          
          default:
            break jumpLab$bg15537;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$Serialization$dtRecordNoValuesLeftError.prototype.getMessage = function() {
  return new sk$String(('Attempted to read/write a Map value after Map has been fully read/written.')).toString();
};

sk$Serialization$dtRecordNoValuesLeftError.prototype.toString = function() {
  var t$ = new sk$String(('MapNoValuesLeftError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtRecordNoValuesLeftError.prototype.__bases = [
  sk$Serialization$dtRecordNoValuesLeftError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtTupleSizeOutOfBoundsError = sk.Serialization$dtTupleSizeOutOfBoundsError = function Serialization$dtTupleSizeOutOfBoundsError() {};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype = Object.create(Object.prototype);

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__constructor = sk$Serialization$dtTupleSizeOutOfBoundsError;

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__classname = 'Serialization.TupleSizeOutOfBoundsError';

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.$frozen = true;

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__type_switch_id = 58;

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__copy = function() {
  return new (sk$Serialization$dtTupleSizeOutOfBoundsError)();
};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp509 = __cache.get(this);
  if (_tmp509 === undefined)
    {
      var _tmp509 = this.__copy();
      _tmp509.$frozen = true;
      __cache.set(this, _tmp509);
    }
  return _tmp509;
};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg15829:{
    jumpLab$bg15829:{
      jumpLab$bg15828:{
        switch (other.__type_switch_id) {
          case 58:
            break jumpLab$bg15828;
          
          default:
            break jumpLab$bg15829;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.getMessage = function() {
  return new sk$String(('Attempted to create a tuple of size < 2 or > 10.')).toString();
};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.toString = function() {
  var t$ = new sk$String(('TupleSizeOutOfBoundsSerializationError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtTupleSizeOutOfBoundsError.prototype.__bases = [
  sk$Serialization$dtTupleSizeOutOfBoundsError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtTupleSizeUnexpectedError = sk.Serialization$dtTupleSizeUnexpectedError = function Serialization$dtTupleSizeUnexpectedError(expSize, actualSize) {
  this.expSize = expSize;
  this.actualSize = actualSize;
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype = Object.create(Object.prototype);

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__constructor = sk$Serialization$dtTupleSizeUnexpectedError;

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__classname = 'Serialization.TupleSizeUnexpectedError';

sk$Serialization$dtTupleSizeUnexpectedError.prototype.$frozen = true;

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__type_switch_id = 59;

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__copy = function() {
  return new (sk$Serialization$dtTupleSizeUnexpectedError)(this.expSize, this.actualSize);
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp510 = __cache.get(this);
  if (_tmp510 === undefined)
    {
      var _tmp510 = this.__copy();
      _tmp510.$frozen = true;
      __cache.set(this, _tmp510);
      _tmp510.expSize = skip.deepFreeze(_tmp510.expSize, __cache);
      _tmp510.actualSize = skip.deepFreeze(_tmp510.actualSize, __cache);
    }
  return _tmp510;
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg15855:{
      jumpLab$bg15855:{
        jumpLab$bg15854:{
          switch (other.__type_switch_id) {
            case 59:
              otherTyped = other;
              break jumpLab$bg15854;
            
            default:
              break jumpLab$bg15855;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.expSize;
          var t$2 = otherTyped;
          var t$3 = t$2.expSize;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          var t$5 = this;
          var t$6 = t$5.actualSize;
          var t$7 = otherTyped;
          var t$8 = t$7.actualSize;
          var t$9 = sk$isEqual(t$6, t$8);
          if (t$9.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.getMessage = function() {
  var t$ = new sk$String(('Attempted to (de)serialize a ')).toString();
  var t$1 = this;
  var t$2 = t$1.actualSize;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('-tuple as a ')).toString();
  var t$5 = this;
  var t$6 = t$5.expSize;
  var t$7 = t$6.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7
  ]));
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.toString = function() {
  var t$ = new sk$String(('TupleSizeUnexpectedSerializationError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtTupleSizeUnexpectedError.prototype.__bases = [
  sk$Serialization$dtTupleSizeUnexpectedError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtTypeNotImplementedError = sk.Serialization$dtTypeNotImplementedError = function Serialization$dtTypeNotImplementedError(typeName) {
  this.typeName = typeName;
};

sk$Serialization$dtTypeNotImplementedError.prototype = Object.create(Object.prototype);

sk$Serialization$dtTypeNotImplementedError.prototype.__constructor = sk$Serialization$dtTypeNotImplementedError;

sk$Serialization$dtTypeNotImplementedError.prototype.__classname = 'Serialization.TypeNotImplementedError';

sk$Serialization$dtTypeNotImplementedError.prototype.$frozen = true;

sk$Serialization$dtTypeNotImplementedError.prototype.__type_switch_id = 60;

sk$Serialization$dtTypeNotImplementedError.prototype.__copy = function() {
  return new (sk$Serialization$dtTypeNotImplementedError)(this.typeName);
};

sk$Serialization$dtTypeNotImplementedError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp511 = __cache.get(this);
  if (_tmp511 === undefined)
    {
      var _tmp511 = this.__copy();
      _tmp511.$frozen = true;
      __cache.set(this, _tmp511);
      _tmp511.typeName = skip.deepFreeze(_tmp511.typeName, __cache);
    }
  return _tmp511;
};

sk$Serialization$dtTypeNotImplementedError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtTypeNotImplementedError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtTypeNotImplementedError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg16062:{
      jumpLab$bg16062:{
        jumpLab$bg16061:{
          switch (other.__type_switch_id) {
            case 60:
              otherTyped = other;
              break jumpLab$bg16061;
            
            default:
              break jumpLab$bg16062;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.typeName;
          var t$2 = otherTyped;
          var t$3 = t$2.typeName;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$Serialization$dtTypeNotImplementedError.prototype.getMessage = function() {
  var t$ = new sk$String(('Type ')).toString();
  var t$1 = this;
  var t$2 = t$1.typeName;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' is not implemented.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4
  ]));
};

sk$Serialization$dtTypeNotImplementedError.prototype.toString = function() {
  var t$ = new sk$String(('TypeNotImplementedError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtTypeNotImplementedError.prototype.__bases = [
  sk$Serialization$dtTypeNotImplementedError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtUnnamedPositionalParameterError = sk.Serialization$dtUnnamedPositionalParameterError = function Serialization$dtUnnamedPositionalParameterError() {};

sk$Serialization$dtUnnamedPositionalParameterError.prototype = Object.create(Object.prototype);

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__constructor = sk$Serialization$dtUnnamedPositionalParameterError;

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__classname = 'Serialization.UnnamedPositionalParameterError';

sk$Serialization$dtUnnamedPositionalParameterError.prototype.$frozen = true;

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__type_switch_id = 61;

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__copy = function() {
  return new (sk$Serialization$dtUnnamedPositionalParameterError)();
};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp512 = __cache.get(this);
  if (_tmp512 === undefined)
    {
      var _tmp512 = this.__copy();
      _tmp512.$frozen = true;
      __cache.set(this, _tmp512);
    }
  return _tmp512;
};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg16080:{
    jumpLab$bg16080:{
      jumpLab$bg16079:{
        switch (other.__type_switch_id) {
          case 61:
            break jumpLab$bg16079;
          
          default:
            break jumpLab$bg16080;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.getMessage = function() {
  return new sk$String(('Unnamed Positional Parameters are not supported.')).toString();
};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.toString = function() {
  var t$ = new sk$String(('UnnamedPositionalParameterError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtUnnamedPositionalParameterError.prototype.__bases = [
  sk$Serialization$dtUnnamedPositionalParameterError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtUnrecognizedDefaultValueError = sk.Serialization$dtUnrecognizedDefaultValueError = function Serialization$dtUnrecognizedDefaultValueError() {};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype = Object.create(Object.prototype);

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__constructor = sk$Serialization$dtUnrecognizedDefaultValueError;

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__classname = 'Serialization.UnrecognizedDefaultValueError';

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.$frozen = true;

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__type_switch_id = 62;

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__copy = function() {
  return new (sk$Serialization$dtUnrecognizedDefaultValueError)();
};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp513 = __cache.get(this);
  if (_tmp513 === undefined)
    {
      var _tmp513 = this.__copy();
      _tmp513.$frozen = true;
      __cache.set(this, _tmp513);
    }
  return _tmp513;
};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg16094:{
    jumpLab$bg16094:{
      jumpLab$bg16093:{
        switch (other.__type_switch_id) {
          case 62:
            break jumpLab$bg16093;
          
          default:
            break jumpLab$bg16094;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.getMessage = function() {
  return new sk$String(('Unrecognized default value.')).toString();
};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.toString = function() {
  var t$ = new sk$String(('UnrecognizedDefaultValueError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtUnrecognizedDefaultValueError.prototype.__bases = [
  sk$Serialization$dtUnrecognizedDefaultValueError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Serialization$dtVariantMissingError = sk.Serialization$dtVariantMissingError = function Serialization$dtVariantMissingError() {};

sk$Serialization$dtVariantMissingError.prototype = Object.create(Object.prototype);

sk$Serialization$dtVariantMissingError.prototype.__constructor = sk$Serialization$dtVariantMissingError;

sk$Serialization$dtVariantMissingError.prototype.__classname = 'Serialization.VariantMissingError';

sk$Serialization$dtVariantMissingError.prototype.$frozen = true;

sk$Serialization$dtVariantMissingError.prototype.__type_switch_id = 63;

sk$Serialization$dtVariantMissingError.prototype.__copy = function() {
  return new (sk$Serialization$dtVariantMissingError)();
};

sk$Serialization$dtVariantMissingError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp514 = __cache.get(this);
  if (_tmp514 === undefined)
    {
      var _tmp514 = this.__copy();
      _tmp514.$frozen = true;
      __cache.set(this, _tmp514);
    }
  return _tmp514;
};

sk$Serialization$dtVariantMissingError.prototype.__init = function(__named_parameters) {};

sk$Serialization$dtVariantMissingError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Serialization$dtVariantMissingError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg16108:{
    jumpLab$bg16108:{
      jumpLab$bg16107:{
        switch (other.__type_switch_id) {
          case 63:
            break jumpLab$bg16107;
          
          default:
            break jumpLab$bg16108;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$Serialization$dtVariantMissingError.prototype.getMessage = function() {
  return new sk$String(('Attempted to deserialize base class but did not receive any data.')).toString();
};

sk$Serialization$dtVariantMissingError.prototype.toString = function() {
  var t$ = new sk$String(('VariantMissingError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$Serialization$dtVariantMissingError.prototype.__bases = [
  sk$Serialization$dtVariantMissingError,
  sk$Exception,
  sk$Serialization$dtSerializationError
];

var sk$Set = sk.Set = function Set(inner) {
  this.inner = inner;
};

sk$Set.prototype = Object.create(Object.prototype);

sk$Set.prototype.__constructor = sk$Set;

sk$Set.prototype.__classname = 'Set';

sk$Set.prototype.$frozen = false;

sk$Set.prototype.__type_switch_id = 270;

sk$Set.prototype.__copy = function() {
  return new (sk$Set)(this.inner);
};

sk$Set.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp515 = __cache.get(this);
  if (_tmp515 === undefined)
    {
      var _tmp515 = this.__copy();
      _tmp515.$frozen = true;
      __cache.set(this, _tmp515);
      _tmp515.inner = skip.deepFreeze(_tmp515.inner, __cache);
    }
  return _tmp515;
};

sk$Set.prototype.__init = function(__named_parameters) {};

sk$Set.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = other;
  var t$3 = t$2.inner;
  return t$1.$bg$eq(t$3);
};

sk$Set.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = other;
  var t$3 = t$2.inner;
  return t$1.$eq$eq(t$3);
};

sk$Set.prototype.add = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.add(t$2, singleton$Set$dtEmptyValue);
};

sk$Set.prototype.all = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.all(((k, _) => 
  {
    var t$2 = f;
    var t$3 = k;
    return t$2(t$3);
  }));
};

sk$Set.prototype.any = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.any(((k, _) => 
  {
    var t$2 = f;
    var t$3 = k;
    return t$2(t$3);
  }));
};

sk$Set.prototype.capacity = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.capacity();
};

sk$Set.prototype.chill = function() {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.chill();
  return new (sk$Set)(t$2);
};

sk$Set.prototype.clear = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.clear();
};

sk$Set.prototype.clone = function(reserve) {
  if (reserve === undefined)
    reserve = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = reserve;
  var t$3 = t$1.clone(t$2);
  return new (sk$Set)(t$3);
};

sk$Set.prototype.contains = function(k) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = k;
  return t$1.containsKey(t$2);
};

sk$Set.prototype.containsAll = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.all(((_tmp16162) => 
  {
    return t$3.contains(_tmp16162);
  }));
};

sk$Set.prototype.containsAny = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.any(((_tmp16167) => 
  {
    return t$3.contains(_tmp16167);
  }));
};

sk$Set.createFromItems = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromItems(t$1);
  return t$2;
};

sk$Set.createFromIterator = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromIterator(t$1);
  return t$2;
};

sk$Set.prototype.difference = function(items) {
  var t$ = this;
  var t$1 = t$;
  var result = t$1.clone(undefined);
  var t$2 = items;
  var t$3 = t$2;
  t$3.each(((x) => 
  {
    var t$4 = result;
    var t$5 = x;
    t$4.maybeRemove(t$5);
    return sk.__.$void;
  }));
  var t$6 = result;
  return t$6;
};

sk$Set.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.each(((k, _) => 
  {
    var t$2 = f;
    var t$3 = k;
    return t$2(t$3);
  }));
};

sk$Set.prototype.ensureCapacity = function(capacity) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = capacity;
  return t$1.ensureCapacity(t$2);
};

sk$Set.prototype.extend = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    return t$2.insert(t$3);
  }));
};

sk$Set.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.filter(((k, _) => 
  {
    var t$3 = p;
    var t$4 = k;
    return t$3(t$4);
  }));
  return new (sk$Set)(t$2);
};

sk$Set.prototype.filterNone = function() {
  return sk$invariant_violation(new sk$String(('UniqueSequence.filterNone(): undefined method, UniqueSequence<?_> cannot exist.')));
};

sk$Set.prototype.find = function(p) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.findItem(((k, _) => 
  {
    var t$3 = p;
    var t$4 = k;
    return t$3(t$4);
  }));
  return t$2.map(((kv) => 
  {
    var $var;
    {
      jumpBlockOuterjumpLab$bg16207:{
        jumpLab$bg16207:{
          switch (kv.__type_switch_id) {
            case 392:
              $var = kv.i0;
              break jumpLab$bg16207;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return $var;
      }
    }
  }));
};

sk$Set.generator = function(generator) {
  var t$ = generator;
  return new (sk$QuickCheck$dtSetGenerator)(t$);
};

sk$Set.prototype.get = function(k) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = k;
  var t$3 = t$1.getItem(t$2);
  return t$3.i0;
};

sk$Set.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.hash();
};

sk$Set.prototype.insert = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.set(t$2, singleton$Set$dtEmptyValue);
};

sk$Set.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toArray();
  var t$2 = t$1.map(((e) => 
  {
    var t$3 = e;
    return sk$inspect(t$3);
  }));
  return new (sk$InspectVector)(new sk$String(('Set')), t$2);
};

sk$Set.prototype.intersection = function(items) {
  var result = sk$Set.mcreateFromItems(new (sk$Array)([]));
  var t$ = items;
  var t$1 = t$;
  t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    if (t$2.contains(t$3).__value)
      {
        var t$4 = result;
        var t$5 = x;
        return t$4.insert(t$5);
      }
    else
      return sk.__.$void;
  }));
  var t$6 = result;
  return t$6;
};

sk$Set.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Set.prototype.join = function(separator) {
  var t$ = this;
  var $var = t$.size();
  {
    jumpBlockOuterjumpLab$bg16246:{
      jumpLab$bg16246:{
        jumpLab$bg16245:{
          {
            var _tmp516 = $var.__getSwitchValue();
            switch (_tmp516) {
              case 0:
                break jumpLab$bg16245;
              
              default:
                break jumpLab$bg16246;

            }
          }
        }
        return new sk$String((''));
      }
      {
        var t$1 = this;
        var t$2 = t$1.toArray();
        var t$3 = separator;
        return t$2.join(t$3);
      }
    }
  }
};

sk$Set.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = k;
  var t$3 = t$1.maybeGetItem(t$2);
  return t$3.map(((p) => 
  {
    var t$4 = p;
    return t$4.i0;
  }));
};

sk$Set.prototype.maybeInsert = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.maybeSet(t$2, singleton$Set$dtEmptyValue);
};

sk$Set.prototype.maybeRemove = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.maybeRemove(t$2);
};

sk$Set.mcreate = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = capacity;
  var t$1 = sk$Map.mcreate(t$);
  return new (sk$Set)(t$1);
};

sk$Set.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = this;
      return t$3.mcreate(new sk$Int(0.0, 0.0));
    }
  else
    {
      var t$4 = size;
      var inner = sk$Map.mcreate(t$4);
      var t$5 = items;
      var t$6 = t$5;
      t$6.each(((k) => 
      {
        var t$7 = inner;
        var t$8 = k;
        return t$7.set(t$8, singleton$Set$dtEmptyValue);
      }));
      var t$9 = inner;
      return new (sk$Set)(t$9);
    }
};

sk$Set.mcreateFromIterator = function(items) {
  var inner = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = items;
  var t$1 = t$;
  t$1.each(((k) => 
  {
    var t$2 = inner;
    var t$3 = k;
    return t$2.set(t$3, singleton$Set$dtEmptyValue);
  }));
  var t$4 = inner;
  return new (sk$Set)(t$4);
};

sk$Set.meta = function(itemClass) {
  var t$ = itemClass;
  return new (sk$SetMetaClass)(t$);
};

sk$Set.prototype.perturb = function(rng) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg16287:{
      break$bg16287:{
        dowhile_else$bg16286:{
          do
            {
              jumpBlockOuterdowhile_cond$bg16288:{
                dowhile_cond$bg16288:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg16296:{
                        jumpLab$bg16296:{
                          jumpLab$bg16295:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg16295;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg16296;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg16288;
                          }
                        }
                        {
                          var t$2 = x;
                          var t$3 = rng;
                          t$2.perturb(t$3);
                        }
                        break jumpBlockOuterjumpLab$bg16296;
                      }
                    }
                    break dowhile_cond$bg16288;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg16286;
                break jumpBlockOuterdowhile_cond$bg16288;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg16287;
      }
      {}
      break jumpBlockOuterbreak$bg16287;
    }
  }
  return break_val;
};

sk$Set.prototype.remove = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.remove(t$2);
};

sk$Set.prototype.shrink = function(_firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (_firstShrink === undefined)
      _firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    var t$1 = t$.isEmpty();
    if (t$1.$bg().__value)
      yield new sk$Some(sk$Set.createFromItems(new (sk$Array)([])));
    else
      {}
    return undefined;
  });
};

sk$Set.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.size();
};

sk$Set.prototype.subtract = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    t$2.maybeRemove(t$3);
    return sk.__.$void;
  }));
};

sk$Set.prototype.toArray = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new (sk$Array)([]);
  else
    {
      var t$1 = this;
      return t$1.collect(sk$Array);
    }
};

sk$Set.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.join(new sk$String((', ')));
  var t$2 = new sk$String(('Set[')).$pl(t$1);
  return t$2.$pl(new sk$String((']')));
};

sk$Set.prototype.union = function(items) {
  var t$ = this;
  var t$1 = t$;
  var ret = t$1.clone(undefined);
  var t$2 = ret;
  var t$3 = items;
  t$2.extend(t$3);
  var t$4 = ret;
  return t$4;
};

sk$Set.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.keys();
};

sk$Set.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Set.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Set.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Set.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Set.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Set.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Set.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Set.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Set.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Set.prototype.__bases = [
  sk$Set,
  sk$Sequence,
  sk$UniqueSequence
];

var sk$Set$dtHH_keyset2 = sk.Set$dtHH_keyset2 = function Set$dtHH_keyset2(__named_parameters) {
  sk$Sequence.prototype.__init.call(this, __named_parameters);
  sk$UniqueSequence.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$Set$dtHH_keyset2.prototype = Object.create(Object.prototype);

sk$Set$dtHH_keyset2.prototype.__constructor = sk$Set$dtHH_keyset2;

sk$Set$dtHH_keyset2.prototype.__classname = 'Set.HH_keyset2';

sk$Set$dtHH_keyset2.prototype.$frozen = true;

sk$Set$dtHH_keyset2.prototype.__type_switch_id = 271;

sk$Set$dtHH_keyset2.prototype.__init = function(__named_parameters) {};

sk$Set$dtHH_keyset2.prototype.add = function(_v) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.chill = function() {
  var t$ = this;
  var t$1 = sk$HhvmInterop$dtfetchProxyPointer(t$);
  return sk$HhvmInterop$dtcreateFromProxyPointer(t$1);
};

sk$Set$dtHH_keyset2.prototype.clear = function() {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.clone = function(_reserveCapacity) {
  if (_reserveCapacity === undefined)
    _reserveCapacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.contains = function(_k) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.containsAll = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.all(((_tmp16409) => 
  {
    return t$3.contains(_tmp16409);
  }));
};

sk$Set$dtHH_keyset2.prototype.containsAny = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.any(((_tmp16414) => 
  {
    return t$3.contains(_tmp16414);
  }));
};

sk$Set$dtHH_keyset2.createFromItems = function(_items) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.createFromIterator = function(items) {
  var t$ = this;
  var res = t$.internalCreate();
  var t$1 = items;
  var t$2 = t$1;
  t$2.each(((i) => 
  {
    var t$3 = this;
    var t$4 = res;
    var t$5 = i;
    return t$3.internalSet(t$4, t$5);
  }));
  var t$6 = res;
  return t$6.chill();
};

sk$Set$dtHH_keyset2.prototype.difference = function(_items) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.ensureCapacity = function(_capacity) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.extend = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    return t$2.insert(t$3);
  }));
};

sk$Set$dtHH_keyset2.prototype.filter = function(p) {
  var static1 = this.__constructor;
  var t$ = static1;
  var set = t$.mcreate(undefined);
  var t$1 = this;
  t$1.each(((x) => 
  {
    var t$2 = p;
    var t$3 = x;
    if (t$2(t$3).__value)
      {
        var t$4 = set;
        var t$5 = x;
        return t$4.add(t$5);
      }
    else
      return sk.__.$void;
  }));
  return skip.deepFreeze(set, new Map());
};

sk$Set$dtHH_keyset2.prototype.filterNone = function() {
  return sk$invariant_violation(new sk$String(('UniqueSequence.filterNone(): undefined method, UniqueSequence<?_> cannot exist.')));
};

sk$Set$dtHH_keyset2.prototype.get = function(_k) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.insert = function(_v) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.internalCreate = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.HH_keyset2::internalCreate')));
};

sk$Set$dtHH_keyset2.internalSet = function(array, k) {
  var t$ = this;
  var t$1 = array;
  var t$2 = k;
  var t$3 = sk$HhvmInterop$dtinternalBitcastToRetValue(t$2);
  return t$.internalSetHelper(t$1, t$3);
};

sk$Set$dtHH_keyset2.internalSetHelper = function(array, k) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Set.HH_keyset2::internalSetHelper')));
};

sk$Set$dtHH_keyset2.prototype.intersection = function(_items) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$Set$dtHH_keyset2.prototype.maybeGet = function(_k) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.maybeInsert = function(_v) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.maybeRemove = function(_v) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.mcreate = function(_capacity) {
  if (_capacity === undefined)
    _capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.mcreateFromItems = function(_items) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.remove = function(_v) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.size = function() {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.subtract = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    t$2.maybeRemove(t$3);
    return sk.__.$void;
  }));
};

sk$Set$dtHH_keyset2.prototype.union = function(_items) {
  return sk$invariant_violation(new sk$String(('unimplemented')));
};

sk$Set$dtHH_keyset2.prototype.values = function() {
  var t$ = this;
  return sk$Set$dtKeysetIterator.make(t$);
};

sk$Set$dtHH_keyset2.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Set$dtHH_keyset2.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Set$dtHH_keyset2.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Set$dtHH_keyset2.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Set$dtHH_keyset2.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Set$dtHH_keyset2.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Set$dtHH_keyset2.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Set$dtHH_keyset2.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Set$dtHH_keyset2.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Set$dtHH_keyset2.prototype.__bases = [
  sk$Set$dtHH_keyset2,
  sk$Sequence,
  sk$UniqueSequence
];

sk$Set$dtHH_keyset2 = sk.Set$dtHH_keyset2 = skip.initNativeClass(sk, 'Set.HH_keyset2', sk$Set$dtHH_keyset2);

var sk$SortedMap$dtItemsIterator = sk.SortedMap$dtItemsIterator = function SortedMap$dtItemsIterator(nodes) {
  this.nodes = nodes;
};

sk$SortedMap$dtItemsIterator.prototype = Object.create(Object.prototype);

sk$SortedMap$dtItemsIterator.prototype.__constructor = sk$SortedMap$dtItemsIterator;

sk$SortedMap$dtItemsIterator.prototype.__classname = 'SortedMap.ItemsIterator';

sk$SortedMap$dtItemsIterator.prototype.$frozen = false;

sk$SortedMap$dtItemsIterator.prototype.__type_switch_id = 123;

sk$SortedMap$dtItemsIterator.prototype.__copy = function() {
  return new (sk$SortedMap$dtItemsIterator)(this.nodes);
};

sk$SortedMap$dtItemsIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp517 = __cache.get(this);
  if (_tmp517 === undefined)
    {
      var _tmp517 = this.__copy();
      _tmp517.$frozen = true;
      __cache.set(this, _tmp517);
      _tmp517.nodes = skip.deepFreeze(_tmp517.nodes, __cache);
    }
  return _tmp517;
};

sk$SortedMap$dtItemsIterator.prototype.__init = function(__named_parameters) {};

sk$SortedMap$dtItemsIterator.extend = function(nodes, node) {
  var break_val;
  {
    jumpBlockOuterbreak$bg18936:{
      break$bg18936:{
        do
          {
            jumpBlockOutercontinue$bg18937:{
              continue$bg18937:{
                {
                  var current;
                  {
                    jumpBlockOuterjumpLab$bg18944:{
                      jumpLab$bg18944:{
                        jumpLab$bg18943:{
                          switch (node.__type_switch_id) {
                            case 314:
                              break jumpLab$bg18943;
                            
                            case 315:
                              current = node;
                              break jumpLab$bg18944;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg18936;
                        }
                      }
                      {
                        var t$ = nodes;
                        var t$1 = current;
                        t$.push(t$1);
                        var t$2 = current;
                        node = t$2.left;
                      }
                      break jumpBlockOuterjumpLab$bg18944;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg18937;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg18936;
    }
  }
  return break_val;
};

sk$SortedMap$dtItemsIterator.prototype.extractNodeValue = function(node) {
  var t$ = node;
  var t$1 = t$.key;
  var t$2 = node;
  var t$3 = t$2.value;
  return new (sk$Tuple2)(t$1, t$3);
};

sk$SortedMap$dtItemsIterator.make = function(map) {
  var node;
  {
    jumpBlockOuterjumpLab$bg18959:{
      jumpLab$bg18959:{
        jumpLab$bg18958:{
          switch (map.__type_switch_id) {
            case 314:
              break jumpLab$bg18958;
            
            case 315:
              node = map;
              break jumpLab$bg18959;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = sk$Vector.mcreateFromItems(new (sk$Array)([]));
          return new (sk$SortedMap$dtItemsIterator)(t$);
        }
      }
      {
        var t$1 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
        var nodes = t$1;
        var t$2 = this;
        var t$3 = nodes;
        var t$4 = node;
        t$2.extend(t$3, t$4);
        var t$5 = nodes;
        return new (sk$SortedMap$dtItemsIterator)(t$5);
      }
    }
  }
};

sk$SortedMap$dtItemsIterator.prototype.next = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.nodes;
  var t$2 = t$1.size();
  if (t$2.$lt$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = t$3.nodes;
      var node = t$4.pop();
      var t$5 = this;
      var t$6 = node;
      var t$7 = t$5.extractNodeValue(t$6);
      var v = new (sk$Some)(t$7);
      var t$8 = static1;
      var t$9 = this;
      var t$10 = t$9.nodes;
      var t$11 = node;
      var t$12 = t$11.right;
      t$8.extend(t$10, t$12);
      return v;
    }
};

sk$SortedMap$dtItemsIterator.prototype.__bases = [
  sk$SortedMap$dtItemsIterator,
  sk$Iterator,
  sk$SortedMap$dtSortedMapIterator
];

var sk$SortedMap$dtKeysIterator = sk.SortedMap$dtKeysIterator = function SortedMap$dtKeysIterator(nodes) {
  this.nodes = nodes;
};

sk$SortedMap$dtKeysIterator.prototype = Object.create(Object.prototype);

sk$SortedMap$dtKeysIterator.prototype.__constructor = sk$SortedMap$dtKeysIterator;

sk$SortedMap$dtKeysIterator.prototype.__classname = 'SortedMap.KeysIterator';

sk$SortedMap$dtKeysIterator.prototype.$frozen = false;

sk$SortedMap$dtKeysIterator.prototype.__type_switch_id = 124;

sk$SortedMap$dtKeysIterator.prototype.__copy = function() {
  return new (sk$SortedMap$dtKeysIterator)(this.nodes);
};

sk$SortedMap$dtKeysIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp518 = __cache.get(this);
  if (_tmp518 === undefined)
    {
      var _tmp518 = this.__copy();
      _tmp518.$frozen = true;
      __cache.set(this, _tmp518);
      _tmp518.nodes = skip.deepFreeze(_tmp518.nodes, __cache);
    }
  return _tmp518;
};

sk$SortedMap$dtKeysIterator.prototype.__init = function(__named_parameters) {};

sk$SortedMap$dtKeysIterator.extend = function(nodes, node) {
  var break_val;
  {
    jumpBlockOuterbreak$bg18978:{
      break$bg18978:{
        do
          {
            jumpBlockOutercontinue$bg18979:{
              continue$bg18979:{
                {
                  var current;
                  {
                    jumpBlockOuterjumpLab$bg18986:{
                      jumpLab$bg18986:{
                        jumpLab$bg18985:{
                          switch (node.__type_switch_id) {
                            case 314:
                              break jumpLab$bg18985;
                            
                            case 315:
                              current = node;
                              break jumpLab$bg18986;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg18978;
                        }
                      }
                      {
                        var t$ = nodes;
                        var t$1 = current;
                        t$.push(t$1);
                        var t$2 = current;
                        node = t$2.left;
                      }
                      break jumpBlockOuterjumpLab$bg18986;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg18979;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg18978;
    }
  }
  return break_val;
};

sk$SortedMap$dtKeysIterator.prototype.extractNodeValue = function(node) {
  var t$ = node;
  return t$.key;
};

sk$SortedMap$dtKeysIterator.make = function(map) {
  var node;
  {
    jumpBlockOuterjumpLab$bg18998:{
      jumpLab$bg18998:{
        jumpLab$bg18997:{
          switch (map.__type_switch_id) {
            case 314:
              break jumpLab$bg18997;
            
            case 315:
              node = map;
              break jumpLab$bg18998;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = sk$Vector.mcreateFromItems(new (sk$Array)([]));
          return new (sk$SortedMap$dtKeysIterator)(t$);
        }
      }
      {
        var t$1 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
        var nodes = t$1;
        var t$2 = this;
        var t$3 = nodes;
        var t$4 = node;
        t$2.extend(t$3, t$4);
        var t$5 = nodes;
        return new (sk$SortedMap$dtKeysIterator)(t$5);
      }
    }
  }
};

sk$SortedMap$dtKeysIterator.prototype.next = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.nodes;
  var t$2 = t$1.size();
  if (t$2.$lt$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = t$3.nodes;
      var node = t$4.pop();
      var t$5 = this;
      var t$6 = node;
      var t$7 = t$5.extractNodeValue(t$6);
      var v = new (sk$Some)(t$7);
      var t$8 = static1;
      var t$9 = this;
      var t$10 = t$9.nodes;
      var t$11 = node;
      var t$12 = t$11.right;
      t$8.extend(t$10, t$12);
      return v;
    }
};

sk$SortedMap$dtKeysIterator.prototype.__bases = [
  sk$SortedMap$dtKeysIterator,
  sk$Iterator,
  sk$SortedMap$dtSortedMapIterator
];

var sk$SortedMap$dtValuesIterator = sk.SortedMap$dtValuesIterator = function SortedMap$dtValuesIterator(nodes) {
  this.nodes = nodes;
};

sk$SortedMap$dtValuesIterator.prototype = Object.create(Object.prototype);

sk$SortedMap$dtValuesIterator.prototype.__constructor = sk$SortedMap$dtValuesIterator;

sk$SortedMap$dtValuesIterator.prototype.__classname = 'SortedMap.ValuesIterator';

sk$SortedMap$dtValuesIterator.prototype.$frozen = false;

sk$SortedMap$dtValuesIterator.prototype.__type_switch_id = 125;

sk$SortedMap$dtValuesIterator.prototype.__copy = function() {
  return new (sk$SortedMap$dtValuesIterator)(this.nodes);
};

sk$SortedMap$dtValuesIterator.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp519 = __cache.get(this);
  if (_tmp519 === undefined)
    {
      var _tmp519 = this.__copy();
      _tmp519.$frozen = true;
      __cache.set(this, _tmp519);
      _tmp519.nodes = skip.deepFreeze(_tmp519.nodes, __cache);
    }
  return _tmp519;
};

sk$SortedMap$dtValuesIterator.prototype.__init = function(__named_parameters) {};

sk$SortedMap$dtValuesIterator.extend = function(nodes, node) {
  var break_val;
  {
    jumpBlockOuterbreak$bg20337:{
      break$bg20337:{
        do
          {
            jumpBlockOutercontinue$bg20338:{
              continue$bg20338:{
                {
                  var current;
                  {
                    jumpBlockOuterjumpLab$bg20345:{
                      jumpLab$bg20345:{
                        jumpLab$bg20344:{
                          switch (node.__type_switch_id) {
                            case 314:
                              break jumpLab$bg20344;
                            
                            case 315:
                              current = node;
                              break jumpLab$bg20345;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          break_val = sk.__.$void;
                          break break$bg20337;
                        }
                      }
                      {
                        var t$ = nodes;
                        var t$1 = current;
                        t$.push(t$1);
                        var t$2 = current;
                        node = t$2.left;
                      }
                      break jumpBlockOuterjumpLab$bg20345;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg20338;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg20337;
    }
  }
  return break_val;
};

sk$SortedMap$dtValuesIterator.prototype.extractNodeValue = function(node) {
  var t$ = node;
  return t$.value;
};

sk$SortedMap$dtValuesIterator.make = function(map) {
  var node;
  {
    jumpBlockOuterjumpLab$bg20357:{
      jumpLab$bg20357:{
        jumpLab$bg20356:{
          switch (map.__type_switch_id) {
            case 314:
              break jumpLab$bg20356;
            
            case 315:
              node = map;
              break jumpLab$bg20357;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = sk$Vector.mcreateFromItems(new (sk$Array)([]));
          return new (sk$SortedMap$dtValuesIterator)(t$);
        }
      }
      {
        var t$1 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
        var nodes = t$1;
        var t$2 = this;
        var t$3 = nodes;
        var t$4 = node;
        t$2.extend(t$3, t$4);
        var t$5 = nodes;
        return new (sk$SortedMap$dtValuesIterator)(t$5);
      }
    }
  }
};

sk$SortedMap$dtValuesIterator.prototype.next = function() {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.nodes;
  var t$2 = t$1.size();
  if (t$2.$lt$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = t$3.nodes;
      var node = t$4.pop();
      var t$5 = this;
      var t$6 = node;
      var t$7 = t$5.extractNodeValue(t$6);
      var v = new (sk$Some)(t$7);
      var t$8 = static1;
      var t$9 = this;
      var t$10 = t$9.nodes;
      var t$11 = node;
      var t$12 = t$11.right;
      t$8.extend(t$10, t$12);
      return v;
    }
};

sk$SortedMap$dtValuesIterator.prototype.__bases = [
  sk$SortedMap$dtValuesIterator,
  sk$Iterator,
  sk$SortedMap$dtSortedMapIterator
];

var sk$String$dtUtf8View = sk.String$dtUtf8View = function String$dtUtf8View(bytes) {
  this.bytes = bytes;
};

sk$String$dtUtf8View.prototype = Object.create(Object.prototype);

sk$String$dtUtf8View.prototype.__constructor = sk$String$dtUtf8View;

sk$String$dtUtf8View.prototype.__classname = 'String.Utf8View';

sk$String$dtUtf8View.prototype.$frozen = true;

sk$String$dtUtf8View.prototype.__type_switch_id = 266;

sk$String$dtUtf8View.prototype.__copy = function() {
  return new (sk$String$dtUtf8View)(this.bytes);
};

sk$String$dtUtf8View.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp520 = __cache.get(this);
  if (_tmp520 === undefined)
    {
      var _tmp520 = this.__copy();
      _tmp520.$frozen = true;
      __cache.set(this, _tmp520);
      _tmp520.bytes = skip.deepFreeze(_tmp520.bytes, __cache);
    }
  return _tmp520;
};

sk$String$dtUtf8View.prototype.__init = function(__named_parameters) {};

sk$String$dtUtf8View.prototype.chill = function() {
  return this;
};

sk$String$dtUtf8View.prototype.concat = function(second) {
  var t$ = this;
  var result = sk$Vector.mcreateFromItems(t$);
  var t$1 = result;
  var t$2 = second;
  t$1.extend(t$2);
  var t$3 = result;
  return t$3;
};

sk$String$dtUtf8View.prototype.contains = function(second) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = x;
    var t$3 = second;
    return t$2.$eq$eq(t$3);
  }));
  return t$1.isSome();
};

sk$String$dtUtf8View.prototype.difference = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp21362) => 
  {
    return t$6.add(_tmp21362);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    var t$10 = t$8.contains(t$9);
    if (t$10.$bg().__value)
      {
        var t$11 = result;
        var t$12 = value;
        return t$11.push(t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$String$dtUtf8View.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$String$dtUtf8View.prototype.genAll = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = (yield t$.genFind(((x) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = p;
        var t$3 = x;
        var t$4 = (yield t$2(t$3));
      }
      return t$4.$bg();
    })());
  })));
  return t$1.isNone();
});

sk$String$dtUtf8View.prototype.genAny = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = (yield t$.genFind(t$1));
  return t$2.isSome();
});

sk$String$dtUtf8View.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = p;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.get(t$4);
    return t$2(t$5);
  })));
  var t$6 = predicates;
  var nextSz = t$6.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$7 = sum;
        return t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var next = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg21391:{
      break$bg21391:{
        while_else$bg21390:{
          do
            {
              jumpBlockOutercontinue$bg21392:{
                continue$bg21392:{
                  {
                    var t$8 = toIndex;
                    var t$9 = nextSz;
                    if (t$8.ult(t$9).__value)
                      {
                        var t$10 = predicates;
                        var t$11 = fromIndex;
                        var t$12;
                        if (t$10.get(t$11).__value)
                          {
                            var t$13 = next;
                            var t$14 = toIndex;
                            var t$15 = this;
                            var t$16 = fromIndex;
                            var t$17 = t$15.get(t$16);
                            t$13.set(t$14, t$17);
                            var t$18 = toIndex;
                            toIndex = t$18.$pl(new sk$Int(1.0, 0.0));
                            t$12 = sk.__.$void;
                          }
                        else
                          t$12 = sk.__.$void;
                        var t$19 = fromIndex;
                        fromIndex = t$19.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg21390;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg21392;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg21391;
      }
      {}
      break jumpBlockOuterbreak$bg21391;
    }
  }
  var t$20 = next;
  return t$20;
});

sk$String$dtUtf8View.prototype.genFind = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  return (yield t$.genFindTailLoop(t$1, new sk$Int(0.0, 0.0)));
});

sk$String$dtUtf8View.prototype.genFindTailLoop = skip.asyncToGenerator(function*(p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var item = t$3.get(t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = p;
          var t$10 = index;
          var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindTailLoop(t$9, t$11));
        }
    }
});

sk$String$dtUtf8View.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var nextInner = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = s;
        var t$3 = this;
        var t$4 = index;
        var t$5 = t$3.get(t$4);
        var awaitable_x = t$2(t$5);
      }
      return (yield awaitable_x);
    })());
  })));
  var t$6 = nextInner;
  return sk$Vector.createFromItems(t$6);
});

sk$String$dtUtf8View.prototype.get = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = t$3.bytes;
  var t$5 = index;
  return t$4.get(t$5);
};

sk$String$dtUtf8View.prototype.groupBy = function(s) {
  var result = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = s;
    var t$2 = value;
    var key = t$1(t$2);
    var t$3 = result;
    var t$4 = key;
    var items = t$3.getOrAdd(t$4, (() => 
    {
      return sk$Vector.mcreate(new sk$Int(0.0, 0.0));
    }));
    var t$5 = items;
    var t$6 = value;
    return t$5.push(t$6);
  }));
  var t$7 = result;
  var t$8 = t$7.map(((_, items1) => 
  {
    var t$9 = items1;
    return t$9;
  }));
  return t$8;
};

sk$String$dtUtf8View.prototype.indexOf = function(predicate) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = index;
    index = t$2.$pl(new sk$Int(1.0, 0.0));
    var t$3 = x;
    var t$4 = predicate;
    return t$3.$eq$eq(t$4);
  }));
  return t$1.map(((_) => 
  {
    return index;
  }));
};

sk$String$dtUtf8View.prototype.intersection = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp21462) => 
  {
    return t$6.add(_tmp21462);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    if (t$8.contains(t$9).__value)
      {
        var t$10 = result;
        var t$11 = value;
        return t$10.push(t$11);
      }
    else
      return sk.__.$void;
  }));
  var t$12 = result;
  return t$12;
};

sk$String$dtUtf8View.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$String$dtUtf8View.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$String$dtUtf8View.prototype.maybeGet = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var t$5 = t$3.get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$String$dtUtf8View.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$String$dtUtf8View.prototype.partition = function(p) {
  var pass = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var fail = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = pass;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      {
        var t$5 = fail;
        var t$6 = value;
        return t$5.push(t$6);
      }
  }));
  var t$7 = pass;
  var t$8 = t$7;
  var t$9 = fail;
  var t$10 = t$9;
  return new (sk$Tuple2)(t$8, t$10);
};

sk$String$dtUtf8View.prototype.sample = function(rng, count) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = count;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$2 = sz;
      var t$3 = count;
      if (t$2.$lt$eq(t$3).__value)
        {
          var t$4 = this;
          return t$4.chill();
        }
      else
        {
          var t$5 = count;
          var t$6 = t$5.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$6, new sk$String(('Vector.sample(): Expected count to be nonnegative.')));
          var t$7 = this;
          var t$8 = count;
          var t$9 = t$7.slice(new sk$Int(0.0, 0.0), t$8);
          var sample = sk$Vector.mcreateFromItems(t$9);
          var t$10 = count;
          var t$11 = sz;
          var t$12 = new (sk$Range)(t$10, t$11);
          var $var = t$12.values();
          var var1 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg21515:{
              break$bg21515:{
                dowhile_else$bg21514:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg21516:{
                        dowhile_cond$bg21516:{
                          {
                            var t$13 = $var;
                            var var2 = t$13.next();
                            var index;
                            {
                              jumpBlockOuterjumpLab$bg21534:{
                                jumpLab$bg21534:{
                                  jumpLab$bg21533:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg21533;
                                      
                                      case 205:
                                        index = var2.value;
                                        break jumpLab$bg21534;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var1 = new sk$Bool((false));
                                    break dowhile_cond$bg21516;
                                  }
                                }
                                {
                                  var t$14 = rng;
                                  var t$15 = index;
                                  var t$16 = t$15.$pl(new sk$Int(1.0, 0.0));
                                  var swap = t$14.random(new sk$Int(0.0, 0.0), t$16);
                                  var t$17 = swap;
                                  var t$18 = count;
                                  var t$19;
                                  if (t$17.$lt(t$18).__value)
                                    {
                                      var t$20 = sample;
                                      var t$21 = swap;
                                      var t$22 = this;
                                      var t$23 = index;
                                      var t$24 = t$22.get(t$23);
                                      t$20.set(t$21, t$24);
                                      t$19 = sk.__.$void;
                                    }
                                  else
                                    t$19 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg21534;
                              }
                            }
                            break dowhile_cond$bg21516;
                          }
                        }
                        if (var1.__value)
                          {}
                        else
                          break dowhile_else$bg21514;
                        break jumpBlockOuterdowhile_cond$bg21516;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg21515;
              }
              {}
              break jumpBlockOuterbreak$bg21515;
            }
          }
          var t$25 = sample;
          return t$25;
        }
    }
};

sk$String$dtUtf8View.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.bytes;
  return t$1.size();
};

sk$String$dtUtf8View.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var t$ = this;
  var sz = t$.size();
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$15 = end;
      var t$16 = start;
      var capacity = t$15.$mi(t$16);
      var t$17 = capacity;
      return sk$Vector.fillBy(t$17, ((i) => 
      {
        var t$18 = this;
        var t$19 = i;
        var t$20 = start;
        var t$21 = t$19.$pl(t$20);
        return t$18.get(t$21);
      }));
    }
};

sk$String$dtUtf8View.prototype.unique = function() {
  var set = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = set;
    var t$2 = value;
    return t$1.set(t$2, sk.__.$void);
  }));
  var t$3 = set;
  var t$4 = t$3.size();
  var result = sk$Vector.mcreate(t$4);
  var t$5 = set;
  t$5.each(((value1, _) => 
  {
    var t$6 = result;
    var t$7 = value1;
    return t$6.push(t$7);
  }));
  var t$8 = result;
  return t$8;
};

sk$String$dtUtf8View.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.bytes;
  return t$1.values();
};

sk$String$dtUtf8View.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$String$dtUtf8View.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$String$dtUtf8View.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$String$dtUtf8View.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$String$dtUtf8View.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$String$dtUtf8View.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$String$dtUtf8View.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$String$dtUtf8View.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$String$dtUtf8View.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$String$dtUtf8View.prototype.__bases = [
  sk$String$dtUtf8View,
  sk$Sequence,
  sk$IndexedSequence
];

var sk$UnorderedMap = sk.UnorderedMap = function UnorderedMap(slots, sz, shift, generation_PRIVATE) {
  this.slots = slots;
  this.sz = sz;
  this.shift = shift;
  this.generation_PRIVATE = generation_PRIVATE;
};

sk$UnorderedMap.prototype = Object.create(Object.prototype);

sk$UnorderedMap.prototype.__constructor = sk$UnorderedMap;

sk$UnorderedMap.prototype.__classname = 'UnorderedMap';

sk$UnorderedMap.prototype.$frozen = false;

sk$UnorderedMap.prototype.__type_switch_id = 169;

sk$UnorderedMap.prototype.__copy = function() {
  return new (sk$UnorderedMap)(this.slots, this.sz, this.shift, this.generation_PRIVATE);
};

sk$UnorderedMap.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp521 = __cache.get(this);
  if (_tmp521 === undefined)
    {
      var _tmp521 = this.__copy();
      _tmp521.$frozen = true;
      __cache.set(this, _tmp521);
      _tmp521.slots = skip.deepFreeze(_tmp521.slots, __cache);
      _tmp521.sz = skip.deepFreeze(_tmp521.sz, __cache);
      _tmp521.shift = skip.deepFreeze(_tmp521.shift, __cache);
      _tmp521.generation_PRIVATE = skip.deepFreeze(_tmp521.generation_PRIVATE, __cache);
    }
  return _tmp521;
};

sk$UnorderedMap.prototype.__init = function(__named_parameters) {};

sk$UnorderedMap.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$UnorderedMap.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = other;
  var t$3 = t$2.size();
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = this;
      var t$5 = t$4;
      var t$6 = t$5.slots;
      return t$6.all(((slot) => 
      {
        var t$7 = slot;
        if (t$7.isEmpty().__value)
          return new sk$Bool((true));
        else
          {
            var t$8 = slot;
            var h = t$8.hash;
            var t$9 = other;
            var t$10 = h;
            var t$11 = slot;
            var t$12 = t$11.key();
            var $var = t$9.maybeGetItemLoop(t$10, t$12);
            var v;
            {
              jumpBlockOuterjumpLab$bg25517:{
                jumpLab$bg25517:{
                  jumpLab$bg25516:{
                    jumpLab$bg25518:{
                      switch ($var.__type_switch_id) {
                        case 205:
                          break jumpLab$bg25518;
                        
                        case 204:
                          break jumpLab$bg25517;
                        
                        default:
                          skip.throwException(sk, new Error('Unmatched Branch'));

                      }
                    }
                    switch ($var.value.__type_switch_id) {
                      case 392:
                        v = $var.value.i1;
                        break jumpLab$bg25516;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$13 = slot;
                    var t$14 = t$13.value();
                    var t$15 = v;
                    return t$14.$eq$eq(t$15);
                  }
                }
                return new sk$Bool((false));
              }
            }
          }
      }));
    }
  else
    return new sk$Bool((false));
};

sk$UnorderedMap.prototype.add = function(k, v) {
  var t$ = this;
  var t$1 = k;
  var t$2 = v;
  var t$3 = t$.maybeSet(t$1, t$2);
  if (t$3.$bg().__value)
    skip.throwException(sk, singleton$Duplicate);
  else
    return sk.__.$void;
};

sk$UnorderedMap.prototype.all = function(p) {
  var t$ = this;
  var t$1 = t$.find(((k, v) => 
  {
    var t$2 = p;
    var t$3 = k;
    var t$4 = v;
    var t$5 = t$2(t$3, t$4);
    return t$5.$bg();
  }));
  return t$1.isNone();
};

sk$UnorderedMap.prototype.any = function(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = t$.find(t$1);
  return t$2.isSome();
};

sk$UnorderedMap.prototype.capacity = function() {
  var t$ = this;
  return t$.capacityImpl();
};

sk$UnorderedMap.prototype.capacityImpl = function() {
  var t$ = this;
  var t$1 = t$.slots;
  var t$2 = t$1.size();
  var t$3 = t$2.ushr(new sk$Int(1.0, 0.0));
  return t$3.$mi(new sk$Int(1.0, 0.0));
};

sk$UnorderedMap.prototype.chill = function() {
  var t$ = this;
  var t$1 = t$.slots;
  var t$2 = t$1.chill();
  var t$3 = this;
  var t$4 = t$3.sz;
  var t$5 = this;
  var t$6 = t$5.shift;
  return new (sk$UnorderedMap)(t$2, t$4, t$6, new sk$Int(0.0, 0.0));
};

sk$UnorderedMap.prototype.clear = function() {
  var t$ = this;
  t$.invalidateIterators();
  var t$1 = this;
  var shift = t$1.shift;
  var t$2 = this;
  var t$3 = t$2.slots;
  var t$4 = t$3.size();
  var t$5 = new (sk$Range)(new sk$Int(0.0, 0.0), t$4);
  var $var = t$5.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg25558:{
      break$bg25558:{
        dowhile_else$bg25557:{
          do
            {
              jumpBlockOuterdowhile_cond$bg25559:{
                dowhile_cond$bg25559:{
                  {
                    var t$6 = $var;
                    var var2 = t$6.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg25573:{
                        jumpLab$bg25573:{
                          jumpLab$bg25572:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg25572;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg25573;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg25559;
                          }
                        }
                        {
                          var t$7 = this;
                          var t$8 = t$7.slots;
                          var t$9 = i;
                          var t$10 = i;
                          var t$11 = shift;
                          var t$12 = sk$Map$dtUnorderedMapSlot.emptyForIndex(t$10, t$11);
                          sk$Unsafe$dtarray_set(t$8, t$9, t$12);
                        }
                        break jumpBlockOuterjumpLab$bg25573;
                      }
                    }
                    break dowhile_cond$bg25559;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg25557;
                break jumpBlockOuterdowhile_cond$bg25559;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg25558;
      }
      {}
      break jumpBlockOuterbreak$bg25558;
    }
  }
  var var3 = this;
  var t$13 = var3;
  var t$14 = t$13;
  t$14.sz = new sk$Int(0.0, 0.0);
  return sk.__.$void;
};

sk$UnorderedMap.prototype.clone = function(reserveCapacity) {
  if (reserveCapacity === undefined)
    reserveCapacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = reserveCapacity;
  var capacity = t$1.$pl(t$2);
  var t$3 = capacity;
  var t$4 = this;
  var t$5 = t$4.capacityImpl();
  if (t$3.ule(t$5).__value)
    {
      var t$6 = this;
      var t$7 = t$6.slots;
      var t$8 = t$7.clone();
      var t$9 = this;
      var t$10 = t$9.sz;
      var t$11 = this;
      var t$12 = t$11.shift;
      return new (sk$UnorderedMap)(t$8, t$10, t$12, new sk$Int(0.0, 0.0));
    }
  else
    {
      var t$13 = capacity;
      var r = sk$UnorderedMap.mcreate(t$13);
      var t$14 = this;
      t$14.unsafeEach(((slot) => 
      {
        var t$15 = slot;
        var h = t$15.hash;
        var t$16 = r;
        var t$17 = h;
        var t$18 = slot;
        var t$19 = t$18.key();
        var t$20 = slot;
        var t$21 = t$20.value();
        t$16.maybeAddLoop(t$17, t$19, t$21, new sk$Bool((false)));
        return sk.__.$void;
      }));
      return r;
    }
};

sk$UnorderedMap.prototype.containsKey = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeGetItem(t$1);
  return t$2.isSome();
};

sk$UnorderedMap.createFromItems = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromItems(t$1);
  return t$2;
};

sk$UnorderedMap.createFromIterator = function(iterator) {
  var t$ = this;
  var t$1 = iterator;
  var t$2 = t$.mcreateFromIterator(t$1);
  return t$2;
};

sk$UnorderedMap.prototype.each = function(f) {
  var t$ = this;
  return t$.eachWhileImpl(((slot) => 
  {
    var t$1 = f;
    var t$2 = slot;
    var t$3 = t$2.key();
    var t$4 = slot;
    var t$5 = t$4.value();
    return t$1(t$3, t$5);
  }));
};

sk$UnorderedMap.prototype.eachWhileImpl = function(f) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var t$2 = t$1.generation_PRIVATE;
  var indexMinusGeneration = t$2.negate();
  var t$3 = slots;
  var sz = t$3.size();
  var break_val;
  {
    jumpBlockOuterbreak$bg25623:{
      break$bg25623:{
        while_else$bg25622:{
          do
            {
              jumpBlockOutercontinue$bg25624:{
                continue$bg25624:{
                  {
                    var t$4 = indexMinusGeneration;
                    var t$5 = this;
                    var t$6 = t$5.generation_PRIVATE;
                    var index = t$4.$pl(t$6);
                    var t$7 = index;
                    var t$8 = sz;
                    var t$9;
                    if (t$7.uge(t$8).__value)
                      {
                        var t$10 = index;
                        var t$11;
                        if (t$10.$gt$eq((sk$Map$dtgenerationSkip())).__value)
                          t$11 = sk$throwContainerChanged();
                        else
                          t$11 = sk.__.$void;
                        t$9 = new sk$Bool((false));
                      }
                    else
                      {
                        var t$12 = slots;
                        var t$13 = index;
                        var slot = sk$Unsafe$dtarray_get(t$12, t$13);
                        var t$14 = indexMinusGeneration;
                        indexMinusGeneration = t$14.$pl(new sk$Int(1.0, 0.0));
                        var t$15 = slot;
                        var t$16 = t$15.isEmpty();
                        var t$17;
                        if (t$16.$bg().__value)
                          {
                            var t$18 = f;
                            var t$19 = slot;
                            t$17 = t$18(t$19);
                          }
                        else
                          t$17 = sk.__.$void;
                        t$9 = new sk$Bool((true));
                      }
                    if (t$9.__value)
                      {}
                    else
                      break while_else$bg25622;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg25624;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg25623;
      }
      {}
      break jumpBlockOuterbreak$bg25623;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.ensureCapacity = function(capacity) {
  var t$ = capacity;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('UnorderedMap.ensureCapacity(): Expected capacity to be nonnegative.')));
  var t$2 = capacity;
  var t$3 = this;
  var t$4 = t$3.capacityImpl();
  if (t$2.ugt(t$4).__value)
    {
      var t$5 = capacity;
      var log2NumSlots = sk$Map$dtgetLogSlotSizeForCapacity(t$5);
      var t$6 = this;
      var t$7 = log2NumSlots;
      return t$6.growCapacity(t$7);
    }
  else
    return sk.__.$void;
};

sk$UnorderedMap.prototype.extend = function(second) {
  var t$ = second;
  return t$.each(((k, v) => 
  {
    var t$1 = this;
    var t$2 = k;
    var t$3 = v;
    return t$1.set(t$2, t$3);
  }));
};

sk$UnorderedMap.prototype.filter = function(p) {
  var static1 = this.__constructor;
  var t$ = static1;
  var result = t$.mcreate(new sk$Int(0.0, 0.0));
  var t$1 = this;
  t$1.eachWhileImpl(((slot) => 
  {
    var t$2 = slot;
    var k = t$2.key();
    var t$3 = slot;
    var v = t$3.value();
    var t$4 = p;
    var t$5 = k;
    var t$6 = v;
    if (t$4(t$5, t$6).__value)
      {
        var t$7 = result;
        t$7.rehashIfFull();
        var t$8 = slot;
        var h = t$8.hash;
        var t$9 = result;
        var t$10 = h;
        var t$11 = k;
        var t$12 = v;
        return t$9.setLoop(t$10, t$11, t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$UnorderedMap.prototype.filterNone = function() {
  var result = sk$UnorderedMap.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.eachWhileImpl(((slot) => 
  {
    var t$1 = slot;
    var k = t$1.key();
    var t$2 = slot;
    var $var = t$2.value();
    var v;
    {
      jumpBlockOuterjumpLab$bg25686:{
        jumpLab$bg25686:{
          jumpLab$bg25685:{
            switch ($var.__type_switch_id) {
              case 205:
                v = $var.value;
                break jumpLab$bg25685;
              
              default:
                break jumpLab$bg25686;

            }
          }
          {
            var t$3 = result;
            t$3.rehashIfFull();
            var t$4 = slot;
            var h = t$4.hash;
            var t$5 = result;
            var t$6 = h;
            var t$7 = k;
            var t$8 = v;
            return t$5.setLoop(t$6, t$7, t$8);
          }
        }
        return sk.__.$void;
      }
    }
  }));
  var t$9 = result;
  return t$9;
};

sk$UnorderedMap.prototype.find = function(p) {
  var t$ = this;
  var $var = t$.items();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg25691:{
      break$bg25691:{
        dowhile_else$bg25690:{
          do
            {
              jumpBlockOuterdowhile_cond$bg25692:{
                dowhile_cond$bg25692:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var k;
                    var v;
                    {
                      jumpBlockOuterjumpLab$bg25702:{
                        jumpLab$bg25702:{
                          jumpLab$bg25701:{
                            jumpLab$bg25703:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg25701;
                                
                                case 205:
                                  break jumpLab$bg25703;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                k = var2.value.i0;
                                v = var2.value.i1;
                                break jumpLab$bg25702;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg25692;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = k;
                          var t$4 = v;
                          if (t$2(t$3, t$4).__value)
                            {
                              var t$5 = v;
                              break_val = new (sk$Some)(t$5);
                              break break$bg25691;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg25702;
                      }
                    }
                    break dowhile_cond$bg25692;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg25690;
                break jumpBlockOuterdowhile_cond$bg25692;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg25691;
      }
      {}
      break jumpBlockOuterbreak$bg25691;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.findItem = function(p) {
  var t$ = this;
  var $var = t$.items();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg25709:{
      break$bg25709:{
        dowhile_else$bg25708:{
          do
            {
              jumpBlockOuterdowhile_cond$bg25710:{
                dowhile_cond$bg25710:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var k;
                    var v;
                    {
                      jumpBlockOuterjumpLab$bg25722:{
                        jumpLab$bg25722:{
                          jumpLab$bg25721:{
                            jumpLab$bg25723:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg25721;
                                
                                case 205:
                                  break jumpLab$bg25723;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                k = var2.value.i0;
                                v = var2.value.i1;
                                break jumpLab$bg25722;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg25710;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = k;
                          var t$4 = v;
                          if (t$2(t$3, t$4).__value)
                            {
                              var t$5 = k;
                              var t$6 = v;
                              var t$7 = new (sk$Tuple2)(t$5, t$6);
                              break_val = new (sk$Some)(t$7);
                              break break$bg25709;
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg25722;
                      }
                    }
                    break dowhile_cond$bg25710;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg25708;
                break jumpBlockOuterdowhile_cond$bg25710;
              }
            }
          while (true);
        }
        break_val = singleton$None;
        break jumpBlockOuterbreak$bg25709;
      }
      {}
      break jumpBlockOuterbreak$bg25709;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = slots;
  var t$2 = t$1.size();
  var predicates = (yield sk$ASIO$dtgenFillBy(t$2, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$3 = slots;
        var t$4 = index;
        var slot = sk$Unsafe$dtarray_get(t$3, t$4);
        var t$5 = slot;
        var t$6 = t$5.isEmpty();
        var t$7;
        if (t$6.$bg().__value)
          {
            var t$8 = p;
            var t$9 = slot;
            var t$10 = t$9.key();
            var t$11 = slot;
            var t$12 = t$11.value();
            t$7 = (yield t$8(t$10, t$12));
          }
        else
          t$7 = new sk$Bool((false));
      }
      return t$7;
    })());
  })));
  var t$13 = predicates;
  var nextSz = t$13.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$14 = sum;
        return t$14.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var t$15 = nextSz;
  var t$16 = this;
  var t$17 = t$16.sz;
  if (t$15.$eq$eq(t$17).__value)
    return this;
  else
    {
      var t$18 = nextSz;
      var result = sk$UnorderedMap.mcreate(t$18);
      var toIndex = new sk$Int(0.0, 0.0);
      var fromIndex = new sk$Int(0.0, 0.0);
      {
        jumpBlockOuterbreak$bg25749:{
          break$bg25749:{
            while_else$bg25748:{
              do
                {
                  jumpBlockOutercontinue$bg25750:{
                    continue$bg25750:{
                      {
                        var t$19 = toIndex;
                        var t$20 = nextSz;
                        if (t$19.ult(t$20).__value)
                          {
                            var t$21 = predicates;
                            var t$22 = fromIndex;
                            var t$23;
                            if (sk$Unsafe$dtarray_get(t$21, t$22).__value)
                              {
                                var t$24 = slots;
                                var t$25 = fromIndex;
                                var slot1 = sk$Unsafe$dtarray_get(t$24, t$25);
                                var t$26 = slot1;
                                var h = t$26.hash;
                                var t$27 = result;
                                var t$28 = h;
                                var t$29 = slot1;
                                var t$30 = t$29.key();
                                var t$31 = slot1;
                                var t$32 = t$31.value();
                                t$27.setLoop(t$28, t$30, t$32);
                                var t$33 = toIndex;
                                toIndex = t$33.$pl(new sk$Int(1.0, 0.0));
                                t$23 = sk.__.$void;
                              }
                            else
                              t$23 = sk.__.$void;
                            var t$34 = fromIndex;
                            fromIndex = t$34.$pl(new sk$Int(1.0, 0.0));
                          }
                        else
                          break while_else$bg25748;
                      }
                    }
                    {}
                    break jumpBlockOutercontinue$bg25750;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg25749;
          }
          {}
          break jumpBlockOuterbreak$bg25749;
        }
      }
      var t$35 = result;
      return t$35;
    }
});

sk$UnorderedMap.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = slots;
  var t$2 = t$1.size();
  var nextSlots = (yield sk$ASIO$dtgenFillBy(t$2, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$3 = slots;
        var t$4 = index;
        var slot = sk$Unsafe$dtarray_get(t$3, t$4);
        var t$5 = slot;
        var t$6;
        if (t$5.isEmpty().__value)
          {
            var t$7 = slot;
            var t$8 = t$7.hash;
            t$6 = sk$Map$dtUnorderedMapSlot.empty(t$8);
          }
        else
          {
            var t$9 = slot;
            var key = t$9.key();
            var t$10 = s;
            var t$11 = key;
            var t$12 = slot;
            var t$13 = t$12.value();
            var value = (yield t$10(t$11, t$13));
            var t$14 = slot;
            var t$15 = t$14.hash;
            var t$16 = key;
            var t$17 = value;
            t$6 = sk$Map$dtUnorderedMapSlot.create(t$15, t$16, t$17);
          }
      }
      return t$6;
    })());
  })));
  var t$18 = nextSlots;
  var t$19 = this;
  var t$20 = t$19.sz;
  var t$21 = this;
  var t$22 = t$21.shift;
  return new (sk$UnorderedMap)(t$18, t$20, t$22, new sk$Int(0.0, 0.0));
});

sk$UnorderedMap.prototype.get = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.getItem(t$1);
  return t$2.i1;
};

sk$UnorderedMap.prototype.getItem = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var p;
  {
    jumpBlockOuterjumpLab$bg25802:{
      jumpLab$bg25802:{
        jumpLab$bg25801:{
          switch ($var.__type_switch_id) {
            case 205:
              p = $var.value;
              break jumpLab$bg25801;
            
            case 204:
              break jumpLab$bg25802;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return p;
      }
      return sk$throwKeyNotFound();
    }
  }
};

sk$UnorderedMap.prototype.getOrAdd = function(k, f) {
  var t$ = k;
  var t$1 = t$.hash();
  var h = sk$Map$dtfinalizeHash(t$1);
  var t$2 = this;
  var t$3 = h;
  var t$4 = k;
  var $var = t$2.maybeGetItemLoop(t$3, t$4);
  var x;
  {
    jumpBlockOuterjumpLab$bg25820:{
      jumpLab$bg25820:{
        jumpLab$bg25819:{
          switch ($var.__type_switch_id) {
            case 205:
              x = $var.value;
              break jumpLab$bg25819;
            
            case 204:
              break jumpLab$bg25820;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = x;
          return t$5.i1;
        }
      }
      {
        var t$6 = f;
        var v = t$6();
        var t$7 = this;
        t$7.rehashIfFull();
        var t$8 = this;
        var t$9 = h;
        var t$10 = k;
        var t$11 = v;
        t$8.maybeAddLoop(t$9, t$10, t$11, new sk$Bool((false)));
        return v;
      }
    }
  }
};

sk$UnorderedMap.prototype.growCapacity = function(log2NumSlots) {
  var t$ = this;
  var oldSlots = t$.slots;
  var t$1 = this;
  var sz = t$1.sz;
  var t$2 = log2NumSlots;
  var shift = sk$Map$dtgetShiftForLogTableSize(t$2);
  var $var = this;
  var t$3 = $var;
  var t$4 = t$3;
  t$4.shift = shift;
  var var1 = this;
  var t$5 = var1;
  var t$6 = t$5;
  t$6.sz = new sk$Int(0.0, 0.0);
  var var2 = this;
  var t$7 = var2;
  var t$8 = log2NumSlots;
  var t$9 = new sk$Int(1.0, 0.0).shl(t$8);
  var t$10 = t$7;
  t$10.slots = sk$Array.mfillBy(t$9, ((i) => 
  {
    var t$11 = i;
    var t$12 = shift;
    return sk$Map$dtUnorderedMapSlot.emptyForIndex(t$11, t$12);
  }));
  var t$13 = oldSlots;
  t$13.each(((slot) => 
  {
    var t$14 = slot;
    var t$15 = t$14.isEmpty();
    if (t$15.$bg().__value)
      {
        var t$16 = slot;
        var h = t$16.hash;
        var t$17 = this;
        var t$18 = h;
        var t$19 = slot;
        var t$20 = t$19.key();
        var t$21 = slot;
        var t$22 = t$21.value();
        t$17.maybeAddLoop(t$18, t$20, t$22, new sk$Bool((false)));
        return sk.__.$void;
      }
    else
      return sk.__.$void;
  }));
  var t$23 = this;
  var t$24 = t$23.sz;
  var t$25 = sz;
  if (t$24.$bg$eq(t$25).__value)
    {
      var t$26 = sz;
      var t$27 = new sk$String(('UnorderedMap size changed during rehashing (')).$pl(t$26);
      var t$28 = t$27.$pl(new sk$String((' to ')));
      var t$29 = this;
      var t$30 = t$29.sz;
      var t$31 = t$28.$pl(t$30);
      var t$32 = t$31.$pl(new sk$String((') ')));
      var t$33 = t$32.$pl(new sk$String(('which probably indicates a mismatch between hash and ')));
      var t$34 = t$33.$pl(new sk$String(('equality methods, or an object\'s state changing after it ')));
      var t$35 = t$34.$pl(new sk$String(('was first inserted.')));
      return sk$invariant_violation(t$35);
    }
  else
    return sk.__.$void;
};

sk$UnorderedMap.prototype.hash = function() {
  var acc = new sk$Int(0.0, 0.0);
  var t$ = this;
  t$.unsafeEach(((slot) => 
  {
    var t$1 = slot;
    var kh = t$1.hash;
    var t$2 = slot;
    var t$3 = t$2.value();
    var vh = t$3.hash();
    var t$4 = kh;
    var t$5 = new sk$Int(64.0, 0.0).$mi(new sk$Int(6.0, 0.0));
    var lshift = t$4.ushr(t$5);
    var t$6 = lshift;
    var t$7 = t$6.negate();
    var rshift = t$7.and(new sk$Int(63.0, 0.0));
    var t$8 = vh;
    var t$9 = lshift;
    var vh1 = t$8.shl(t$9);
    var t$10 = vh;
    var t$11 = rshift;
    var vh2 = t$10.ushr(t$11);
    var t$12 = vh1;
    var t$13 = vh2;
    var vRotated = t$12.or(t$13);
    var t$14 = acc;
    var t$15 = kh;
    var t$16 = t$14.$pl(t$15);
    var t$17 = vRotated;
    acc = t$16.$pl(t$17);
    return sk.__.$void;
  }));
  return acc;
};

sk$UnorderedMap.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.size();
  var items = sk$Vector.mcreate(t$1);
  var t$2 = this;
  t$2.unsafeEach(((slot) => 
  {
    var t$3 = items;
    var t$4 = slot;
    var t$5 = t$4.key();
    var t$6 = sk$inspect(t$5);
    var t$7 = slot;
    var t$8 = t$7.value();
    var t$9 = sk$inspect(t$8);
    var t$10 = new (sk$Tuple2)(t$6, t$9);
    return t$3.push(t$10);
  }));
  var t$11 = items;
  var t$12 = t$11.toArray();
  return new (sk$InspectMap)(new sk$String(('UnorderedMap')), t$12);
};

sk$UnorderedMap.prototype.invalidateIterators = function() {
  var $var = this;
  var t$ = $var;
  var t$1 = this;
  var t$2 = t$1.generation_PRIVATE;
  var t$3 = t$;
  t$3.generation_PRIVATE = t$2.$pl((sk$Map$dtgenerationSkip()));
  return sk.__.$void;
};

sk$UnorderedMap.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$UnorderedMap.prototype.items = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.slots;
  var t$3 = this;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Map$dtUnorderedMapItemsIterator)(t$, t$2, t$5);
};

sk$UnorderedMap.prototype.iterator = function() {
  var t$ = this;
  return t$.items();
};

sk$UnorderedMap.prototype.joinKeys = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((k, _) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = k;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$UnorderedMap.prototype.joinValues = function(separator) {
  var t$ = this;
  var t$1 = t$.size();
  var strings = sk$Array.mfill(t$1, new sk$String(('')));
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((_, v) => 
  {
    var t$3 = strings;
    var t$4 = index;
    var t$5 = v;
    var t$6 = t$5.toString();
    t$3.set(t$4, t$6);
    var t$7 = index;
    index = t$7.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$8 = strings;
  var t$9 = separator;
  return t$8.join(t$9);
};

sk$UnorderedMap.prototype.keys = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.slots;
  var t$3 = this;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Map$dtUnorderedMapKeysIterator)(t$, t$2, t$5);
};

sk$UnorderedMap.prototype.map = function(s) {
  var t$ = this;
  var t$1 = t$.sz;
  var result = sk$UnorderedMap.mcreate(t$1);
  var t$2 = this;
  t$2.eachWhileImpl(((slot) => 
  {
    var t$3 = slot;
    var h = t$3.hash;
    var t$4 = slot;
    var k = t$4.key();
    var t$5 = s;
    var t$6 = k;
    var t$7 = slot;
    var t$8 = t$7.value();
    var v2 = t$5(t$6, t$8);
    var t$9 = result;
    var t$10 = h;
    var t$11 = k;
    var t$12 = v2;
    return t$9.setLoop(t$10, t$11, t$12);
  }));
  var t$13 = result;
  return t$13;
};

sk$UnorderedMap.prototype.mapItems = function(s) {
  var t$ = this;
  var t$1 = t$.sz;
  var result = sk$UnorderedMap.mcreate(t$1);
  var t$2 = this;
  t$2.eachWhileImpl(((slot) => 
  {
    var t$3 = s;
    var t$4 = slot;
    var t$5 = t$4.key();
    var t$6 = slot;
    var t$7 = t$6.value();
    var $var = t$3(t$5, t$7);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg25967:{
        jumpLab$bg25967:{
          switch ($var.__type_switch_id) {
            case 392:
              var2 = $var.i0;
              var1 = $var.i1;
              break jumpLab$bg25967;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var v2 = var1;
          var k2 = var2;
          var t$8 = k2;
          var t$9 = t$8.hash();
          var h = sk$Map$dtfinalizeHash(t$9);
          var t$10 = result;
          var t$11 = h;
          var t$12 = k2;
          var t$13 = v2;
          return t$10.setLoop(t$11, t$12, t$13);
        }
      }
    }
  }));
  var t$14 = result;
  return t$14;
};

sk$UnorderedMap.prototype.maybeAddLoop = function(h, k, v, replace) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var shift = t$1.shift;
  var t$2 = h;
  var t$3 = shift;
  var index = t$2.ushr(t$3);
  var break_val;
  {
    jumpBlockOuterbreak$bg25974:{
      break$bg25974:{
        do
          {
            jumpBlockOutercontinue$bg25975:{
              continue$bg25975:{
                {
                  var t$4 = slots;
                  var t$5 = index;
                  var slot = sk$Unsafe$dtarray_get(t$4, t$5);
                  var t$6 = h;
                  var t$7 = slot;
                  var t$8 = t$7.hash;
                  var delta = t$6.$mi(t$8);
                  var t$9 = delta;
                  var t$10;
                  if (t$9.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                    {
                      var t$11 = k;
                      var t$12 = slot;
                      var t$13 = t$12.key();
                      t$10 = t$11.$eq$eq(t$13);
                    }
                  else
                    t$10 = new sk$Bool((false));
                  var t$14;
                  if (t$10.__value)
                    {
                      var t$15 = replace;
                      if (t$15.$bg().__value)
                        {
                          break_val = new sk$Bool((false));
                          break break$bg25974;
                        }
                      else
                        {
                          var t$16 = slots;
                          var t$17 = index;
                          var t$18 = slot;
                          var t$19 = t$18.hash;
                          var t$20 = slot;
                          var t$21 = t$20.key();
                          var t$22 = v;
                          var t$23 = sk$Map$dtUnorderedMapSlot.create(t$19, t$21, t$22);
                          sk$Unsafe$dtarray_set(t$16, t$17, t$23);
                          break_val = new sk$Bool((true));
                          break break$bg25974;
                        }
                    }
                  else
                    {
                      var t$24 = delta;
                      var t$25;
                      if (t$24.$lt(new sk$Int(0.0, 0.0)).__value)
                        {
                          var t$26 = slots;
                          var t$27 = index;
                          var t$28 = h;
                          var t$29 = k;
                          var t$30 = v;
                          var t$31 = sk$Map$dtUnorderedMapSlot.create(t$28, t$29, t$30);
                          sk$Unsafe$dtarray_set(t$26, t$27, t$31);
                          var t$32 = slot;
                          var t$33;
                          if (t$32.isEmpty().__value)
                            {
                              var t$34 = this;
                              t$34.invalidateIterators();
                              var $var = this;
                              var t$35 = $var;
                              var t$36 = this;
                              var t$37 = t$36.sz;
                              var t$38 = t$35;
                              t$38.sz = t$37.$pl(new sk$Int(1.0, 0.0));
                              break_val = new sk$Bool((true));
                              break break$bg25974;
                            }
                          else
                            {
                              var t$39 = index;
                              var t$40 = t$39.$pl(new sk$Int(1.0, 0.0));
                              var t$41 = slots;
                              var t$42 = t$41.size();
                              var t$43 = t$42.$mi(new sk$Int(1.0, 0.0));
                              index = t$40.and(t$43);
                              var t$44 = slot;
                              h = t$44.hash;
                              var t$45 = slot;
                              k = t$45.key();
                              var t$46 = slot;
                              v = t$46.value();
                              t$33 = sk.__.$void;
                            }
                          t$25 = t$33;
                        }
                      else
                        {
                          var t$47 = index;
                          var t$48 = t$47.$pl(new sk$Int(1.0, 0.0));
                          var t$49 = slots;
                          var t$50 = t$49.size();
                          var t$51 = t$50.$mi(new sk$Int(1.0, 0.0));
                          index = t$48.and(t$51);
                          t$25 = sk.__.$void;
                        }
                      t$14 = t$25;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg25975;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg25974;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGetItem(t$1);
  var p;
  {
    jumpBlockOuterjumpLab$bg26035:{
      jumpLab$bg26035:{
        jumpLab$bg26034:{
          switch ($var.__type_switch_id) {
            case 205:
              p = $var.value;
              break jumpLab$bg26034;
            
            case 204:
              break jumpLab$bg26035;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = p;
          var t$3 = t$2.i1;
          return new (sk$Some)(t$3);
        }
      }
      return singleton$None;
    }
  }
};

sk$UnorderedMap.prototype.maybeGetItem = function(k) {
  var t$ = k;
  var t$1 = t$.hash();
  var h = sk$Map$dtfinalizeHash(t$1);
  var t$2 = this;
  var t$3 = h;
  var t$4 = k;
  return t$2.maybeGetItemLoop(t$3, t$4);
};

sk$UnorderedMap.prototype.maybeGetItemLoop = function(h, k) {
  var t$ = this;
  var shift = t$.shift;
  var t$1 = h;
  var t$2 = shift;
  var index = t$1.ushr(t$2);
  var break_val;
  {
    jumpBlockOuterbreak$bg26048:{
      break$bg26048:{
        do
          {
            jumpBlockOutercontinue$bg26049:{
              continue$bg26049:{
                {
                  var t$3 = this;
                  var t$4 = t$3.slots;
                  var t$5 = index;
                  var slot = sk$Unsafe$dtarray_get(t$4, t$5);
                  var t$6 = h;
                  var t$7 = slot;
                  var t$8 = t$7.hash;
                  var delta = t$6.$mi(t$8);
                  var t$9 = delta;
                  var t$10;
                  if (t$9.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                    {
                      var t$11 = k;
                      var t$12 = slot;
                      var t$13 = t$12.key();
                      t$10 = t$11.$eq$eq(t$13);
                    }
                  else
                    t$10 = new sk$Bool((false));
                  var t$14;
                  if (t$10.__value)
                    {
                      var t$15 = slot;
                      var t$16 = t$15.key();
                      var t$17 = slot;
                      var t$18 = t$17.value();
                      var t$19 = new (sk$Tuple2)(t$16, t$18);
                      var t$20 = t$19;
                      break_val = new (sk$Some)(t$20);
                      break break$bg26048;
                    }
                  else
                    {
                      var t$21 = delta;
                      var t$22;
                      if (t$21.$lt(new sk$Int(0.0, 0.0)).__value)
                        {
                          break_val = singleton$None;
                          break break$bg26048;
                        }
                      else
                        {
                          var t$23 = index;
                          var t$24 = t$23.$pl(new sk$Int(1.0, 0.0));
                          var t$25 = this;
                          var t$26 = t$25.slots;
                          var t$27 = t$26.size();
                          var t$28 = t$27.$mi(new sk$Int(1.0, 0.0));
                          index = t$24.and(t$28);
                          t$22 = sk.__.$void;
                        }
                      t$14 = t$22;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg26049;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg26048;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.maybeRemove = function(k) {
  var t$ = k;
  var t$1 = t$.hash();
  var h = sk$Map$dtfinalizeHash(t$1);
  var t$2 = this;
  var t$3 = h;
  var t$4 = k;
  return t$2.maybeRemoveLoop(t$3, t$4);
};

sk$UnorderedMap.prototype.maybeRemoveLoop = function(h, k) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var shift = t$1.shift;
  var t$2 = h;
  var t$3 = shift;
  var index = t$2.ushr(t$3);
  var break_val;
  {
    jumpBlockOuterbreak$bg26090:{
      break$bg26090:{
        do
          {
            jumpBlockOutercontinue$bg26091:{
              continue$bg26091:{
                {
                  var t$4 = slots;
                  var t$5 = index;
                  var slot = sk$Unsafe$dtarray_get(t$4, t$5);
                  var t$6 = h;
                  var t$7 = slot;
                  var t$8 = t$7.hash;
                  var delta = t$6.$mi(t$8);
                  var t$9 = delta;
                  var t$10;
                  if (t$9.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                    {
                      var t$11 = k;
                      var t$12 = slot;
                      var t$13 = t$12.key();
                      t$10 = t$11.$eq$eq(t$13);
                    }
                  else
                    t$10 = new sk$Bool((false));
                  var t$14;
                  if (t$10.__value)
                    {
                      var $var = this;
                      var t$15 = $var;
                      var t$16 = this;
                      var t$17 = t$16.sz;
                      var t$18 = t$15;
                      t$18.sz = t$17.$mi(new sk$Int(1.0, 0.0));
                      var t$19 = this;
                      t$19.invalidateIterators();
                      var t$20 = this;
                      var t$21 = index;
                      t$20.slideOver(t$21);
                      break_val = new sk$Bool((true));
                      break break$bg26090;
                    }
                  else
                    {
                      var t$22 = delta;
                      var t$23;
                      if (t$22.$lt(new sk$Int(0.0, 0.0)).__value)
                        {
                          break_val = new sk$Bool((false));
                          break break$bg26090;
                        }
                      else
                        {
                          var t$24 = index;
                          var t$25 = t$24.$pl(new sk$Int(1.0, 0.0));
                          var t$26 = slots;
                          var t$27 = t$26.size();
                          var t$28 = t$27.$mi(new sk$Int(1.0, 0.0));
                          index = t$25.and(t$28);
                          t$23 = sk.__.$void;
                        }
                      t$14 = t$23;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg26091;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg26090;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.maybeSet = function(k, v) {
  var t$ = this;
  t$.rehashIfFull();
  var t$1 = k;
  var t$2 = t$1.hash();
  var h = sk$Map$dtfinalizeHash(t$2);
  var t$3 = this;
  var t$4 = h;
  var t$5 = k;
  var t$6 = v;
  return t$3.maybeAddLoop(t$4, t$5, t$6, new sk$Bool((false)));
};

sk$UnorderedMap.mcreate = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = capacity;
  var log2NumSlots = sk$Map$dtgetLogSlotSizeForCapacity(t$);
  var t$1 = log2NumSlots;
  var shift = sk$Map$dtgetShiftForLogTableSize(t$1);
  var t$2 = log2NumSlots;
  var t$3 = new sk$Int(1.0, 0.0).shl(t$2);
  var slots = sk$Array.mfillBy(t$3, ((i) => 
  {
    var t$4 = i;
    var t$5 = shift;
    return sk$Map$dtUnorderedMapSlot.emptyForIndex(t$4, t$5);
  }));
  var t$6 = slots;
  var t$7 = shift;
  return new (sk$UnorderedMap)(t$6, new sk$Int(0.0, 0.0), t$7, new sk$Int(0.0, 0.0));
};

sk$UnorderedMap.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = this;
      return t$3.mcreate(new sk$Int(4294967295.0, 4294967295.0));
    }
  else
    {
      var t$4 = this;
      var t$5 = size;
      var map = t$4.mcreate(t$5);
      var t$6 = items;
      var t$7 = t$6;
      var $var = t$7.values();
      var var1 = new sk$Bool((true));
      {
        jumpBlockOuterbreak$bg26147:{
          break$bg26147:{
            dowhile_else$bg26146:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg26148:{
                    dowhile_cond$bg26148:{
                      {
                        var t$8 = $var;
                        var var2 = t$8.next();
                        var key;
                        var value;
                        {
                          jumpBlockOuterjumpLab$bg26157:{
                            jumpLab$bg26157:{
                              jumpLab$bg26156:{
                                jumpLab$bg26158:{
                                  switch (var2.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg26156;
                                    
                                    case 205:
                                      break jumpLab$bg26158;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch (var2.value.__type_switch_id) {
                                  case 392:
                                    key = var2.value.i0;
                                    value = var2.value.i1;
                                    break jumpLab$bg26157;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg26148;
                              }
                            }
                            {
                              var t$9 = map;
                              var t$10 = key;
                              var t$11 = value;
                              t$9.set(t$10, t$11);
                            }
                            break jumpBlockOuterjumpLab$bg26157;
                          }
                        }
                        break dowhile_cond$bg26148;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg26146;
                    break jumpBlockOuterdowhile_cond$bg26148;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg26147;
          }
          {}
          break jumpBlockOuterbreak$bg26147;
        }
      }
      return map;
    }
};

sk$UnorderedMap.mcreateFromIterator = function(iterator) {
  var t$ = this;
  var t$1 = iterator;
  var t$2 = t$1;
  var t$3 = t$2.sizeHint();
  var t$4 = t$3.$default(new sk$Int(0.0, 0.0));
  var map = t$.mcreate(t$4);
  var t$5 = iterator;
  var t$6 = t$5;
  var $var = t$6.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg26170:{
      break$bg26170:{
        dowhile_else$bg26169:{
          do
            {
              jumpBlockOuterdowhile_cond$bg26171:{
                dowhile_cond$bg26171:{
                  {
                    var t$7 = $var;
                    var var2 = t$7.next();
                    var key;
                    var value;
                    {
                      jumpBlockOuterjumpLab$bg26180:{
                        jumpLab$bg26180:{
                          jumpLab$bg26179:{
                            jumpLab$bg26181:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg26179;
                                
                                case 205:
                                  break jumpLab$bg26181;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                key = var2.value.i0;
                                value = var2.value.i1;
                                break jumpLab$bg26180;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg26171;
                          }
                        }
                        {
                          var t$8 = map;
                          var t$9 = key;
                          var t$10 = value;
                          t$8.set(t$9, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg26180;
                      }
                    }
                    break dowhile_cond$bg26171;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg26169;
                break jumpBlockOuterdowhile_cond$bg26171;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg26170;
      }
      {}
      break jumpBlockOuterbreak$bg26170;
    }
  }
  return map;
};

sk$UnorderedMap.prototype.reduce = function(f, init) {
  var result = init;
  var t$ = this;
  t$.each(((k, v) => 
  {
    var t$1 = f;
    var t$2 = result;
    var t$3 = k;
    var t$4 = v;
    result = t$1(t$2, t$3, t$4);
    return sk.__.$void;
  }));
  return result;
};

sk$UnorderedMap.prototype.rehashIfFull = function() {
  var t$ = this;
  var shift = t$.shift;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = t$2.$pl(new sk$Int(1.0, 0.0));
  var t$4 = shift;
  var t$5 = t$3.shl(t$4);
  var aboutToBecomeHalfFull = t$5.$lt(new sk$Int(0.0, 0.0));
  if (aboutToBecomeHalfFull.__value)
    {
      var t$6 = this;
      var t$7 = t$6.slots;
      var t$8 = t$7.size();
      var t$9 = t$8.$pl(new sk$Int(1.0, 0.0));
      var log2NumSlots = sk$Map$dtgetLogSlotSizeForCapacity(t$9);
      var t$10 = this;
      var t$11 = log2NumSlots;
      return t$10.growCapacity(t$11);
    }
  else
    return sk.__.$void;
};

sk$UnorderedMap.prototype.remove = function(k) {
  var t$ = this;
  var t$1 = k;
  var t$2 = t$.maybeRemove(t$1);
  if (t$2.$bg().__value)
    return sk$throwKeyNotFound();
  else
    return sk.__.$void;
};

sk$UnorderedMap.prototype.set = function(k, v) {
  var t$ = this;
  t$.rehashIfFull();
  var t$1 = k;
  var t$2 = t$1.hash();
  var h = sk$Map$dtfinalizeHash(t$2);
  var t$3 = this;
  var t$4 = h;
  var t$5 = k;
  var t$6 = v;
  return t$3.setLoop(t$4, t$5, t$6);
};

sk$UnorderedMap.prototype.setLoop = function(h, k, v) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var shift = t$1.shift;
  var t$2 = h;
  var t$3 = shift;
  var index = t$2.ushr(t$3);
  var break_val;
  {
    jumpBlockOuterbreak$bg26221:{
      break$bg26221:{
        do
          {
            jumpBlockOutercontinue$bg26222:{
              continue$bg26222:{
                {
                  var t$4 = slots;
                  var t$5 = index;
                  var slot = sk$Unsafe$dtarray_get(t$4, t$5);
                  var t$6 = h;
                  var t$7 = slot;
                  var t$8 = t$7.hash;
                  var delta = t$6.$mi(t$8);
                  var t$9 = delta;
                  var t$10;
                  if (t$9.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                    {
                      var t$11 = k;
                      var t$12 = slot;
                      var t$13 = t$12.key();
                      t$10 = t$11.$eq$eq(t$13);
                    }
                  else
                    t$10 = new sk$Bool((false));
                  var t$14;
                  if (t$10.__value)
                    {
                      var t$15 = slots;
                      var t$16 = index;
                      var t$17 = slot;
                      var t$18 = t$17.hash;
                      var t$19 = slot;
                      var t$20 = t$19.key();
                      var t$21 = v;
                      var t$22 = sk$Map$dtUnorderedMapSlot.create(t$18, t$20, t$21);
                      sk$Unsafe$dtarray_set(t$15, t$16, t$22);
                      break_val = sk.__.$void;
                      break break$bg26221;
                    }
                  else
                    {
                      var t$23 = delta;
                      var t$24;
                      if (t$23.$lt(new sk$Int(0.0, 0.0)).__value)
                        {
                          var t$25 = slots;
                          var t$26 = index;
                          var t$27 = h;
                          var t$28 = k;
                          var t$29 = v;
                          var t$30 = sk$Map$dtUnorderedMapSlot.create(t$27, t$28, t$29);
                          sk$Unsafe$dtarray_set(t$25, t$26, t$30);
                          var t$31 = slot;
                          var t$32;
                          if (t$31.isEmpty().__value)
                            {
                              var t$33 = this;
                              t$33.invalidateIterators();
                              var $var = this;
                              var t$34 = $var;
                              var t$35 = this;
                              var t$36 = t$35.sz;
                              var t$37 = t$34;
                              t$37.sz = t$36.$pl(new sk$Int(1.0, 0.0));
                              break_val = sk.__.$void;
                              break break$bg26221;
                            }
                          else
                            {
                              var t$38 = index;
                              var t$39 = t$38.$pl(new sk$Int(1.0, 0.0));
                              var t$40 = slots;
                              var t$41 = t$40.size();
                              var t$42 = t$41.$mi(new sk$Int(1.0, 0.0));
                              index = t$39.and(t$42);
                              var t$43 = slot;
                              h = t$43.hash;
                              var t$44 = slot;
                              k = t$44.key();
                              var t$45 = slot;
                              v = t$45.value();
                              t$32 = sk.__.$void;
                            }
                          t$24 = t$32;
                        }
                      else
                        {
                          var t$46 = index;
                          var t$47 = t$46.$pl(new sk$Int(1.0, 0.0));
                          var t$48 = slots;
                          var t$49 = t$48.size();
                          var t$50 = t$49.$mi(new sk$Int(1.0, 0.0));
                          index = t$47.and(t$50);
                          t$24 = sk.__.$void;
                        }
                      t$14 = t$24;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg26222;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg26221;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.setWith = function(k, v, collision) {
  var t$ = this;
  var t$1 = k;
  var $var = t$.maybeGet(t$1);
  var v2;
  {
    jumpBlockOuterjumpLab$bg26287:{
      jumpLab$bg26287:{
        jumpLab$bg26286:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg26286;
            
            case 205:
              v2 = $var.value;
              break jumpLab$bg26287;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = this;
          var t$3 = k;
          var t$4 = v;
          return t$2.set(t$3, t$4);
        }
      }
      {
        var t$5 = this;
        var t$6 = k;
        var t$7 = collision;
        var t$8 = v;
        var t$9 = v2;
        var t$10 = t$7(t$8, t$9);
        return t$5.set(t$6, t$10);
      }
    }
  }
};

sk$UnorderedMap.prototype.size = function() {
  var t$ = this;
  return t$.sz;
};

sk$UnorderedMap.prototype.slideOver = function(index) {
  var t$ = this;
  var slots = t$.slots;
  var t$1 = this;
  var shift = t$1.shift;
  var break_val;
  {
    jumpBlockOuterbreak$bg26294:{
      break$bg26294:{
        do
          {
            jumpBlockOutercontinue$bg26295:{
              continue$bg26295:{
                {
                  var t$2 = index;
                  var t$3 = t$2.$pl(new sk$Int(1.0, 0.0));
                  var t$4 = slots;
                  var t$5 = t$4.size();
                  var t$6 = t$5.$mi(new sk$Int(1.0, 0.0));
                  var nextIndex = t$3.and(t$6);
                  var t$7 = slots;
                  var t$8 = nextIndex;
                  var nextSlot = sk$Unsafe$dtarray_get(t$7, t$8);
                  var t$9 = nextSlot;
                  var t$10 = t$9.hash;
                  var t$11 = shift;
                  var t$12 = t$10.ushr(t$11);
                  var t$13 = nextIndex;
                  var t$14;
                  if (t$12.$eq$eq(t$13).__value)
                    {
                      var t$15 = slots;
                      var t$16 = index;
                      var t$17 = index;
                      var t$18 = shift;
                      var t$19 = sk$Map$dtUnorderedMapSlot.emptyForIndex(t$17, t$18);
                      sk$Unsafe$dtarray_set(t$15, t$16, t$19);
                      break_val = sk.__.$void;
                      break break$bg26294;
                    }
                  else
                    {
                      var t$20 = slots;
                      var t$21 = index;
                      var t$22 = nextSlot;
                      sk$Unsafe$dtarray_set(t$20, t$21, t$22);
                      index = nextIndex;
                      t$14 = sk.__.$void;
                    }
                }
              }
              {}
              break jumpBlockOutercontinue$bg26295;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg26294;
    }
  }
  return break_val;
};

sk$UnorderedMap.prototype.toString = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new sk$String(('UnorderedMap{}'));
  else
    {
      var t$1 = this;
      var t$2 = t$1.size();
      var buf = sk$Array.mfill(t$2, new sk$String(('')));
      var out = new sk$Int(0.0, 0.0);
      var t$3 = this;
      t$3.unsafeEach(((slot) => 
      {
        var t$4 = buf;
        var t$5 = out;
        var t$6 = slot;
        var t$7 = t$6.key();
        var t$8 = t$7.toString();
        var t$9 = t$8.$pl(new sk$String((' => ')));
        var t$10 = slot;
        var t$11 = t$10.value();
        var t$12 = t$9.$pl(t$11);
        t$4.set(t$5, t$12);
        var t$13 = out;
        out = t$13.$pl(new sk$Int(1.0, 0.0));
        return sk.__.$void;
      }));
      var t$14 = out;
      var t$15 = buf;
      var t$16 = t$15.size();
      var t$17 = t$14.$eq$eq(t$16);
      sk$invariant(t$17, new sk$String(('Table size changed during iteration')));
      var t$18 = buf;
      var t$19 = t$18.join(new sk$String((', ')));
      var t$20 = new sk$String(('UnorderedMap{')).$pl(t$19);
      return t$20.$pl(new sk$String(('}')));
    }
};

sk$UnorderedMap.prototype.unsafeEach = function(f) {
  var t$ = this;
  var t$1 = t$.slots;
  return t$1.each(((slot) => 
  {
    var t$2 = slot;
    var t$3 = t$2.isEmpty();
    if (t$3.$bg().__value)
      {
        var t$4 = f;
        var t$5 = slot;
        return t$4(t$5);
      }
    else
      return sk.__.$void;
  }));
};

sk$UnorderedMap.prototype.values = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.slots;
  var t$3 = this;
  var t$4 = t$3.generation_PRIVATE;
  var t$5 = t$4.negate();
  return new (sk$Map$dtUnorderedMapValuesIterator)(t$, t$2, t$5);
};

sk$UnorderedMap.prototype.__bases = [
  sk$UnorderedMap,
  sk$KeyedSequence,
  sk$MutableKeyedSequence
];

var sk$UnorderedSet = sk.UnorderedSet = function UnorderedSet(inner) {
  this.inner = inner;
};

sk$UnorderedSet.prototype = Object.create(Object.prototype);

sk$UnorderedSet.prototype.__constructor = sk$UnorderedSet;

sk$UnorderedSet.prototype.__classname = 'UnorderedSet';

sk$UnorderedSet.prototype.$frozen = false;

sk$UnorderedSet.prototype.__type_switch_id = 272;

sk$UnorderedSet.prototype.__copy = function() {
  return new (sk$UnorderedSet)(this.inner);
};

sk$UnorderedSet.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp522 = __cache.get(this);
  if (_tmp522 === undefined)
    {
      var _tmp522 = this.__copy();
      _tmp522.$frozen = true;
      __cache.set(this, _tmp522);
      _tmp522.inner = skip.deepFreeze(_tmp522.inner, __cache);
    }
  return _tmp522;
};

sk$UnorderedSet.prototype.__init = function(__named_parameters) {};

sk$UnorderedSet.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = other;
  var t$3 = t$2.inner;
  return t$1.$bg$eq(t$3);
};

sk$UnorderedSet.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = other;
  var t$3 = t$2.inner;
  return t$1.$eq$eq(t$3);
};

sk$UnorderedSet.prototype.add = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.add(t$2, singleton$UnorderedSet$dtEmptyValue);
};

sk$UnorderedSet.prototype.all = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.all(((k, _) => 
  {
    var t$2 = f;
    var t$3 = k;
    return t$2(t$3);
  }));
};

sk$UnorderedSet.prototype.any = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.any(((k, _) => 
  {
    var t$2 = f;
    var t$3 = k;
    return t$2(t$3);
  }));
};

sk$UnorderedSet.prototype.capacity = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.capacity();
};

sk$UnorderedSet.prototype.chill = function() {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.chill();
  return new (sk$UnorderedSet)(t$2);
};

sk$UnorderedSet.prototype.clear = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.clear();
};

sk$UnorderedSet.prototype.clone = function(reserve) {
  if (reserve === undefined)
    reserve = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = reserve;
  var t$3 = t$1.clone(t$2);
  return new (sk$UnorderedSet)(t$3);
};

sk$UnorderedSet.prototype.contains = function(k) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = k;
  return t$1.containsKey(t$2);
};

sk$UnorderedSet.prototype.containsAll = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.all(((_tmp26401) => 
  {
    return t$3.contains(_tmp26401);
  }));
};

sk$UnorderedSet.prototype.containsAny = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.any(((_tmp26406) => 
  {
    return t$3.contains(_tmp26406);
  }));
};

sk$UnorderedSet.createFromItems = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromItems(t$1);
  return t$2;
};

sk$UnorderedSet.createFromIterator = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromIterator(t$1);
  return t$2;
};

sk$UnorderedSet.prototype.difference = function(items) {
  var t$ = this;
  var t$1 = t$;
  var result = t$1.clone(undefined);
  var t$2 = items;
  var t$3 = t$2;
  t$3.each(((x) => 
  {
    var t$4 = result;
    var t$5 = x;
    t$4.maybeRemove(t$5);
    return sk.__.$void;
  }));
  var t$6 = result;
  return t$6;
};

sk$UnorderedSet.prototype.each = function(f) {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.each(((k, _) => 
  {
    var t$2 = f;
    var t$3 = k;
    return t$2(t$3);
  }));
};

sk$UnorderedSet.prototype.ensureCapacity = function(capacity) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = capacity;
  return t$1.ensureCapacity(t$2);
};

sk$UnorderedSet.prototype.extend = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    return t$2.insert(t$3);
  }));
};

sk$UnorderedSet.prototype.filter = function(p) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.filter(((k, _) => 
  {
    var t$3 = p;
    var t$4 = k;
    return t$3(t$4);
  }));
  return new (sk$UnorderedSet)(t$2);
};

sk$UnorderedSet.prototype.filterNone = function() {
  return sk$invariant_violation(new sk$String(('UniqueSequence.filterNone(): undefined method, UniqueSequence<?_> cannot exist.')));
};

sk$UnorderedSet.prototype.find = function(p) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.findItem(((k, _) => 
  {
    var t$3 = p;
    var t$4 = k;
    return t$3(t$4);
  }));
  return t$2.map(((kv) => 
  {
    var $var;
    {
      jumpBlockOuterjumpLab$bg26446:{
        jumpLab$bg26446:{
          switch (kv.__type_switch_id) {
            case 392:
              $var = kv.i0;
              break jumpLab$bg26446;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return $var;
      }
    }
  }));
};

sk$UnorderedSet.prototype.get = function(k) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = k;
  var t$3 = t$1.getItem(t$2);
  return t$3.i0;
};

sk$UnorderedSet.prototype.hash = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.hash();
};

sk$UnorderedSet.prototype.insert = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.set(t$2, singleton$UnorderedSet$dtEmptyValue);
};

sk$UnorderedSet.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.toArray();
  var t$2 = t$1.map(((e) => 
  {
    var t$3 = e;
    return sk$inspect(t$3);
  }));
  return new (sk$InspectVector)(new sk$String(('UnorderedSet')), t$2);
};

sk$UnorderedSet.prototype.intersection = function(items) {
  var result = sk$UnorderedSet.mcreateFromItems(new (sk$Array)([]));
  var t$ = items;
  var t$1 = t$;
  t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    if (t$2.contains(t$3).__value)
      {
        var t$4 = result;
        var t$5 = x;
        return t$4.insert(t$5);
      }
    else
      return sk.__.$void;
  }));
  var t$6 = result;
  return t$6;
};

sk$UnorderedSet.prototype.isEmpty = function() {
  var t$ = this;
  var t$1 = t$.size();
  return t$1.$eq$eq(new sk$Int(0.0, 0.0));
};

sk$UnorderedSet.prototype.join = function(separator) {
  var t$ = this;
  var $var = t$.size();
  {
    jumpBlockOuterjumpLab$bg26483:{
      jumpLab$bg26483:{
        jumpLab$bg26482:{
          {
            var _tmp523 = $var.__getSwitchValue();
            switch (_tmp523) {
              case 0:
                break jumpLab$bg26482;
              
              default:
                break jumpLab$bg26483;

            }
          }
        }
        return new sk$String((''));
      }
      {
        var t$1 = this;
        var t$2 = t$1.toArray();
        var t$3 = separator;
        return t$2.join(t$3);
      }
    }
  }
};

sk$UnorderedSet.prototype.maybeGet = function(k) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = k;
  var t$3 = t$1.maybeGetItem(t$2);
  return t$3.map(((p) => 
  {
    var t$4 = p;
    return t$4.i0;
  }));
};

sk$UnorderedSet.prototype.maybeInsert = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.maybeSet(t$2, singleton$UnorderedSet$dtEmptyValue);
};

sk$UnorderedSet.prototype.maybeRemove = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.maybeRemove(t$2);
};

sk$UnorderedSet.mcreate = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = capacity;
  var t$1 = sk$UnorderedMap.mcreate(t$);
  return new (sk$UnorderedSet)(t$1);
};

sk$UnorderedSet.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = this;
      return t$3.mcreate(new sk$Int(0.0, 0.0));
    }
  else
    {
      var t$4 = size;
      var inner = sk$UnorderedMap.mcreate(t$4);
      var t$5 = items;
      var t$6 = t$5;
      t$6.each(((k) => 
      {
        var t$7 = inner;
        var t$8 = k;
        return t$7.set(t$8, singleton$UnorderedSet$dtEmptyValue);
      }));
      var t$9 = inner;
      return new (sk$UnorderedSet)(t$9);
    }
};

sk$UnorderedSet.mcreateFromIterator = function(items) {
  var inner = sk$UnorderedMap.mcreateFromItems(new (sk$Array)([]));
  var t$ = items;
  var t$1 = t$;
  t$1.each(((k) => 
  {
    var t$2 = inner;
    var t$3 = k;
    return t$2.set(t$3, singleton$UnorderedSet$dtEmptyValue);
  }));
  var t$4 = inner;
  return new (sk$UnorderedSet)(t$4);
};

sk$UnorderedSet.prototype.remove = function(v) {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = v;
  return t$1.remove(t$2);
};

sk$UnorderedSet.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.size();
};

sk$UnorderedSet.prototype.subtract = function(items) {
  var t$ = items;
  var t$1 = t$;
  return t$1.each(((x) => 
  {
    var t$2 = this;
    var t$3 = x;
    t$2.maybeRemove(t$3);
    return sk.__.$void;
  }));
};

sk$UnorderedSet.prototype.toArray = function() {
  var t$ = this;
  if (t$.isEmpty().__value)
    return new (sk$Array)([]);
  else
    {
      var t$1 = this;
      return t$1.collect(sk$Array);
    }
};

sk$UnorderedSet.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.join(new sk$String((', ')));
  var t$2 = new sk$String(('UnorderedSet[')).$pl(t$1);
  return t$2.$pl(new sk$String((']')));
};

sk$UnorderedSet.prototype.union = function(items) {
  var t$ = this;
  var t$1 = t$;
  var ret = t$1.clone(undefined);
  var t$2 = ret;
  var t$3 = items;
  t$2.extend(t$3);
  var t$4 = ret;
  return t$4;
};

sk$UnorderedSet.prototype.values = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.keys();
};

sk$UnorderedSet.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$UnorderedSet.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$UnorderedSet.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$UnorderedSet.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$UnorderedSet.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$UnorderedSet.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$UnorderedSet.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$UnorderedSet.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$UnorderedSet.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$UnorderedSet.prototype.__bases = [
  sk$UnorderedSet,
  sk$Sequence,
  sk$UniqueSequence
];

var sk$Vector$dtHH_varray2 = sk.Vector$dtHH_varray2 = function Vector$dtHH_varray2(__named_parameters) {
  sk$Sequence.prototype.__init.call(this, __named_parameters);
  sk$IndexedSequence.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$Vector$dtHH_varray2.prototype = Object.create(Object.prototype);

sk$Vector$dtHH_varray2.prototype.__constructor = sk$Vector$dtHH_varray2;

sk$Vector$dtHH_varray2.prototype.__classname = 'Vector.HH_varray2';

sk$Vector$dtHH_varray2.prototype.$frozen = true;

sk$Vector$dtHH_varray2.prototype.__type_switch_id = 267;

sk$Vector$dtHH_varray2.prototype.__init = function(__named_parameters) {};

sk$Vector$dtHH_varray2.prototype.chill = function() {
  var t$ = this;
  var t$1 = sk$HhvmInterop$dtfetchProxyPointer(t$);
  return sk$HhvmInterop$dtcreateFromProxyPointer(t$1);
};

sk$Vector$dtHH_varray2.prototype.concat = function(second) {
  var t$ = this;
  var result = sk$Vector.mcreateFromItems(t$);
  var t$1 = result;
  var t$2 = second;
  t$1.extend(t$2);
  var t$3 = result;
  return t$3;
};

sk$Vector$dtHH_varray2.prototype.contains = function(second) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = x;
    var t$3 = second;
    return t$2.$eq$eq(t$3);
  }));
  return t$1.isSome();
};

sk$Vector$dtHH_varray2.createFromItems = function(items) {
  var v;
  var v1;
  {
    jumpBlockOuterjumpLab$bg28179:{
      jumpLab$bg28179:{
        jumpLab$bg28178:{
          jumpLab$bg28177:{
            switch (items.__type_switch_id) {
              case 273:
                v1 = items;
                break jumpLab$bg28177;
              
              case 265:
                v = items;
                break jumpLab$bg28178;
              
              default:
                break jumpLab$bg28179;

            }
          }
          {
            var t$ = this;
            var t$1 = v1;
            var t$2 = v1;
            var t$3 = t$2.size();
            return t$.fromFixedVector(t$1, t$3);
          }
        }
        {
          var t$4 = this;
          var t$5 = v;
          var t$6 = t$5.toArray();
          var t$7 = v;
          var t$8 = t$7.size();
          return t$4.fromFixedVector(t$6, t$8);
        }
      }
      {
        var t$9 = this;
        var t$10 = items;
        var t$11 = t$10.collect(sk$Array);
        var t$12 = items;
        var t$13 = t$12.size();
        return t$9.fromFixedVector(t$11, t$13);
      }
    }
  }
};

sk$Vector$dtHH_varray2.prototype.difference = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp28189) => 
  {
    return t$6.add(_tmp28189);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    var t$10 = t$8.contains(t$9);
    if (t$10.$bg().__value)
      {
        var t$11 = result;
        var t$12 = value;
        return t$11.push(t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$Vector$dtHH_varray2.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$Vector$dtHH_varray2.fromFixedVector = function(v, size) {
  if (size === undefined)
    size = ((() => 
    {
      return new sk$Int(4294967295.0, 4294967295.0);
    })());
  var t$ = size;
  if (t$.$eq$eq(new sk$Int(4294967295.0, 4294967295.0)).__value)
    {
      var t$1 = v;
      size = t$1.size();
    }
  else
    {}
  var t$2 = v;
  var t$3 = size;
  var handle = sk$HhvmInterop$dtcreateArrayFromFixedVector(new sk$String(('HH_varray')), t$2, t$3);
  var t$4 = handle;
  return sk$HhvmInterop$dtcreateFromProxyPointer(t$4);
};

sk$Vector$dtHH_varray2.prototype.genAll = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = (yield t$.genFind(((x) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = p;
        var t$3 = x;
        var t$4 = (yield t$2(t$3));
      }
      return t$4.$bg();
    })());
  })));
  return t$1.isNone();
});

sk$Vector$dtHH_varray2.prototype.genAny = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = (yield t$.genFind(t$1));
  return t$2.isSome();
});

sk$Vector$dtHH_varray2.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = p;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.get(t$4);
    return t$2(t$5);
  })));
  var t$6 = predicates;
  var nextSz = t$6.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$7 = sum;
        return t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var next = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg28225:{
      break$bg28225:{
        while_else$bg28224:{
          do
            {
              jumpBlockOutercontinue$bg28226:{
                continue$bg28226:{
                  {
                    var t$8 = toIndex;
                    var t$9 = nextSz;
                    if (t$8.ult(t$9).__value)
                      {
                        var t$10 = predicates;
                        var t$11 = fromIndex;
                        var t$12;
                        if (t$10.get(t$11).__value)
                          {
                            var t$13 = next;
                            var t$14 = toIndex;
                            var t$15 = this;
                            var t$16 = fromIndex;
                            var t$17 = t$15.get(t$16);
                            t$13.set(t$14, t$17);
                            var t$18 = toIndex;
                            toIndex = t$18.$pl(new sk$Int(1.0, 0.0));
                            t$12 = sk.__.$void;
                          }
                        else
                          t$12 = sk.__.$void;
                        var t$19 = fromIndex;
                        fromIndex = t$19.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg28224;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg28226;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg28225;
      }
      {}
      break jumpBlockOuterbreak$bg28225;
    }
  }
  var t$20 = next;
  return t$20;
});

sk$Vector$dtHH_varray2.prototype.genFind = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  return (yield t$.genFindTailLoop(t$1, new sk$Int(0.0, 0.0)));
});

sk$Vector$dtHH_varray2.prototype.genFindTailLoop = skip.asyncToGenerator(function*(p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var item = t$3.get(t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = p;
          var t$10 = index;
          var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindTailLoop(t$9, t$11));
        }
    }
});

sk$Vector$dtHH_varray2.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var nextInner = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = s;
        var t$3 = this;
        var t$4 = index;
        var t$5 = t$3.get(t$4);
        var awaitable_x = t$2(t$5);
      }
      return (yield awaitable_x);
    })());
  })));
  var t$6 = nextInner;
  return sk$Vector.createFromItems(t$6);
});

sk$Vector$dtHH_varray2.prototype.get = function(index) {
  var t$ = this;
  var t$1 = index;
  var t$2 = t$.internalGet(t$1);
  return sk$HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue(t$2);
};

sk$Vector$dtHH_varray2.prototype.groupBy = function(s) {
  var result = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = s;
    var t$2 = value;
    var key = t$1(t$2);
    var t$3 = result;
    var t$4 = key;
    var items = t$3.getOrAdd(t$4, (() => 
    {
      return sk$Vector.mcreate(new sk$Int(0.0, 0.0));
    }));
    var t$5 = items;
    var t$6 = value;
    return t$5.push(t$6);
  }));
  var t$7 = result;
  var t$8 = t$7.map(((_, items1) => 
  {
    var t$9 = items1;
    return t$9;
  }));
  return t$8;
};

sk$Vector$dtHH_varray2.prototype.indexOf = function(predicate) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = index;
    index = t$2.$pl(new sk$Int(1.0, 0.0));
    var t$3 = x;
    var t$4 = predicate;
    return t$3.$eq$eq(t$4);
  }));
  return t$1.map(((_) => 
  {
    return index;
  }));
};

sk$Vector$dtHH_varray2.prototype.internalGet = function(index) {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Vector.HH_varray2::internalGet')));
};

sk$Vector$dtHH_varray2.prototype.intersection = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp28293) => 
  {
    return t$6.add(_tmp28293);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    if (t$8.contains(t$9).__value)
      {
        var t$10 = result;
        var t$11 = value;
        return t$10.push(t$11);
      }
    else
      return sk.__.$void;
  }));
  var t$12 = result;
  return t$12;
};

sk$Vector$dtHH_varray2.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$Vector$dtHH_varray2.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$Vector$dtHH_varray2.prototype.maybeGet = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var t$5 = t$3.get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$Vector$dtHH_varray2.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$Vector$dtHH_varray2.prototype.partition = function(p) {
  var pass = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var fail = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = pass;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      {
        var t$5 = fail;
        var t$6 = value;
        return t$5.push(t$6);
      }
  }));
  var t$7 = pass;
  var t$8 = t$7;
  var t$9 = fail;
  var t$10 = t$9;
  return new (sk$Tuple2)(t$8, t$10);
};

sk$Vector$dtHH_varray2.prototype.sample = function(rng, count) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = count;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$2 = sz;
      var t$3 = count;
      if (t$2.$lt$eq(t$3).__value)
        {
          var t$4 = this;
          return t$4.chill();
        }
      else
        {
          var t$5 = count;
          var t$6 = t$5.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$6, new sk$String(('Vector.sample(): Expected count to be nonnegative.')));
          var t$7 = this;
          var t$8 = count;
          var t$9 = t$7.slice(new sk$Int(0.0, 0.0), t$8);
          var sample = sk$Vector.mcreateFromItems(t$9);
          var t$10 = count;
          var t$11 = sz;
          var t$12 = new (sk$Range)(t$10, t$11);
          var $var = t$12.values();
          var var1 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg28346:{
              break$bg28346:{
                dowhile_else$bg28345:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg28347:{
                        dowhile_cond$bg28347:{
                          {
                            var t$13 = $var;
                            var var2 = t$13.next();
                            var index;
                            {
                              jumpBlockOuterjumpLab$bg28365:{
                                jumpLab$bg28365:{
                                  jumpLab$bg28364:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg28364;
                                      
                                      case 205:
                                        index = var2.value;
                                        break jumpLab$bg28365;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var1 = new sk$Bool((false));
                                    break dowhile_cond$bg28347;
                                  }
                                }
                                {
                                  var t$14 = rng;
                                  var t$15 = index;
                                  var t$16 = t$15.$pl(new sk$Int(1.0, 0.0));
                                  var swap = t$14.random(new sk$Int(0.0, 0.0), t$16);
                                  var t$17 = swap;
                                  var t$18 = count;
                                  var t$19;
                                  if (t$17.$lt(t$18).__value)
                                    {
                                      var t$20 = sample;
                                      var t$21 = swap;
                                      var t$22 = this;
                                      var t$23 = index;
                                      var t$24 = t$22.get(t$23);
                                      t$20.set(t$21, t$24);
                                      t$19 = sk.__.$void;
                                    }
                                  else
                                    t$19 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg28365;
                              }
                            }
                            break dowhile_cond$bg28347;
                          }
                        }
                        if (var1.__value)
                          {}
                        else
                          break dowhile_else$bg28345;
                        break jumpBlockOuterdowhile_cond$bg28347;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg28346;
              }
              {}
              break jumpBlockOuterbreak$bg28346;
            }
          }
          var t$25 = sample;
          return t$25;
        }
    }
};

sk$Vector$dtHH_varray2.prototype.size = function() {
  sk$invariant_violation(new sk$String(('Attempting to call the native function: Vector.HH_varray2::size')));
};

sk$Vector$dtHH_varray2.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var t$ = this;
  var sz = t$.size();
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$15 = end;
      var t$16 = start;
      var capacity = t$15.$mi(t$16);
      var t$17 = capacity;
      return sk$Vector.fillBy(t$17, ((i) => 
      {
        var t$18 = this;
        var t$19 = i;
        var t$20 = start;
        var t$21 = t$19.$pl(t$20);
        return t$18.get(t$21);
      }));
    }
};

sk$Vector$dtHH_varray2.prototype.toMutableVector = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var t$2 = this;
  var t$3 = t$2;
  var vec = sk$Vector.mfillBy(t$1, ((_tmp28397) => 
  {
    return t$3.get(_tmp28397);
  }));
  var t$4 = vec;
  var t$5 = capacity;
  t$4.ensureCapacity(t$5);
  return vec;
};

sk$Vector$dtHH_varray2.prototype.unique = function() {
  var set = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = set;
    var t$2 = value;
    return t$1.set(t$2, sk.__.$void);
  }));
  var t$3 = set;
  var t$4 = t$3.size();
  var result = sk$Vector.mcreate(t$4);
  var t$5 = set;
  t$5.each(((value1, _) => 
  {
    var t$6 = result;
    var t$7 = value1;
    return t$6.push(t$7);
  }));
  var t$8 = result;
  return t$8;
};

sk$Vector$dtHH_varray2.prototype.values = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  return new (sk$Sequence$dtIndexedSequenceIterator)(t$, new sk$Int(0.0, 0.0), t$2, new sk$Int(1.0, 0.0));
};

sk$Vector$dtHH_varray2.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Vector$dtHH_varray2.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Vector$dtHH_varray2.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Vector$dtHH_varray2.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Vector$dtHH_varray2.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Vector$dtHH_varray2.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Vector$dtHH_varray2.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Vector$dtHH_varray2.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Vector$dtHH_varray2.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Vector$dtHH_varray2.prototype.__bases = [
  sk$Vector$dtHH_varray2,
  sk$Sequence,
  sk$IndexedSequence
];

sk$Vector$dtHH_varray2 = sk.Vector$dtHH_varray2 = skip.initNativeClass(sk, 'Vector.HH_varray2', sk$Vector$dtHH_varray2);

var sk$HH$dtArraykey = sk.HH$dtArraykey = function HH$dtArraykey() {};

sk$HH$dtArraykey.prototype = Object.create(Object.prototype);

sk$HH$dtArraykey.prototype.__constructor = sk$HH$dtArraykey;

sk$HH$dtArraykey.prototype.__classname = 'HH.Arraykey';

sk$HH$dtArraykey.prototype.$frozen = undefined;

sk$HH$dtArraykey.prototype.__type_switch_id = -1;

sk$HH$dtArraykey.prototype.__copy = function() {};

sk$HH$dtArraykey.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp524 = __cache.get(this);
  if (_tmp524 === undefined)
    {
      var _tmp524 = this.__copy();
      _tmp524.$frozen = true;
      __cache.set(this, _tmp524);
    }
  return _tmp524;
};

sk$HH$dtArraykey.prototype.__init = function(__named_parameters) {};

sk$HH$dtArraykey.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$HH$dtArraykey.prototype.__bases = [
  sk$HH$dtArraykey,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtPrimitive
];

var sk$HH$dtBool = sk.HH$dtBool = function HH$dtBool(x) {
  this.x = x;
};

sk$HH$dtBool.prototype = Object.create(Object.prototype);

sk$HH$dtBool.prototype.__constructor = sk$HH$dtBool;

sk$HH$dtBool.prototype.__classname = 'HH.Bool';

sk$HH$dtBool.prototype.$frozen = true;

sk$HH$dtBool.prototype.__type_switch_id = 102;

sk$HH$dtBool.prototype.__copy = function() {
  return new (sk$HH$dtBool)(this.x);
};

sk$HH$dtBool.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp525 = __cache.get(this);
  if (_tmp525 === undefined)
    {
      var _tmp525 = this.__copy();
      _tmp525.$frozen = true;
      __cache.set(this, _tmp525);
      _tmp525.x = skip.deepFreeze(_tmp525.x, __cache);
    }
  return _tmp525;
};

sk$HH$dtBool.prototype.__init = function(__named_parameters) {};

sk$HH$dtBool.prototype.__bases = [
  sk$HH$dtBool,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtPrimitive
];

var sk$HH$dtDarray = sk.HH$dtDarray = function HH$dtDarray(x) {
  this.x = x;
};

sk$HH$dtDarray.prototype = Object.create(Object.prototype);

sk$HH$dtDarray.prototype.__constructor = sk$HH$dtDarray;

sk$HH$dtDarray.prototype.__classname = 'HH.Darray';

sk$HH$dtDarray.prototype.$frozen = true;

sk$HH$dtDarray.prototype.__type_switch_id = 89;

sk$HH$dtDarray.prototype.__copy = function() {
  return new (sk$HH$dtDarray)(this.x);
};

sk$HH$dtDarray.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp526 = __cache.get(this);
  if (_tmp526 === undefined)
    {
      var _tmp526 = this.__copy();
      _tmp526.$frozen = true;
      __cache.set(this, _tmp526);
      _tmp526.x = skip.deepFreeze(_tmp526.x, __cache);
    }
  return _tmp526;
};

sk$HH$dtDarray.prototype.__init = function(__named_parameters) {};

sk$HH$dtDarray.prototype.__bases = [
  sk$HH$dtDarray,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtArraybacked
];

var sk$HH$dtDict = sk.HH$dtDict = function HH$dtDict(x) {
  this.x = x;
};

sk$HH$dtDict.prototype = Object.create(Object.prototype);

sk$HH$dtDict.prototype.__constructor = sk$HH$dtDict;

sk$HH$dtDict.prototype.__classname = 'HH.Dict';

sk$HH$dtDict.prototype.$frozen = true;

sk$HH$dtDict.prototype.__type_switch_id = 90;

sk$HH$dtDict.prototype.__copy = function() {
  return new (sk$HH$dtDict)(this.x);
};

sk$HH$dtDict.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp527 = __cache.get(this);
  if (_tmp527 === undefined)
    {
      var _tmp527 = this.__copy();
      _tmp527.$frozen = true;
      __cache.set(this, _tmp527);
      _tmp527.x = skip.deepFreeze(_tmp527.x, __cache);
    }
  return _tmp527;
};

sk$HH$dtDict.prototype.__init = function(__named_parameters) {};

sk$HH$dtDict.prototype.__bases = [
  sk$HH$dtDict,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtArraybacked
];

var sk$HH$dtKeyset = sk.HH$dtKeyset = function HH$dtKeyset(x) {
  this.x = x;
};

sk$HH$dtKeyset.prototype = Object.create(Object.prototype);

sk$HH$dtKeyset.prototype.__constructor = sk$HH$dtKeyset;

sk$HH$dtKeyset.prototype.__classname = 'HH.Keyset';

sk$HH$dtKeyset.prototype.$frozen = true;

sk$HH$dtKeyset.prototype.__type_switch_id = 91;

sk$HH$dtKeyset.prototype.__copy = function() {
  return new (sk$HH$dtKeyset)(this.x);
};

sk$HH$dtKeyset.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp528 = __cache.get(this);
  if (_tmp528 === undefined)
    {
      var _tmp528 = this.__copy();
      _tmp528.$frozen = true;
      __cache.set(this, _tmp528);
      _tmp528.x = skip.deepFreeze(_tmp528.x, __cache);
    }
  return _tmp528;
};

sk$HH$dtKeyset.prototype.__init = function(__named_parameters) {};

sk$HH$dtKeyset.prototype.__bases = [
  sk$HH$dtKeyset,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtArraybacked
];

var sk$HH$dtMap = sk.HH$dtMap = function HH$dtMap(x) {
  this.x = x;
};

sk$HH$dtMap.prototype = Object.create(Object.prototype);

sk$HH$dtMap.prototype.__constructor = sk$HH$dtMap;

sk$HH$dtMap.prototype.__classname = 'HH.Map';

sk$HH$dtMap.prototype.$frozen = true;

sk$HH$dtMap.prototype.__type_switch_id = 97;

sk$HH$dtMap.prototype.__copy = function() {
  return new (sk$HH$dtMap)(this.x);
};

sk$HH$dtMap.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp529 = __cache.get(this);
  if (_tmp529 === undefined)
    {
      var _tmp529 = this.__copy();
      _tmp529.$frozen = true;
      __cache.set(this, _tmp529);
      _tmp529.x = skip.deepFreeze(_tmp529.x, __cache);
    }
  return _tmp529;
};

sk$HH$dtMap.prototype.__init = function(__named_parameters) {};

sk$HH$dtMap.prototype.__bases = [
  sk$HH$dtMap,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtObject
];

var sk$HH$dtNonexhuastivePlaceholderObject = sk.HH$dtNonexhuastivePlaceholderObject = function HH$dtNonexhuastivePlaceholderObject() {};

sk$HH$dtNonexhuastivePlaceholderObject.prototype = Object.create(Object.prototype);

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__constructor = sk$HH$dtNonexhuastivePlaceholderObject;

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__classname = 'HH.NonexhuastivePlaceholderObject';

sk$HH$dtNonexhuastivePlaceholderObject.prototype.$frozen = true;

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__type_switch_id = 98;

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__copy = function() {
  return new (sk$HH$dtNonexhuastivePlaceholderObject)();
};

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp530 = __cache.get(this);
  if (_tmp530 === undefined)
    {
      var _tmp530 = this.__copy();
      _tmp530.$frozen = true;
      __cache.set(this, _tmp530);
    }
  return _tmp530;
};

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__init = function(__named_parameters) {};

sk$HH$dtNonexhuastivePlaceholderObject.prototype.__bases = [
  sk$HH$dtNonexhuastivePlaceholderObject,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtObject
];

var sk$HH$dtNonexhuastivePlaceholderResource = sk.HH$dtNonexhuastivePlaceholderResource = function HH$dtNonexhuastivePlaceholderResource() {};

sk$HH$dtNonexhuastivePlaceholderResource.prototype = Object.create(Object.prototype);

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__constructor = sk$HH$dtNonexhuastivePlaceholderResource;

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__classname = 'HH.NonexhuastivePlaceholderResource';

sk$HH$dtNonexhuastivePlaceholderResource.prototype.$frozen = true;

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__type_switch_id = 103;

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__copy = function() {
  return new (sk$HH$dtNonexhuastivePlaceholderResource)();
};

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp531 = __cache.get(this);
  if (_tmp531 === undefined)
    {
      var _tmp531 = this.__copy();
      _tmp531.$frozen = true;
      __cache.set(this, _tmp531);
    }
  return _tmp531;
};

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__init = function(__named_parameters) {};

sk$HH$dtNonexhuastivePlaceholderResource.prototype.__bases = [
  sk$HH$dtNonexhuastivePlaceholderResource,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtResource
];

var sk$HH$dtNumber = sk.HH$dtNumber = function HH$dtNumber() {};

sk$HH$dtNumber.prototype = Object.create(Object.prototype);

sk$HH$dtNumber.prototype.__constructor = sk$HH$dtNumber;

sk$HH$dtNumber.prototype.__classname = 'HH.Number';

sk$HH$dtNumber.prototype.$frozen = undefined;

sk$HH$dtNumber.prototype.__type_switch_id = -1;

sk$HH$dtNumber.prototype.__copy = function() {};

sk$HH$dtNumber.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp532 = __cache.get(this);
  if (_tmp532 === undefined)
    {
      var _tmp532 = this.__copy();
      _tmp532.$frozen = true;
      __cache.set(this, _tmp532);
    }
  return _tmp532;
};

sk$HH$dtNumber.prototype.__init = function(__named_parameters) {};

sk$HH$dtNumber.prototype.__bases = [
  sk$HH$dtNumber,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtPrimitive
];

var sk$HH$dtProxyObject = sk.HH$dtProxyObject = function HH$dtProxyObject(x) {
  this.x = x;
};

sk$HH$dtProxyObject.prototype = Object.create(Object.prototype);

sk$HH$dtProxyObject.prototype.__constructor = sk$HH$dtProxyObject;

sk$HH$dtProxyObject.prototype.__classname = 'HH.ProxyObject';

sk$HH$dtProxyObject.prototype.$frozen = true;

sk$HH$dtProxyObject.prototype.__type_switch_id = 99;

sk$HH$dtProxyObject.prototype.__copy = function() {
  return new (sk$HH$dtProxyObject)(this.x);
};

sk$HH$dtProxyObject.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp533 = __cache.get(this);
  if (_tmp533 === undefined)
    {
      var _tmp533 = this.__copy();
      _tmp533.$frozen = true;
      __cache.set(this, _tmp533);
      _tmp533.x = skip.deepFreeze(_tmp533.x, __cache);
    }
  return _tmp533;
};

sk$HH$dtProxyObject.prototype.__init = function(__named_parameters) {};

sk$HH$dtProxyObject.prototype.__bases = [
  sk$HH$dtProxyObject,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtObject
];

var sk$HH$dtSet = sk.HH$dtSet = function HH$dtSet(x) {
  this.x = x;
};

sk$HH$dtSet.prototype = Object.create(Object.prototype);

sk$HH$dtSet.prototype.__constructor = sk$HH$dtSet;

sk$HH$dtSet.prototype.__classname = 'HH.Set';

sk$HH$dtSet.prototype.$frozen = true;

sk$HH$dtSet.prototype.__type_switch_id = 100;

sk$HH$dtSet.prototype.__copy = function() {
  return new (sk$HH$dtSet)(this.x);
};

sk$HH$dtSet.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp534 = __cache.get(this);
  if (_tmp534 === undefined)
    {
      var _tmp534 = this.__copy();
      _tmp534.$frozen = true;
      __cache.set(this, _tmp534);
      _tmp534.x = skip.deepFreeze(_tmp534.x, __cache);
    }
  return _tmp534;
};

sk$HH$dtSet.prototype.__init = function(__named_parameters) {};

sk$HH$dtSet.prototype.__bases = [
  sk$HH$dtSet,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtObject
];

var sk$HH$dtVarray = sk.HH$dtVarray = function HH$dtVarray(x) {
  this.x = x;
};

sk$HH$dtVarray.prototype = Object.create(Object.prototype);

sk$HH$dtVarray.prototype.__constructor = sk$HH$dtVarray;

sk$HH$dtVarray.prototype.__classname = 'HH.Varray';

sk$HH$dtVarray.prototype.$frozen = true;

sk$HH$dtVarray.prototype.__type_switch_id = 92;

sk$HH$dtVarray.prototype.__copy = function() {
  return new (sk$HH$dtVarray)(this.x);
};

sk$HH$dtVarray.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp535 = __cache.get(this);
  if (_tmp535 === undefined)
    {
      var _tmp535 = this.__copy();
      _tmp535.$frozen = true;
      __cache.set(this, _tmp535);
      _tmp535.x = skip.deepFreeze(_tmp535.x, __cache);
    }
  return _tmp535;
};

sk$HH$dtVarray.prototype.__init = function(__named_parameters) {};

sk$HH$dtVarray.prototype.__bases = [
  sk$HH$dtVarray,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtArraybacked
];

var sk$HH$dtVec = sk.HH$dtVec = function HH$dtVec(x) {
  this.x = x;
};

sk$HH$dtVec.prototype = Object.create(Object.prototype);

sk$HH$dtVec.prototype.__constructor = sk$HH$dtVec;

sk$HH$dtVec.prototype.__classname = 'HH.Vec';

sk$HH$dtVec.prototype.$frozen = true;

sk$HH$dtVec.prototype.__type_switch_id = 93;

sk$HH$dtVec.prototype.__copy = function() {
  return new (sk$HH$dtVec)(this.x);
};

sk$HH$dtVec.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp536 = __cache.get(this);
  if (_tmp536 === undefined)
    {
      var _tmp536 = this.__copy();
      _tmp536.$frozen = true;
      __cache.set(this, _tmp536);
      _tmp536.x = skip.deepFreeze(_tmp536.x, __cache);
    }
  return _tmp536;
};

sk$HH$dtVec.prototype.__init = function(__named_parameters) {};

sk$HH$dtVec.prototype.__bases = [
  sk$HH$dtVec,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtArraybacked
];

var sk$HH$dtVector = sk.HH$dtVector = function HH$dtVector(x) {
  this.x = x;
};

sk$HH$dtVector.prototype = Object.create(Object.prototype);

sk$HH$dtVector.prototype.__constructor = sk$HH$dtVector;

sk$HH$dtVector.prototype.__classname = 'HH.Vector';

sk$HH$dtVector.prototype.$frozen = true;

sk$HH$dtVector.prototype.__type_switch_id = 101;

sk$HH$dtVector.prototype.__copy = function() {
  return new (sk$HH$dtVector)(this.x);
};

sk$HH$dtVector.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp537 = __cache.get(this);
  if (_tmp537 === undefined)
    {
      var _tmp537 = this.__copy();
      _tmp537.$frozen = true;
      __cache.set(this, _tmp537);
      _tmp537.x = skip.deepFreeze(_tmp537.x, __cache);
    }
  return _tmp537;
};

sk$HH$dtVector.prototype.__init = function(__named_parameters) {};

sk$HH$dtVector.prototype.__bases = [
  sk$HH$dtVector,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtObject
];

var sk$JSON$dtJSONSetNonObjectError = sk.JSON$dtJSONSetNonObjectError = function JSON$dtJSONSetNonObjectError() {};

sk$JSON$dtJSONSetNonObjectError.prototype = Object.create(Object.prototype);

sk$JSON$dtJSONSetNonObjectError.prototype.__constructor = sk$JSON$dtJSONSetNonObjectError;

sk$JSON$dtJSONSetNonObjectError.prototype.__classname = 'JSON.JSONSetNonObjectError';

sk$JSON$dtJSONSetNonObjectError.prototype.$frozen = true;

sk$JSON$dtJSONSetNonObjectError.prototype.__type_switch_id = 46;

sk$JSON$dtJSONSetNonObjectError.prototype.__copy = function() {
  return new (sk$JSON$dtJSONSetNonObjectError)();
};

sk$JSON$dtJSONSetNonObjectError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp538 = __cache.get(this);
  if (_tmp538 === undefined)
    {
      var _tmp538 = this.__copy();
      _tmp538.$frozen = true;
      __cache.set(this, _tmp538);
    }
  return _tmp538;
};

sk$JSON$dtJSONSetNonObjectError.prototype.__init = function(__named_parameters) {};

sk$JSON$dtJSONSetNonObjectError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$JSON$dtJSONSetNonObjectError.prototype.$eq$eq = function(other) {
  jumpBlockOuterjumpLab$bg5031:{
    jumpLab$bg5031:{
      jumpLab$bg5030:{
        switch (other.__type_switch_id) {
          case 46:
            break jumpLab$bg5030;
          
          default:
            break jumpLab$bg5031;

        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

sk$JSON$dtJSONSetNonObjectError.prototype.getMessage = function() {
  return new sk$String(('Set only available on Object values.')).toString();
};

sk$JSON$dtJSONSetNonObjectError.prototype.toString = function() {
  var t$ = new sk$String(('JSONSetNonObjectError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$JSON$dtJSONSetNonObjectError.prototype.__bases = [
  sk$JSON$dtJSONSetNonObjectError,
  sk$Exception,
  sk$Serialization$dtSerializationError,
  sk$JSON$dtJSONError
];

var sk$JSON$dtJSONValueExpectedError = sk.JSON$dtJSONValueExpectedError = function JSON$dtJSONValueExpectedError(expected) {
  this.expected = expected;
};

sk$JSON$dtJSONValueExpectedError.prototype = Object.create(Object.prototype);

sk$JSON$dtJSONValueExpectedError.prototype.__constructor = sk$JSON$dtJSONValueExpectedError;

sk$JSON$dtJSONValueExpectedError.prototype.__classname = 'JSON.JSONValueExpectedError';

sk$JSON$dtJSONValueExpectedError.prototype.$frozen = true;

sk$JSON$dtJSONValueExpectedError.prototype.__type_switch_id = 47;

sk$JSON$dtJSONValueExpectedError.prototype.__copy = function() {
  return new (sk$JSON$dtJSONValueExpectedError)(this.expected);
};

sk$JSON$dtJSONValueExpectedError.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp539 = __cache.get(this);
  if (_tmp539 === undefined)
    {
      var _tmp539 = this.__copy();
      _tmp539.$frozen = true;
      __cache.set(this, _tmp539);
      _tmp539.expected = skip.deepFreeze(_tmp539.expected, __cache);
    }
  return _tmp539;
};

sk$JSON$dtJSONValueExpectedError.prototype.__init = function(__named_parameters) {};

sk$JSON$dtJSONValueExpectedError.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$JSON$dtJSONValueExpectedError.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg5051:{
      jumpLab$bg5051:{
        jumpLab$bg5050:{
          switch (other.__type_switch_id) {
            case 47:
              otherTyped = other;
              break jumpLab$bg5050;
            
            default:
              break jumpLab$bg5051;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.expected;
          var t$2 = otherTyped;
          var t$3 = t$2.expected;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$JSON$dtJSONValueExpectedError.prototype.getMessage = function() {
  var t$ = new sk$String(('expect')).toString();
  var t$1 = this;
  var t$2 = t$1.expected;
  var t$3 = t$2.toString();
  var t$4 = new sk$String((' called on a non-')).toString();
  var t$5 = this;
  var t$6 = t$5.expected;
  var t$7 = t$6.toString();
  var t$8 = new sk$String((' type.')).toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$7,
    t$8
  ]));
};

sk$JSON$dtJSONValueExpectedError.prototype.toString = function() {
  var t$ = new sk$String(('JSONValueExpectedError: ')).toString();
  var t$1 = this;
  var t$2 = t$1.getMessage();
  var t$3 = t$2.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3
  ]));
};

sk$JSON$dtJSONValueExpectedError.prototype.__bases = [
  sk$JSON$dtJSONValueExpectedError,
  sk$Exception,
  sk$Serialization$dtSerializationError,
  sk$JSON$dtJSONError
];

var sk$Persistent$dtRadixTreeVector = sk.Persistent$dtRadixTreeVector = function Persistent$dtRadixTreeVector(__named_parameters) {
  sk$Sequence.prototype.__init.call(this, __named_parameters);
  sk$IndexedSequence.prototype.__init.call(this, __named_parameters);
  sk$MutableIndexedSequence.prototype.__init.call(this, __named_parameters);
  this.__init(__named_parameters);
};

sk$Persistent$dtRadixTreeVector.prototype = Object.create(Object.prototype);

sk$Persistent$dtRadixTreeVector.prototype.__constructor = sk$Persistent$dtRadixTreeVector;

sk$Persistent$dtRadixTreeVector.prototype.__classname = 'Persistent.RadixTreeVector';

sk$Persistent$dtRadixTreeVector.prototype.$frozen = false;

sk$Persistent$dtRadixTreeVector.prototype.__type_switch_id = 264;

sk$Persistent$dtRadixTreeVector.prototype.__copy = function() {
  return new (sk$Persistent$dtRadixTreeVector)(this);
};

sk$Persistent$dtRadixTreeVector.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp540 = __cache.get(this);
  if (_tmp540 === undefined)
    {
      var _tmp540 = this.__copy();
      _tmp540.$frozen = true;
      __cache.set(this, _tmp540);
      _tmp540.rootSize = skip.deepFreeze(_tmp540.rootSize, __cache);
      _tmp540.shift = skip.deepFreeze(_tmp540.shift, __cache);
      _tmp540.root = skip.deepFreeze(_tmp540.root, __cache);
      _tmp540.tailSize = skip.deepFreeze(_tmp540.tailSize, __cache);
      _tmp540.tail = skip.deepFreeze(_tmp540.tail, __cache);
    }
  return _tmp540;
};

sk$Persistent$dtRadixTreeVector.prototype.__init = function(__named_parameters) {
  this.rootSize = __named_parameters.rootSize;
  this.shift = __named_parameters.shift;
  this.root = __named_parameters.root;
  this.tailSize = __named_parameters.tailSize;
  this.tail = __named_parameters.tail;
};

sk$Persistent$dtRadixTreeVector.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Persistent$dtRadixTreeVector.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Persistent$dtRadixTreeVector.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Persistent$dtRadixTreeVector.prototype.$eq$eq = function(other) {
  var static1 = this.__constructor;
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = other;
  var t$3 = t$2.size();
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = static1;
      var t$5 = this;
      var t$6 = t$5.values();
      var t$7 = other;
      var t$8 = t$7.values();
      return t$4.eqLoop(t$6, t$8);
    }
  else
    return new sk$Bool((false));
};

sk$Persistent$dtRadixTreeVector.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Persistent$dtRadixTreeVector.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Persistent$dtRadixTreeVector.prototype.assertValid = function(value, msg) {
  if (msg === undefined)
    msg = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = this;
  var $var = t$.validate();
  var reason;
  {
    jumpBlockOuterjumpLab$bg11539:{
      jumpLab$bg11539:{
        jumpLab$bg11538:{
          switch ($var.__type_switch_id) {
            case 258:
              reason = $var.error;
              break jumpLab$bg11538;
            
            default:
              break jumpLab$bg11539;

          }
        }
        {
          sk$debug(new sk$String(('push')));
          var t$1 = this;
          sk$debug(t$1);
          var t$2 = value;
          sk$debug(t$2);
          var t$3 = msg;
          sk$debug(t$3);
          var t$4 = reason;
          sk$print_error_ln(t$4);
          sk$print_stack_trace();
          return sk$assertTrue(new sk$Bool((false)));
        }
      }
      return sk.__.$void;
    }
  }
};

sk$Persistent$dtRadixTreeVector.prototype.capacity = function() {
  var t$ = this;
  return t$.size();
};

sk$Persistent$dtRadixTreeVector.prototype.chill = function() {
  var t$ = this;
  var t$1 = t$.rootSize;
  var t$2 = this;
  var t$3 = t$2.shift;
  var t$4 = this;
  var t$5 = t$4.root;
  var t$6 = this;
  var t$7 = t$6.tailSize;
  var t$8 = this;
  var t$9 = t$8.tail;
  var t$10 = t$9.chill();
  return new (sk$Persistent$dtRadixTreeVector)({
    root: t$5,
    rootSize: t$1,
    shift: t$3,
    tail: t$10,
    tailSize: t$7
  });
};

sk$Persistent$dtRadixTreeVector.prototype.clear = function() {
  var t$ = this;
  var tail = t$.tail;
  var t$1 = this;
  var t$2 = t$1.tailSize;
  var t$3 = t$2.toInt();
  var t$4 = new (sk$Range)(new sk$Int(0.0, 0.0), t$3);
  var $var = t$4.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg11562:{
      break$bg11562:{
        dowhile_else$bg11561:{
          do
            {
              jumpBlockOuterdowhile_cond$bg11563:{
                dowhile_cond$bg11563:{
                  {
                    var t$5 = $var;
                    var var2 = t$5.next();
                    var index;
                    {
                      jumpBlockOuterjumpLab$bg11580:{
                        jumpLab$bg11580:{
                          jumpLab$bg11579:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg11579;
                              
                              case 205:
                                index = var2.value;
                                break jumpLab$bg11580;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg11563;
                          }
                        }
                        {
                          var t$6 = tail;
                          var t$7 = index;
                          var t$8 = sk$Persistent$dtunsafeUninitialized();
                          sk$Unsafe$dtarray_set(t$6, t$7, t$8);
                        }
                        break jumpBlockOuterjumpLab$bg11580;
                      }
                    }
                    break dowhile_cond$bg11563;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg11561;
                break jumpBlockOuterdowhile_cond$bg11563;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11562;
      }
      {}
      break jumpBlockOuterbreak$bg11562;
    }
  }
  var var3 = this;
  var t$9 = var3;
  var t$10 = t$9;
  t$10.root = singleton$None;
  var var4 = this;
  var t$11 = var4;
  var t$12 = t$11;
  t$12.rootSize = new (sk$Persistent$dtIndex)(undefined);
  var var5 = this;
  var t$13 = var5;
  var t$14 = t$13;
  t$14.shift = new (sk$Persistent$dtShift)(undefined);
  var var6 = this;
  var t$15 = var6;
  var t$16 = t$15;
  t$16.tailSize = sk$UInt8.min;
  return sk.__.$void;
};

sk$Persistent$dtRadixTreeVector.prototype.clone = function(reserveCapacity) {
  if (reserveCapacity === undefined)
    reserveCapacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = reserveCapacity;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('RadixTreeVector::clone: Expected reserveCapacity to be nonnegative.')));
  var t$2 = this;
  var t$3 = t$2.rootSize;
  var t$4 = this;
  var t$5 = t$4.shift;
  var t$6 = this;
  var t$7 = t$6.root;
  var t$8 = this;
  var t$9 = t$8.tailSize;
  var t$10 = this;
  var t$11 = t$10.tail;
  var t$12 = t$11.clone();
  return new (sk$Persistent$dtRadixTreeVector)({
    root: t$7,
    rootSize: t$3,
    shift: t$5,
    tail: t$12,
    tailSize: t$9
  });
};

sk$Persistent$dtRadixTreeVector.prototype.compare = function(other) {
  var static1 = this.__constructor;
  var t$ = static1;
  var t$1 = this;
  var t$2 = t$1.values();
  var t$3 = other;
  var t$4 = t$3.values();
  var $var = t$.compareLoop(t$2, t$4);
  var c;
  {
    jumpBlockOuterjumpLab$bg11609:{
      jumpLab$bg11609:{
        jumpLab$bg11608:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg11608;
            
            default:
              c = $var;
              break jumpLab$bg11609;

          }
        }
        {
          var t$5 = this;
          var t$6 = t$5.size();
          var t$7 = other;
          var t$8 = t$7.size();
          return sk$compare(t$6, t$8);
        }
      }
      return c;
    }
  }
};

sk$Persistent$dtRadixTreeVector.compareLoop = function(a, b) {
  var break_val;
  {
    jumpBlockOuterbreak$bg11613:{
      break$bg11613:{
        do
          {
            jumpBlockOutercontinue$bg11614:{
              continue$bg11614:{
                {
                  var t$ = a;
                  var t$1 = t$.next();
                  var t$2 = b;
                  var t$3 = t$2.next();
                  var $var = new (sk$Tuple2)(t$1, t$3);
                  var _;
                  var x1;
                  var _1;
                  var _2;
                  var _3;
                  var x2;
                  {
                    jumpBlockOuterjumpLab$bg11631:{
                      jumpLab$bg11631:{
                        jumpLab$bg11630:{
                          jumpLab$bg11629:{
                            jumpLab$bg11628:{
                              jumpLab$bg11632:{
                                jumpLab$bg11633:{
                                  jumpLab$bg11634:{
                                    switch ($var.__type_switch_id) {
                                      case 392:
                                        break jumpLab$bg11634;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  switch ($var.i0.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg11632;
                                    
                                    case 205:
                                      break jumpLab$bg11633;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i1.__type_switch_id) {
                                  case 205:
                                    x1 = $var.i0.value;
                                    x2 = $var.i1.value;
                                    break jumpLab$bg11628;
                                  
                                  default:
                                    _3 = $var.i0.value;
                                    _2 = $var.i1;
                                    break jumpLab$bg11630;

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg11629;
                                
                                case 205:
                                  _1 = $var.i0;
                                  _ = $var.i1.value;
                                  break jumpLab$bg11631;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var t$4 = x1;
                              var t$5 = x2;
                              var var1 = sk$compare(t$4, t$5);
                              var c;
                              {
                                jumpBlockOuterjumpLab$bg11625:{
                                  jumpLab$bg11625:{
                                    jumpLab$bg11624:{
                                      switch (var1.__type_switch_id) {
                                        case 206:
                                          break jumpLab$bg11624;
                                        
                                        default:
                                          c = var1;
                                          break jumpLab$bg11625;

                                      }
                                    }
                                    break continue$bg11614;
                                  }
                                  {
                                    break_val = c;
                                    break break$bg11613;
                                  }
                                }
                              }
                            }
                          }
                          {
                            break_val = singleton$EQ;
                            break break$bg11613;
                          }
                        }
                        {
                          break_val = singleton$GT;
                          break break$bg11613;
                        }
                      }
                      {
                        break_val = singleton$LT;
                        break break$bg11613;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg11614;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg11613;
    }
  }
  return break_val;
};

sk$Persistent$dtRadixTreeVector.prototype.concat = function(second) {
  var t$ = this;
  var result = sk$Vector.mcreateFromItems(t$);
  var t$1 = result;
  var t$2 = second;
  t$1.extend(t$2);
  var t$3 = result;
  return t$3;
};

sk$Persistent$dtRadixTreeVector.prototype.contains = function(second) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = x;
    var t$3 = second;
    return t$2.$eq$eq(t$3);
  }));
  return t$1.isSome();
};

sk$Persistent$dtRadixTreeVector.createFromItems = function(items) {
  var t$ = this;
  var t$1 = items;
  var t$2 = t$.mcreateFromItems(t$1);
  return t$2;
};

sk$Persistent$dtRadixTreeVector.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = sk$Persistent$dtRadixTreeVector.mcreateFromIterator(t$);
  return t$1;
};

sk$Persistent$dtRadixTreeVector.prototype.$delete = function(index) {
  var t$ = this;
  var size = t$.size();
  var t$1 = index;
  var t$2 = size;
  if (t$1.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = index;
  var t$5 = t$4.$pl(new sk$Int(1.0, 0.0));
  var t$6 = index;
  var t$7 = size;
  var t$8 = index;
  var t$9 = t$7.$mi(t$8);
  var t$10 = t$9.$mi(new sk$Int(1.0, 0.0));
  t$3.move(t$5, t$6, t$10);
  var t$11 = this;
  t$11.pop();
  return sk.__.$void;
};

sk$Persistent$dtRadixTreeVector.prototype.difference = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp11672) => 
  {
    return t$6.add(_tmp11672);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    var t$10 = t$8.contains(t$9);
    if (t$10.$bg().__value)
      {
        var t$11 = result;
        var t$12 = value;
        return t$11.push(t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$Persistent$dtRadixTreeVector.prototype.ensureCapacity = function(_capacity) {
  return sk.__.$void;
};

sk$Persistent$dtRadixTreeVector.eqLoop = function(a, b) {
  var break_val;
  {
    jumpBlockOuterbreak$bg11682:{
      break$bg11682:{
        do
          {
            jumpBlockOutercontinue$bg11683:{
              continue$bg11683:{
                {
                  var t$ = a;
                  var t$1 = t$.next();
                  var t$2 = b;
                  var t$3 = t$2.next();
                  var $var = new (sk$Tuple2)(t$1, t$3);
                  var x1;
                  var _;
                  var x2;
                  {
                    jumpBlockOuterjumpLab$bg11695:{
                      jumpLab$bg11695:{
                        jumpLab$bg11694:{
                          jumpLab$bg11693:{
                            jumpLab$bg11696:{
                              jumpLab$bg11697:{
                                jumpLab$bg11698:{
                                  switch ($var.__type_switch_id) {
                                    case 392:
                                      break jumpLab$bg11698;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.i0.__type_switch_id) {
                                  case 205:
                                    break jumpLab$bg11696;
                                  
                                  case 204:
                                    break jumpLab$bg11697;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              switch ($var.i1.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg11694;
                                
                                default:
                                  _ = $var;
                                  break jumpLab$bg11695;

                              }
                            }
                            switch ($var.i1.__type_switch_id) {
                              case 205:
                                x1 = $var.i0.value;
                                x2 = $var.i1.value;
                                break jumpLab$bg11693;
                              
                              default:
                                _ = $var;
                                break jumpLab$bg11695;

                            }
                          }
                          {
                            var t$4 = x1;
                            var t$5 = x2;
                            if (t$4.$bg$eq(t$5).__value)
                              {
                                break_val = new sk$Bool((false));
                                break break$bg11682;
                              }
                            else
                              break continue$bg11683;
                          }
                        }
                        {
                          break_val = new sk$Bool((true));
                          break break$bg11682;
                        }
                      }
                      {
                        break_val = new sk$Bool((false));
                        break break$bg11682;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg11683;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg11682;
    }
  }
  return break_val;
};

sk$Persistent$dtRadixTreeVector.prototype.extend = function(second) {
  var t$ = second;
  var t$1 = t$;
  var t$2 = this;
  var t$3 = t$2;
  return t$1.each(((_tmp11705) => 
  {
    return t$3.push(_tmp11705);
  }));
};

sk$Persistent$dtRadixTreeVector.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$Persistent$dtRadixTreeVector.prototype.genAll = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = (yield t$.genFind(((x) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = p;
        var t$3 = x;
        var t$4 = (yield t$2(t$3));
      }
      return t$4.$bg();
    })());
  })));
  return t$1.isNone();
});

sk$Persistent$dtRadixTreeVector.prototype.genAny = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = (yield t$.genFind(t$1));
  return t$2.isSome();
});

sk$Persistent$dtRadixTreeVector.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    var t$2 = p;
    var t$3 = this;
    var t$4 = index;
    var t$5 = t$3.get(t$4);
    return t$2(t$5);
  })));
  var t$6 = predicates;
  var nextSz = t$6.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$7 = sum;
        return t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var next = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg11726:{
      break$bg11726:{
        while_else$bg11725:{
          do
            {
              jumpBlockOutercontinue$bg11727:{
                continue$bg11727:{
                  {
                    var t$8 = toIndex;
                    var t$9 = nextSz;
                    if (t$8.ult(t$9).__value)
                      {
                        var t$10 = predicates;
                        var t$11 = fromIndex;
                        var t$12;
                        if (t$10.get(t$11).__value)
                          {
                            var t$13 = next;
                            var t$14 = toIndex;
                            var t$15 = this;
                            var t$16 = fromIndex;
                            var t$17 = t$15.get(t$16);
                            t$13.set(t$14, t$17);
                            var t$18 = toIndex;
                            toIndex = t$18.$pl(new sk$Int(1.0, 0.0));
                            t$12 = sk.__.$void;
                          }
                        else
                          t$12 = sk.__.$void;
                        var t$19 = fromIndex;
                        fromIndex = t$19.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg11725;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg11727;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11726;
      }
      {}
      break jumpBlockOuterbreak$bg11726;
    }
  }
  var t$20 = next;
  return t$20;
});

sk$Persistent$dtRadixTreeVector.prototype.genFind = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  return (yield t$.genFindTailLoop(t$1, new sk$Int(0.0, 0.0)));
});

sk$Persistent$dtRadixTreeVector.prototype.genFindTailLoop = skip.asyncToGenerator(function*(p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var item = t$3.get(t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = p;
          var t$10 = index;
          var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindTailLoop(t$9, t$11));
        }
    }
});

sk$Persistent$dtRadixTreeVector.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = sz;
  var nextInner = (yield sk$ASIO$dtgenFillBy(t$1, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = s;
        var t$3 = this;
        var t$4 = index;
        var t$5 = t$3.get(t$4);
        var awaitable_x = t$2(t$5);
      }
      return (yield awaitable_x);
    })());
  })));
  var t$6 = nextInner;
  return sk$Vector.createFromItems(t$6);
});

sk$Persistent$dtRadixTreeVector.prototype.get = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.rootSize;
  var t$3 = t$2.i;
  if (t$.ult(t$3).__value)
    {
      var t$4 = this;
      var t$5 = t$4.root;
      var t$6 = t$5.fromSome(undefined);
      var t$7 = this;
      var t$8 = t$7.shift;
      var t$9 = index;
      var t$10 = new (sk$Persistent$dtIndex)(t$9);
      return t$6.get(t$8, t$10);
    }
  else
    {
      var t$11 = index;
      var t$12 = this;
      var t$13 = t$12.rootSize;
      var t$14 = t$13.i;
      index = t$11.$mi(t$14);
      var t$15 = index;
      var t$16 = this;
      var t$17 = t$16.tailSize;
      if (t$15.$lt(t$17).__value)
        {
          var t$18 = this;
          var t$19 = t$18.tail;
          var t$20 = index;
          var t$21 = sk$Unsafe$dtarray_get(t$19, t$20);
          return sk$Persistent$dtunsafeGet(t$21);
        }
      else
        {
          if ((sk$Persistent$dtdebugEnableValidation()).__value)
            {
              var t$22 = this;
              var t$23 = index;
              t$22.assertValid(t$23, new sk$String(('get() index out of bounds')));
            }
          else
            {}
          return sk$throwOutOfBounds();
        }
    }
};

sk$Persistent$dtRadixTreeVector.prototype.getClassName = function() {
  return new sk$String(('Persistent.RadixTreeVector'));
};

sk$Persistent$dtRadixTreeVector.prototype.groupBy = function(s) {
  var result = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = s;
    var t$2 = value;
    var key = t$1(t$2);
    var t$3 = result;
    var t$4 = key;
    var items = t$3.getOrAdd(t$4, (() => 
    {
      return sk$Vector.mcreate(new sk$Int(0.0, 0.0));
    }));
    var t$5 = items;
    var t$6 = value;
    return t$5.push(t$6);
  }));
  var t$7 = result;
  var t$8 = t$7.map(((_, items1) => 
  {
    var t$9 = items1;
    return t$9;
  }));
  return t$8;
};

sk$Persistent$dtRadixTreeVector.prototype.hash = function() {
  var t$ = this;
  return t$.reduce(((acc, value) => 
  {
    var t$1 = acc;
    var t$2 = value;
    var t$3 = t$2.hash();
    return sk$Hashable$dtcombine(t$1, t$3);
  }), new sk$Int(4294967295.0, 4294967295.0));
};

sk$Persistent$dtRadixTreeVector.prototype.indexOf = function(predicate) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = index;
    index = t$2.$pl(new sk$Int(1.0, 0.0));
    var t$3 = x;
    var t$4 = predicate;
    return t$3.$eq$eq(t$4);
  }));
  return t$1.map(((_) => 
  {
    return index;
  }));
};

sk$Persistent$dtRadixTreeVector.prototype.insert = function(index, value) {
  var t$ = this;
  var size = t$.size();
  var t$1 = index;
  var t$2 = size;
  if (t$1.ugt(t$2).__value)
    return sk$throwOutOfBounds();
  else
    {
      var t$3 = index;
      var t$4 = size;
      if (t$3.$eq$eq(t$4).__value)
        {
          var t$5 = this;
          var t$6 = value;
          return t$5.push(t$6);
        }
      else
        {
          var t$7 = this;
          var t$8 = this;
          var t$9 = index;
          var t$10 = t$8.get(t$9);
          t$7.push(t$10);
          var t$11 = this;
          var t$12 = index;
          var t$13 = index;
          var t$14 = t$13.$pl(new sk$Int(1.0, 0.0));
          var t$15 = size;
          var t$16 = index;
          var t$17 = t$15.$mi(t$16);
          t$11.move(t$12, t$14, t$17);
          var t$18 = this;
          var t$19 = index;
          var t$20 = value;
          t$18.set(t$19, t$20);
          return sk.__.$void;
        }
    }
};

sk$Persistent$dtRadixTreeVector.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.size();
  var vector = sk$Array.fillBy(t$1, ((index) => 
  {
    var t$2 = this;
    var t$3 = index;
    var t$4 = t$2.get(t$3);
    return sk$inspect(t$4);
  }));
  var t$5 = vector;
  return new (sk$InspectVector)(new sk$String(('Persistent.RadixTreeVector')), t$5);
};

sk$Persistent$dtRadixTreeVector.prototype.intersection = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp11852) => 
  {
    return t$6.add(_tmp11852);
  }));
  var t$7 = this;
  t$7.each(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    if (t$8.contains(t$9).__value)
      {
        var t$10 = result;
        var t$11 = value;
        return t$10.push(t$11);
      }
    else
      return sk.__.$void;
  }));
  var t$12 = result;
  return t$12;
};

sk$Persistent$dtRadixTreeVector.prototype.items = function() {
  var t$ = this;
  var t$1 = t$.values();
  return t$1.enumerated();
};

sk$Persistent$dtRadixTreeVector.prototype.keepWhere = function(p) {
  var t$ = this;
  var size = t$.size();
  var out = new sk$Int(0.0, 0.0);
  var t$1 = size;
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg11868:{
      break$bg11868:{
        dowhile_else$bg11867:{
          do
            {
              jumpBlockOuterdowhile_cond$bg11869:{
                dowhile_cond$bg11869:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg11894:{
                        jumpLab$bg11894:{
                          jumpLab$bg11893:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg11893;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg11894;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg11869;
                          }
                        }
                        {
                          var t$4 = this;
                          var t$5 = i;
                          var src = t$4.get(t$5);
                          var t$6 = p;
                          var t$7 = src;
                          var t$8;
                          if (t$6(t$7).__value)
                            {
                              var t$9 = out;
                              var t$10 = i;
                              var t$11;
                              if (t$9.$bg$eq(t$10).__value)
                                {
                                  var t$12 = this;
                                  var t$13 = out;
                                  var t$14 = src;
                                  t$12.set(t$13, t$14);
                                  t$11 = sk.__.$void;
                                }
                              else
                                t$11 = sk.__.$void;
                              var t$15 = out;
                              out = t$15.$pl(new sk$Int(1.0, 0.0));
                              t$8 = sk.__.$void;
                            }
                          else
                            t$8 = sk.__.$void;
                        }
                        break jumpBlockOuterjumpLab$bg11894;
                      }
                    }
                    break dowhile_cond$bg11869;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg11867;
                break jumpBlockOuterdowhile_cond$bg11869;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg11868;
      }
      {}
      break jumpBlockOuterbreak$bg11868;
    }
  }
  var t$16 = out;
  if (t$16.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$17 = this;
      return t$17.clear();
    }
  else
    {
      var t$18 = this;
      var t$19 = out;
      var t$20 = this;
      var t$21 = t$20.get(new sk$Int(0.0, 0.0));
      return t$18.resize(t$19, t$21);
    }
};

sk$Persistent$dtRadixTreeVector.prototype.keys = function() {
  var t$ = this;
  var t$1 = t$.size();
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  return t$2.values();
};

sk$Persistent$dtRadixTreeVector.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$Persistent$dtRadixTreeVector.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$Persistent$dtRadixTreeVector.prototype.maybeGet = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var t$5 = t$3.get(t$4);
      return new (sk$Some)(t$5);
    }
};

sk$Persistent$dtRadixTreeVector.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$Persistent$dtRadixTreeVector.prototype.maybePop = function() {
  var t$ = this;
  var t$1 = t$.size();
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = this;
      var t$3 = t$2.pop();
      return new (sk$Some)(t$3);
    }
  else
    return singleton$None;
};

sk$Persistent$dtRadixTreeVector.mcreate = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = capacity;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Persistent.RadixTreeVector::mcreate: Expected capacity to be nonnegative.')));
  var t$2 = sk$Unsafe$dtarray_make((sk$Persistent$dtbranchFactor()));
  return new (sk$Persistent$dtRadixTreeVector)({
    root: singleton$None,
    rootSize: new (sk$Persistent$dtIndex)(undefined),
    shift: new (sk$Persistent$dtShift)(undefined),
    tail: t$2,
    tailSize: sk$UInt8.min
  });
};

sk$Persistent$dtRadixTreeVector.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  var t$3 = t$2.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$3, new sk$String(('RadixTreeVector::mcreateFromItems: Expected items size() to be nonnegative.')));
  var t$4 = this;
  var t$5 = size;
  var vec = t$4.mcreate(t$5);
  var t$6 = items;
  var t$7 = t$6;
  var t$8 = vec;
  var t$9 = t$8;
  t$7.each(((_tmp11937) => 
  {
    return t$9.push(_tmp11937);
  }));
  var t$10 = vec;
  var t$11 = t$10.size();
  var t$12 = size;
  var t$13 = t$11.$eq$eq(t$12);
  sk$invariant(t$13, new sk$String(('RadixTreeVector::mcreateFromItems(): Invalid sequence, expected each() to yield size() items.')));
  return vec;
};

sk$Persistent$dtRadixTreeVector.mcreateFromIterator = function(items) {
  var t$ = this;
  var vec = t$.mcreate(undefined);
  var t$1 = items;
  var t$2 = t$1;
  var t$3 = vec;
  var t$4 = t$3;
  t$2.each(((_tmp11947) => 
  {
    return t$4.push(_tmp11947);
  }));
  return vec;
};

sk$Persistent$dtRadixTreeVector.prototype.move = function(src, dst, count) {
  var t$ = this;
  var size = t$.size();
  var t$1 = src;
  var t$2 = size;
  var t$3 = t$1.ule(t$2);
  sk$invariant(t$3, new sk$String(('invalid start')));
  var t$4 = dst;
  var t$5 = size;
  var t$6 = t$4.ule(t$5);
  sk$invariant(t$6, new sk$String(('invalid start2')));
  var t$7 = count;
  var t$8 = t$7.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$8, new sk$String(('invalid count')));
  var t$9 = src;
  var t$10 = count;
  var t$11 = t$9.$pl(t$10);
  var t$12 = size;
  var t$13 = t$11.$lt$eq(t$12);
  sk$invariant(t$13, new sk$String(('invalid count')));
  var t$14 = dst;
  var t$15 = count;
  var t$16 = t$14.$pl(t$15);
  var t$17 = size;
  var t$18 = t$16.$lt$eq(t$17);
  sk$invariant(t$18, new sk$String(('invalid count')));
  var t$19 = src;
  var t$20 = dst;
  if (t$19.$gt(t$20).__value)
    {
      var t$21 = count;
      var t$22 = new (sk$Range)(new sk$Int(0.0, 0.0), t$21);
      var $var = t$22.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg11974:{
          break$bg11974:{
            dowhile_else$bg11973:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg11975:{
                    dowhile_cond$bg11975:{
                      {
                        var t$23 = $var;
                        var var2 = t$23.next();
                        var i;
                        {
                          jumpBlockOuterjumpLab$bg12014:{
                            jumpLab$bg12014:{
                              jumpLab$bg12013:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg12013;
                                  
                                  case 205:
                                    i = var2.value;
                                    break jumpLab$bg12014;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg11975;
                              }
                            }
                            {
                              var t$24 = this;
                              var t$25 = dst;
                              var t$26 = i;
                              var t$27 = t$25.$pl(t$26);
                              var t$28 = this;
                              var t$29 = src;
                              var t$30 = i;
                              var t$31 = t$29.$pl(t$30);
                              var t$32 = t$28.get(t$31);
                              t$24.set(t$27, t$32);
                            }
                            break jumpBlockOuterjumpLab$bg12014;
                          }
                        }
                        break dowhile_cond$bg11975;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg11973;
                    break jumpBlockOuterdowhile_cond$bg11975;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg11974;
          }
          {}
          break jumpBlockOuterbreak$bg11974;
        }
      }
      return break_val;
    }
  else
    {
      var t$33 = src;
      var t$34 = dst;
      if (t$33.$lt(t$34).__value)
        {
          var t$35 = count;
          var t$36 = new (sk$Range)(new sk$Int(0.0, 0.0), t$35);
          var var3 = t$36.values();
          var var4 = new sk$Bool((true));
          var break_val1;
          {
            jumpBlockOuterbreak$bg11995:{
              break$bg11995:{
                dowhile_else$bg11994:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg11996:{
                        dowhile_cond$bg11996:{
                          {
                            var t$37 = var3;
                            var var5 = t$37.next();
                            var i1;
                            {
                              jumpBlockOuterjumpLab$bg12018:{
                                jumpLab$bg12018:{
                                  jumpLab$bg12017:{
                                    switch (var5.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg12017;
                                      
                                      case 205:
                                        i1 = var5.value;
                                        break jumpLab$bg12018;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var4 = new sk$Bool((false));
                                    break dowhile_cond$bg11996;
                                  }
                                }
                                {
                                  var t$38 = count;
                                  var t$39 = t$38.$mi(new sk$Int(1.0, 0.0));
                                  var t$40 = i1;
                                  var idx = t$39.$mi(t$40);
                                  var t$41 = this;
                                  var t$42 = dst;
                                  var t$43 = idx;
                                  var t$44 = t$42.$pl(t$43);
                                  var t$45 = this;
                                  var t$46 = src;
                                  var t$47 = idx;
                                  var t$48 = t$46.$pl(t$47);
                                  var t$49 = t$45.get(t$48);
                                  t$41.set(t$44, t$49);
                                }
                                break jumpBlockOuterjumpLab$bg12018;
                              }
                            }
                            break dowhile_cond$bg11996;
                          }
                        }
                        if (var4.__value)
                          {}
                        else
                          break dowhile_else$bg11994;
                        break jumpBlockOuterdowhile_cond$bg11996;
                      }
                    }
                  while (true);
                }
                break_val1 = sk.__.$void;
                break jumpBlockOuterbreak$bg11995;
              }
              {}
              break jumpBlockOuterbreak$bg11995;
            }
          }
          return break_val1;
        }
      else
        return sk.__.$void;
    }
};

sk$Persistent$dtRadixTreeVector.prototype.partition = function(p) {
  var pass = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var fail = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = pass;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      {
        var t$5 = fail;
        var t$6 = value;
        return t$5.push(t$6);
      }
  }));
  var t$7 = pass;
  var t$8 = t$7;
  var t$9 = fail;
  var t$10 = t$9;
  return new (sk$Tuple2)(t$8, t$10);
};

sk$Persistent$dtRadixTreeVector.prototype.pop = function() {
  var t$ = this;
  var tailSize = t$.tailSize;
  var t$1 = tailSize;
  if (t$1.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = this;
      var tail = t$2.tail;
      var t$3 = tailSize;
      var nextTailSize = t$3.$mi(new sk$Int(1.0, 0.0));
      var $var = this;
      var t$4 = $var;
      var t$5 = nextTailSize;
      var t$6 = t$4;
      t$6.tailSize = sk$UInt8.truncate(t$5);
      var t$7 = tail;
      var t$8 = nextTailSize;
      var t$9 = sk$Unsafe$dtarray_get(t$7, t$8);
      var value = sk$Persistent$dtunsafeGet(t$9);
      var t$10 = tail;
      var t$11 = nextTailSize;
      var t$12 = sk$Persistent$dtunsafeUninitialized();
      sk$Unsafe$dtarray_set(t$10, t$11, t$12);
      if ((sk$Persistent$dtdebugEnableValidation()).__value)
        {
          var t$13 = this;
          var t$14 = value;
          t$13.assertValid(t$14, new sk$String(('pop from tail')));
        }
      else
        {}
      return value;
    }
  else
    {
      var t$15 = this;
      var t$16 = t$15.rootSize;
      var t$17 = t$16.i;
      if (t$17.$gt(new sk$Int(0.0, 0.0)).__value)
        {
          var t$18 = this;
          var value1 = t$18.popTail();
          if ((sk$Persistent$dtdebugEnableValidation()).__value)
            {
              var t$19 = this;
              var t$20 = value1;
              t$19.assertValid(t$20, new sk$String(('pop and promote rightmost leaf to tail')));
            }
          else
            {}
          return value1;
        }
      else
        {
          if ((sk$Persistent$dtdebugEnableValidation()).__value)
            {
              var t$21 = this;
              t$21.assertValid(sk.__.$void, new sk$String(('out of bounds pop')));
            }
          else
            {}
          return sk$throwOutOfBounds();
        }
    }
};

sk$Persistent$dtRadixTreeVector.prototype.popTail = function() {
  var t$ = this;
  var $var = t$.root;
  var root;
  {
    jumpBlockOuterjumpLab$bg12117:{
      jumpLab$bg12117:{
        jumpLab$bg12116:{
          switch ($var.__type_switch_id) {
            case 205:
              root = $var.value;
              break jumpLab$bg12116;
            
            case 204:
              break jumpLab$bg12117;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = this;
          var t$2 = t$1.shift;
          var t$3 = t$2.decrement();
          var t$4 = t$3.i;
          var flattenedCapacity = (sk$Persistent$dtbranchFactor()).shl(t$4);
          var t$5 = this;
          var shift = t$5.shift;
          var t$6 = this;
          var t$7 = t$6.rootSize;
          var t$8 = t$7.i;
          var t$9 = t$8.$mi((sk$Persistent$dtbranchFactor()));
          var nextRootSize = new (sk$Persistent$dtIndex)(t$9);
          var t$10 = root;
          var t$11 = shift;
          var t$12 = nextRootSize;
          var var1 = t$10.popTail(t$11, t$12);
          var var2;
          var var3;
          {
            jumpBlockOuterjumpLab$bg12113:{
              jumpLab$bg12113:{
                switch (var1.__type_switch_id) {
                  case 392:
                    var2 = var1.i0;
                    var3 = var1.i1;
                    break jumpLab$bg12113;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var leaf = var3;
                var nextRoot = var2;
                var t$13 = nextRoot;
                var t$14;
                if (t$13.isSome().__value)
                  {
                    var t$15 = nextRootSize;
                    var t$16 = t$15.i;
                    var t$17 = flattenedCapacity;
                    t$14 = t$16.$lt$eq(t$17);
                  }
                else
                  t$14 = new sk$Bool((false));
                var t$18;
                if (t$14.__value)
                  {
                    var var4 = this;
                    var t$19 = var4;
                    var t$20 = shift;
                    var t$21 = t$19;
                    t$21.shift = t$20.decrement();
                    var t$22 = nextRoot;
                    var t$23;
                    var var5 = t$22.fromSome(undefined);
                    var var6;
                    {
                      jumpBlockOuterjumpLab$bg12110:{
                        jumpLab$bg12110:{
                          jumpLab$bg12109:{
                            switch (var5.__type_switch_id) {
                              case 220:
                                var6 = var5;
                                break jumpLab$bg12109;
                              
                              default:
                                break jumpLab$bg12110;

                            }
                          }
                          t$23 = var6;
                          break jumpBlockOuterjumpLab$bg12110;
                        }
                        skip.throwException(sk, new (sk$InvalidCast)(new sk$String(('Persistent.Node<T>')), new sk$String(('Persistent.Internal _'))));
                      }
                    }
                    var t$24 = t$23;
                    var t$25 = t$24.elements;
                    t$18 = t$25.get(new sk$Int(0.0, 0.0));
                  }
                else
                  t$18 = nextRoot;
                nextRoot = t$18;
                var t$26 = leaf;
                var t$27 = t$26.elements;
                var tail = t$27.clone();
                var tailSize = (sk$Persistent$dtbranchFactor()).$mi(new sk$Int(1.0, 0.0));
                var t$28 = tail;
                var t$29 = tailSize;
                var t$30 = sk$Unsafe$dtarray_get(t$28, t$29);
                var value = sk$Persistent$dtunsafeGet(t$30);
                var t$31 = tail;
                var t$32 = tailSize;
                var t$33 = sk$Persistent$dtunsafeUninitialized();
                sk$Unsafe$dtarray_set(t$31, t$32, t$33);
                var var7 = this;
                var t$34 = var7;
                var t$35 = t$34;
                t$35.root = nextRoot;
                var var8 = this;
                var t$36 = var8;
                var t$37 = t$36;
                t$37.rootSize = nextRootSize;
                var var9 = this;
                var t$38 = var9;
                var t$39 = t$38;
                t$39.tail = tail;
                var var10 = this;
                var t$40 = var10;
                var t$41 = tailSize;
                var t$42 = t$40;
                t$42.tailSize = sk$UInt8.truncate(t$41);
                return value;
              }
            }
          }
        }
      }
      {
        var t$43 = new sk$String(('Persistent.RadixTreeVector::popTail(): Expected root to be non-null')).toString();
        var t$44 = t$43;
        return sk$invariant_violation(t$44);
      }
    }
  }
};

sk$Persistent$dtRadixTreeVector.prototype.push = function(value) {
  var t$ = this;
  var tailSize = t$.tailSize;
  var t$1 = this;
  var tail = t$1.tail;
  var t$2 = tail;
  var t$3 = tailSize;
  var t$4 = t$3.toInt();
  var t$5 = value;
  var t$6 = sk$Persistent$dtunsafeMake(t$5);
  sk$Unsafe$dtarray_set(t$2, t$4, t$6);
  var t$7 = tailSize;
  var nextTailSize = t$7.$pl(new sk$Int(1.0, 0.0));
  var t$8 = nextTailSize;
  if (t$8.$eq$eq((sk$Persistent$dtbranchFactor())).__value)
    {
      var t$9 = this;
      var t$10 = tail;
      var t$11 = t$10;
      t$9.pushTail((sk$Persistent$dtbranchFactor()), t$11);
      var $var = this;
      var t$12 = $var;
      var t$13 = this;
      var t$14 = t$13.rootSize;
      var t$15 = t$14.i;
      var t$16 = t$15.$pl((sk$Persistent$dtbranchFactor()));
      var t$17 = t$12;
      t$17.rootSize = new (sk$Persistent$dtIndex)(t$16);
      var var1 = this;
      var t$18 = var1;
      var t$19 = t$18;
      t$19.tailSize = sk$UInt8.min;
      var var2 = this;
      var t$20 = var2;
      var t$21 = t$20;
      t$21.tail = sk$Unsafe$dtarray_make((sk$Persistent$dtbranchFactor()));
    }
  else
    {
      var var3 = this;
      var t$22 = var3;
      var t$23 = nextTailSize;
      var t$24 = t$22;
      t$24.tailSize = sk$UInt8.truncate(t$23);
    }
  if ((sk$Persistent$dtdebugEnableValidation()).__value)
    {
      var t$25 = this;
      var t$26 = value;
      return t$25.assertValid(t$26, new sk$String(('push')));
    }
  else
    return sk.__.$void;
};

sk$Persistent$dtRadixTreeVector.prototype.pushTail = function(tailSize, tail) {
  var t$ = this;
  var $var = t$.root;
  var node;
  {
    jumpBlockOuterjumpLab$bg12196:{
      jumpLab$bg12196:{
        jumpLab$bg12195:{
          switch ($var.__type_switch_id) {
            case 205:
              node = $var.value;
              break jumpLab$bg12195;
            
            case 204:
              break jumpLab$bg12196;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = this;
          var t$2 = t$1.shift;
          var t$3 = t$2.i;
          var capacity = (sk$Persistent$dtbranchFactor()).shl(t$3);
          var t$4 = this;
          var t$5 = t$4.rootSize;
          var t$6 = t$5.i;
          var t$7 = t$6.$pl((sk$Persistent$dtbranchFactor()));
          var t$8 = capacity;
          if (t$7.$lt$eq(t$8).__value)
            {
              var var1 = this;
              var t$9 = var1;
              var t$10 = node;
              var t$11 = this;
              var t$12 = t$11.shift;
              var t$13 = this;
              var t$14 = t$13.rootSize;
              var t$15 = tailSize;
              var t$16 = tail;
              var t$17 = t$10.pushTail(t$12, t$14, t$15, t$16);
              var t$18 = t$9;
              t$18.root = new (sk$Some)(t$17);
              return sk.__.$void;
            }
          else
            {
              var elements = sk$Array.mfill((sk$Persistent$dtbranchFactor()), singleton$None);
              var t$19 = elements;
              var t$20 = node;
              var t$21 = new (sk$Some)(t$20);
              t$19.set(new sk$Int(0.0, 0.0), t$21);
              var t$22 = elements;
              var t$23 = this;
              var t$24 = t$23.shift;
              var t$25 = tailSize;
              var t$26 = tail;
              var t$27 = sk$Persistent$dtNode.branchLadder(t$24, t$25, t$26);
              var t$28 = new (sk$Some)(t$27);
              t$22.set(new sk$Int(1.0, 0.0), t$28);
              var var2 = this;
              var t$29 = var2;
              var t$30 = elements;
              var t$31 = t$30;
              var t$32 = new (sk$Persistent$dtInternal)(t$31);
              var t$33 = t$29;
              t$33.root = new (sk$Some)(t$32);
              var var3 = this;
              var t$34 = var3;
              var t$35 = this;
              var t$36 = t$35.shift;
              var t$37 = t$34;
              t$37.shift = t$36.increment();
              return sk.__.$void;
            }
        }
      }
      {
        var var4 = this;
        var t$38 = var4;
        var t$39 = tail;
        var t$40 = new (sk$Persistent$dtLeaf)(t$39);
        var t$41 = t$38;
        t$41.root = new (sk$Some)(t$40);
        return sk.__.$void;
      }
    }
  }
};

sk$Persistent$dtRadixTreeVector.prototype.resize = function(newSize, value) {
  var t$ = newSize;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('RadixTreeVector.resize(): Expected size to be nonnegative.')));
  var t$2 = this;
  var size = t$2.size();
  var t$3 = newSize;
  var t$4 = size;
  if (t$3.$gt(t$4).__value)
    {
      var t$5 = newSize;
      var t$6 = size;
      var t$7 = t$5.$mi(t$6);
      var t$8 = new (sk$Range)(new sk$Int(0.0, 0.0), t$7);
      var $var = t$8.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg12211:{
          break$bg12211:{
            dowhile_else$bg12210:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg12212:{
                    dowhile_cond$bg12212:{
                      {
                        var t$9 = $var;
                        var var2 = t$9.next();
                        var _;
                        {
                          jumpBlockOuterjumpLab$bg12235:{
                            jumpLab$bg12235:{
                              jumpLab$bg12234:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg12234;
                                  
                                  case 205:
                                    _ = var2.value;
                                    break jumpLab$bg12235;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg12212;
                              }
                            }
                            {
                              var t$10 = this;
                              var t$11 = value;
                              t$10.push(t$11);
                            }
                            break jumpBlockOuterjumpLab$bg12235;
                          }
                        }
                        break dowhile_cond$bg12212;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg12210;
                    break jumpBlockOuterdowhile_cond$bg12212;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg12211;
          }
          {}
          break jumpBlockOuterbreak$bg12211;
        }
      }
      return break_val;
    }
  else
    {
      var t$12 = newSize;
      var t$13 = size;
      if (t$12.$lt(t$13).__value)
        {
          var t$14 = size;
          var t$15 = newSize;
          var t$16 = t$14.$mi(t$15);
          var t$17 = new (sk$Range)(new sk$Int(0.0, 0.0), t$16);
          var var3 = t$17.values();
          var var4 = new sk$Bool((true));
          var break_val1;
          {
            jumpBlockOuterbreak$bg12227:{
              break$bg12227:{
                dowhile_else$bg12226:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg12228:{
                        dowhile_cond$bg12228:{
                          {
                            var t$18 = var3;
                            var var5 = t$18.next();
                            var _1;
                            {
                              jumpBlockOuterjumpLab$bg12239:{
                                jumpLab$bg12239:{
                                  jumpLab$bg12238:{
                                    switch (var5.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg12238;
                                      
                                      case 205:
                                        _1 = var5.value;
                                        break jumpLab$bg12239;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var4 = new sk$Bool((false));
                                    break dowhile_cond$bg12228;
                                  }
                                }
                                {
                                  var t$19 = this;
                                  t$19.pop();
                                }
                                break jumpBlockOuterjumpLab$bg12239;
                              }
                            }
                            break dowhile_cond$bg12228;
                          }
                        }
                        if (var4.__value)
                          {}
                        else
                          break dowhile_else$bg12226;
                        break jumpBlockOuterdowhile_cond$bg12228;
                      }
                    }
                  while (true);
                }
                break_val1 = sk.__.$void;
                break jumpBlockOuterbreak$bg12227;
              }
              {}
              break jumpBlockOuterbreak$bg12227;
            }
          }
          return break_val1;
        }
      else
        return sk.__.$void;
    }
};

sk$Persistent$dtRadixTreeVector.prototype.reverse = function() {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = t$1.$dv(new sk$Int(2.0, 0.0));
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg12248:{
      break$bg12248:{
        dowhile_else$bg12247:{
          do
            {
              jumpBlockOuterdowhile_cond$bg12249:{
                dowhile_cond$bg12249:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg12261:{
                        jumpLab$bg12261:{
                          jumpLab$bg12260:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg12260;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg12261;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg12249;
                          }
                        }
                        {
                          var t$5 = this;
                          var t$6 = i;
                          var t$7 = size;
                          var t$8 = t$7.$mi(new sk$Int(1.0, 0.0));
                          var t$9 = i;
                          var t$10 = t$8.$mi(t$9);
                          t$5.swap(t$6, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg12261;
                      }
                    }
                    break dowhile_cond$bg12249;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg12247;
                break jumpBlockOuterdowhile_cond$bg12249;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg12248;
      }
      {}
      break jumpBlockOuterbreak$bg12248;
    }
  }
  return break_val;
};

sk$Persistent$dtRadixTreeVector.prototype.sample = function(rng, count) {
  var t$ = this;
  var sz = t$.size();
  var t$1 = count;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$2 = sz;
      var t$3 = count;
      if (t$2.$lt$eq(t$3).__value)
        {
          var t$4 = this;
          return t$4.chill();
        }
      else
        {
          var t$5 = count;
          var t$6 = t$5.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$6, new sk$String(('Vector.sample(): Expected count to be nonnegative.')));
          var t$7 = this;
          var t$8 = count;
          var t$9 = t$7.slice(new sk$Int(0.0, 0.0), t$8);
          var sample = sk$Vector.mcreateFromItems(t$9);
          var t$10 = count;
          var t$11 = sz;
          var t$12 = new (sk$Range)(t$10, t$11);
          var $var = t$12.values();
          var var1 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg12280:{
              break$bg12280:{
                dowhile_else$bg12279:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg12281:{
                        dowhile_cond$bg12281:{
                          {
                            var t$13 = $var;
                            var var2 = t$13.next();
                            var index;
                            {
                              jumpBlockOuterjumpLab$bg12299:{
                                jumpLab$bg12299:{
                                  jumpLab$bg12298:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg12298;
                                      
                                      case 205:
                                        index = var2.value;
                                        break jumpLab$bg12299;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var1 = new sk$Bool((false));
                                    break dowhile_cond$bg12281;
                                  }
                                }
                                {
                                  var t$14 = rng;
                                  var t$15 = index;
                                  var t$16 = t$15.$pl(new sk$Int(1.0, 0.0));
                                  var swap = t$14.random(new sk$Int(0.0, 0.0), t$16);
                                  var t$17 = swap;
                                  var t$18 = count;
                                  var t$19;
                                  if (t$17.$lt(t$18).__value)
                                    {
                                      var t$20 = sample;
                                      var t$21 = swap;
                                      var t$22 = this;
                                      var t$23 = index;
                                      var t$24 = t$22.get(t$23);
                                      t$20.set(t$21, t$24);
                                      t$19 = sk.__.$void;
                                    }
                                  else
                                    t$19 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg12299;
                              }
                            }
                            break dowhile_cond$bg12281;
                          }
                        }
                        if (var1.__value)
                          {}
                        else
                          break dowhile_else$bg12279;
                        break jumpBlockOuterdowhile_cond$bg12281;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg12280;
              }
              {}
              break jumpBlockOuterbreak$bg12280;
            }
          }
          var t$25 = sample;
          return t$25;
        }
    }
};

sk$Persistent$dtRadixTreeVector.prototype.set = function(index, value) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.rootSize;
  var t$3 = t$2.i;
  if (t$.$lt(t$3).__value)
    {
      var $var = this;
      var t$4 = $var;
      var t$5 = this;
      var t$6 = t$5.root;
      var t$7 = t$6.fromSome(undefined);
      var t$8 = this;
      var t$9 = t$8.shift;
      var t$10 = index;
      var t$11 = new (sk$Persistent$dtIndex)(t$10);
      var t$12 = value;
      var t$13 = t$7.set(t$9, t$11, t$12);
      var t$14 = t$4;
      t$14.root = new (sk$Some)(t$13);
      return sk.__.$void;
    }
  else
    {
      var t$15 = index;
      var t$16 = this;
      var t$17 = t$16.rootSize;
      var t$18 = t$17.i;
      index = t$15.$mi(t$18);
      var t$19 = index;
      var t$20 = this;
      var t$21 = t$20.tailSize;
      if (t$19.$lt(t$21).__value)
        {
          var t$22 = this;
          var t$23 = t$22.tail;
          var t$24 = index;
          var t$25 = value;
          var t$26 = sk$Persistent$dtunsafeMake(t$25);
          return sk$Unsafe$dtarray_set(t$23, t$24, t$26);
        }
      else
        {
          if ((sk$Persistent$dtdebugEnableValidation()).__value)
            {
              var t$27 = this;
              var t$28 = index;
              t$27.assertValid(t$28, new sk$String(('set() index out of bounds')));
            }
          else
            {}
          return sk$throwOutOfBounds();
        }
    }
};

sk$Persistent$dtRadixTreeVector.prototype.shuffle = function(rng) {
  var t$ = this;
  var size = t$.size();
  var t$1 = size;
  var t$2 = t$1.$mi(new sk$Int(1.0, 0.0));
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg12340:{
      break$bg12340:{
        dowhile_else$bg12339:{
          do
            {
              jumpBlockOuterdowhile_cond$bg12341:{
                dowhile_cond$bg12341:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg12353:{
                        jumpLab$bg12353:{
                          jumpLab$bg12352:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg12352;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg12353;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg12341;
                          }
                        }
                        {
                          var t$5 = rng;
                          var t$6 = i;
                          var t$7 = size;
                          var swap = t$5.random(t$6, t$7);
                          var t$8 = this;
                          var t$9 = i;
                          var t$10 = swap;
                          t$8.swap(t$9, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg12353;
                      }
                    }
                    break dowhile_cond$bg12341;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg12339;
                break jumpBlockOuterdowhile_cond$bg12341;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg12340;
      }
      {}
      break jumpBlockOuterbreak$bg12340;
    }
  }
  return break_val;
};

sk$Persistent$dtRadixTreeVector.prototype.size = function() {
  var t$ = this;
  var t$1 = t$.rootSize;
  var t$2 = t$1.i;
  var t$3 = this;
  var t$4 = t$3.tailSize;
  return t$2.$pl(t$4);
};

sk$Persistent$dtRadixTreeVector.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var t$ = this;
  var sz = t$.size();
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$15 = end;
      var t$16 = start;
      var capacity = t$15.$mi(t$16);
      var t$17 = capacity;
      return sk$Vector.fillBy(t$17, ((i) => 
      {
        var t$18 = this;
        var t$19 = i;
        var t$20 = start;
        var t$21 = t$19.$pl(t$20);
        return t$18.get(t$21);
      }));
    }
};

sk$Persistent$dtRadixTreeVector.prototype.sort = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortBy(((_tmp12387) => 
  {
    return sk$id(_tmp12387);
  }), t$1);
};

sk$Persistent$dtRadixTreeVector.prototype.sortBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var tmp = sk$Array.mcreateFromItems(t$);
  var t$1 = tmp;
  var t$2 = selector;
  var t$3 = compare;
  t$1.sortBy(t$2, t$3);
  var t$4 = this;
  var t$5 = this;
  var t$6 = t$5.size();
  var t$7 = tmp;
  return t$4.splice(new sk$Int(0.0, 0.0), t$6, t$7);
};

sk$Persistent$dtRadixTreeVector.prototype.splice = function(start, end, second) {
  var t$ = this;
  var size = t$.size();
  var t$1 = start;
  var t$2 = t$1.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$2, new sk$String(('Vector.splice(): Expected start index to be nonnegative.')));
  var t$3 = end;
  var t$4 = start;
  var t$5 = t$3.$gt$eq(t$4);
  sk$invariant(t$5, new sk$String(('Vector.splice(): Expected end to be greater than or equal to start.')));
  var t$6 = start;
  var t$7 = size;
  start = sk$min(t$6, t$7);
  var t$8 = end;
  var t$9 = size;
  end = sk$min(t$8, t$9);
  var t$10 = end;
  var t$11 = start;
  var removeSize = t$10.$mi(t$11);
  var t$12 = removeSize;
  var t$13 = size;
  if (t$12.$eq$eq(t$13).__value)
    {
      var t$14 = this;
      t$14.clear();
      var t$15 = this;
      var t$16 = second;
      t$15.extend(t$16);
      return sk.__.$void;
    }
  else
    {}
  var t$17 = second;
  var t$18 = t$17;
  var addSize = t$18.size();
  var oldSize = size;
  var t$19 = size;
  var t$20 = removeSize;
  var t$21 = t$19.$mi(t$20);
  var t$22 = addSize;
  var newSize = t$21.$pl(t$22);
  var t$23 = addSize;
  var t$24 = removeSize;
  if (t$23.$gt(t$24).__value)
    {
      size = newSize;
      var t$25 = this;
      var t$26 = size;
      var t$27 = this;
      var t$28 = t$27.get(new sk$Int(0.0, 0.0));
      t$25.resize(t$26, t$28);
    }
  else
    {}
  var t$29 = this;
  var t$30 = end;
  var t$31 = start;
  var t$32 = addSize;
  var t$33 = t$31.$pl(t$32);
  var t$34 = oldSize;
  var t$35 = end;
  var t$36 = t$34.$mi(t$35);
  t$29.move(t$30, t$33, t$36);
  var t$37 = second;
  var t$38 = t$37;
  t$38.eachWithIndex(((i, v) => 
  {
    var t$39 = this;
    var t$40 = start;
    var t$41 = i;
    var t$42 = t$40.$pl(t$41);
    var t$43 = v;
    t$39.set(t$42, t$43);
    return sk.__.$void;
  }));
  var t$44 = size;
  var t$45 = newSize;
  if (t$44.$bg$eq(t$45).__value)
    {
      var t$46 = this;
      var t$47 = newSize;
      var t$48 = this;
      var t$49 = t$48.get(new sk$Int(0.0, 0.0));
      return t$46.resize(t$47, t$49);
    }
  else
    return sk.__.$void;
};

sk$Persistent$dtRadixTreeVector.prototype.swap = function(i, j) {
  var t$ = this;
  var t$1 = i;
  var tmp = t$.get(t$1);
  var t$2 = this;
  var t$3 = i;
  var t$4 = this;
  var t$5 = j;
  var t$6 = t$4.get(t$5);
  t$2.set(t$3, t$6);
  var t$7 = this;
  var t$8 = j;
  var t$9 = tmp;
  t$7.set(t$8, t$9);
  return sk.__.$void;
};

sk$Persistent$dtRadixTreeVector.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.join(new sk$String((', ')));
  var t$2 = new sk$String(('Persistent.RadixTreeVector[')).$pl(t$1);
  return t$2.$pl(new sk$String((']')));
};

sk$Persistent$dtRadixTreeVector.prototype.unique = function() {
  var set = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = set;
    var t$2 = value;
    return t$1.set(t$2, sk.__.$void);
  }));
  var t$3 = set;
  var t$4 = t$3.size();
  var result = sk$Vector.mcreate(t$4);
  var t$5 = set;
  t$5.each(((value1, _) => 
  {
    var t$6 = result;
    var t$7 = value1;
    return t$6.push(t$7);
  }));
  var t$8 = result;
  return t$8;
};

sk$Persistent$dtRadixTreeVector.prototype.validate = function() {
  var t$ = this;
  var t$1 = t$.tailSize;
  if (t$1.$gt$eq((sk$Persistent$dtbranchFactor())).__value)
    {
      var t$2 = new sk$String(('Tail got too long ')).toString();
      var t$3 = this;
      var t$4 = t$3.tailSize;
      var t$5 = t$4.toString();
      var t$6 = new sk$String(('')).join(new (sk$Array)([
        t$2,
        t$5
      ]));
      return new (sk$Failure)(t$6);
    }
  else
    {}
  var t$7 = this;
  var $var = t$7.root;
  var node;
  {
    jumpBlockOuterjumpLab$bg12512:{
      jumpLab$bg12512:{
        jumpLab$bg12511:{
          switch ($var.__type_switch_id) {
            case 205:
              node = $var.value;
              break jumpLab$bg12511;
            
            case 204:
              break jumpLab$bg12512;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$8 = node;
          var count = t$8.count();
          var t$9 = count;
          var t$10 = this;
          var t$11 = t$10.rootSize;
          var t$12 = t$11.i;
          if (t$9.$bg$eq(t$12).__value)
            {
              var t$13 = new sk$String(('Node count ')).toString();
              var t$14 = count;
              var t$15 = t$14.toString();
              var t$16 = new sk$String((' does not match expected size ')).toString();
              var t$17 = this;
              var t$18 = t$17.rootSize;
              var t$19 = t$18.i;
              var t$20 = t$19.toString();
              var t$21 = new sk$String(('.')).toString();
              var t$22 = new sk$String(('')).join(new (sk$Array)([
                t$13,
                t$15,
                t$16,
                t$20,
                t$21
              ]));
              return new (sk$Failure)(t$22);
            }
          else
            {
              var t$23 = node;
              var t$24 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
              var t$25 = this;
              var t$26 = t$25.shift;
              var t$27 = this;
              var t$28 = t$27.rootSize;
              return t$23.validate(t$24, t$26, t$28);
            }
        }
      }
      return new (sk$Success)(sk.__.$void);
    }
  }
};

sk$Persistent$dtRadixTreeVector.prototype.values = function() {
  return sk.__.toSkipGenerator.call(this, function*() {
    var t$ = this;
    var root = t$.root;
    var t$1 = this;
    var rootSize = t$1.rootSize;
    var t$2 = this;
    var shift = t$2.shift;
    var t$3 = this;
    var t$4 = t$3.tail;
    var tail = t$4.chill();
    var t$5 = this;
    var tailSize = t$5.tailSize;
    var node;
    {
      jumpBlockOuterjumpLab$bg12551:{
        jumpLab$bg12551:{
          jumpLab$bg12550:{
            switch (root.__type_switch_id) {
              case 205:
                node = root.value;
                break jumpLab$bg12550;
              
              case 204:
                break jumpLab$bg12551;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$6 = node;
            var t$7 = shift;
            var t$8 = rootSize;
            var t$9 = sk$Persistent$dtiterateNode(t$6, t$7, t$8);
            var $var = t$9.values();
            var var1 = new sk$Bool((true));
            {
              jumpBlockOuterbreak$bg12528:{
                break$bg12528:{
                  dowhile_else$bg12527:{
                    do
                      {
                        jumpBlockOuterdowhile_cond$bg12529:{
                          dowhile_cond$bg12529:{
                            {
                              var t$10 = $var;
                              var var2 = t$10.next();
                              var x;
                              {
                                jumpBlockOuterjumpLab$bg12548:{
                                  jumpLab$bg12548:{
                                    jumpLab$bg12547:{
                                      switch (var2.__type_switch_id) {
                                        case 204:
                                          break jumpLab$bg12547;
                                        
                                        case 205:
                                          x = var2.value;
                                          break jumpLab$bg12548;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var1 = new sk$Bool((false));
                                      break dowhile_cond$bg12529;
                                    }
                                  }
                                  yield new sk$Some(x);
                                  break jumpBlockOuterjumpLab$bg12548;
                                }
                              }
                              break dowhile_cond$bg12529;
                            }
                          }
                          if (var1.__value)
                            {}
                          else
                            break dowhile_else$bg12527;
                          break jumpBlockOuterdowhile_cond$bg12529;
                        }
                      }
                    while (true);
                  }
                  {}
                  break jumpBlockOuterbreak$bg12528;
                }
                {}
                break jumpBlockOuterbreak$bg12528;
              }
            }
          }
          break jumpBlockOuterjumpLab$bg12551;
        }
        {}
        break jumpBlockOuterjumpLab$bg12551;
      }
    }
    var t$11 = tailSize;
    var t$12 = t$11.toInt();
    var t$13 = new (sk$Range)(new sk$Int(0.0, 0.0), t$12);
    var var3 = t$13.values();
    var var4 = new sk$Bool((true));
    {
      jumpBlockOuterbreak$bg12538:{
        break$bg12538:{
          dowhile_else$bg12537:{
            do
              {
                jumpBlockOuterdowhile_cond$bg12539:{
                  dowhile_cond$bg12539:{
                    {
                      var t$14 = var3;
                      var var5 = t$14.next();
                      var i;
                      {
                        jumpBlockOuterjumpLab$bg12555:{
                          jumpLab$bg12555:{
                            jumpLab$bg12554:{
                              switch (var5.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg12554;
                                
                                case 205:
                                  i = var5.value;
                                  break jumpLab$bg12555;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var4 = new sk$Bool((false));
                              break dowhile_cond$bg12539;
                            }
                          }
                          {
                            var t$15 = tail;
                            var t$16 = i;
                            var t$17 = sk$Unsafe$dtarray_get(t$15, t$16);
                            yield new sk$Some(sk$Persistent$dtunsafeGet(t$17));
                          }
                          break jumpBlockOuterjumpLab$bg12555;
                        }
                      }
                      break dowhile_cond$bg12539;
                    }
                  }
                  if (var4.__value)
                    {}
                  else
                    break dowhile_else$bg12537;
                  break jumpBlockOuterdowhile_cond$bg12539;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg12538;
        }
        {}
        break jumpBlockOuterbreak$bg12538;
      }
    }
    return undefined;
  });
};

sk$Persistent$dtRadixTreeVector.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Persistent$dtRadixTreeVector.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Persistent$dtRadixTreeVector.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Persistent$dtRadixTreeVector.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Persistent$dtRadixTreeVector.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Persistent$dtRadixTreeVector.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Persistent$dtRadixTreeVector.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Persistent$dtRadixTreeVector.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Persistent$dtRadixTreeVector.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Persistent$dtRadixTreeVector.prototype.__bases = [
  sk$Persistent$dtRadixTreeVector,
  sk$Sequence,
  sk$IndexedSequence,
  sk$MutableIndexedSequence
];

var sk$Vector = sk.Vector = function Vector(inner, sz, generation_PRIVATE) {
  this.inner = inner;
  this.sz = sz === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : sz;
  this.generation_PRIVATE = generation_PRIVATE === undefined ? ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })()) : generation_PRIVATE;
};

sk$Vector.prototype = Object.create(Object.prototype);

sk$Vector.prototype.__constructor = sk$Vector;

sk$Vector.prototype.__classname = 'Vector';

sk$Vector.prototype.$frozen = false;

sk$Vector.prototype.__type_switch_id = 265;

sk$Vector.prototype.__copy = function() {
  return new (sk$Vector)(this.inner, this.sz, this.generation_PRIVATE);
};

sk$Vector.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp541 = __cache.get(this);
  if (_tmp541 === undefined)
    {
      var _tmp541 = this.__copy();
      _tmp541.$frozen = true;
      __cache.set(this, _tmp541);
      _tmp541.inner = skip.deepFreeze(_tmp541.inner, __cache);
      _tmp541.sz = skip.deepFreeze(_tmp541.sz, __cache);
      _tmp541.generation_PRIVATE = skip.deepFreeze(_tmp541.generation_PRIVATE, __cache);
    }
  return _tmp541;
};

sk$Vector.prototype.__init = function(__named_parameters) {};

sk$Vector.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$Vector.prototype.$lt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$LT);
};

sk$Vector.prototype.$lt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$GT);
};

sk$Vector.prototype.$eq$eq = function(other) {
  var t$ = this;
  var t$1 = t$.sz;
  var t$2 = other;
  var t$3 = t$2.sz;
  if (t$1.$eq$eq(t$3).__value)
    {
      var t$4 = this;
      var t$5 = this;
      var t$6 = t$5.sz;
      var t$7 = this;
      var t$8 = t$7.inner;
      var t$9 = other;
      var t$10 = t$9.inner;
      return t$4.eqLoop(new sk$Int(0.0, 0.0), t$6, t$8, t$10);
    }
  else
    return new sk$Bool((false));
};

sk$Vector.prototype.$gt = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$eq$eq(singleton$GT);
};

sk$Vector.prototype.$gt$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.compare(t$1);
  return t$2.$bg$eq(singleton$LT);
};

sk$Vector.prototype.capacity = function() {
  var t$ = this;
  var t$1 = t$.inner;
  return t$1.size();
};

sk$Vector.prototype.chill = function() {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = t$1.chill();
  var t$3 = this;
  var t$4 = t$3.sz;
  return new (sk$Vector)(t$2, t$4, undefined);
};

sk$Vector.prototype.clear = function() {
  var t$ = this;
  var t$1 = t$.inner;
  var t$2 = this;
  var t$3 = t$2.sz;
  sk$Vector$dtunsafeFreeSlice(t$1, new sk$Int(0.0, 0.0), t$3);
  var $var = this;
  var t$4 = $var;
  var t$5 = t$4;
  t$5.sz = new sk$Int(0.0, 0.0);
  var t$6 = this;
  return t$6.invalidateIterators();
};

sk$Vector.prototype.clone = function(reserveCapacity) {
  if (reserveCapacity === undefined)
    reserveCapacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = reserveCapacity;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector::clone: Expected reserveCapacity to be nonnegative.')));
  var t$2 = this;
  var sz = t$2.sz;
  var t$3 = sz;
  var t$4 = reserveCapacity;
  var newSize = t$3.$pl(t$4);
  var t$5 = newSize;
  var inner = sk$Vector$dtunsafeMake(t$5);
  var t$6 = this;
  var t$7 = t$6.inner;
  var t$8 = sz;
  var t$9 = inner;
  sk$Vector$dtunsafeMoveSlice(t$7, new sk$Int(0.0, 0.0), t$8, t$9, new sk$Int(0.0, 0.0));
  var t$10 = inner;
  var t$11 = sz;
  return new (sk$Vector)(t$10, t$11, undefined);
};

sk$Vector.prototype.compare = function(other) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = other;
  var t$4 = t$3.sz;
  var t$5 = sk$min(t$2, t$4);
  var t$6 = this;
  var t$7 = t$6.inner;
  var t$8 = other;
  var t$9 = t$8.inner;
  var $var = t$.compareLoop(new sk$Int(0.0, 0.0), t$5, t$7, t$9);
  var c;
  {
    jumpBlockOuterjumpLab$bg26698:{
      jumpLab$bg26698:{
        jumpLab$bg26697:{
          switch ($var.__type_switch_id) {
            case 206:
              break jumpLab$bg26697;
            
            default:
              c = $var;
              break jumpLab$bg26698;

          }
        }
        {
          var t$10 = this;
          var t$11 = t$10.sz;
          var t$12 = other;
          var t$13 = t$12.sz;
          return sk$compare(t$11, t$13);
        }
      }
      return c;
    }
  }
};

sk$Vector.prototype.compareLoop = function(i, size, inner, other) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg26721:{
        loop_end$bg26721:{
          {
            var t$1 = i;
            var t$2 = size;
            if (t$1.$eq$eq(t$2).__value)
              return singleton$EQ;
            else
              {
                var t$3 = inner;
                var t$4 = i;
                var t$5 = sk$Vector$dtunsafeGet(t$3, t$4);
                var t$6 = other;
                var t$7 = i;
                var t$8 = sk$Vector$dtunsafeGet(t$6, t$7);
                var $var = sk$compare(t$5, t$8);
                var c;
                {
                  jumpBlockOuterjumpLab$bg26719:{
                    jumpLab$bg26719:{
                      jumpLab$bg26718:{
                        switch ($var.__type_switch_id) {
                          case 206:
                            break jumpLab$bg26718;
                          
                          default:
                            c = $var;
                            break jumpLab$bg26719;

                        }
                      }
                      {
                        var t$9 = t$;
                        var t$10 = i;
                        var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
                        var t$12 = size;
                        var t$13 = inner;
                        var t$14 = other;
                        var t$15 = t$9;
                        var t$16 = t$11;
                        var t$17 = t$12;
                        var t$18 = t$13;
                        var t$19 = t$14;
                        t$ = t$15;
                        i = t$16;
                        size = t$17;
                        inner = t$18;
                        other = t$19;
                        break loop_end$bg26721;
                      }
                    }
                    return c;
                  }
                }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg26721;
      }
    }
  while (true);
};

sk$Vector.prototype.concat = function(second) {
  var t$ = this;
  var t$1 = t$;
  var t$2 = second;
  var t$3 = t$2;
  var t$4 = t$3.size();
  var result = t$1.clone(t$4);
  var t$5 = result;
  var t$6 = second;
  t$5.extend(t$6);
  var t$7 = result;
  return t$7;
};

sk$Vector.prototype.contains = function(second) {
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = x;
    var t$3 = second;
    return t$2.$eq$eq(t$3);
  }));
  return t$1.isSome();
};

sk$Vector.createFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new (sk$Vector)(new (sk$Array)([]), undefined, undefined);
  else
    {
      var t$3 = size;
      if (t$3.$gt(new sk$Int(0.0, 0.0)).__value)
        {
          var t$4 = size;
          var inner = sk$Vector$dtunsafeMake(t$4);
          var t$5 = items;
          var t$6 = inner;
          var t$7 = size;
          sk$Vector$dtunsafeWriteSeqToSlice(t$5, t$6, new sk$Int(0.0, 0.0), t$7);
          var t$8 = inner;
          var t$9 = t$8;
          var t$10 = size;
          return new (sk$Vector)(t$9, t$10, undefined);
        }
      else
        return sk$invariant_violation(new sk$String(('Vector::mcreateFromItems: Expected items size() to be nonnegative.')));
    }
};

sk$Vector.createFromIterator = function(items) {
  var t$ = items;
  var t$1 = sk$Vector.mcreateFromIterator(t$);
  return t$1;
};

sk$Vector.prototype.$delete = function(index) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = index;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.uge(t$3).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = this;
  var inner = t$4.inner;
  var t$5 = inner;
  var t$6 = index;
  var t$7 = t$6.$pl(new sk$Int(1.0, 0.0));
  var t$8 = sz;
  var t$9 = inner;
  var t$10 = index;
  sk$Vector$dtunsafeMoveSlice(t$5, t$7, t$8, t$9, t$10);
  var t$11 = inner;
  var t$12 = sz;
  var t$13 = t$12.$mi(new sk$Int(1.0, 0.0));
  var t$14 = sz;
  sk$Vector$dtunsafeFreeSlice(t$11, t$13, t$14);
  var $var = this;
  var t$15 = $var;
  var t$16 = sz;
  var t$17 = t$15;
  t$17.sz = t$16.$mi(new sk$Int(1.0, 0.0));
  var t$18 = this;
  return t$18.invalidateIterators();
};

sk$Vector.prototype.difference = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp26786) => 
  {
    return t$6.add(_tmp26786);
  }));
  var t$7 = this;
  t$7.unsafeEach(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    var t$10 = t$8.contains(t$9);
    if (t$10.$bg().__value)
      {
        var t$11 = result;
        var t$12 = value;
        return t$11.push(t$12);
      }
    else
      return sk.__.$void;
  }));
  var t$13 = result;
  return t$13;
};

sk$Vector.prototype.drop = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector.drop(): Expected count to be nonnegative.')));
  var t$2 = this;
  var t$3 = n;
  return t$2.slice(t$3, undefined);
};

sk$Vector.prototype.dropWhile = function(p) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var found = t$.find(((value) => 
  {
    var t$1 = index;
    index = t$1.$pl(new sk$Int(1.0, 0.0));
    var t$2 = p;
    var t$3 = value;
    var t$4 = t$2(t$3);
    return t$4.$bg();
  }));
  {
    jumpBlockOuterjumpLab$bg26811:{
      jumpLab$bg26811:{
        jumpLab$bg26810:{
          switch (found.__type_switch_id) {
            case 205:
              break jumpLab$bg26810;
            
            case 204:
              break jumpLab$bg26811;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = this;
          var t$6 = index;
          var t$7 = this;
          var t$8 = t$7.sz;
          return t$5.slice(t$6, t$8);
        }
      }
      return sk$Vector.createFromItems(new (sk$Array)([]));
    }
  }
};

sk$Vector.prototype.each = function(f) {
  var t$ = this;
  return t$.eachWhileImpl(((x) => 
  {
    var t$1 = f;
    var t$2 = x;
    t$1(t$2);
    return new sk$Bool((true));
  }));
};

sk$Vector.prototype.eachUntracked = function(f) {
  var t$ = this;
  return t$.eachWhileImplUntracked(((x) => 
  {
    var t$1 = f;
    var t$2 = x;
    t$1(t$2);
    return new sk$Bool((true));
  }));
};

sk$Vector.prototype.eachWhileImpl = function(f) {
  var t$ = this;
  var inner = t$.inner;
  var t$1 = this;
  var t$2 = t$1.generation_PRIVATE;
  var indexMinusGeneration = t$2.negate();
  var t$3 = this;
  var sz = t$3.sz;
  var break_val;
  {
    jumpBlockOuterbreak$bg26825:{
      break$bg26825:{
        while_else$bg26824:{
          do
            {
              jumpBlockOutercontinue$bg26826:{
                continue$bg26826:{
                  {
                    var t$4 = indexMinusGeneration;
                    var t$5 = this;
                    var t$6 = t$5.generation_PRIVATE;
                    var index = t$4.$pl(t$6);
                    var t$7 = index;
                    var t$8 = sz;
                    var t$9;
                    if (t$7.uge(t$8).__value)
                      {
                        var t$10 = index;
                        var t$11;
                        if (t$10.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
                          t$11 = sk$throwContainerChanged();
                        else
                          t$11 = sk.__.$void;
                        t$9 = new sk$Bool((false));
                      }
                    else
                      {
                        var t$12 = inner;
                        var t$13 = index;
                        var value = sk$Vector$dtunsafeGet(t$12, t$13);
                        var t$14 = indexMinusGeneration;
                        indexMinusGeneration = t$14.$pl(new sk$Int(1.0, 0.0));
                        var t$15 = f;
                        var t$16 = value;
                        t$9 = t$15(t$16);
                      }
                    if (t$9.__value)
                      {}
                    else
                      break while_else$bg26824;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg26826;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg26825;
      }
      {}
      break jumpBlockOuterbreak$bg26825;
    }
  }
  return break_val;
};

sk$Vector.prototype.eachWhileImplUntracked = function(f) {
  var t$ = this;
  var inner = t$.inner;
  var t$1 = this;
  var t$2 = t$1.generation_PRIVATE;
  var indexMinusGeneration = t$2.negate();
  var t$3 = this;
  var sz = t$3.sz;
  var break_val;
  {
    jumpBlockOuterbreak$bg26849:{
      break$bg26849:{
        while_else$bg26848:{
          do
            {
              jumpBlockOutercontinue$bg26850:{
                continue$bg26850:{
                  {
                    var t$4 = indexMinusGeneration;
                    var t$5 = this;
                    var t$6 = t$5.generation_PRIVATE;
                    var index = t$4.$pl(t$6);
                    var t$7 = index;
                    var t$8 = sz;
                    var t$9;
                    if (t$7.uge(t$8).__value)
                      {
                        var t$10 = index;
                        var t$11;
                        if (t$10.$gt$eq((sk$Vector$dtgenerationSkip())).__value)
                          t$11 = sk$throwContainerChanged();
                        else
                          t$11 = sk.__.$void;
                        t$9 = new sk$Bool((false));
                      }
                    else
                      {
                        var t$12 = inner;
                        var t$13 = index;
                        var value = sk$Vector$dtunsafeGet(t$12, t$13);
                        var t$14 = indexMinusGeneration;
                        indexMinusGeneration = t$14.$pl(new sk$Int(1.0, 0.0));
                        var t$15 = f;
                        var t$16 = value;
                        t$9 = t$15(t$16);
                      }
                    if (t$9.__value)
                      {}
                    else
                      break while_else$bg26848;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg26850;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg26849;
      }
      {}
      break jumpBlockOuterbreak$bg26849;
    }
  }
  return break_val;
};

sk$Vector.prototype.ensureCapacity = function(capacity) {
  var t$ = capacity;
  var t$1 = this;
  var t$2 = t$1.capacity();
  if (t$.$gt(t$2).__value)
    {
      var t$3 = capacity;
      var t$4 = this;
      var t$5 = t$4.sz;
      var t$6 = t$5.$ti(new sk$Int(5.0, 0.0));
      var t$7 = t$6.ushr(new sk$Int(2.0, 0.0));
      if (t$3.$lt(t$7).__value)
        {
          var t$8 = capacity;
          capacity = sk$Vector$dtgetCapacityForSize(t$8);
        }
      else
        {}
      var t$9 = this;
      var t$10 = capacity;
      return t$9.unsafeGrowCapacity(t$10);
    }
  else
    {
      var t$11 = capacity;
      var t$12 = t$11.$gt$eq(new sk$Int(0.0, 0.0));
      return sk$invariant(t$12, new sk$String(('Vector.ensureCapacity(): Expected capacity to be positive.')));
    }
};

sk$Vector.prototype.eqLoop = function(i, size, inner, other) {
  var t$ = this;
  do
    {
      jumpBlockOuterloop_end$bg26900:{
        loop_end$bg26900:{
          {
            var t$1 = i;
            var t$2 = size;
            if (t$1.$eq$eq(t$2).__value)
              return new sk$Bool((true));
            else
              {
                var t$3 = inner;
                var t$4 = i;
                var t$5 = sk$Vector$dtunsafeGet(t$3, t$4);
                var t$6 = t$5;
                var t$7 = other;
                var t$8 = i;
                var t$9 = sk$Vector$dtunsafeGet(t$7, t$8);
                if (t$6.$bg$eq(t$9).__value)
                  return new sk$Bool((false));
                else
                  {
                    var t$10 = t$;
                    var t$11 = i;
                    var t$12 = t$11.$pl(new sk$Int(1.0, 0.0));
                    var t$13 = size;
                    var t$14 = inner;
                    var t$15 = other;
                    var t$16 = t$10;
                    var t$17 = t$12;
                    var t$18 = t$13;
                    var t$19 = t$14;
                    var t$20 = t$15;
                    t$ = t$16;
                    i = t$17;
                    size = t$18;
                    inner = t$19;
                    other = t$20;
                    break loop_end$bg26900;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg26900;
      }
    }
  while (true);
};

sk$Vector.prototype.extend = function(second) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = sz;
  var t$2 = second;
  var t$3 = t$2;
  var t$4 = t$3.size();
  var newSize = t$1.$pl(t$4);
  var t$5 = this;
  var t$6 = newSize;
  t$5.ensureCapacity(t$6);
  var t$7 = second;
  var t$8 = this;
  var t$9 = t$8.inner;
  var t$10 = sz;
  var t$11 = newSize;
  sk$Vector$dtunsafeWriteSeqToSlice(t$7, t$9, t$10, t$11);
  var $var = this;
  var t$12 = $var;
  var t$13 = t$12;
  t$13.sz = newSize;
  var t$14 = this;
  return t$14.invalidateIterators();
};

sk$Vector.fill = function(size, value) {
  var t$ = this;
  var t$1 = size;
  var t$2 = value;
  var t$3 = t$.mfill(t$1, t$2);
  return t$3;
};

sk$Vector.fillBy = function(size, f) {
  var t$ = this;
  var t$1 = size;
  var t$2 = f;
  var t$3 = t$.mfillBy(t$1, t$2);
  return t$3;
};

sk$Vector.prototype.filter = function(p) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = result;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      return sk.__.$void;
  }));
  var t$5 = result;
  return t$5;
};

sk$Vector.prototype.filterNone = function() {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.unsafeEach(((value) => 
  {
    var x;
    {
      jumpBlockOuterjumpLab$bg26946:{
        jumpLab$bg26946:{
          jumpLab$bg26945:{
            switch (value.__type_switch_id) {
              case 205:
                x = value.value;
                break jumpLab$bg26945;
              
              case 204:
                break jumpLab$bg26946;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$1 = result;
            var t$2 = x;
            return t$1.push(t$2);
          }
        }
        return sk.__.$void;
      }
    }
  }));
  var t$3 = result;
  return t$3;
};

sk$Vector.prototype.find = function(p) {
  var result = singleton$None;
  var t$ = this;
  t$.eachWhileImpl(((x) => 
  {
    var t$1 = p;
    var t$2 = x;
    if (t$1(t$2).__value)
      {
        var t$3 = x;
        result = new (sk$Some)(t$3);
        return new sk$Bool((false));
      }
    else
      return new sk$Bool((true));
  }));
  return result;
};

sk$Vector.prototype.first = function() {
  var t$ = this;
  return t$.get(new sk$Int(0.0, 0.0));
};

sk$Vector.prototype.flatMap = function(s) {
  var t$ = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var result = t$;
  var t$1 = this;
  t$1.each(((value) => 
  {
    var t$2 = s;
    var t$3 = value;
    var t$4 = t$2(t$3);
    var items = t$4;
    var t$5 = result;
    var t$6 = items;
    return t$5.extend(t$6);
  }));
  var t$7 = result;
  return t$7;
};

sk$Vector.prototype.flatten = function() {
  var t$ = this;
  var capacity = t$.reduce(((acc, items) => 
  {
    var t$1 = acc;
    var t$2 = items;
    var t$3 = t$2;
    var t$4 = t$3.size();
    return t$1.$pl(t$4);
  }), new sk$Int(0.0, 0.0));
  var t$5 = capacity;
  var t$6 = sk$Vector.mcreate(t$5);
  var result = t$6;
  var t$7 = this;
  var t$8 = result;
  var t$9 = t$8;
  t$7.unsafeEach(((_tmp26972) => 
  {
    return t$9.extend(_tmp26972);
  }));
  var t$10 = result;
  return t$10;
};

sk$Vector.prototype.gen = skip.asyncToGenerator(function*() {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var inner = t$1.inner;
  var t$2 = sz;
  var handles = sk$List.tabulate(t$2, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$3 = inner;
        var t$4 = index;
        var x = (yield sk$Vector$dtunsafeGet(t$3, t$4));
        var t$5 = x;
      }
      return sk$Unsafe$dtRawStorage.make(t$5);
    })());
  }));
  var t$6 = handles;
  var t$7 = (yield t$6.genReverse());
  var nextInner = sk$Array.mcreateFromItems(t$7);
  var t$8 = nextInner;
  t$8.reverse();
  var t$9 = nextInner;
  var t$10 = t$9;
  var t$11 = sz;
  return new (sk$Vector)(t$10, t$11, undefined);
});

sk$Vector.prototype.genAll = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = (yield t$.genFind(((x) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$2 = p;
        var t$3 = x;
        var t$4 = (yield t$2(t$3));
      }
      return t$4.$bg();
    })());
  })));
  return t$1.isNone();
});

sk$Vector.prototype.genAny = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = p;
  var t$2 = (yield t$.genFind(t$1));
  return t$2.isSome();
});

sk$Vector.prototype.genFilter = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var inner = t$1.inner;
  var t$2 = sz;
  var predicates = (yield sk$ASIO$dtgenFillBy(t$2, ((index) => 
  {
    var t$3 = p;
    var t$4 = inner;
    var t$5 = index;
    var t$6 = sk$Vector$dtunsafeGet(t$4, t$5);
    return t$3(t$6);
  })));
  var t$7 = predicates;
  var nextSz = t$7.reduce(((sum, predicate) => 
  {
    if (predicate.__value)
      {
        var t$8 = sum;
        return t$8.$pl(new sk$Int(1.0, 0.0));
      }
    else
      return sum;
  }), new sk$Int(0.0, 0.0));
  var t$9 = nextSz;
  var nextInner = sk$Vector$dtunsafeMake(t$9);
  var fromIndex = new sk$Int(0.0, 0.0);
  var toIndex = new sk$Int(0.0, 0.0);
  {
    jumpBlockOuterbreak$bg27007:{
      break$bg27007:{
        while_else$bg27006:{
          do
            {
              jumpBlockOutercontinue$bg27008:{
                continue$bg27008:{
                  {
                    var t$10 = toIndex;
                    var t$11 = nextSz;
                    if (t$10.ult(t$11).__value)
                      {
                        var t$12 = predicates;
                        var t$13 = fromIndex;
                        var t$14;
                        if (sk$Vector$dtunsafeGetRaw(t$12, t$13).__value)
                          {
                            var t$15 = nextInner;
                            var t$16 = toIndex;
                            var t$17 = inner;
                            var t$18 = fromIndex;
                            var t$19 = sk$Vector$dtunsafeGet(t$17, t$18);
                            sk$Vector$dtunsafeSet(t$15, t$16, t$19);
                            var t$20 = toIndex;
                            toIndex = t$20.$pl(new sk$Int(1.0, 0.0));
                            t$14 = sk.__.$void;
                          }
                        else
                          t$14 = sk.__.$void;
                        var t$21 = fromIndex;
                        fromIndex = t$21.$pl(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg27006;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg27008;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg27007;
      }
      {}
      break jumpBlockOuterbreak$bg27007;
    }
  }
  var t$22 = nextInner;
  var t$23 = t$22;
  var t$24 = nextSz;
  return new (sk$Vector)(t$23, t$24, undefined);
});

sk$Vector.prototype.genFind = skip.asyncToGenerator(function*(p) {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = p;
  return (yield t$.genFindLoop(t$2, t$3, new sk$Int(0.0, 0.0)));
});

sk$Vector.prototype.genFindLoop = skip.asyncToGenerator(function*(inner, p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.sz;
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = inner;
      var t$4 = index;
      var item = sk$Vector$dtunsafeGet(t$3, t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = inner;
          var t$10 = p;
          var t$11 = index;
          var t$12 = t$11.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindLoop(t$9, t$10, t$12));
        }
    }
});

sk$Vector.prototype.genFindTailLoop = skip.asyncToGenerator(function*(p, index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.size();
  if (t$.$eq$eq(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = index;
      var item = t$3.get(t$4);
      var t$5 = p;
      var t$6 = item;
      if ((yield t$5(t$6)).__value)
        {
          var t$7 = item;
          return new (sk$Some)(t$7);
        }
      else
        {
          var t$8 = this;
          var t$9 = p;
          var t$10 = index;
          var t$11 = t$10.$pl(new sk$Int(1.0, 0.0));
          return (yield t$8.genFindTailLoop(t$9, t$11));
        }
    }
});

sk$Vector.prototype.genMap = skip.asyncToGenerator(function*(s) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var inner = t$1.inner;
  var t$2 = sz;
  var nextInner = (yield sk$ASIO$dtgenFillBy(t$2, ((index) => 
  {
    return (skip.asyncToGenerator(function*() {
      {
        var t$3 = s;
        var t$4 = inner;
        var t$5 = index;
        var t$6 = sk$Vector$dtunsafeGet(t$4, t$5);
        var awaitable_x = t$3(t$6);
        var x = (yield awaitable_x);
        var t$7 = x;
      }
      return sk$Unsafe$dtRawStorage.make(t$7);
    })());
  })));
  var t$8 = nextInner;
  var t$9 = sz;
  return new (sk$Vector)(t$8, t$9, undefined);
});

sk$Vector.generator = function(generator) {
  var t$ = generator;
  return new (sk$QuickCheck$dtVectorGenerator)(t$);
};

sk$Vector.prototype.get = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.sz;
  if (t$.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = t$3.inner;
  var t$5 = index;
  return sk$Vector$dtunsafeGet(t$4, t$5);
};

sk$Vector.prototype.getClassName = function() {
  return new sk$String(('Vector'));
};

sk$Vector.prototype.groupBy = function(s) {
  var result = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = s;
    var t$2 = value;
    var key = t$1(t$2);
    var t$3 = result;
    var t$4 = key;
    var items = t$3.getOrAdd(t$4, (() => 
    {
      return sk$Vector.mcreate(new sk$Int(0.0, 0.0));
    }));
    var t$5 = items;
    var t$6 = value;
    return t$5.push(t$6);
  }));
  var t$7 = result;
  var t$8 = t$7.map(((_, items1) => 
  {
    var t$9 = items1;
    return t$9;
  }));
  return t$8;
};

sk$Vector.prototype.hash = function() {
  var t$ = this;
  return t$.reduce(((acc, value) => 
  {
    var t$1 = acc;
    var t$2 = value;
    var t$3 = t$2.hash();
    return sk$Hashable$dtcombine(t$1, t$3);
  }), new sk$Int(4294967295.0, 4294967295.0));
};

sk$Vector.prototype.indexOf = function(predicate) {
  var index = new sk$Int(4294967295.0, 4294967295.0);
  var t$ = this;
  var t$1 = t$.find(((x) => 
  {
    var t$2 = index;
    index = t$2.$pl(new sk$Int(1.0, 0.0));
    var t$3 = x;
    var t$4 = predicate;
    return t$3.$eq$eq(t$4);
  }));
  return t$1.map(((_) => 
  {
    return index;
  }));
};

sk$Vector.prototype.insert = function(index, value) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = index;
  var t$2 = this;
  var t$3 = t$2.sz;
  if (t$1.ugt(t$3).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = sz;
  var newSize = t$4.$pl(new sk$Int(1.0, 0.0));
  var t$5 = this;
  var prevInner = t$5.inner;
  var nextInner = prevInner;
  var t$6 = sz;
  var t$7 = this;
  var t$8 = t$7.capacity();
  if (t$6.$eq$eq(t$8).__value)
    {
      var t$9 = newSize;
      var newCapacity = sk$Vector$dtgetCapacityForSize(t$9);
      var t$10 = newCapacity;
      nextInner = sk$Vector$dtunsafeMake(t$10);
      var t$11 = prevInner;
      var t$12 = index;
      var t$13 = nextInner;
      sk$Vector$dtunsafeMoveSlice(t$11, new sk$Int(0.0, 0.0), t$12, t$13, new sk$Int(0.0, 0.0));
    }
  else
    {}
  var t$14 = prevInner;
  var t$15 = index;
  var t$16 = sz;
  var t$17 = nextInner;
  var t$18 = index;
  var t$19 = t$18.$pl(new sk$Int(1.0, 0.0));
  sk$Vector$dtunsafeMoveSlice(t$14, t$15, t$16, t$17, t$19);
  var t$20 = nextInner;
  var t$21 = index;
  var t$22 = value;
  sk$Vector$dtunsafeSet(t$20, t$21, t$22);
  var $var = this;
  var t$23 = $var;
  var t$24 = t$23;
  t$24.inner = nextInner;
  var var1 = this;
  var t$25 = var1;
  var t$26 = t$25;
  t$26.sz = newSize;
  var t$27 = this;
  return t$27.invalidateIterators();
};

sk$Vector.prototype.inspect = function() {
  var t$ = this;
  var t$1 = t$.sz;
  var vector = sk$Array.fillBy(t$1, ((index) => 
  {
    var t$2 = this;
    var t$3 = index;
    var t$4 = t$2.get(t$3);
    return sk$inspect(t$4);
  }));
  var t$5 = vector;
  return new (sk$InspectVector)(new sk$String(('Vector')), t$5);
};

sk$Vector.prototype.intersection = function(second) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = second;
  var t$1 = t$;
  var t$2 = t$1.size();
  var set = sk$UnorderedSet.mcreate(t$2);
  var t$3 = second;
  var t$4 = t$3;
  var t$5 = set;
  var t$6 = t$5;
  t$4.each(((_tmp27147) => 
  {
    return t$6.add(_tmp27147);
  }));
  var t$7 = this;
  t$7.unsafeEach(((value) => 
  {
    var t$8 = set;
    var t$9 = value;
    if (t$8.contains(t$9).__value)
      {
        var t$10 = result;
        var t$11 = value;
        return t$10.push(t$11);
      }
    else
      return sk.__.$void;
  }));
  var t$12 = result;
  return t$12;
};

sk$Vector.prototype.invalidateIterators = function() {
  var $var = this;
  var t$ = $var;
  var t$1 = this;
  var t$2 = t$1.generation_PRIVATE;
  var t$3 = t$;
  t$3.generation_PRIVATE = t$2.$pl((sk$Vector$dtgenerationSkip()));
  return sk.__.$void;
};

sk$Vector.prototype.items = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = this;
  var t$4 = t$3.sz;
  return sk$Vector$dtItemsIterator.make(t$, t$2, t$4);
};

sk$Vector.prototype.join = function(separator) {
  var t$ = this;
  var $var = t$.sz;
  {
    jumpBlockOuterjumpLab$bg27177:{
      jumpLab$bg27177:{
        jumpLab$bg27176:{
          jumpLab$bg27175:{
            {
              var _tmp542 = $var.__getSwitchValue();
              switch (_tmp542) {
                case 0:
                  break jumpLab$bg27175;
                
                case 1:
                  break jumpLab$bg27176;
                
                default:
                  break jumpLab$bg27177;

              }
            }
          }
          return new sk$String((''));
        }
        {
          var t$1 = this;
          var t$2 = t$1.inner;
          var t$3 = sk$Vector$dtunsafeGet(t$2, new sk$Int(0.0, 0.0));
          return t$3.toString();
        }
      }
      {
        var t$4 = this;
        var t$5 = t$4.toArray();
        var t$6 = separator;
        return t$5.join(t$6);
      }
    }
  }
};

sk$Vector.prototype.keepWhere = function(p) {
  var t$ = this;
  var inner = t$.inner;
  var from = new sk$Int(0.0, 0.0);
  var to = new sk$Int(0.0, 0.0);
  var t$1 = this;
  t$1.each(((value) => 
  {
    var t$2 = p;
    var t$3 = value;
    if (t$2(t$3).__value)
      {
        var t$4 = inner;
        var t$5 = to;
        var t$6 = value;
        sk$Vector$dtunsafeSet(t$4, t$5, t$6);
        var t$7 = to;
        to = t$7.$pl(new sk$Int(1.0, 0.0));
      }
    else
      {}
    var t$8 = from;
    from = t$8.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$9 = to;
  var t$10 = this;
  var t$11 = t$10.sz;
  if (t$9.ult(t$11).__value)
    {
      var t$12 = inner;
      var t$13 = to;
      var t$14 = this;
      var t$15 = t$14.sz;
      sk$Vector$dtunsafeFreeSlice(t$12, t$13, t$15);
    }
  else
    {}
  var $var = this;
  var t$16 = $var;
  var t$17 = t$16;
  t$17.sz = to;
  var t$18 = this;
  return t$18.invalidateIterators();
};

sk$Vector.prototype.keys = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = this;
  var t$4 = t$3.sz;
  return sk$Vector$dtKeysIterator.make(t$, t$2, t$4);
};

sk$Vector.prototype.last = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.get(t$3);
};

sk$Vector.prototype.map = function(s) {
  var t$ = this;
  var t$1 = t$.sz;
  var inner = sk$Vector$dtunsafeMake(t$1);
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((value) => 
  {
    var t$3 = inner;
    var t$4 = index;
    var t$5 = s;
    var t$6 = value;
    var t$7 = t$5(t$6);
    sk$Vector$dtunsafeSet(t$3, t$4, t$7);
    var t$8 = index;
    index = t$8.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$9 = inner;
  var t$10 = t$9;
  var t$11 = index;
  return new (sk$Vector)(t$10, t$11, undefined);
};

sk$Vector.prototype.mapAcc = function(f, acc) {
  var t$ = this;
  var t$1 = t$.sz;
  var inner = sk$Vector$dtunsafeMake(t$1);
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((x) => 
  {
    var t$3 = f;
    var t$4 = acc;
    var t$5 = x;
    var $var = t$3(t$4, t$5);
    var var1;
    var var2;
    {
      jumpBlockOuterjumpLab$bg27240:{
        jumpLab$bg27240:{
          switch ($var.__type_switch_id) {
            case 392:
              var2 = $var.i0;
              var1 = $var.i1;
              break jumpLab$bg27240;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var y = var1;
          acc = var2;
          var t$6 = inner;
          var t$7 = index;
          var t$8 = y;
          sk$Vector$dtunsafeSet(t$6, t$7, t$8);
          var t$9 = index;
          index = t$9.$pl(new sk$Int(1.0, 0.0));
          return sk.__.$void;
        }
      }
    }
  }));
  var t$10 = acc;
  var t$11 = inner;
  var t$12 = t$11;
  var t$13 = index;
  var t$14 = new (sk$Vector)(t$12, t$13, undefined);
  return new (sk$Tuple2)(t$10, t$14);
};

sk$Vector.prototype.mapUntracked = function(s) {
  var t$ = this;
  var t$1 = t$.sz;
  var inner = sk$Vector$dtunsafeMake(t$1);
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((value) => 
  {
    var t$3 = inner;
    var t$4 = index;
    var t$5 = s;
    var t$6 = value;
    var t$7 = t$5(t$6);
    sk$Vector$dtunsafeSet(t$3, t$4, t$7);
    var t$8 = index;
    index = t$8.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$9 = inner;
  var t$10 = t$9;
  var t$11 = index;
  return new (sk$Vector)(t$10, t$11, undefined);
};

sk$Vector.prototype.mapWithIndex = function(s) {
  var t$ = this;
  var t$1 = t$.sz;
  var inner = sk$Vector$dtunsafeMake(t$1);
  var index = new sk$Int(0.0, 0.0);
  var t$2 = this;
  t$2.each(((value) => 
  {
    var t$3 = inner;
    var t$4 = index;
    var t$5 = s;
    var t$6 = index;
    var t$7 = value;
    var t$8 = t$5(t$6, t$7);
    sk$Vector$dtunsafeSet(t$3, t$4, t$8);
    var t$9 = index;
    index = t$9.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$10 = inner;
  var t$11 = t$10;
  var t$12 = index;
  return new (sk$Vector)(t$11, t$12, undefined);
};

sk$Vector.prototype.maxBy = function(selector) {
  var currentMax = singleton$None;
  var t$ = this;
  t$.unsafeEach(((x) => 
  {
    var t$1 = selector;
    var t$2 = x;
    var value = t$1(t$2);
    var max;
    {
      jumpBlockOuterjumpLab$bg27279:{
        jumpLab$bg27279:{
          jumpLab$bg27278:{
            jumpLab$bg27283:{
              switch (currentMax.__type_switch_id) {
                case 205:
                  break jumpLab$bg27283;
                
                default:
                  break jumpLab$bg27279;

              }
            }
            switch (currentMax.value.__type_switch_id) {
              case 392:
                max = currentMax.value.i0;
                var $var = new sk$Bool((false));
                var t$3 = value;
                var t$4 = max;
                $var = t$3.$lt$eq(t$4);
                if ($var.__value)
                  break jumpLab$bg27278;
                else
                  break jumpLab$bg27279;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          return sk.__.$void;
        }
        {
          var t$5 = value;
          var t$6 = x;
          var t$7 = new (sk$Tuple2)(t$5, t$6);
          currentMax = new (sk$Some)(t$7);
          return sk.__.$void;
        }
      }
    }
  }));
  var t$8 = currentMax;
  return t$8.map(((pair) => 
  {
    var t$9 = pair;
    return t$9.i1;
  }));
};

sk$Vector.prototype.maybeFirst = function() {
  var t$ = this;
  return t$.maybeGet(new sk$Int(0.0, 0.0));
};

sk$Vector.prototype.maybeGet = function(index) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.sz;
  if (t$.uge(t$2).__value)
    return singleton$None;
  else
    {
      var t$3 = this;
      var t$4 = t$3.inner;
      var t$5 = index;
      var t$6 = sk$Vector$dtunsafeGet(t$4, t$5);
      return new (sk$Some)(t$6);
    }
};

sk$Vector.prototype.maybeLast = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.size();
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  return t$.maybeGet(t$3);
};

sk$Vector.prototype.maybePop = function() {
  var t$ = this;
  var t$1 = t$.sz;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$2 = this;
      var t$3 = t$2.unsafePop();
      return new (sk$Some)(t$3);
    }
};

sk$Vector.mcreate = function(capacity) {
  if (capacity === undefined)
    capacity = ((() => 
    {
      return new sk$Int(0.0, 0.0);
    })());
  var t$ = capacity;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector::mcreate: Expected capacity to be nonnegative.')));
  var t$2 = capacity;
  var inner = sk$Vector$dtunsafeMake(t$2);
  var t$3 = inner;
  return new (sk$Vector)(t$3, undefined, undefined);
};

sk$Vector.mcreateFromItems = function(items) {
  var t$ = items;
  var t$1 = t$;
  var size = t$1.size();
  var t$2 = size;
  var t$3 = t$2.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$3, new sk$String(('Vector::mcreateFromItems: Expected items size() to be nonnegative.')));
  var t$4 = size;
  var inner = sk$Vector$dtunsafeMake(t$4);
  var t$5 = items;
  var t$6 = inner;
  var t$7 = size;
  sk$Vector$dtunsafeWriteSeqToSlice(t$5, t$6, new sk$Int(0.0, 0.0), t$7);
  var t$8 = inner;
  var t$9 = size;
  return new (sk$Vector)(t$8, t$9, undefined);
};

sk$Vector.mcreateFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var t$2 = t$1.sizeHint();
  var sizeHint = t$2.$default(new sk$Int(0.0, 0.0));
  var t$3 = sizeHint;
  var t$4 = t$3.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$4, new sk$String(('Vector::mcreateFromIterator: Expected items sizeHint() to be nonnegative.')));
  var t$5 = sizeHint;
  var result = sk$Vector.mcreate(t$5);
  var t$6 = items;
  var t$7 = t$6;
  var t$8 = result;
  var t$9 = t$8;
  t$7.each(((_tmp27331) => 
  {
    return t$9.push(_tmp27331);
  }));
  return result;
};

sk$Vector.meta = function(itemClass) {
  var t$ = itemClass;
  return new (sk$VectorMetaClass)(t$);
};

sk$Vector.mfill = function(size, value) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector::mfill: Expected size to be nonnegative.')));
  var t$2 = size;
  var inner = sk$Vector$dtunsafeMake(t$2);
  var t$3 = inner;
  var t$4 = size;
  var t$5 = value;
  sk$Vector$dtunsafeFillSlice(t$3, new sk$Int(0.0, 0.0), t$4, t$5);
  var t$6 = inner;
  var t$7 = size;
  return new (sk$Vector)(t$6, t$7, undefined);
};

sk$Vector.mfillBy = function(size, f) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector::mfillBy: Expected size to be nonnegative.')));
  var t$2 = size;
  var inner = sk$Vector$dtunsafeMake(t$2);
  var t$3 = size;
  var t$4 = new (sk$Range)(new sk$Int(0.0, 0.0), t$3);
  var $var = t$4.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg27350:{
      break$bg27350:{
        dowhile_else$bg27349:{
          do
            {
              jumpBlockOuterdowhile_cond$bg27351:{
                dowhile_cond$bg27351:{
                  {
                    var t$5 = $var;
                    var var2 = t$5.next();
                    var index;
                    {
                      jumpBlockOuterjumpLab$bg27364:{
                        jumpLab$bg27364:{
                          jumpLab$bg27363:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg27363;
                              
                              case 205:
                                index = var2.value;
                                break jumpLab$bg27364;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg27351;
                          }
                        }
                        {
                          var t$6 = inner;
                          var t$7 = index;
                          var t$8 = f;
                          var t$9 = index;
                          var t$10 = t$8(t$9);
                          sk$Vector$dtunsafeSet(t$6, t$7, t$10);
                        }
                        break jumpBlockOuterjumpLab$bg27364;
                      }
                    }
                    break dowhile_cond$bg27351;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg27349;
                break jumpBlockOuterdowhile_cond$bg27351;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg27350;
      }
      {}
      break jumpBlockOuterbreak$bg27350;
    }
  }
  var t$11 = inner;
  var t$12 = size;
  return new (sk$Vector)(t$11, t$12, undefined);
};

sk$Vector.prototype.minBy = function(selector) {
  var currentMin = singleton$None;
  var t$ = this;
  t$.unsafeEach(((x) => 
  {
    var t$1 = selector;
    var t$2 = x;
    var value = t$1(t$2);
    var min;
    {
      jumpBlockOuterjumpLab$bg27379:{
        jumpLab$bg27379:{
          jumpLab$bg27378:{
            jumpLab$bg27383:{
              switch (currentMin.__type_switch_id) {
                case 205:
                  break jumpLab$bg27383;
                
                default:
                  break jumpLab$bg27379;

              }
            }
            switch (currentMin.value.__type_switch_id) {
              case 392:
                min = currentMin.value.i0;
                var $var = new sk$Bool((false));
                var t$3 = value;
                var t$4 = min;
                $var = t$3.$gt$eq(t$4);
                if ($var.__value)
                  break jumpLab$bg27378;
                else
                  break jumpLab$bg27379;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          return sk.__.$void;
        }
        {
          var t$5 = value;
          var t$6 = x;
          var t$7 = new (sk$Tuple2)(t$5, t$6);
          currentMin = new (sk$Some)(t$7);
          return sk.__.$void;
        }
      }
    }
  }));
  var t$8 = currentMin;
  return t$8.map(((pair) => 
  {
    var t$9 = pair;
    return t$9.i1;
  }));
};

sk$Vector.prototype.move = function(src, dst, count) {
  var t$ = this;
  var size = t$.size();
  var t$1 = src;
  var t$2 = size;
  var t$3 = t$1.ule(t$2);
  sk$invariant(t$3, new sk$String(('invalid start')));
  var t$4 = dst;
  var t$5 = size;
  var t$6 = t$4.ule(t$5);
  sk$invariant(t$6, new sk$String(('invalid start2')));
  var t$7 = count;
  var t$8 = t$7.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$8, new sk$String(('invalid count')));
  var t$9 = src;
  var t$10 = count;
  var t$11 = t$9.$pl(t$10);
  var t$12 = size;
  var t$13 = t$11.$lt$eq(t$12);
  sk$invariant(t$13, new sk$String(('invalid count')));
  var t$14 = dst;
  var t$15 = count;
  var t$16 = t$14.$pl(t$15);
  var t$17 = size;
  var t$18 = t$16.$lt$eq(t$17);
  sk$invariant(t$18, new sk$String(('invalid count')));
  var t$19 = src;
  var t$20 = dst;
  if (t$19.$gt(t$20).__value)
    {
      var t$21 = count;
      var t$22 = new (sk$Range)(new sk$Int(0.0, 0.0), t$21);
      var $var = t$22.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg27411:{
          break$bg27411:{
            dowhile_else$bg27410:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg27412:{
                    dowhile_cond$bg27412:{
                      {
                        var t$23 = $var;
                        var var2 = t$23.next();
                        var i;
                        {
                          jumpBlockOuterjumpLab$bg27451:{
                            jumpLab$bg27451:{
                              jumpLab$bg27450:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg27450;
                                  
                                  case 205:
                                    i = var2.value;
                                    break jumpLab$bg27451;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg27412;
                              }
                            }
                            {
                              var t$24 = this;
                              var t$25 = dst;
                              var t$26 = i;
                              var t$27 = t$25.$pl(t$26);
                              var t$28 = this;
                              var t$29 = src;
                              var t$30 = i;
                              var t$31 = t$29.$pl(t$30);
                              var t$32 = t$28.get(t$31);
                              t$24.set(t$27, t$32);
                            }
                            break jumpBlockOuterjumpLab$bg27451;
                          }
                        }
                        break dowhile_cond$bg27412;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg27410;
                    break jumpBlockOuterdowhile_cond$bg27412;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg27411;
          }
          {}
          break jumpBlockOuterbreak$bg27411;
        }
      }
      return break_val;
    }
  else
    {
      var t$33 = src;
      var t$34 = dst;
      if (t$33.$lt(t$34).__value)
        {
          var t$35 = count;
          var t$36 = new (sk$Range)(new sk$Int(0.0, 0.0), t$35);
          var var3 = t$36.values();
          var var4 = new sk$Bool((true));
          var break_val1;
          {
            jumpBlockOuterbreak$bg27432:{
              break$bg27432:{
                dowhile_else$bg27431:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg27433:{
                        dowhile_cond$bg27433:{
                          {
                            var t$37 = var3;
                            var var5 = t$37.next();
                            var i1;
                            {
                              jumpBlockOuterjumpLab$bg27455:{
                                jumpLab$bg27455:{
                                  jumpLab$bg27454:{
                                    switch (var5.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg27454;
                                      
                                      case 205:
                                        i1 = var5.value;
                                        break jumpLab$bg27455;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var4 = new sk$Bool((false));
                                    break dowhile_cond$bg27433;
                                  }
                                }
                                {
                                  var t$38 = count;
                                  var t$39 = t$38.$mi(new sk$Int(1.0, 0.0));
                                  var t$40 = i1;
                                  var idx = t$39.$mi(t$40);
                                  var t$41 = this;
                                  var t$42 = dst;
                                  var t$43 = idx;
                                  var t$44 = t$42.$pl(t$43);
                                  var t$45 = this;
                                  var t$46 = src;
                                  var t$47 = idx;
                                  var t$48 = t$46.$pl(t$47);
                                  var t$49 = t$45.get(t$48);
                                  t$41.set(t$44, t$49);
                                }
                                break jumpBlockOuterjumpLab$bg27455;
                              }
                            }
                            break dowhile_cond$bg27433;
                          }
                        }
                        if (var4.__value)
                          {}
                        else
                          break dowhile_else$bg27431;
                        break jumpBlockOuterdowhile_cond$bg27433;
                      }
                    }
                  while (true);
                }
                break_val1 = sk.__.$void;
                break jumpBlockOuterbreak$bg27432;
              }
              {}
              break jumpBlockOuterbreak$bg27432;
            }
          }
          return break_val1;
        }
      else
        return sk.__.$void;
    }
};

sk$Vector.mreverseFromIterator = function(items) {
  var t$ = items;
  var t$1 = t$;
  var $var = t$1.sizeHint();
  var size;
  {
    jumpBlockOuterjumpLab$bg27479:{
      jumpLab$bg27479:{
        jumpLab$bg27478:{
          switch ($var.__type_switch_id) {
            case 205:
              size = $var.value;
              break jumpLab$bg27478;
            
            case 204:
              break jumpLab$bg27479;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = size;
          var t$3 = t$2.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$3, new sk$String(('Vector::mreverseFromIterator(): Expected items sizeHint() to be nonnegative.')));
          var t$4 = size;
          var inner = sk$Vector$dtunsafeMake(t$4);
          var index = size;
          var t$5 = items;
          var t$6 = t$5;
          t$6.each(((value) => 
          {
            var t$7 = index;
            index = t$7.$mi(new sk$Int(1.0, 0.0));
            var t$8 = index;
            var t$9 = t$8.uge(new sk$Int(0.0, 0.0));
            sk$invariant(t$9, new sk$String(('Vector::mreverseFromIterator(): Invalid iterator, expected each() to yield sizeHint() items.')));
            var t$10 = inner;
            var t$11 = index;
            var t$12 = value;
            return sk$Vector$dtunsafeSet(t$10, t$11, t$12);
          }));
          var t$13 = index;
          var t$14 = t$13.$eq$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$14, new sk$String(('Vector::mreverseFromIterator(): Invalid iterator, expected each() to yield sizeHint() items.')));
          var t$15 = inner;
          var t$16 = size;
          return new (sk$Vector)(t$15, t$16, undefined);
        }
      }
      {
        var t$17 = items;
        var result = sk$Vector.mcreateFromIterator(t$17);
        var t$18 = result;
        t$18.reverse();
        return result;
      }
    }
  }
};

sk$Vector.prototype.parallelMap = function(f) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var inner = t$1.inner;
  var t$2 = sz;
  var nextInner = sk$Parallel$dttabulate(t$2, ((i) => 
  {
    var t$3 = f;
    var t$4 = inner;
    var t$5 = i;
    var t$6 = sk$Vector$dtunsafeGet(t$4, t$5);
    var t$7 = t$3(t$6);
    return sk$Unsafe$dtRawStorage.make(t$7);
  }));
  var t$8 = nextInner;
  var t$9 = t$8;
  var t$10 = sz;
  return new (sk$Vector)(t$9, t$10, undefined);
};

sk$Vector.prototype.partition = function(p) {
  var pass = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var fail = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.each(((value) => 
  {
    var t$1 = p;
    var t$2 = value;
    if (t$1(t$2).__value)
      {
        var t$3 = pass;
        var t$4 = value;
        return t$3.push(t$4);
      }
    else
      {
        var t$5 = fail;
        var t$6 = value;
        return t$5.push(t$6);
      }
  }));
  var t$7 = pass;
  var t$8 = t$7;
  var t$9 = fail;
  var t$10 = t$9;
  return new (sk$Tuple2)(t$8, t$10);
};

sk$Vector.prototype.perturb = function(rng) {
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg27507:{
      break$bg27507:{
        dowhile_else$bg27506:{
          do
            {
              jumpBlockOuterdowhile_cond$bg27508:{
                dowhile_cond$bg27508:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg27516:{
                        jumpLab$bg27516:{
                          jumpLab$bg27515:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg27515;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg27516;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg27508;
                          }
                        }
                        {
                          var t$2 = x;
                          var t$3 = rng;
                          t$2.perturb(t$3);
                        }
                        break jumpBlockOuterjumpLab$bg27516;
                      }
                    }
                    break dowhile_cond$bg27508;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg27506;
                break jumpBlockOuterdowhile_cond$bg27508;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg27507;
      }
      {}
      break jumpBlockOuterbreak$bg27507;
    }
  }
  return break_val;
};

sk$Vector.prototype.pop = function() {
  var t$ = this;
  var t$1 = t$.sz;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$2 = this;
  return t$2.unsafePop();
};

sk$Vector.prototype.push = function(value) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = sz;
  var newSize = t$1.$pl(new sk$Int(1.0, 0.0));
  var t$2 = sz;
  var t$3 = this;
  var t$4 = t$3.capacity();
  if (t$2.$eq$eq(t$4).__value)
    {
      var t$5 = newSize;
      var newCapacity = sk$Vector$dtgetCapacityForSize(t$5);
      var t$6 = this;
      var t$7 = newCapacity;
      t$6.unsafeGrowCapacity(t$7);
    }
  else
    {}
  var t$8 = this;
  var t$9 = t$8.inner;
  var t$10 = sz;
  var t$11 = value;
  sk$Vector$dtunsafeSet(t$9, t$10, t$11);
  var $var = this;
  var t$12 = $var;
  var t$13 = t$12;
  t$13.sz = newSize;
  var t$14 = this;
  return t$14.invalidateIterators();
};

sk$Vector.prototype.resize = function(newSize, value) {
  var t$ = newSize;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector.resize(): Expected size to be nonnegative.')));
  var t$2 = this;
  var sz = t$2.sz;
  var t$3 = newSize;
  var t$4 = sz;
  if (t$3.$lt(t$4).__value)
    {
      var t$5 = this;
      var t$6 = t$5.inner;
      var t$7 = newSize;
      var t$8 = sz;
      sk$Vector$dtunsafeFreeSlice(t$6, t$7, t$8);
    }
  else
    {
      var t$9 = newSize;
      var t$10 = this;
      var t$11 = t$10.capacity();
      if (t$9.$gt(t$11).__value)
        {
          var t$12 = newSize;
          var newCapacity = sk$Vector$dtgetCapacityForSize(t$12);
          var t$13 = newCapacity;
          var inner = sk$Vector$dtunsafeMake(t$13);
          var t$14 = this;
          var t$15 = t$14.inner;
          var t$16 = sz;
          var t$17 = inner;
          sk$Vector$dtunsafeMoveSlice(t$15, new sk$Int(0.0, 0.0), t$16, t$17, new sk$Int(0.0, 0.0));
          var t$18 = inner;
          var t$19 = sz;
          var t$20 = newSize;
          var t$21 = value;
          sk$Vector$dtunsafeFillSlice(t$18, t$19, t$20, t$21);
          var $var = this;
          var t$22 = $var;
          var t$23 = t$22;
          t$23.inner = inner;
        }
      else
        {
          var t$24 = newSize;
          var t$25 = sz;
          if (t$24.$bg$eq(t$25).__value)
            {
              var t$26 = this;
              var t$27 = t$26.inner;
              var t$28 = sz;
              var t$29 = newSize;
              var t$30 = value;
              sk$Vector$dtunsafeFillSlice(t$27, t$28, t$29, t$30);
            }
          else
            {}
        }
    }
  var var1 = this;
  var t$31 = var1;
  var t$32 = t$31;
  t$32.sz = newSize;
  var t$33 = this;
  return t$33.invalidateIterators();
};

sk$Vector.prototype.reverse = function() {
  var t$ = this;
  var inner = t$.inner;
  var t$1 = inner;
  var t$2 = this;
  var t$3 = t$2.sz;
  var t$4 = inner;
  return sk$Vector$dtunsafeReverse(t$1, new sk$Int(0.0, 0.0), t$3, t$4);
};

sk$Vector.reverseFromIterator = function(items) {
  var t$ = items;
  var t$1 = sk$Vector.mreverseFromIterator(t$);
  return t$1;
};

sk$Vector.prototype.reversed = function() {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = sz;
  var inner = sk$Vector$dtunsafeMake(t$1);
  var t$2 = this;
  var t$3 = t$2.inner;
  var t$4 = sz;
  var t$5 = inner;
  sk$Vector$dtunsafeReverse(t$3, new sk$Int(0.0, 0.0), t$4, t$5);
  var t$6 = inner;
  var t$7 = t$6;
  var t$8 = sz;
  return new (sk$Vector)(t$7, t$8, undefined);
};

sk$Vector.prototype.reversedValues = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = this;
  var t$4 = t$3.sz;
  return sk$Vector$dtReversedValuesIterator.make(t$, t$2, t$4);
};

sk$Vector.prototype.sample = function(rng, count) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = count;
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$2 = sz;
      var t$3 = count;
      if (t$2.$lt$eq(t$3).__value)
        {
          var t$4 = this;
          return t$4.chill();
        }
      else
        {
          var t$5 = count;
          var t$6 = t$5.$gt$eq(new sk$Int(0.0, 0.0));
          sk$invariant(t$6, new sk$String(('Vector.sample(): Expected count to be nonnegative.')));
          var t$7 = this;
          var thisInner = t$7.inner;
          var t$8 = count;
          var sampleInner = sk$Vector$dtunsafeMake(t$8);
          var t$9 = thisInner;
          var t$10 = count;
          var t$11 = sampleInner;
          sk$Vector$dtunsafeMoveSlice(t$9, new sk$Int(0.0, 0.0), t$10, t$11, new sk$Int(0.0, 0.0));
          var t$12 = sz;
          var t$13 = count;
          var t$14 = t$12.$mi(t$13);
          var t$15 = new (sk$Range)(new sk$Int(0.0, 0.0), t$14);
          var $var = t$15.values();
          var var1 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg27624:{
              break$bg27624:{
                dowhile_else$bg27623:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg27625:{
                        dowhile_cond$bg27625:{
                          {
                            var t$16 = $var;
                            var var2 = t$16.next();
                            var offset;
                            {
                              jumpBlockOuterjumpLab$bg27647:{
                                jumpLab$bg27647:{
                                  jumpLab$bg27646:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg27646;
                                      
                                      case 205:
                                        offset = var2.value;
                                        break jumpLab$bg27647;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var1 = new sk$Bool((false));
                                    break dowhile_cond$bg27625;
                                  }
                                }
                                {
                                  var t$17 = count;
                                  var t$18 = offset;
                                  var index = t$17.$pl(t$18);
                                  var t$19 = rng;
                                  var t$20 = index;
                                  var t$21 = t$20.$pl(new sk$Int(1.0, 0.0));
                                  var swap = t$19.random(new sk$Int(0.0, 0.0), t$21);
                                  var t$22 = swap;
                                  var t$23 = count;
                                  var t$24;
                                  if (t$22.$lt(t$23).__value)
                                    {
                                      var t$25 = sampleInner;
                                      var t$26 = swap;
                                      var t$27 = thisInner;
                                      var t$28 = index;
                                      var t$29 = sk$Vector$dtunsafeGet(t$27, t$28);
                                      t$24 = sk$Vector$dtunsafeSet(t$25, t$26, t$29);
                                    }
                                  else
                                    t$24 = sk.__.$void;
                                }
                                break jumpBlockOuterjumpLab$bg27647;
                              }
                            }
                            break dowhile_cond$bg27625;
                          }
                        }
                        if (var1.__value)
                          {}
                        else
                          break dowhile_else$bg27623;
                        break jumpBlockOuterdowhile_cond$bg27625;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg27624;
              }
              {}
              break jumpBlockOuterbreak$bg27624;
            }
          }
          var t$30 = sampleInner;
          var t$31 = t$30;
          var t$32 = count;
          return new (sk$Vector)(t$31, t$32, undefined);
        }
    }
};

sk$Vector.prototype.set = function(index, value) {
  var t$ = index;
  var t$1 = this;
  var t$2 = t$1.sz;
  if (t$.uge(t$2).__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$3 = this;
  var t$4 = t$3.inner;
  var t$5 = index;
  var t$6 = value;
  return sk$Vector$dtunsafeSet(t$4, t$5, t$6);
};

sk$Vector.prototype.shrink = function(firstShrink) {
  return sk.__.toSkipGenerator.call(this, function*() {
    if (firstShrink === undefined)
      firstShrink = ((() => 
      {
        return new sk$Bool((true));
      })());
    var t$ = this;
    var t$1 = t$.isEmpty();
    if (t$1.$bg().__value)
      {
        var t$2 = this;
        var t$3 = t$2.last();
        var t$4 = firstShrink;
        var t$5 = t$3.shrink(t$4);
        var $var = t$5.values();
        var var1 = new sk$Bool((true));
        {
          jumpBlockOuterbreak$bg27668:{
            break$bg27668:{
              dowhile_else$bg27667:{
                do
                  {
                    jumpBlockOuterdowhile_cond$bg27669:{
                      dowhile_cond$bg27669:{
                        {
                          var t$6 = $var;
                          var var2 = t$6.next();
                          var last;
                          {
                            jumpBlockOuterjumpLab$bg27690:{
                              jumpLab$bg27690:{
                                jumpLab$bg27689:{
                                  switch (var2.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg27689;
                                    
                                    case 205:
                                      last = var2.value;
                                      break jumpLab$bg27690;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var1 = new sk$Bool((false));
                                  break dowhile_cond$bg27669;
                                }
                              }
                              {
                                var t$7 = last;
                                var t$8 = new (sk$Array)([
                                  t$7
                                ]);
                                yield new sk$Some(sk$Vector.createFromItems(t$8));
                              }
                              break jumpBlockOuterjumpLab$bg27690;
                            }
                          }
                          break dowhile_cond$bg27669;
                        }
                      }
                      if (var1.__value)
                        {}
                      else
                        break dowhile_else$bg27667;
                      break jumpBlockOuterdowhile_cond$bg27669;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg27668;
            }
            {}
            break jumpBlockOuterbreak$bg27668;
          }
        }
        var t$9 = this;
        var t$10 = t$9.size();
        var t$11 = firstShrink;
        var t$12 = t$10.shrink(t$11);
        var var3 = t$12.values();
        var var4 = new sk$Bool((true));
        {
          jumpBlockOuterbreak$bg27681:{
            break$bg27681:{
              dowhile_else$bg27680:{
                do
                  {
                    jumpBlockOuterdowhile_cond$bg27682:{
                      dowhile_cond$bg27682:{
                        {
                          var t$13 = var3;
                          var var5 = t$13.next();
                          var size;
                          {
                            jumpBlockOuterjumpLab$bg27694:{
                              jumpLab$bg27694:{
                                jumpLab$bg27693:{
                                  switch (var5.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg27693;
                                    
                                    case 205:
                                      size = var5.value;
                                      break jumpLab$bg27694;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var4 = new sk$Bool((false));
                                  break dowhile_cond$bg27682;
                                }
                              }
                              {
                                var t$14 = this;
                                var t$15 = size;
                                yield new sk$Some(t$14.slice(new sk$Int(0.0, 0.0), t$15));
                              }
                              break jumpBlockOuterjumpLab$bg27694;
                            }
                          }
                          break dowhile_cond$bg27682;
                        }
                      }
                      if (var4.__value)
                        {}
                      else
                        break dowhile_else$bg27680;
                      break jumpBlockOuterdowhile_cond$bg27682;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg27681;
            }
            {}
            break jumpBlockOuterbreak$bg27681;
          }
        }
      }
    else
      {}
    return undefined;
  });
};

sk$Vector.prototype.shuffle = function(rng) {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var inner = t$1.inner;
  var t$2 = sz;
  var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
  var t$4 = new (sk$Range)(new sk$Int(0.0, 0.0), t$3);
  var $var = t$4.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg27704:{
      break$bg27704:{
        dowhile_else$bg27703:{
          do
            {
              jumpBlockOuterdowhile_cond$bg27705:{
                dowhile_cond$bg27705:{
                  {
                    var t$5 = $var;
                    var var2 = t$5.next();
                    var index;
                    {
                      jumpBlockOuterjumpLab$bg27717:{
                        jumpLab$bg27717:{
                          jumpLab$bg27716:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg27716;
                              
                              case 205:
                                index = var2.value;
                                break jumpLab$bg27717;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg27705;
                          }
                        }
                        {
                          var t$6 = rng;
                          var t$7 = index;
                          var t$8 = sz;
                          var swap = t$6.random(t$7, t$8);
                          var t$9 = inner;
                          var t$10 = index;
                          var t$11 = swap;
                          sk$Vector$dtunsafeSwap(t$9, t$10, t$11);
                        }
                        break jumpBlockOuterjumpLab$bg27717;
                      }
                    }
                    break dowhile_cond$bg27705;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg27703;
                break jumpBlockOuterdowhile_cond$bg27705;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg27704;
      }
      {}
      break jumpBlockOuterbreak$bg27704;
    }
  }
  return break_val;
};

sk$Vector.prototype.size = function() {
  var t$ = this;
  return t$.sz;
};

sk$Vector.prototype.slice = function(start, end) {
  if (end === undefined)
    end = ((() => 
    {
      return sk$Int.max;
    })());
  var t$ = this;
  var sz = t$.sz;
  var t$1 = start;
  if (t$1.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = sz;
      var t$3 = start;
      var t$4 = t$2.$pl(t$3);
      start = sk$max(new sk$Int(0.0, 0.0), t$4);
    }
  else
    {}
  var t$5 = end;
  if (t$5.$lt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$6 = sz;
      var t$7 = end;
      var t$8 = t$6.$pl(t$7);
      end = sk$max(new sk$Int(0.0, 0.0), t$8);
    }
  else
    {}
  var t$9 = sz;
  var t$10 = start;
  start = sk$min(t$9, t$10);
  var t$11 = sz;
  var t$12 = end;
  end = sk$min(t$11, t$12);
  var t$13 = end;
  var t$14 = start;
  if (t$13.$lt$eq(t$14).__value)
    return sk$Vector.createFromItems(new (sk$Array)([]));
  else
    {
      var t$15 = this;
      var thisInner = t$15.inner;
      var t$16 = end;
      var t$17 = start;
      var capacity = t$16.$mi(t$17);
      var t$18 = capacity;
      var sliceInner = sk$Vector$dtunsafeMake(t$18);
      var t$19 = thisInner;
      var t$20 = start;
      var t$21 = end;
      var t$22 = sliceInner;
      sk$Vector$dtunsafeMoveSlice(t$19, t$20, t$21, t$22, new sk$Int(0.0, 0.0));
      var t$23 = sliceInner;
      var t$24 = t$23;
      var t$25 = capacity;
      return new (sk$Vector)(t$24, t$25, undefined);
    }
};

sk$Vector.prototype.sort = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortBy(((_tmp27753) => 
  {
    return sk$id(_tmp27753);
  }), t$1);
};

sk$Vector.prototype.sortBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var dest = t$1.inner;
  var t$2 = sz;
  var src = sk$Vector$dtunsafeMake(t$2);
  var t$3 = dest;
  var t$4 = sz;
  var t$5 = src;
  sk$Vector$dtunsafeMoveSlice(t$3, new sk$Int(0.0, 0.0), t$4, t$5, new sk$Int(0.0, 0.0));
  var t$6 = this;
  var t$7 = selector;
  var t$8 = compare;
  var t$9 = this;
  var t$10 = t$9.generation_PRIVATE;
  var t$11 = src;
  var t$12 = sz;
  var t$13 = dest;
  t$6.sortSplit(t$7, t$8, t$10, t$11, new sk$Int(0.0, 0.0), t$12, t$13);
  var t$14 = this;
  return t$14.invalidateIterators();
};

sk$Vector.prototype.sortMerge = function(selector, compare, generation, src, start, middle, end, dest) {
  var left = start;
  var right = middle;
  var index = start;
  var break_val;
  {
    jumpBlockOuterbreak$bg27777:{
      break$bg27777:{
        while_else$bg27776:{
          do
            {
              jumpBlockOutercontinue$bg27778:{
                continue$bg27778:{
                  {
                    var t$ = left;
                    var t$1 = middle;
                    var t$2;
                    if (t$.$gt$eq(t$1).__value)
                      {
                        var t$3 = src;
                        var t$4 = right;
                        var t$5 = end;
                        var t$6 = dest;
                        var t$7 = index;
                        sk$Vector$dtunsafeMoveSlice(t$3, t$4, t$5, t$6, t$7);
                        t$2 = new sk$Bool((false));
                      }
                    else
                      {
                        var t$8 = right;
                        var t$9 = end;
                        var t$10;
                        if (t$8.$gt$eq(t$9).__value)
                          {
                            var t$11 = src;
                            var t$12 = left;
                            var t$13 = middle;
                            var t$14 = dest;
                            var t$15 = index;
                            sk$Vector$dtunsafeMoveSlice(t$11, t$12, t$13, t$14, t$15);
                            t$10 = new sk$Bool((false));
                          }
                        else
                          {
                            var t$16 = src;
                            var t$17 = left;
                            var leftValue = sk$Vector$dtunsafeGet(t$16, t$17);
                            var t$18 = selector;
                            var t$19 = leftValue;
                            var leftKey = t$18(t$19);
                            var t$20 = src;
                            var t$21 = right;
                            var rightValue = sk$Vector$dtunsafeGet(t$20, t$21);
                            var t$22 = selector;
                            var t$23 = rightValue;
                            var rightKey = t$22(t$23);
                            var t$24 = compare;
                            var t$25 = leftKey;
                            var t$26 = rightKey;
                            var t$27 = t$24(t$25, t$26);
                            var lte = t$27.isLTE();
                            var t$28 = generation;
                            var t$29 = this;
                            var t$30 = t$29.generation_PRIVATE;
                            var t$31;
                            if (t$28.$bg$eq(t$30).__value)
                              t$31 = sk$throwContainerChanged();
                            else
                              t$31 = sk.__.$void;
                            var t$32;
                            if (lte.__value)
                              {
                                var t$33 = dest;
                                var t$34 = index;
                                var t$35 = leftValue;
                                sk$Vector$dtunsafeSet(t$33, t$34, t$35);
                                var t$36 = left;
                                left = t$36.$pl(new sk$Int(1.0, 0.0));
                                t$32 = sk.__.$void;
                              }
                            else
                              {
                                var t$37 = dest;
                                var t$38 = index;
                                var t$39 = rightValue;
                                sk$Vector$dtunsafeSet(t$37, t$38, t$39);
                                var t$40 = right;
                                right = t$40.$pl(new sk$Int(1.0, 0.0));
                                t$32 = sk.__.$void;
                              }
                            var t$41 = index;
                            index = t$41.$pl(new sk$Int(1.0, 0.0));
                            var t$42 = index;
                            var t$43 = end;
                            t$10 = t$42.ult(t$43);
                          }
                        t$2 = t$10;
                      }
                    if (t$2.__value)
                      {}
                    else
                      break while_else$bg27776;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg27778;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg27777;
      }
      {}
      break jumpBlockOuterbreak$bg27777;
    }
  }
  return break_val;
};

sk$Vector.prototype.sortSplit = function(selector, compare, generation, src, start, end, dest) {
  var t$ = end;
  var t$1 = start;
  var t$2 = t$.$mi(t$1);
  if (t$2.$gt(new sk$Int(1.0, 0.0)).__value)
    {
      var t$3 = end;
      var t$4 = start;
      var t$5 = t$3.$pl(t$4);
      var middle = t$5.ushr(new sk$Int(1.0, 0.0));
      var t$6 = this;
      var t$7 = selector;
      var t$8 = compare;
      var t$9 = generation;
      var t$10 = dest;
      var t$11 = start;
      var t$12 = middle;
      var t$13 = src;
      t$6.sortSplit(t$7, t$8, t$9, t$10, t$11, t$12, t$13);
      var t$14 = this;
      var t$15 = selector;
      var t$16 = compare;
      var t$17 = generation;
      var t$18 = dest;
      var t$19 = middle;
      var t$20 = end;
      var t$21 = src;
      t$14.sortSplit(t$15, t$16, t$17, t$18, t$19, t$20, t$21);
      var t$22 = this;
      var t$23 = selector;
      var t$24 = compare;
      var t$25 = generation;
      var t$26 = src;
      var t$27 = start;
      var t$28 = middle;
      var t$29 = end;
      var t$30 = dest;
      return t$22.sortMerge(t$23, t$24, t$25, t$26, t$27, t$28, t$29, t$30);
    }
  else
    return sk.__.$void;
};

sk$Vector.prototype.sorted = function(compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var t$1 = compare;
  return t$.sortedBy(((_tmp27860) => 
  {
    return sk$id(_tmp27860);
  }), t$1);
};

sk$Vector.prototype.sortedBy = function(selector, compare) {
  if (compare === undefined)
    compare = ((() => 
    {
      return ((x, y) => 
      {
        var t$ = x;
        var t$1 = y;
        return t$.compare(t$1);
      });
    })());
  var t$ = this;
  var sz = t$.sz;
  var t$1 = sz;
  var src = sk$Vector$dtunsafeMake(t$1);
  var t$2 = this;
  var t$3 = t$2.inner;
  var t$4 = sz;
  var t$5 = src;
  sk$Vector$dtunsafeMoveSlice(t$3, new sk$Int(0.0, 0.0), t$4, t$5, new sk$Int(0.0, 0.0));
  var t$6 = src;
  var dest = t$6.clone();
  var t$7 = this;
  var t$8 = selector;
  var t$9 = compare;
  var t$10 = this;
  var t$11 = t$10.generation_PRIVATE;
  var t$12 = src;
  var t$13 = sz;
  var t$14 = dest;
  t$7.sortSplit(t$8, t$9, t$11, t$12, new sk$Int(0.0, 0.0), t$13, t$14);
  var t$15 = dest;
  var t$16 = t$15;
  var t$17 = this;
  var t$18 = t$17.sz;
  return new (sk$Vector)(t$16, t$18, undefined);
};

sk$Vector.prototype.splice = function(start, end, src) {
  var t$ = start;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector.splice(): Expected start index to be nonnegative.')));
  var t$2 = end;
  var t$3 = start;
  var t$4 = t$2.$gt$eq(t$3);
  sk$invariant(t$4, new sk$String(('Vector.splice(): Expected end to be greater than or equal to start.')));
  var t$5 = this;
  var sz = t$5.sz;
  var t$6 = start;
  var t$7 = sz;
  start = sk$min(t$6, t$7);
  var t$8 = end;
  var t$9 = sz;
  end = sk$min(t$8, t$9);
  var t$10 = end;
  var t$11 = start;
  var count = t$10.$mi(t$11);
  var t$12 = src;
  var t$13 = t$12;
  var srcSize = t$13.size();
  var t$14 = srcSize;
  var t$15 = count;
  var shift = t$14.$mi(t$15);
  var t$16 = sz;
  var t$17 = shift;
  var newSize = t$16.$pl(t$17);
  var t$18 = this;
  var fromInner = t$18.inner;
  var toInner = fromInner;
  var t$19 = newSize;
  var t$20 = this;
  var t$21 = t$20.capacity();
  if (t$19.ugt(t$21).__value)
    {
      var t$22 = newSize;
      var newCapacity = sk$Vector$dtgetCapacityForSize(t$22);
      var t$23 = newCapacity;
      toInner = sk$Vector$dtunsafeMake(t$23);
      var t$24 = fromInner;
      var t$25 = start;
      var t$26 = toInner;
      sk$Vector$dtunsafeMoveSlice(t$24, new sk$Int(0.0, 0.0), t$25, t$26, new sk$Int(0.0, 0.0));
    }
  else
    {}
  var t$27 = fromInner;
  var t$28 = end;
  var t$29 = sz;
  var t$30 = toInner;
  var t$31 = end;
  var t$32 = shift;
  var t$33 = t$31.$pl(t$32);
  sk$Vector$dtunsafeMoveSlice(t$27, t$28, t$29, t$30, t$33);
  var t$34 = src;
  var t$35 = toInner;
  var t$36 = start;
  var t$37 = start;
  var t$38 = srcSize;
  var t$39 = t$37.$pl(t$38);
  sk$Vector$dtunsafeWriteSeqToSlice(t$34, t$35, t$36, t$39);
  var t$40 = newSize;
  var t$41 = sz;
  if (t$40.ult(t$41).__value)
    {
      var t$42 = toInner;
      var t$43 = newSize;
      var t$44 = sz;
      sk$Vector$dtunsafeFreeSlice(t$42, t$43, t$44);
    }
  else
    {}
  var $var = this;
  var t$45 = $var;
  var t$46 = t$45;
  t$46.inner = toInner;
  var var1 = this;
  var t$47 = var1;
  var t$48 = t$47;
  t$48.sz = newSize;
  var t$49 = this;
  return t$49.invalidateIterators();
};

sk$Vector.prototype.sumFloat = function() {
  var sum = new sk$Float((0.0));
  var t$ = this;
  t$.unsafeEach(((x) => 
  {
    var t$1 = sum;
    var t$2 = x;
    sum = t$1.$pl(t$2);
    return sk.__.$void;
  }));
  return sum;
};

sk$Vector.prototype.sumInt = function() {
  var sum = new sk$Int(0.0, 0.0);
  var t$ = this;
  t$.unsafeEach(((x) => 
  {
    var t$1 = sum;
    var t$2 = x;
    sum = t$1.$pl(t$2);
    return sk.__.$void;
  }));
  return sum;
};

sk$Vector.prototype.swap = function(i, j) {
  var t$ = this;
  var t$1 = i;
  var tmp = t$.get(t$1);
  var t$2 = this;
  var t$3 = i;
  var t$4 = this;
  var t$5 = j;
  var t$6 = t$4.get(t$5);
  t$2.set(t$3, t$6);
  var t$7 = this;
  var t$8 = j;
  var t$9 = tmp;
  t$7.set(t$8, t$9);
  return sk.__.$void;
};

sk$Vector.prototype.take = function(n) {
  var t$ = n;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('Vector.take(): Expected count to be nonnegative.')));
  var t$2 = this;
  var t$3 = n;
  return t$2.slice(new sk$Int(0.0, 0.0), t$3);
};

sk$Vector.prototype.takeWhile = function(p) {
  var result = sk$Vector.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg27965:{
      break$bg27965:{
        dowhile_else$bg27964:{
          do
            {
              jumpBlockOuterdowhile_cond$bg27966:{
                dowhile_cond$bg27966:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var x;
                    {
                      jumpBlockOuterjumpLab$bg27977:{
                        jumpLab$bg27977:{
                          jumpLab$bg27976:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg27976;
                              
                              case 205:
                                x = var2.value;
                                break jumpLab$bg27977;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg27966;
                          }
                        }
                        {
                          var t$2 = p;
                          var t$3 = x;
                          if (t$2(t$3).__value)
                            {
                              var t$4 = result;
                              var t$5 = x;
                              t$4.push(t$5);
                            }
                          else
                            {
                              break_val = sk.__.$void;
                              break break$bg27965;
                            }
                        }
                        break jumpBlockOuterjumpLab$bg27977;
                      }
                    }
                    break dowhile_cond$bg27966;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg27964;
                break jumpBlockOuterdowhile_cond$bg27966;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg27965;
      }
      {}
      break jumpBlockOuterbreak$bg27965;
    }
  }
  var t$6 = result;
  return t$6;
};

sk$Vector.prototype.toArray = function() {
  var t$ = this;
  var inner = t$.inner;
  var t$1 = this;
  var t$2 = t$1.sz;
  return sk$Array.fillBy(t$2, ((index) => 
  {
    var t$3 = inner;
    var t$4 = index;
    return sk$Vector$dtunsafeGet(t$3, t$4);
  }));
};

sk$Vector.prototype.toString = function() {
  var t$ = this;
  var t$1 = t$.join(new sk$String((', ')));
  var t$2 = new sk$String(('Vector[')).$pl(t$1);
  return t$2.$pl(new sk$String((']')));
};

sk$Vector.prototype.unique = function() {
  var set = sk$Map.mcreate(new sk$Int(0.0, 0.0));
  var t$ = this;
  t$.unsafeEach(((value) => 
  {
    var t$1 = set;
    var t$2 = value;
    return t$1.set(t$2, sk.__.$void);
  }));
  var t$3 = set;
  var t$4 = t$3.size();
  var result = sk$Vector.mcreate(t$4);
  var t$5 = set;
  t$5.each(((value1, _) => 
  {
    var t$6 = result;
    var t$7 = value1;
    return t$6.push(t$7);
  }));
  var t$8 = result;
  return t$8;
};

sk$Vector.prototype.unsafeEach = function(f) {
  var t$ = this;
  var inner = t$.inner;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg28004:{
      break$bg28004:{
        dowhile_else$bg28003:{
          do
            {
              jumpBlockOuterdowhile_cond$bg28005:{
                dowhile_cond$bg28005:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var index;
                    {
                      jumpBlockOuterjumpLab$bg28015:{
                        jumpLab$bg28015:{
                          jumpLab$bg28014:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg28014;
                              
                              case 205:
                                index = var2.value;
                                break jumpLab$bg28015;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg28005;
                          }
                        }
                        {
                          var t$5 = f;
                          var t$6 = inner;
                          var t$7 = index;
                          var t$8 = sk$Vector$dtunsafeGet(t$6, t$7);
                          t$5(t$8);
                        }
                        break jumpBlockOuterjumpLab$bg28015;
                      }
                    }
                    break dowhile_cond$bg28005;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg28003;
                break jumpBlockOuterdowhile_cond$bg28005;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg28004;
      }
      {}
      break jumpBlockOuterbreak$bg28004;
    }
  }
  return break_val;
};

sk$Vector.prototype.unsafeEachWithIndex = function(f) {
  var t$ = this;
  var inner = t$.inner;
  var t$1 = this;
  var t$2 = t$1.sz;
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg28024:{
      break$bg28024:{
        dowhile_else$bg28023:{
          do
            {
              jumpBlockOuterdowhile_cond$bg28025:{
                dowhile_cond$bg28025:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var index;
                    {
                      jumpBlockOuterjumpLab$bg28036:{
                        jumpLab$bg28036:{
                          jumpLab$bg28035:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg28035;
                              
                              case 205:
                                index = var2.value;
                                break jumpLab$bg28036;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg28025;
                          }
                        }
                        {
                          var t$5 = f;
                          var t$6 = inner;
                          var t$7 = index;
                          var t$8 = sk$Vector$dtunsafeGet(t$6, t$7);
                          var t$9 = index;
                          t$5(t$8, t$9);
                        }
                        break jumpBlockOuterjumpLab$bg28036;
                      }
                    }
                    break dowhile_cond$bg28025;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg28023;
                break jumpBlockOuterdowhile_cond$bg28025;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg28024;
      }
      {}
      break jumpBlockOuterbreak$bg28024;
    }
  }
  return break_val;
};

sk$Vector.prototype.unsafeGrowCapacity = function(capacity) {
  var t$ = capacity;
  var inner = sk$Vector$dtunsafeMake(t$);
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = this;
  var t$4 = t$3.sz;
  var t$5 = inner;
  sk$Vector$dtunsafeMoveSlice(t$2, new sk$Int(0.0, 0.0), t$4, t$5, new sk$Int(0.0, 0.0));
  var $var = this;
  var t$6 = $var;
  var t$7 = t$6;
  t$7.inner = inner;
  var t$8 = this;
  return t$8.invalidateIterators();
};

sk$Vector.prototype.unsafePop = function() {
  var t$ = this;
  var sz = t$.sz;
  var t$1 = this;
  var inner = t$1.inner;
  var t$2 = sz;
  var newSize = t$2.$mi(new sk$Int(1.0, 0.0));
  var t$3 = inner;
  var t$4 = newSize;
  var value = sk$Vector$dtunsafeGet(t$3, t$4);
  var t$5 = inner;
  var t$6 = newSize;
  var t$7 = sz;
  sk$Vector$dtunsafeFreeSlice(t$5, t$6, t$7);
  var $var = this;
  var t$8 = $var;
  var t$9 = t$8;
  t$9.sz = newSize;
  var t$10 = this;
  t$10.invalidateIterators();
  return value;
};

sk$Vector.prototype.values = function() {
  var t$ = this;
  var t$1 = this;
  var t$2 = t$1.inner;
  var t$3 = this;
  var t$4 = t$3.sz;
  return sk$Vector$dtValuesIterator.make(t$, t$2, t$4);
};

sk$Vector.zip10 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  var t$9 = s9;
  return new (sk$Sequence$dtZip10Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8, t$9);
};

sk$Vector.zip2 = function(s0, s1) {
  var t$ = s0;
  var t$1 = s1;
  return new (sk$Sequence$dtZip2Sequence)(t$, t$1);
};

sk$Vector.zip3 = function(s0, s1, s2) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  return new (sk$Sequence$dtZip3Sequence)(t$, t$1, t$2);
};

sk$Vector.zip4 = function(s0, s1, s2, s3) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  return new (sk$Sequence$dtZip4Sequence)(t$, t$1, t$2, t$3);
};

sk$Vector.zip5 = function(s0, s1, s2, s3, s4) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  return new (sk$Sequence$dtZip5Sequence)(t$, t$1, t$2, t$3, t$4);
};

sk$Vector.zip6 = function(s0, s1, s2, s3, s4, s5) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  return new (sk$Sequence$dtZip6Sequence)(t$, t$1, t$2, t$3, t$4, t$5);
};

sk$Vector.zip7 = function(s0, s1, s2, s3, s4, s5, s6) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  return new (sk$Sequence$dtZip7Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6);
};

sk$Vector.zip8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  return new (sk$Sequence$dtZip8Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7);
};

sk$Vector.zip9 = function(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
  var t$ = s0;
  var t$1 = s1;
  var t$2 = s2;
  var t$3 = s3;
  var t$4 = s4;
  var t$5 = s5;
  var t$6 = s6;
  var t$7 = s7;
  var t$8 = s8;
  return new (sk$Sequence$dtZip9Sequence)(t$, t$1, t$2, t$3, t$4, t$5, t$6, t$7, t$8);
};

sk$Vector.prototype.zipWith = function(other, s) {
  var index = new sk$Int(0.0, 0.0);
  var t$ = this;
  var sz = t$.sz;
  var t$1 = sz;
  var t$2 = other;
  var t$3 = t$2;
  var t$4 = t$3.size();
  var capacity = sk$min(t$1, t$4);
  var t$5 = capacity;
  var result = sk$Vector.mcreate(t$5);
  var t$6 = other;
  var t$7 = t$6;
  t$7.find(((otherValue) => 
  {
    var t$8 = index;
    var t$9 = sz;
    var t$10 = t$8.ult(t$9);
    sk$invariant(t$10, new sk$String(('Vector.zipWith(): Expected the second sequence to yield exactly size() items.')));
    var t$11 = this;
    var t$12 = index;
    var thisValue = t$11.get(t$12);
    var t$13 = result;
    var t$14 = s;
    var t$15 = thisValue;
    var t$16 = otherValue;
    var t$17 = t$14(t$15, t$16);
    t$13.push(t$17);
    var t$18 = index;
    index = t$18.$pl(new sk$Int(1.0, 0.0));
    var t$19 = index;
    var t$20 = sz;
    return t$19.$eq$eq(t$20);
  }));
  var t$21 = result;
  return t$21;
};

sk$Vector.prototype.__bases = [
  sk$Vector,
  sk$Sequence,
  sk$IndexedSequence,
  sk$MutableIndexedSequence
];

var sk$HH$dtFloat = sk.HH$dtFloat = function HH$dtFloat(x) {
  this.x = x;
};

sk$HH$dtFloat.prototype = Object.create(Object.prototype);

sk$HH$dtFloat.prototype.__constructor = sk$HH$dtFloat;

sk$HH$dtFloat.prototype.__classname = 'HH.Float';

sk$HH$dtFloat.prototype.$frozen = true;

sk$HH$dtFloat.prototype.__type_switch_id = 96;

sk$HH$dtFloat.prototype.__copy = function() {
  return new (sk$HH$dtFloat)(this.x);
};

sk$HH$dtFloat.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp543 = __cache.get(this);
  if (_tmp543 === undefined)
    {
      var _tmp543 = this.__copy();
      _tmp543.$frozen = true;
      __cache.set(this, _tmp543);
      _tmp543.x = skip.deepFreeze(_tmp543.x, __cache);
    }
  return _tmp543;
};

sk$HH$dtFloat.prototype.__init = function(__named_parameters) {};

sk$HH$dtFloat.prototype.__bases = [
  sk$HH$dtFloat,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtPrimitive,
  sk$HH$dtNumber
];

var sk$HH$dtInt = sk.HH$dtInt = function HH$dtInt(x) {
  this.x = x;
};

sk$HH$dtInt.prototype = Object.create(Object.prototype);

sk$HH$dtInt.prototype.__constructor = sk$HH$dtInt;

sk$HH$dtInt.prototype.__classname = 'HH.Int';

sk$HH$dtInt.prototype.$frozen = true;

sk$HH$dtInt.prototype.__type_switch_id = 94;

sk$HH$dtInt.prototype.__copy = function() {
  return new (sk$HH$dtInt)(this.x);
};

sk$HH$dtInt.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp544 = __cache.get(this);
  if (_tmp544 === undefined)
    {
      var _tmp544 = this.__copy();
      _tmp544.$frozen = true;
      __cache.set(this, _tmp544);
      _tmp544.x = skip.deepFreeze(_tmp544.x, __cache);
    }
  return _tmp544;
};

sk$HH$dtInt.prototype.__init = function(__named_parameters) {};

sk$HH$dtInt.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$HH$dtInt.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg2631:{
      jumpLab$bg2631:{
        jumpLab$bg2630:{
          switch (other.__type_switch_id) {
            case 94:
              otherTyped = other;
              break jumpLab$bg2630;
            
            default:
              break jumpLab$bg2631;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.x;
          var t$2 = otherTyped;
          var t$3 = t$2.x;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$HH$dtInt.prototype.hash = function() {
  var t$ = this;
  var x = t$.x;
  var t$1 = x;
  return t$1.hash();
};

sk$HH$dtInt.prototype.toString = function() {
  var t$ = this;
  var x = t$.x;
  var t$1 = x;
  return t$1.toString();
};

sk$HH$dtInt.prototype.__bases = [
  sk$HH$dtInt,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtPrimitive,
  sk$HH$dtArraykey,
  sk$HH$dtNumber
];

var sk$HH$dtString = sk.HH$dtString = function HH$dtString(x) {
  this.x = x;
};

sk$HH$dtString.prototype = Object.create(Object.prototype);

sk$HH$dtString.prototype.__constructor = sk$HH$dtString;

sk$HH$dtString.prototype.__classname = 'HH.String';

sk$HH$dtString.prototype.$frozen = true;

sk$HH$dtString.prototype.__type_switch_id = 95;

sk$HH$dtString.prototype.__copy = function() {
  return new (sk$HH$dtString)(this.x);
};

sk$HH$dtString.prototype.__deepFreeze = function(__cache) {
  if (this.$frozen)
    return this;
  var _tmp545 = __cache.get(this);
  if (_tmp545 === undefined)
    {
      var _tmp545 = this.__copy();
      _tmp545.$frozen = true;
      __cache.set(this, _tmp545);
      _tmp545.x = skip.deepFreeze(_tmp545.x, __cache);
    }
  return _tmp545;
};

sk$HH$dtString.prototype.__init = function(__named_parameters) {};

sk$HH$dtString.prototype.$bg$eq = function(other) {
  var t$ = this;
  var t$1 = other;
  var t$2 = t$.$eq$eq(t$1);
  return t$2.$bg();
};

sk$HH$dtString.prototype.$eq$eq = function(other) {
  var otherTyped;
  {
    jumpBlockOuterjumpLab$bg2741:{
      jumpLab$bg2741:{
        jumpLab$bg2740:{
          switch (other.__type_switch_id) {
            case 95:
              otherTyped = other;
              break jumpLab$bg2740;
            
            default:
              break jumpLab$bg2741;

          }
        }
        {
          var t$ = this;
          var t$1 = t$.x;
          var t$2 = otherTyped;
          var t$3 = t$2.x;
          var t$4 = sk$isEqual(t$1, t$3);
          if (t$4.$bg().__value)
            return new sk$Bool((false));
          else
            {}
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

sk$HH$dtString.prototype.hash = function() {
  var t$ = this;
  var x = t$.x;
  var t$1 = x;
  return t$1.hash();
};

sk$HH$dtString.prototype.toString = function() {
  var t$ = this;
  return t$.x;
};

sk$HH$dtString.prototype.__bases = [
  sk$HH$dtString,
  sk$HH$dtMixed,
  sk$HH$dtNonnull,
  sk$HH$dtPrimitive,
  sk$HH$dtArraykey
];

var sk$ASIO$dtgenFillBy = sk.ASIO$dtgenFillBy = skip.asyncToGenerator(function*(size, f) {
  var t$ = size;
  var t$1 = t$.$gt$eq(new sk$Int(0.0, 0.0));
  sk$invariant(t$1, new sk$String(('ASIO::genFillBy: Expected size to be nonnegative.')));
  var t$2 = size;
  var t$3 = f;
  var t$4 = sk$List.tabulate(t$2, t$3);
  var handles = t$4;
  var t$5 = handles;
  var t$6 = (yield t$5.genReverse());
  var v = sk$Array.mcreateFromItems(t$6);
  var t$7 = v;
  t$7.reverse();
  var t$8 = v;
  return t$8;
});

var sk$ASIO$dtjoin2 = sk.ASIO$dtjoin2 = skip.asyncToGenerator(function*(v1, v2) {
  var t$ = (yield v1);
  var t$1 = (yield v2);
  return new (sk$Tuple2)(t$, t$1);
});

var sk$ASIO$dtjoin3 = sk.ASIO$dtjoin3 = skip.asyncToGenerator(function*(v1, v2, v3) {
  var t$ = (yield v1);
  var t$1 = (yield v2);
  var t$2 = (yield v3);
  return new (sk$Tuple3)(t$, t$1, t$2);
});

var sk$ASIO$dtjoin4 = sk.ASIO$dtjoin4 = skip.asyncToGenerator(function*(v1, v2, v3, v4) {
  var t$ = (yield v1);
  var t$1 = (yield v2);
  var t$2 = (yield v3);
  var t$3 = (yield v4);
  return new (sk$Tuple4)(t$, t$1, t$2, t$3);
});

var sk$ASIO$dtjoin5 = sk.ASIO$dtjoin5 = skip.asyncToGenerator(function*(v1, v2, v3, v4, v5) {
  var t$ = (yield v1);
  var t$1 = (yield v2);
  var t$2 = (yield v3);
  var t$3 = (yield v4);
  var t$4 = (yield v5);
  return new (sk$Tuple5)(t$, t$1, t$2, t$3, t$4);
});

var sk$ArgumentParser$dthelp = sk.ArgumentParser$dthelp = function(schema) {
  var lines = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var requiredText = ((required) => 
  {
    if (required.__value)
      return new sk$String(('required'));
    else
      return new sk$String(('optional'));
  });
  var t$ = schema;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg28796:{
      break$bg28796:{
        dowhile_else$bg28795:{
          do
            {
              jumpBlockOuterdowhile_cond$bg28797:{
                dowhile_cond$bg28797:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var param;
                    {
                      jumpBlockOuterjumpLab$bg28902:{
                        jumpLab$bg28902:{
                          jumpLab$bg28901:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg28901;
                              
                              case 205:
                                param = var2.value;
                                break jumpLab$bg28902;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg28797;
                          }
                        }
                        {
                          var name;
                          var $default;
                          var negatable;
                          var help;
                          var required1;
                          var default1;
                          var name1;
                          var name2;
                          var help1;
                          var name3;
                          var required2;
                          var required3;
                          var help2;
                          var default2;
                          var help3;
                          {
                            jumpBlockOuterjumpLab$bg28898:{
                              jumpLab$bg28898:{
                                jumpLab$bg28897:{
                                  jumpLab$bg28896:{
                                    jumpLab$bg28895:{
                                      switch (param.__type_switch_id) {
                                        case 0:
                                          help2 = param.help;
                                          name2 = param.name;
                                          negatable = param.negatable;
                                          break jumpLab$bg28895;
                                        
                                        case 1:
                                          $default = param.$default;
                                          help3 = param.help;
                                          name = param.name;
                                          required3 = param.required;
                                          break jumpLab$bg28896;
                                        
                                        case 3:
                                          default2 = param.$default;
                                          help1 = param.help;
                                          name3 = param.name;
                                          required1 = param.required;
                                          break jumpLab$bg28897;
                                        
                                        case 2:
                                          default1 = param.$default;
                                          help = param.help;
                                          name1 = param.name;
                                          required2 = param.required;
                                          break jumpLab$bg28898;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var t$2 = lines;
                                      var t$3 = new sk$String(('  --')).toString();
                                      var t$4 = name2;
                                      var t$5 = t$4.toString();
                                      var t$6 = help2;
                                      var t$7;
                                      if (t$6.$bg$eq(new sk$String((''))).__value)
                                        {
                                          var t$8 = help2;
                                          t$7 = new sk$String((': ')).$pl(t$8);
                                        }
                                      else
                                        t$7 = new sk$String((''));
                                      var t$9 = t$7;
                                      var t$10 = t$9.toString();
                                      var t$11 = new sk$String(('')).join(new (sk$Array)([
                                        t$3,
                                        t$5,
                                        t$10
                                      ]));
                                      t$2.push(t$11);
                                      if (negatable.__value)
                                        {
                                          var t$12 = lines;
                                          var t$13 = new sk$String(('  --no-')).toString();
                                          var t$14 = name2;
                                          var t$15 = t$14.toString();
                                          var t$16 = new sk$String((': inverse of --')).toString();
                                          var t$17 = name2;
                                          var t$18 = t$17.toString();
                                          var t$19 = new sk$String(('.')).toString();
                                          var t$20 = new sk$String(('')).join(new (sk$Array)([
                                            t$13,
                                            t$15,
                                            t$16,
                                            t$18,
                                            t$19
                                          ]));
                                          t$12.push(t$20);
                                        }
                                      else
                                        {}
                                    }
                                    break jumpBlockOuterjumpLab$bg28898;
                                  }
                                  {
                                    var t$21;
                                    var _;
                                    var x;
                                    {
                                      jumpBlockOuterjumpLab$bg28887:{
                                        jumpLab$bg28887:{
                                          jumpLab$bg28886:{
                                            switch ($default.__type_switch_id) {
                                              case 205:
                                                x = $default.value;
                                                break jumpLab$bg28886;
                                              
                                              default:
                                                _ = $default;
                                                break jumpLab$bg28887;

                                            }
                                          }
                                          {
                                            var t$22 = new sk$String((', default ')).toString();
                                            var t$23 = x;
                                            var t$24 = t$23.toString();
                                            t$21 = new sk$String(('')).join(new (sk$Array)([
                                              t$22,
                                              t$24
                                            ]));
                                          }
                                          break jumpBlockOuterjumpLab$bg28887;
                                        }
                                        t$21 = new sk$String((''));
                                        break jumpBlockOuterjumpLab$bg28887;
                                      }
                                    }
                                    var defaultText = t$21;
                                    var t$25 = lines;
                                    var t$26 = new sk$String(('  --')).toString();
                                    var t$27 = name;
                                    var t$28 = t$27.toString();
                                    var t$29 = new sk$String((' <int>: (')).toString();
                                    var t$30 = requiredText;
                                    var t$31 = required3;
                                    var t$32 = t$30(t$31);
                                    var t$33 = t$32.toString();
                                    var t$34 = defaultText;
                                    var t$35 = t$34.toString();
                                    var t$36 = new sk$String((') ')).toString();
                                    var t$37 = help3;
                                    var t$38 = t$37.toString();
                                    var t$39 = new sk$String(('')).join(new (sk$Array)([
                                      t$26,
                                      t$28,
                                      t$29,
                                      t$33,
                                      t$35,
                                      t$36,
                                      t$38
                                    ]));
                                    t$25.push(t$39);
                                  }
                                  break jumpBlockOuterjumpLab$bg28898;
                                }
                                {
                                  var t$40;
                                  var _1;
                                  var x1;
                                  {
                                    jumpBlockOuterjumpLab$bg28890:{
                                      jumpLab$bg28890:{
                                        jumpLab$bg28889:{
                                          switch (default2.__type_switch_id) {
                                            case 205:
                                              x1 = default2.value;
                                              break jumpLab$bg28889;
                                            
                                            default:
                                              _1 = default2;
                                              break jumpLab$bg28890;

                                          }
                                        }
                                        {
                                          var t$41 = new sk$String((', default \'')).toString();
                                          var t$42 = x1;
                                          var t$43 = t$42.toString();
                                          var t$44 = new sk$String(('\'')).toString();
                                          t$40 = new sk$String(('')).join(new (sk$Array)([
                                            t$41,
                                            t$43,
                                            t$44
                                          ]));
                                        }
                                        break jumpBlockOuterjumpLab$bg28890;
                                      }
                                      t$40 = new sk$String((''));
                                      break jumpBlockOuterjumpLab$bg28890;
                                    }
                                  }
                                  var defaultText1 = t$40;
                                  var t$45 = lines;
                                  var t$46 = new sk$String(('  --')).toString();
                                  var t$47 = name3;
                                  var t$48 = t$47.toString();
                                  var t$49 = new sk$String((' <string>: (')).toString();
                                  var t$50 = requiredText;
                                  var t$51 = required1;
                                  var t$52 = t$50(t$51);
                                  var t$53 = t$52.toString();
                                  var t$54 = defaultText1;
                                  var t$55 = t$54.toString();
                                  var t$56 = new sk$String((') ')).toString();
                                  var t$57 = help1;
                                  var t$58 = t$57.toString();
                                  var t$59 = new sk$String(('')).join(new (sk$Array)([
                                    t$46,
                                    t$48,
                                    t$49,
                                    t$53,
                                    t$55,
                                    t$56,
                                    t$58
                                  ]));
                                  t$45.push(t$59);
                                }
                                break jumpBlockOuterjumpLab$bg28898;
                              }
                              {
                                var t$60;
                                var _2;
                                var x2;
                                {
                                  jumpBlockOuterjumpLab$bg28893:{
                                    jumpLab$bg28893:{
                                      jumpLab$bg28892:{
                                        switch (default1.__type_switch_id) {
                                          case 205:
                                            x2 = default1.value;
                                            break jumpLab$bg28892;
                                          
                                          default:
                                            _2 = default1;
                                            break jumpLab$bg28893;

                                        }
                                      }
                                      {
                                        var t$61 = new sk$String((', default [')).toString();
                                        var t$62 = x2;
                                        var t$63 = t$62.map(((s) => 
                                        {
                                          var t$64 = new sk$String(('\'')).toString();
                                          var t$65 = s;
                                          var t$66 = t$65.toString();
                                          var t$67 = new sk$String(('\'')).toString();
                                          return new sk$String(('')).join(new (sk$Array)([
                                            t$64,
                                            t$66,
                                            t$67
                                          ]));
                                        }));
                                        var t$68 = t$63.join(new sk$String((', ')));
                                        var t$69 = t$68.toString();
                                        var t$70 = new sk$String((']')).toString();
                                        t$60 = new sk$String(('')).join(new (sk$Array)([
                                          t$61,
                                          t$69,
                                          t$70
                                        ]));
                                      }
                                      break jumpBlockOuterjumpLab$bg28893;
                                    }
                                    t$60 = new sk$String((''));
                                    break jumpBlockOuterjumpLab$bg28893;
                                  }
                                }
                                var defaultText2 = t$60;
                                var t$71 = lines;
                                var t$72 = new sk$String(('  --')).toString();
                                var t$73 = name1;
                                var t$74 = t$73.toString();
                                var t$75 = new sk$String((' <string>: (')).toString();
                                var t$76 = requiredText;
                                var t$77 = required2;
                                var t$78 = t$76(t$77);
                                var t$79 = t$78.toString();
                                var t$80 = defaultText2;
                                var t$81 = t$80.toString();
                                var t$82 = new sk$String((') ')).toString();
                                var t$83 = help;
                                var t$84 = t$83.toString();
                                var t$85 = new sk$String(('')).join(new (sk$Array)([
                                  t$72,
                                  t$74,
                                  t$75,
                                  t$79,
                                  t$81,
                                  t$82,
                                  t$84
                                ]));
                                t$71.push(t$85);
                              }
                              break jumpBlockOuterjumpLab$bg28898;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg28902;
                      }
                    }
                    break dowhile_cond$bg28797;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg28795;
                break jumpBlockOuterdowhile_cond$bg28797;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg28796;
      }
      {}
      break jumpBlockOuterbreak$bg28796;
    }
  }
  var t$86 = lines;
  return t$86.join(new sk$String(('\n')));
};

var sk$ArgumentParser$dtliftValidation = sk.ArgumentParser$dtliftValidation = function(name, validate) {
  return ((value) => 
  {
    var t$ = validate;
    var t$1 = value;
    var $var = t$(t$1);
    var reason;
    {
      jumpBlockOuterjumpLab$bg28914:{
        jumpLab$bg28914:{
          jumpLab$bg28913:{
            switch ($var.__type_switch_id) {
              case 259:
                break jumpLab$bg28913;
              
              case 258:
                reason = $var.error;
                break jumpLab$bg28914;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$2 = value;
            return new (sk$Success)(t$2);
          }
        }
        {
          var t$3 = name;
          var t$4 = reason;
          var t$5 = new (sk$ArgumentParser$dtInvalidValueError)(t$3, t$4);
          return new (sk$Failure)(t$5);
        }
      }
    }
  });
};

var sk$ArgumentParser$dtoneOf = sk.ArgumentParser$dtoneOf = function(choices) {
  return ((value) => 
  {
    var t$ = choices;
    var t$1 = value;
    if (t$.contains(t$1).__value)
      return new (sk$Success)(sk.__.$void);
    else
      {
        var t$2 = new sk$String(('Expected one of ')).toString();
        var t$3 = choices;
        var t$4 = t$3.map(((x) => 
        {
          var t$5 = x;
          return t$5.toString();
        }));
        var t$6 = t$4.join(new sk$String((', ')));
        var t$7 = t$6.toString();
        var t$8 = new sk$String((', got \'')).toString();
        var t$9 = value;
        var t$10 = t$9.toString();
        var t$11 = new sk$String(('\'')).toString();
        var t$12 = new sk$String(('')).join(new (sk$Array)([
          t$2,
          t$7,
          t$8,
          t$10,
          t$11
        ]));
        return new (sk$Failure)(t$12);
      }
  });
};

var sk$ArgumentParser$dtparse = sk.ArgumentParser$dtparse = function(schema, argv) {
  var options = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var t$ = schema;
  var $var = t$.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg28934:{
      break$bg28934:{
        dowhile_else$bg28933:{
          do
            {
              jumpBlockOuterdowhile_cond$bg28935:{
                dowhile_cond$bg28935:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var param;
                    {
                      jumpBlockOuterjumpLab$bg29103:{
                        jumpLab$bg29103:{
                          jumpLab$bg29102:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg29102;
                              
                              case 205:
                                param = var2.value;
                                break jumpLab$bg29103;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg28935;
                          }
                        }
                        {
                          var t$2 = param;
                          var t$3 = t$2.name;
                          var flag = new sk$String(('--')).$pl(t$3);
                          var t$4 = options;
                          var t$5 = flag;
                          var t$6;
                          if (t$4.containsKey(t$5).__value)
                            {
                              var t$7 = new sk$String(('Duplicate definition of argument \'')).toString();
                              var t$8 = param;
                              var t$9 = t$8.name;
                              var t$10 = t$9.toString();
                              var t$11 = new sk$String(('\'.')).toString();
                              var t$12 = new sk$String(('')).join(new (sk$Array)([
                                t$7,
                                t$10,
                                t$11
                              ]));
                              t$6 = sk$invariant_violation(t$12);
                            }
                          else
                            t$6 = sk.__.$void;
                          var t$13 = options;
                          var t$14 = flag;
                          var t$15 = param;
                          t$13.add(t$14, t$15);
                          var t$16;
                          var _;
                          var bool;
                          {
                            jumpBlockOuterjumpLab$bg29098:{
                              jumpLab$bg29098:{
                                jumpLab$bg29097:{
                                  jumpLab$bg29099:{
                                    switch (param.__type_switch_id) {
                                      case 0:
                                        break jumpLab$bg29099;
                                      
                                      default:
                                        _ = param;
                                        break jumpLab$bg29098;

                                    }
                                  }
                                  if (param.negatable.__value)
                                    {
                                      bool = param;
                                      break jumpLab$bg29097;
                                    }
                                  else
                                    {
                                      _ = param;
                                      break jumpLab$bg29098;
                                    }
                                }
                                {
                                  var t$17 = options;
                                  var t$18 = bool;
                                  var t$19 = t$18.name;
                                  var t$20 = new sk$String(('--no-')).$pl(t$19);
                                  var t$21 = bool;
                                  var t$22 = bool;
                                  var t$23 = t$22.value;
                                  var t$24 = t$23.$bg();
                                  var t$25 = ((() => 
                                  {
                                    var _tmp546 = t$21.__copy();
                                    _tmp546.value = t$24;
                                    return _tmp546;
                                  })());
                                  t$17.add(t$20, t$25);
                                  var t$26 = options;
                                  var t$27 = bool;
                                  var t$28 = t$27.name;
                                  var t$29 = new sk$String(('--no')).$pl(t$28);
                                  var t$30 = bool;
                                  var t$31 = bool;
                                  var t$32 = t$31.value;
                                  var t$33 = t$32.$bg();
                                  var t$34 = ((() => 
                                  {
                                    var _tmp547 = t$30.__copy();
                                    _tmp547.value = t$33;
                                    return _tmp547;
                                  })());
                                  t$16 = t$26.add(t$29, t$34);
                                }
                                break jumpBlockOuterjumpLab$bg29098;
                              }
                              t$16 = sk.__.$void;
                              break jumpBlockOuterjumpLab$bg29098;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg29103;
                      }
                    }
                    break dowhile_cond$bg28935;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg28933;
                break jumpBlockOuterdowhile_cond$bg28935;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg28934;
      }
      {}
      break jumpBlockOuterbreak$bg28934;
    }
  }
  var t$35 = sk$Map.mcreateFromItems(new (sk$Array)([]));
  var argumentValues = t$35;
  var rest = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var unknown = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$36 = argv;
  var iterator = t$36.values();
  var hasRest = new sk$Bool((false));
  var break_val;
  {
    jumpBlockOuterbreak$bg28975:{
      break$bg28975:{
        do
          {
            jumpBlockOutercontinue$bg28976:{
              continue$bg28976:{
                {
                  var t$37 = iterator;
                  var var3 = t$37.next();
                  var str;
                  var str1;
                  {
                    jumpBlockOuterjumpLab$bg29133:{
                      jumpLab$bg29133:{
                        jumpLab$bg29132:{
                          jumpLab$bg29131:{
                            jumpLab$bg29130:{
                              jumpLab$bg29135:{
                                switch (var3.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg29130;
                                  
                                  case 205:
                                    str1 = var3.value;
                                    var var4 = new sk$Bool((false));
                                    var4 = hasRest;
                                    if (var4.__value)
                                      break jumpLab$bg29131;
                                    else
                                      break jumpLab$bg29135;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var _tmp548 = var3.value.__getSwitchValue();
                                switch (_tmp548) {
                                  case '--':
                                    break jumpLab$bg29132;
                                  
                                  default:
                                    {
                                      str = var3.value;
                                      break jumpLab$bg29133;
                                    }

                                }
                              }
                            }
                            {
                              break_val = sk.__.$void;
                              break break$bg28975;
                            }
                          }
                          {
                            var t$38 = rest;
                            var t$39 = str1;
                            t$38.push(t$39);
                          }
                          break jumpBlockOuterjumpLab$bg29133;
                        }
                        hasRest = new sk$Bool((true));
                        break jumpBlockOuterjumpLab$bg29133;
                      }
                      {
                        var t$40 = options;
                        var t$41 = str;
                        var var5 = t$40.maybeGet(t$41);
                        var _1;
                        var name;
                        var validate;
                        var name1;
                        var value;
                        var validate1;
                        var name2;
                        var name3;
                        var validate2;
                        {
                          jumpBlockOuterjumpLab$bg29126:{
                            jumpLab$bg29126:{
                              jumpLab$bg29125:{
                                jumpLab$bg29124:{
                                  jumpLab$bg29123:{
                                    jumpLab$bg29122:{
                                      jumpLab$bg29127:{
                                        switch (var5.__type_switch_id) {
                                          case 205:
                                            break jumpLab$bg29127;
                                          
                                          default:
                                            _1 = var5;
                                            break jumpLab$bg29126;

                                        }
                                      }
                                      switch (var5.value.__type_switch_id) {
                                        case 0:
                                          name3 = var5.value.name;
                                          value = var5.value.value;
                                          break jumpLab$bg29122;
                                        
                                        case 1:
                                          name2 = var5.value.name;
                                          validate = var5.value.validate;
                                          break jumpLab$bg29123;
                                        
                                        case 3:
                                          name1 = var5.value.name;
                                          validate1 = var5.value.validate;
                                          break jumpLab$bg29124;
                                        
                                        case 2:
                                          name = var5.value.name;
                                          validate2 = var5.value.validate;
                                          break jumpLab$bg29125;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var t$42 = argumentValues;
                                      var t$43 = name3;
                                      var t$44 = name3;
                                      var t$45 = value;
                                      var t$46 = new (sk$ArgumentParser$dtBoolValue)({
                                        name: t$44,
                                        value: t$45
                                      });
                                      t$42.set(t$43, t$46);
                                    }
                                    break jumpBlockOuterjumpLab$bg29126;
                                  }
                                  {
                                    var t$47 = name2;
                                    var t$48 = validate;
                                    var validation = sk$ArgumentParser$dtliftValidation(t$47, t$48);
                                    var t$49 = name2;
                                    var t$50 = iterator;
                                    var t$51 = sk$ArgumentParser$dtreadInt(t$49, t$50);
                                    var t$52 = validation;
                                    var t$53;
                                    var var6 = t$51.flatMap(t$52);
                                    var exn;
                                    var intValue;
                                    {
                                      jumpBlockOuterjumpLab$bg29107:{
                                        jumpLab$bg29107:{
                                          jumpLab$bg29106:{
                                            switch (var6.__type_switch_id) {
                                              case 259:
                                                intValue = var6.value;
                                                break jumpLab$bg29106;
                                              
                                              case 258:
                                                exn = var6.error;
                                                break jumpLab$bg29107;
                                              
                                              default:
                                                skip.throwException(sk, new Error('Unmatched Branch'));

                                            }
                                          }
                                          {
                                            var t$54 = argumentValues;
                                            var t$55 = name2;
                                            var t$56 = name2;
                                            var t$57 = intValue;
                                            var t$58 = new (sk$ArgumentParser$dtIntValue)({
                                              name: t$56,
                                              value: t$57
                                            });
                                            t$53 = t$54.set(t$55, t$58);
                                          }
                                          break jumpBlockOuterjumpLab$bg29107;
                                        }
                                        {
                                          var t$59 = exn;
                                          return new (sk$Failure)(t$59);
                                        }
                                      }
                                    }
                                  }
                                  break jumpBlockOuterjumpLab$bg29126;
                                }
                                {
                                  var t$60 = name1;
                                  var t$61 = validate1;
                                  var validation1 = sk$ArgumentParser$dtliftValidation(t$60, t$61);
                                  var t$62 = name1;
                                  var t$63 = iterator;
                                  var t$64 = sk$ArgumentParser$dtreadString(t$62, t$63);
                                  var t$65 = validation1;
                                  var t$66;
                                  var var7 = t$64.flatMap(t$65);
                                  var exn1;
                                  var stringValue;
                                  {
                                    jumpBlockOuterjumpLab$bg29111:{
                                      jumpLab$bg29111:{
                                        jumpLab$bg29110:{
                                          switch (var7.__type_switch_id) {
                                            case 259:
                                              stringValue = var7.value;
                                              break jumpLab$bg29110;
                                            
                                            case 258:
                                              exn1 = var7.error;
                                              break jumpLab$bg29111;
                                            
                                            default:
                                              skip.throwException(sk, new Error('Unmatched Branch'));

                                          }
                                        }
                                        {
                                          var t$67 = argumentValues;
                                          var t$68 = name1;
                                          var t$69 = name1;
                                          var t$70 = stringValue;
                                          var t$71 = new (sk$ArgumentParser$dtStringValue)({
                                            name: t$69,
                                            value: t$70
                                          });
                                          t$66 = t$67.set(t$68, t$71);
                                        }
                                        break jumpBlockOuterjumpLab$bg29111;
                                      }
                                      {
                                        var t$72 = exn1;
                                        return new (sk$Failure)(t$72);
                                      }
                                    }
                                  }
                                }
                                break jumpBlockOuterjumpLab$bg29126;
                              }
                              {
                                var t$73 = argumentValues;
                                var t$74 = name;
                                var var8 = t$73.getOrAdd(t$74, (() => 
                                {
                                  var t$75 = name;
                                  var t$76 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
                                  return new (sk$ArgumentParser$dtStringArrayValue)({
                                    name: t$75,
                                    value: t$76
                                  });
                                }));
                                var value1;
                                var value2;
                                {
                                  jumpBlockOuterjumpLab$bg29119:{
                                    jumpLab$bg29119:{
                                      jumpLab$bg29118:{
                                        switch (var8.__type_switch_id) {
                                          case 8:
                                            value1 = var8.value;
                                            break jumpLab$bg29118;
                                          
                                          default:
                                            value2 = var8;
                                            break jumpLab$bg29119;

                                        }
                                      }
                                      {
                                        var t$77 = name;
                                        var t$78 = validate2;
                                        var validation2 = sk$ArgumentParser$dtliftValidation(t$77, t$78);
                                        var t$79 = name;
                                        var t$80 = iterator;
                                        var t$81 = sk$ArgumentParser$dtreadString(t$79, t$80);
                                        var t$82 = validation2;
                                        var t$83;
                                        var var9 = t$81.flatMap(t$82);
                                        var exn2;
                                        var stringValue1;
                                        {
                                          jumpBlockOuterjumpLab$bg29115:{
                                            jumpLab$bg29115:{
                                              jumpLab$bg29114:{
                                                switch (var9.__type_switch_id) {
                                                  case 259:
                                                    stringValue1 = var9.value;
                                                    break jumpLab$bg29114;
                                                  
                                                  case 258:
                                                    exn2 = var9.error;
                                                    break jumpLab$bg29115;
                                                  
                                                  default:
                                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                                }
                                              }
                                              {
                                                var t$84 = value1;
                                                var t$85 = stringValue1;
                                                t$83 = t$84.push(t$85);
                                              }
                                              break jumpBlockOuterjumpLab$bg29115;
                                            }
                                            {
                                              var t$86 = exn2;
                                              return new (sk$Failure)(t$86);
                                            }
                                          }
                                        }
                                      }
                                      break jumpBlockOuterjumpLab$bg29119;
                                    }
                                    {
                                      var t$87 = name;
                                      var t$88 = new sk$String(('Expected a list of strings, got \'')).toString();
                                      var t$89 = value2;
                                      var t$90 = t$89.toString();
                                      var t$91 = new sk$String(('\'')).toString();
                                      var t$92 = new sk$String(('')).join(new (sk$Array)([
                                        t$88,
                                        t$90,
                                        t$91
                                      ]));
                                      var t$93 = new (sk$ArgumentParser$dtInvalidValueError)(t$87, t$92);
                                      return new (sk$Failure)(t$93);
                                    }
                                  }
                                }
                              }
                              break jumpBlockOuterjumpLab$bg29126;
                            }
                            {
                              var t$94 = unknown;
                              var t$95 = str;
                              t$94.push(t$95);
                            }
                            break jumpBlockOuterjumpLab$bg29126;
                          }
                        }
                      }
                      break jumpBlockOuterjumpLab$bg29133;
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg28976;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg28975;
    }
  }
  var t$96 = schema;
  var var10 = t$96.values();
  var var11 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg29041:{
      break$bg29041:{
        dowhile_else$bg29040:{
          do
            {
              jumpBlockOuterdowhile_cond$bg29042:{
                dowhile_cond$bg29042:{
                  {
                    var t$97 = var10;
                    var var12 = t$97.next();
                    var param1;
                    {
                      jumpBlockOuterjumpLab$bg29153:{
                        jumpLab$bg29153:{
                          jumpLab$bg29152:{
                            switch (var12.__type_switch_id) {
                              case 204:
                                break jumpLab$bg29152;
                              
                              case 205:
                                param1 = var12.value;
                                break jumpLab$bg29153;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var11 = new sk$Bool((false));
                            break dowhile_cond$bg29042;
                          }
                        }
                        {
                          var t$98 = argumentValues;
                          var t$99 = param1;
                          var t$100 = t$99.name;
                          var t$101;
                          if (t$98.containsKey(t$100).__value)
                            break dowhile_cond$bg29042;
                          else
                            t$101 = sk.__.$void;
                          var name4;
                          var required;
                          var required1;
                          var name5;
                          var $default;
                          var default1;
                          var name6;
                          var required2;
                          var name7;
                          var default2;
                          {
                            jumpBlockOuterjumpLab$bg29149:{
                              jumpLab$bg29149:{
                                jumpLab$bg29148:{
                                  jumpLab$bg29147:{
                                    jumpLab$bg29146:{
                                      switch (param1.__type_switch_id) {
                                        case 0:
                                          name7 = param1.name;
                                          break jumpLab$bg29146;
                                        
                                        case 1:
                                          default1 = param1.$default;
                                          name6 = param1.name;
                                          required2 = param1.required;
                                          break jumpLab$bg29147;
                                        
                                        case 3:
                                          $default = param1.$default;
                                          name5 = param1.name;
                                          required1 = param1.required;
                                          break jumpLab$bg29148;
                                        
                                        case 2:
                                          default2 = param1.$default;
                                          name4 = param1.name;
                                          required = param1.required;
                                          break jumpLab$bg29149;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var t$102 = argumentValues;
                                      var t$103 = name7;
                                      var t$104 = name7;
                                      var t$105 = param1;
                                      var t$106 = new (sk$ArgumentParser$dtMissingValue)({
                                        name: t$104,
                                        param: t$105
                                      });
                                      t$102.set(t$103, t$106);
                                    }
                                    break jumpBlockOuterjumpLab$bg29149;
                                  }
                                  if (required2.__value)
                                    {
                                      var t$107 = name6;
                                      var t$108 = new (sk$ArgumentParser$dtMissingValueError)(t$107);
                                      return new (sk$Failure)(t$108);
                                    }
                                  else
                                    {
                                      var value3;
                                      var _2;
                                      {
                                        jumpBlockOuterjumpLab$bg29138:{
                                          jumpLab$bg29138:{
                                            jumpLab$bg29137:{
                                              switch (default1.__type_switch_id) {
                                                case 205:
                                                  value3 = default1.value;
                                                  break jumpLab$bg29137;
                                                
                                                default:
                                                  _2 = default1;
                                                  break jumpLab$bg29138;

                                              }
                                            }
                                            {
                                              var t$109 = argumentValues;
                                              var t$110 = name6;
                                              var t$111 = name6;
                                              var t$112 = value3;
                                              var t$113 = new (sk$ArgumentParser$dtIntValue)({
                                                name: t$111,
                                                value: t$112
                                              });
                                              t$109.set(t$110, t$113);
                                            }
                                            break jumpBlockOuterjumpLab$bg29138;
                                          }
                                          {
                                            var t$114 = argumentValues;
                                            var t$115 = name6;
                                            var t$116 = name6;
                                            var t$117 = param1;
                                            var t$118 = new (sk$ArgumentParser$dtMissingValue)({
                                              name: t$116,
                                              param: t$117
                                            });
                                            t$114.set(t$115, t$118);
                                          }
                                          break jumpBlockOuterjumpLab$bg29138;
                                        }
                                      }
                                    }
                                  break jumpBlockOuterjumpLab$bg29149;
                                }
                                if (required1.__value)
                                  {
                                    var t$119 = name5;
                                    var t$120 = new (sk$ArgumentParser$dtMissingValueError)(t$119);
                                    return new (sk$Failure)(t$120);
                                  }
                                else
                                  {
                                    var value4;
                                    var _3;
                                    {
                                      jumpBlockOuterjumpLab$bg29141:{
                                        jumpLab$bg29141:{
                                          jumpLab$bg29140:{
                                            switch ($default.__type_switch_id) {
                                              case 205:
                                                value4 = $default.value;
                                                break jumpLab$bg29140;
                                              
                                              default:
                                                _3 = $default;
                                                break jumpLab$bg29141;

                                            }
                                          }
                                          {
                                            var t$121 = argumentValues;
                                            var t$122 = name5;
                                            var t$123 = name5;
                                            var t$124 = value4;
                                            var t$125 = new (sk$ArgumentParser$dtStringValue)({
                                              name: t$123,
                                              value: t$124
                                            });
                                            t$121.set(t$122, t$125);
                                          }
                                          break jumpBlockOuterjumpLab$bg29141;
                                        }
                                        {
                                          var t$126 = argumentValues;
                                          var t$127 = name5;
                                          var t$128 = name5;
                                          var t$129 = param1;
                                          var t$130 = new (sk$ArgumentParser$dtMissingValue)({
                                            name: t$128,
                                            param: t$129
                                          });
                                          t$126.set(t$127, t$130);
                                        }
                                        break jumpBlockOuterjumpLab$bg29141;
                                      }
                                    }
                                  }
                                break jumpBlockOuterjumpLab$bg29149;
                              }
                              if (required.__value)
                                {
                                  var t$131 = name4;
                                  var t$132 = new (sk$ArgumentParser$dtMissingValueError)(t$131);
                                  return new (sk$Failure)(t$132);
                                }
                              else
                                {
                                  var value5;
                                  var _4;
                                  {
                                    jumpBlockOuterjumpLab$bg29144:{
                                      jumpLab$bg29144:{
                                        jumpLab$bg29143:{
                                          switch (default2.__type_switch_id) {
                                            case 205:
                                              value5 = default2.value;
                                              break jumpLab$bg29143;
                                            
                                            default:
                                              _4 = default2;
                                              break jumpLab$bg29144;

                                          }
                                        }
                                        {
                                          var t$133 = argumentValues;
                                          var t$134 = name4;
                                          var t$135 = name4;
                                          var t$136 = value5;
                                          var t$137 = t$136.clone(undefined);
                                          var t$138 = new (sk$ArgumentParser$dtStringArrayValue)({
                                            name: t$135,
                                            value: t$137
                                          });
                                          t$133.set(t$134, t$138);
                                        }
                                        break jumpBlockOuterjumpLab$bg29144;
                                      }
                                      {
                                        var t$139 = argumentValues;
                                        var t$140 = name4;
                                        var t$141 = name4;
                                        var t$142 = param1;
                                        var t$143 = new (sk$ArgumentParser$dtMissingValue)({
                                          name: t$141,
                                          param: t$142
                                        });
                                        t$139.set(t$140, t$143);
                                      }
                                      break jumpBlockOuterjumpLab$bg29144;
                                    }
                                  }
                                }
                              break jumpBlockOuterjumpLab$bg29149;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg29153;
                      }
                    }
                    break dowhile_cond$bg29042;
                  }
                }
                if (var11.__value)
                  {}
                else
                  break dowhile_else$bg29040;
                break jumpBlockOuterdowhile_cond$bg29042;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg29041;
      }
      {}
      break jumpBlockOuterbreak$bg29041;
    }
  }
  var t$144 = skip.deepFreeze(argumentValues, new Map());
  var t$145 = hasRest;
  var t$146 = skip.deepFreeze(rest, new Map());
  var t$147 = skip.deepFreeze(unknown, new Map());
  var t$148 = new (sk$ArgumentParser$dtParseResult)({
    argumentValues: t$144,
    hasRest: t$145,
    rest: t$146,
    unknown: t$147
  });
  return new (sk$Success)(t$148);
};

var sk$ArgumentParser$dtreadInt = sk.ArgumentParser$dtreadInt = function(name, iterator) {
  var t$ = name;
  var t$1 = iterator;
  var t$2 = sk$ArgumentParser$dtreadString(t$, t$1);
  return t$2.flatMap(((str) => 
  {
    var t$3 = str;
    var $var = t$3.toIntOption();
    var i;
    {
      jumpBlockOuterjumpLab$bg29170:{
        jumpLab$bg29170:{
          jumpLab$bg29169:{
            switch ($var.__type_switch_id) {
              case 205:
                i = $var.value;
                break jumpLab$bg29169;
              
              default:
                break jumpLab$bg29170;

            }
          }
          {
            var t$4 = i;
            return new (sk$Success)(t$4);
          }
        }
        {
          var t$5 = name;
          var t$6 = new sk$String(('Expected an integer, got \'')).toString();
          var t$7 = str;
          var t$8 = t$7.toString();
          var t$9 = new sk$String(('\'')).toString();
          var t$10 = new sk$String(('')).join(new (sk$Array)([
            t$6,
            t$8,
            t$9
          ]));
          var t$11 = new (sk$ArgumentParser$dtInvalidValueError)(t$5, t$10);
          return new (sk$Failure)(t$11);
        }
      }
    }
  }));
};

var sk$ArgumentParser$dtreadString = sk.ArgumentParser$dtreadString = function(name, iterator) {
  var t$ = iterator;
  var $var = t$.next();
  var str;
  {
    jumpBlockOuterjumpLab$bg29178:{
      jumpLab$bg29178:{
        jumpLab$bg29177:{
          switch ($var.__type_switch_id) {
            case 205:
              str = $var.value;
              break jumpLab$bg29177;
            
            case 204:
              break jumpLab$bg29178;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = str;
          return new (sk$Success)(t$1);
        }
      }
      {
        var t$2 = name;
        var t$3 = new (sk$ArgumentParser$dtMissingValueError)(t$2);
        return new (sk$Failure)(t$3);
      }
    }
  }
};

var sk$Arguments$dterror = sk.Arguments$dterror = function(errorMessage, usageMessage) {
  var t$ = errorMessage;
  sk$print_raw(t$);
  var t$1 = usageMessage;
  sk$Arguments$dtusage(t$1);
  return sk$SkipError$dtfail();
};

var sk$Arguments$dtexpectedArgument = sk.Arguments$dtexpectedArgument = function(optionName, usageMessage) {
  var t$ = optionName;
  var t$1 = new sk$String(('Error: option \'')).$pl(t$);
  var t$2 = t$1.$pl(new sk$String(('\' needs an argument.\n')));
  var t$3 = usageMessage;
  return sk$Arguments$dterror(t$2, t$3);
};

var sk$Arguments$dtexpectedBoolArgument = sk.Arguments$dtexpectedBoolArgument = function(optionName, usageMessage) {
  var t$ = optionName;
  var t$1 = new sk$String(('Error: option \'')).$pl(t$);
  var t$2 = t$1.$pl(new sk$String(('\' needs an argument of either \'true\' or \'false\'.\n')));
  var t$3 = usageMessage;
  return sk$Arguments$dterror(t$2, t$3);
};

var sk$Arguments$dthelp = sk.Arguments$dthelp = function(usageMessage) {
  var t$ = usageMessage;
  sk$Arguments$dtusage(t$);
  return sk$SkipError$dtfail();
};

var sk$Arguments$dtparse = sk.Arguments$dtparse = function(acc, specs, usageMessage) {
  var t$ = sk$$arguments();
  var args = sk$List.createFromItems(t$);
  var t$1 = usageMessage;
  var help_message = new (sk$Arguments$dtHelp)(t$1);
  var t$2 = help_message;
  var t$3 = new (sk$Tuple2)(new sk$String(('-help')), t$2);
  var t$4 = help_message;
  var t$5 = new (sk$Tuple2)(new sk$String(('--help')), t$4);
  var t$6 = help_message;
  var t$7 = new (sk$Tuple2)(new sk$String(('-h')), t$6);
  var t$8 = new (sk$Array)([
    t$3,
    t$5,
    t$7
  ]);
  var t$9 = sk$List.createFromItems(t$8);
  var t$10 = specs;
  var t$11 = t$9.concat(t$10);
  var specMap = sk$SortedMap.createFromItems(t$11);
  var t$12 = acc;
  var t$13 = sk$List.createFromItems(new (sk$Array)([]));
  var t$14 = args;
  var t$15 = specMap;
  var t$16 = usageMessage;
  var $var = sk$Arguments$dtparseArgs(t$12, t$13, t$14, t$15, t$16);
  var var1;
  var var2;
  var var3;
  {
    jumpBlockOuterjumpLab$bg29219:{
      jumpLab$bg29219:{
        switch ($var.__type_switch_id) {
          case 393:
            var1 = $var.i0;
            var2 = $var.i1;
            var3 = $var.i2;
            break jumpLab$bg29219;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var extras = var3;
        var files = var2;
        var acc2 = var1;
        var t$17 = acc2;
        var t$18 = files;
        var t$19 = t$18.reversed();
        var t$20 = extras;
        return new (sk$Tuple3)(t$17, t$19, t$20);
      }
    }
  }
};

var sk$Arguments$dtparseArgs = sk.Arguments$dtparseArgs = function(acc, files, args, specs, usageMessage) {
  var doRemainingArgs = ((acc1, files1, remainingArgs) => 
  {
    var t$ = acc1;
    var t$1 = files1;
    var t$2 = remainingArgs;
    var t$3 = specs;
    var t$4 = usageMessage;
    return sk$Arguments$dtparseArgs(t$, t$1, t$2, t$3, t$4);
  });
  var afterArg;
  var arg;
  {
    jumpBlockOuterjumpLab$bg29310:{
      jumpLab$bg29310:{
        jumpLab$bg29309:{
          switch (args.__type_switch_id) {
            case 269:
              break jumpLab$bg29309;
            
            case 268:
              arg = args.head;
              afterArg = args.tail;
              break jumpLab$bg29310;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$5 = acc;
          var t$6 = files;
          var t$7 = sk$List.createFromItems(new (sk$Array)([]));
          return new (sk$Tuple3)(t$5, t$6, t$7);
        }
      }
      {
        var t$8 = arg;
        if (t$8.$eq$eq(new sk$String(('--'))).__value)
          {
            var t$9 = acc;
            var t$10 = files;
            var t$11 = afterArg;
            return new (sk$Tuple3)(t$9, t$10, t$11);
          }
        else
          {
            var t$12 = specs;
            var t$13 = arg;
            if (t$12.containsKey(t$13).__value)
              {
                var t$14 = specs;
                var t$15 = arg;
                var $var = t$14.get(t$15);
                var f;
                var f1;
                var f2;
                var usage_message;
                {
                  jumpBlockOuterjumpLab$bg29307:{
                    jumpLab$bg29307:{
                      jumpLab$bg29306:{
                        jumpLab$bg29305:{
                          jumpLab$bg29304:{
                            switch ($var.__type_switch_id) {
                              case 12:
                                f2 = $var.f;
                                break jumpLab$bg29304;
                              
                              case 11:
                                f1 = $var.f;
                                break jumpLab$bg29305;
                              
                              case 13:
                                f = $var.f;
                                break jumpLab$bg29306;
                              
                              case 10:
                                usage_message = $var.$atparam0;
                                break jumpLab$bg29307;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var afterValue;
                            var value;
                            {
                              jumpBlockOuterjumpLab$bg29295:{
                                jumpLab$bg29295:{
                                  jumpLab$bg29294:{
                                    switch (afterArg.__type_switch_id) {
                                      case 269:
                                        break jumpLab$bg29294;
                                      
                                      case 268:
                                        value = afterArg.head;
                                        afterValue = afterArg.tail;
                                        break jumpLab$bg29295;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var t$16 = arg;
                                    var t$17 = usageMessage;
                                    sk$Arguments$dtexpectedArgument(t$16, t$17);
                                    var t$18 = acc;
                                    var t$19 = files;
                                    var t$20 = sk$List.createFromItems(new (sk$Array)([]));
                                    return new (sk$Tuple3)(t$18, t$19, t$20);
                                  }
                                }
                                {
                                  var t$21 = f2;
                                  var t$22 = acc;
                                  var t$23 = value;
                                  var acc2 = t$21(t$22, t$23);
                                  var t$24 = doRemainingArgs;
                                  var t$25 = acc2;
                                  var t$26 = files;
                                  var t$27 = afterValue;
                                  return t$24(t$25, t$26, t$27);
                                }
                              }
                            }
                          }
                        }
                        {
                          var afterValue1;
                          var afterValue2;
                          {
                            jumpBlockOuterjumpLab$bg29300:{
                              jumpLab$bg29300:{
                                jumpLab$bg29299:{
                                  jumpLab$bg29298:{
                                    jumpLab$bg29297:{
                                      jumpLab$bg29301:{
                                        switch (afterArg.__type_switch_id) {
                                          case 269:
                                            break jumpLab$bg29297;
                                          
                                          case 268:
                                            break jumpLab$bg29301;
                                          
                                          default:
                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                        }
                                      }
                                      {
                                        var _tmp549 = afterArg.head.__getSwitchValue();
                                        switch (_tmp549) {
                                          case 'true':
                                            {
                                              afterValue2 = afterArg.tail;
                                              break jumpLab$bg29298;
                                            }
                                          
                                          case 'false':
                                            {
                                              afterValue1 = afterArg.tail;
                                              break jumpLab$bg29299;
                                            }
                                          
                                          default:
                                            break jumpLab$bg29300;

                                        }
                                      }
                                    }
                                    {
                                      var t$28 = arg;
                                      var t$29 = usageMessage;
                                      sk$Arguments$dtexpectedArgument(t$28, t$29);
                                      var t$30 = acc;
                                      var t$31 = files;
                                      var t$32 = sk$List.createFromItems(new (sk$Array)([]));
                                      return new (sk$Tuple3)(t$30, t$31, t$32);
                                    }
                                  }
                                  {
                                    var t$33 = f1;
                                    var t$34 = acc;
                                    var acc21 = t$33(t$34, new sk$Bool((true)));
                                    var t$35 = doRemainingArgs;
                                    var t$36 = acc21;
                                    var t$37 = files;
                                    var t$38 = afterValue2;
                                    return t$35(t$36, t$37, t$38);
                                  }
                                }
                                {
                                  var t$39 = f1;
                                  var t$40 = acc;
                                  var acc22 = t$39(t$40, new sk$Bool((false)));
                                  var t$41 = doRemainingArgs;
                                  var t$42 = acc22;
                                  var t$43 = files;
                                  var t$44 = afterValue1;
                                  return t$41(t$42, t$43, t$44);
                                }
                              }
                              {
                                var t$45 = arg;
                                var t$46 = usageMessage;
                                sk$Arguments$dtexpectedBoolArgument(t$45, t$46);
                                var t$47 = acc;
                                var t$48 = files;
                                var t$49 = sk$List.createFromItems(new (sk$Array)([]));
                                return new (sk$Tuple3)(t$47, t$48, t$49);
                              }
                            }
                          }
                        }
                      }
                      {
                        var t$50 = f;
                        var t$51 = acc;
                        var acc23 = t$50(t$51);
                        var t$52 = doRemainingArgs;
                        var t$53 = acc23;
                        var t$54 = files;
                        var t$55 = afterArg;
                        return t$52(t$53, t$54, t$55);
                      }
                    }
                    {
                      var t$56 = usage_message;
                      sk$Arguments$dthelp(t$56);
                      var t$57 = acc;
                      var t$58 = files;
                      var t$59 = sk$List.createFromItems(new (sk$Array)([]));
                      return new (sk$Tuple3)(t$57, t$58, t$59);
                    }
                  }
                }
              }
            else
              {
                var t$60 = doRemainingArgs;
                var t$61 = acc;
                var t$62 = arg;
                var t$63 = files;
                var t$64 = new (sk$List$dtCons)(t$62, t$63);
                var t$65 = afterArg;
                return t$60(t$61, t$64, t$65);
              }
          }
      }
    }
  }
};

var sk$Arguments$dtusage = sk.Arguments$dtusage = function(usageMessage) {
  var t$ = usageMessage;
  return sk$print_raw(t$);
};

var sk$Array$dtconcatStringArray = sk.Array$dtconcatStringArray = function(v) {
  var numChars = new sk$Int(0.0, 0.0);
  var t$ = v;
  var t$1 = t$.size();
  var t$2 = new (sk$Range)(new sk$Int(0.0, 0.0), t$1);
  var $var = t$2.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg29319:{
      break$bg29319:{
        dowhile_else$bg29318:{
          do
            {
              jumpBlockOuterdowhile_cond$bg29320:{
                dowhile_cond$bg29320:{
                  {
                    var t$3 = $var;
                    var var2 = t$3.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg29339:{
                        jumpLab$bg29339:{
                          jumpLab$bg29338:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg29338;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg29339;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg29320;
                          }
                        }
                        {
                          var t$4 = numChars;
                          var t$5 = v;
                          var t$6 = i;
                          var t$7 = t$5.get(t$6);
                          var t$8 = t$7.length();
                          numChars = t$4.$pl(t$8);
                        }
                        break jumpBlockOuterjumpLab$bg29339;
                      }
                    }
                    break dowhile_cond$bg29320;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg29318;
                break jumpBlockOuterdowhile_cond$bg29320;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg29319;
      }
      {}
      break jumpBlockOuterbreak$bg29319;
    }
  }
  var t$9 = numChars;
  var buf = sk$Array.mfill(t$9, $makeChar(0));
  var out = new sk$Int(0.0, 0.0);
  var t$10 = v;
  t$10.each(((s) => 
  {
    var t$11 = s;
    return t$11.each(((c) => 
    {
      var t$12 = buf;
      var t$13 = out;
      var t$14 = c;
      t$12.set(t$13, t$14);
      var t$15 = out;
      out = t$15.$pl(new sk$Int(1.0, 0.0));
      return sk.__.$void;
    }));
  }));
  var t$16 = buf;
  return sk$String.fromChars(t$16);
};

var sk$Assert$dtfail = sk.Assert$dtfail = function(range, message) {
  var t$ = range;
  var t$1 = t$.toString();
  var t$2 = message;
  skip.throwException(sk, new (sk$Assert$dtInternalError)(t$1, t$2));
};

var sk$Assert$dtinvariant = sk.Assert$dtinvariant = function(flag, range, message) {
  var t$ = flag;
  if (t$.$bg().__value)
    {
      var t$1 = range;
      var t$2 = message;
      return sk$Assert$dtfail(t$1, t$2);
    }
  else
    return sk.__.$void;
};

var sk$Bencher$dtblackBox = sk.Bencher$dtblackBox = function(dummy) {
  return dummy;
};

var sk$Bencher$dtcomputeStats = sk.Bencher$dtcomputeStats = function(results, keepSamples) {
  var t$ = results;
  var t$1 = sk$Stats$dtmedian(t$);
  var t$2 = t$1.fromSome(undefined);
  var t$3 = t$2.toInt();
  var t$4 = results;
  var t$5 = sk$Stats$dtavg(t$4);
  var t$6 = t$5.fromSome(undefined);
  var t$7 = t$6.toInt();
  var t$8 = results;
  var t$9 = sk$Stats$dtstddev(t$8);
  var t$10 = t$9.fromSome(undefined);
  var t$11 = t$10.toInt();
  var t$12 = results;
  var t$13 = t$12.min();
  var t$14 = t$13.fromSome(undefined);
  var t$15 = results;
  var t$16 = t$15.max();
  var t$17 = t$16.fromSome(undefined);
  var t$18;
  if (keepSamples.__value)
    {
      var t$19 = results;
      t$18 = t$19.collect(sk$Array);
    }
  else
    t$18 = new (sk$Array)([]);
  var t$20 = t$18;
  return new (sk$Bencher$dtBenchmarkStats)({
    average: t$7,
    max: t$17,
    median: t$3,
    min: t$14,
    samples: t$20,
    standardDeviation: t$11
  });
};

var sk$Bencher$dtdisplayStats = sk.Bencher$dtdisplayStats = function(stats) {
  var t$ = new sk$String(('min\t: ')).toString();
  var t$1 = stats;
  var t$2 = t$1.min;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('ns / ')).toString();
  var t$5 = stats;
  var t$6 = t$5.min;
  var t$7 = sk$Bencher$dtnsToMs(t$6);
  var t$8 = t$7.toString();
  var t$9 = new sk$String(('ms')).toString();
  var t$10 = new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4,
    t$8,
    t$9
  ]));
  sk$print_string(t$10);
  var t$11 = new sk$String(('max\t: ')).toString();
  var t$12 = stats;
  var t$13 = t$12.max;
  var t$14 = t$13.toString();
  var t$15 = new sk$String(('ns / ')).toString();
  var t$16 = stats;
  var t$17 = t$16.max;
  var t$18 = sk$Bencher$dtnsToMs(t$17);
  var t$19 = t$18.toString();
  var t$20 = new sk$String(('ms')).toString();
  var t$21 = new sk$String(('')).join(new (sk$Array)([
    t$11,
    t$14,
    t$15,
    t$19,
    t$20
  ]));
  sk$print_string(t$21);
  var t$22 = new sk$String(('median\t: ')).toString();
  var t$23 = stats;
  var t$24 = t$23.median;
  var t$25 = t$24.toString();
  var t$26 = new sk$String(('ns / ')).toString();
  var t$27 = stats;
  var t$28 = t$27.average;
  var t$29 = sk$Bencher$dtnsToMs(t$28);
  var t$30 = t$29.toString();
  var t$31 = new sk$String(('ms')).toString();
  var t$32 = new sk$String(('')).join(new (sk$Array)([
    t$22,
    t$25,
    t$26,
    t$30,
    t$31
  ]));
  sk$print_string(t$32);
  var t$33 = new sk$String(('average\t: ')).toString();
  var t$34 = stats;
  var t$35 = t$34.average;
  var t$36 = t$35.toString();
  var t$37 = new sk$String(('ns / ')).toString();
  var t$38 = stats;
  var t$39 = t$38.average;
  var t$40 = sk$Bencher$dtnsToMs(t$39);
  var t$41 = t$40.toString();
  var t$42 = new sk$String(('ms')).toString();
  var t$43 = new sk$String(('')).join(new (sk$Array)([
    t$33,
    t$36,
    t$37,
    t$41,
    t$42
  ]));
  sk$print_string(t$43);
  var t$44 = new sk$String(('std dev\t: ')).toString();
  var t$45 = stats;
  var t$46 = t$45.standardDeviation;
  var t$47 = t$46.toString();
  var t$48 = new sk$String(('ns / ')).toString();
  var t$49 = stats;
  var t$50 = t$49.standardDeviation;
  var t$51 = sk$Bencher$dtnsToMs(t$50);
  var t$52 = t$51.toString();
  var t$53 = new sk$String(('ms')).toString();
  var t$54 = new sk$String(('')).join(new (sk$Array)([
    t$44,
    t$47,
    t$48,
    t$52,
    t$53
  ]));
  return sk$print_string(t$54);
};

var sk$Bencher$dtdisplayStatsLine = sk.Bencher$dtdisplayStatsLine = function(name, stats) {
  var t$ = name;
  var t$1 = t$.padLeft((sk$Bencher$dtdefaultNameColumns()), undefined);
  sk$print_raw(t$1);
  var t$2 = stats;
  var t$3 = t$2.min;
  var t$4 = t$3.toString();
  var t$5 = t$4;
  var t$6 = t$5.padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$6);
  var t$7 = stats;
  var t$8 = t$7.max;
  var t$9 = t$8.toString();
  var t$10 = t$9;
  var t$11 = t$10.padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$11);
  var t$12 = stats;
  var t$13 = t$12.median;
  var t$14 = t$13.toString();
  var t$15 = t$14;
  var t$16 = t$15.padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$16);
  var t$17 = stats;
  var t$18 = t$17.average;
  var t$19 = t$18.toString();
  var t$20 = t$19;
  var t$21 = t$20.padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$21);
  var t$22 = stats;
  var t$23 = t$22.standardDeviation;
  var t$24 = t$23.toString();
  var t$25 = t$24;
  var t$26 = t$25.padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$26);
  return sk$print_raw(new sk$String(('\n')));
};

var sk$Bencher$dtdisplayStatsLineColumns = sk.Bencher$dtdisplayStatsLineColumns = function() {
  var t$ = new sk$String(('name')).padLeft((sk$Bencher$dtdefaultNameColumns()), undefined);
  sk$print_raw(t$);
  var t$1 = new sk$String(('min (ns)')).padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$1);
  var t$2 = new sk$String(('max (ns)')).padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$2);
  var t$3 = new sk$String(('median (ns)')).padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$3);
  var t$4 = new sk$String(('avg (ns)')).padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$4);
  var t$5 = new sk$String(('std dev (ns)')).padLeft((sk$Bencher$dtdefaultStatsColumns()), undefined);
  sk$print_raw(t$5);
  return sk$print_raw(new sk$String(('\n')));
};

var sk$Bencher$dterror = sk.Bencher$dterror = function(reason) {
  var t$ = reason;
  var t$1 = t$.trim();
  sk$print_error_ln(t$1);
  var t$2 = sk$ArgumentParser$dthelp((sk$Bencher$dtschema()));
  sk$print_error(t$2);
  return sk$exit(new sk$Int(1.0, 0.0));
};

var sk$Bencher$dtmain = sk.Bencher$dtmain = function(benchmarks) {
  var $var = sk$Bencher$dtparseArgs();
  var var1;
  var var2;
  {
    jumpBlockOuterjumpLab$bg29519:{
      jumpLab$bg29519:{
        switch ($var.__type_switch_id) {
          case 392:
            var1 = $var.i0;
            var2 = $var.i1;
            break jumpLab$bg29519;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        var outfile = var2;
        var options = var1;
        var t$ = options;
        var t$1 = t$.allowEmpty;
        var t$2;
        if (t$1.$bg().__value)
          {
            var t$3 = benchmarks;
            t$2 = t$3.isEmpty();
          }
        else
          t$2 = new sk$Bool((false));
        if (t$2.__value)
          {
            sk$print_error_ln(new sk$String(('No benchmarks provided: use `--allow-empty` if this is expected.')));
            sk$exit(new sk$Int(2.0, 0.0));
          }
        else
          {}
        var t$4 = options;
        var b = new (sk$Bencher)(t$4);
        var t$5 = benchmarks;
        var t$6 = t$5.map(((benchmark) => 
        {
          var t$7 = options;
          if (t$7.verbose.__value)
            {
              var t$8 = new sk$String(('-- Benchmarking ')).toString();
              var t$9 = benchmark;
              var t$10 = t$9.i0;
              var t$11 = t$10.toString();
              var t$12 = new sk$String((' --')).toString();
              var t$13 = new sk$String(('')).join(new (sk$Array)([
                t$8,
                t$11,
                t$12
              ]));
              sk$print_string(t$13);
            }
          else
            {}
          var t$14 = benchmark;
          var t$15 = t$14.i0;
          var t$16 = benchmark;
          var t$17 = t$16.i1;
          var t$18 = b;
          var t$19 = t$17(t$18);
          return new (sk$Tuple2)(t$15, t$19);
        }));
        var results = t$6.collect(sk$Map);
        var filepath;
        {
          jumpBlockOuterjumpLab$bg29511:{
            jumpLab$bg29511:{
              jumpLab$bg29510:{
                switch (outfile.__type_switch_id) {
                  case 205:
                    filepath = outfile.value;
                    break jumpLab$bg29510;
                  
                  case 204:
                    break jumpLab$bg29511;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$20 = results;
                var t$21 = filepath;
                sk$Bencher$dtwriteResultFile(t$20, t$21);
              }
              break jumpBlockOuterjumpLab$bg29511;
            }
            {}
            break jumpBlockOuterjumpLab$bg29511;
          }
        }
        var t$22 = options;
        if (t$22.displayOutput.__value)
          {
            var t$23 = results;
            var t$24 = t$23.items();
            var t$25 = t$24.collect(sk$Vector);
            var t$26 = t$25.sortedBy(((entry) => 
            {
              var t$27 = entry;
              var t$28 = t$27.i1;
              return t$28.min;
            }), undefined);
            var sortedResults = t$26.collect(sk$Map);
            sk$Bencher$dtdisplayStatsLineColumns();
            var t$29 = sortedResults;
            var var3 = t$29.items();
            var var4 = new sk$Bool((true));
            var break_val;
            {
              jumpBlockOuterbreak$bg29503:{
                break$bg29503:{
                  dowhile_else$bg29502:{
                    do
                      {
                        jumpBlockOuterdowhile_cond$bg29504:{
                          dowhile_cond$bg29504:{
                            {
                              var t$30 = var3;
                              var var5 = t$30.next();
                              var stats;
                              var name;
                              {
                                jumpBlockOuterjumpLab$bg29515:{
                                  jumpLab$bg29515:{
                                    jumpLab$bg29514:{
                                      jumpLab$bg29516:{
                                        switch (var5.__type_switch_id) {
                                          case 204:
                                            break jumpLab$bg29514;
                                          
                                          case 205:
                                            break jumpLab$bg29516;
                                          
                                          default:
                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                        }
                                      }
                                      switch (var5.value.__type_switch_id) {
                                        case 392:
                                          name = var5.value.i0;
                                          stats = var5.value.i1;
                                          break jumpLab$bg29515;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var4 = new sk$Bool((false));
                                      break dowhile_cond$bg29504;
                                    }
                                  }
                                  {
                                    var t$31 = name;
                                    var t$32 = stats;
                                    sk$Bencher$dtdisplayStatsLine(t$31, t$32);
                                  }
                                  break jumpBlockOuterjumpLab$bg29515;
                                }
                              }
                              break dowhile_cond$bg29504;
                            }
                          }
                          if (var4.__value)
                            {}
                          else
                            break dowhile_else$bg29502;
                          break jumpBlockOuterdowhile_cond$bg29504;
                        }
                      }
                    while (true);
                  }
                  break_val = sk.__.$void;
                  break jumpBlockOuterbreak$bg29503;
                }
                {}
                break jumpBlockOuterbreak$bg29503;
              }
            }
            return break_val;
          }
        else
          return sk.__.$void;
      }
    }
  }
};

var sk$Bencher$dtnsToMs = sk.Bencher$dtnsToMs = function(ns) {
  var t$ = ns;
  var t$1 = t$.toFloat();
  return t$1.$ti(new sk$Float((9.9999999999999995e-07)));
};

var sk$Bencher$dtparseArgs = sk.Bencher$dtparseArgs = function() {
  var t$ = sk$$arguments();
  var $var = sk$ArgumentParser$dtparse((sk$Bencher$dtschema()), t$);
  var exn;
  var results;
  {
    jumpBlockOuterjumpLab$bg29553:{
      jumpLab$bg29553:{
        jumpLab$bg29552:{
          switch ($var.__type_switch_id) {
            case 259:
              results = $var.value;
              break jumpLab$bg29552;
            
            case 258:
              exn = $var.error;
              break jumpLab$bg29553;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = results;
          if (t$1.getBool(new sk$String(('help'))).__value)
            {
              var t$2 = sk$ArgumentParser$dthelp((sk$Bencher$dtschema()));
              sk$print_string(t$2);
              sk$exit(new sk$Int(0.0, 0.0));
            }
          else
            {}
          var t$3 = results;
          var allowEmpty = t$3.getBool(new sk$String(('allow-empty')));
          var t$4 = results;
          var minIterations = t$4.getInt(new sk$String(('min-iterations')));
          var t$5 = results;
          var displayOutput = t$5.getBool(new sk$String(('display-output')));
          var t$6 = results;
          var keepSamples = t$6.getBool(new sk$String(('keep-samples')));
          var t$7 = results;
          var maybeOutfile = t$7.maybeGetString(new sk$String(('output')));
          var t$8 = results;
          var itersPerGc = t$8.getInt(new sk$String(('iters-per-gc')));
          var t$9 = results;
          var verbose = t$9.getBool(new sk$String(('verbose')));
          var t$10;
          if (keepSamples.__value)
            {
              var t$11;
              {
                jumpBlockOuterjumpLab$bg29549:{
                  jumpLab$bg29549:{
                    jumpLab$bg29548:{
                      switch (maybeOutfile.__type_switch_id) {
                        case 204:
                          break jumpLab$bg29548;
                        
                        default:
                          break jumpLab$bg29549;

                      }
                    }
                    t$11 = new sk$Bool((true));
                    break jumpBlockOuterjumpLab$bg29549;
                  }
                  t$11 = new sk$Bool((false));
                  break jumpBlockOuterjumpLab$bg29549;
                }
              }
              t$10 = t$11;
            }
          else
            t$10 = new sk$Bool((false));
          if (t$10.__value)
            sk$Bencher$dterror(new sk$String(('\'--keep-samples\' may only be used when writing results with \'--output <file>\'')));
          else
            {}
          var t$12 = allowEmpty;
          var t$13 = minIterations;
          var t$14 = itersPerGc;
          var t$15 = displayOutput;
          var t$16 = keepSamples;
          var t$17 = verbose;
          var t$18 = new (sk$Bencher$dtOptions)({
            allowEmpty: t$12,
            displayOutput: t$15,
            itersPerGc: t$14,
            keepSamples: t$16,
            minIterations: t$13,
            verbose: t$17
          });
          var t$19 = maybeOutfile;
          return new (sk$Tuple2)(t$18, t$19);
        }
      }
      {
        var t$20 = exn;
        var t$21 = t$20.getMessage();
        return sk$Bencher$dterror(t$21);
      }
    }
  }
};

var sk$Bencher$dtwriteResultFile = sk.Bencher$dtwriteResultFile = function(results, filepath) {
  var t$ = filepath;
  var t$1 = results;
  var t$2 = sk$Map.meta(sk$String.meta, sk$Bencher$dtBenchmarkStats.meta);
  var t$3;
  var $var = sk$JSON$dtserialize(t$1, t$2, undefined);
  var result;
  var error;
  {
    jumpBlockOuterjumpLab$bg29563:{
      jumpLab$bg29563:{
        jumpLab$bg29562:{
          switch ($var.__type_switch_id) {
            case 259:
              result = $var.value;
              break jumpLab$bg29562;
            
            case 258:
              error = $var.error;
              break jumpLab$bg29563;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        t$3 = result;
        break jumpBlockOuterjumpLab$bg29563;
      }
      skip.throwException(sk, error);
    }
  }
  var t$4 = t$3;
  return sk$FileSystem$dtwriteTextFile(t$, t$4);
};

var sk$Chars$dtfromSurrogatePair = sk.Chars$dtfromSurrogatePair = function(highCode, lowCode) {
  var t$ = highCode;
  var t$1 = sk$Chars$dtisHighSurrogate(t$);
  sk$invariant(t$1, new sk$String(('Expected high surrogate')));
  var t$2 = lowCode;
  var t$3 = sk$Chars$dtisLowSurrogate(t$2);
  sk$invariant(t$3, new sk$String(('Expected low surrogate')));
  var t$4 = highCode;
  var t$5 = t$4.$mi(new sk$Int(55296.0, 0.0));
  var t$6 = t$5.shl(new sk$Int(10.0, 0.0));
  var t$7 = new sk$Int(65536.0, 0.0).$pl(t$6);
  var t$8 = lowCode;
  var t$9 = t$8.$mi(new sk$Int(56320.0, 0.0));
  var t$10 = t$7.$pl(t$9);
  return sk$Char.fromCode(t$10);
};

var sk$Chars$dthexDigitToInt = sk.Chars$dthexDigitToInt = function(digit) {
  jumpBlockOuterjumpLab$bg29600:{
    jumpLab$bg29600:{
      jumpLab$bg29599:{
        jumpLab$bg29598:{
          jumpLab$bg29597:{
            jumpLab$bg29596:{
              jumpLab$bg29595:{
                jumpLab$bg29594:{
                  jumpLab$bg29593:{
                    jumpLab$bg29592:{
                      jumpLab$bg29591:{
                        jumpLab$bg29590:{
                          jumpLab$bg29589:{
                            jumpLab$bg29588:{
                              jumpLab$bg29587:{
                                jumpLab$bg29586:{
                                  jumpLab$bg29585:{
                                    jumpLab$bg29584:{
                                      jumpLab$bg29583:{
                                        jumpLab$bg29582:{
                                          jumpLab$bg29581:{
                                            jumpLab$bg29580:{
                                              jumpLab$bg29579:{
                                                jumpLab$bg29578:{
                                                  {
                                                    var _tmp550 = digit.__getSwitchValue();
                                                    switch (_tmp550) {
                                                      case 48:
                                                        break jumpLab$bg29578;
                                                      
                                                      case 49:
                                                        break jumpLab$bg29579;
                                                      
                                                      case 50:
                                                        break jumpLab$bg29580;
                                                      
                                                      case 51:
                                                        break jumpLab$bg29581;
                                                      
                                                      case 52:
                                                        break jumpLab$bg29582;
                                                      
                                                      case 53:
                                                        break jumpLab$bg29583;
                                                      
                                                      case 54:
                                                        break jumpLab$bg29584;
                                                      
                                                      case 55:
                                                        break jumpLab$bg29585;
                                                      
                                                      case 56:
                                                        break jumpLab$bg29586;
                                                      
                                                      case 57:
                                                        break jumpLab$bg29587;
                                                      
                                                      case 97:
                                                        break jumpLab$bg29588;
                                                      
                                                      case 98:
                                                        break jumpLab$bg29589;
                                                      
                                                      case 99:
                                                        break jumpLab$bg29590;
                                                      
                                                      case 100:
                                                        break jumpLab$bg29591;
                                                      
                                                      case 101:
                                                        break jumpLab$bg29592;
                                                      
                                                      case 102:
                                                        break jumpLab$bg29593;
                                                      
                                                      case 65:
                                                        break jumpLab$bg29594;
                                                      
                                                      case 66:
                                                        break jumpLab$bg29595;
                                                      
                                                      case 67:
                                                        break jumpLab$bg29596;
                                                      
                                                      case 68:
                                                        break jumpLab$bg29597;
                                                      
                                                      case 69:
                                                        break jumpLab$bg29598;
                                                      
                                                      case 70:
                                                        break jumpLab$bg29599;
                                                      
                                                      default:
                                                        break jumpLab$bg29600;

                                                    }
                                                  }
                                                }
                                                return new sk$Int(0.0, 0.0);
                                              }
                                              return new sk$Int(1.0, 0.0);
                                            }
                                            return new sk$Int(2.0, 0.0);
                                          }
                                          return new sk$Int(3.0, 0.0);
                                        }
                                        return new sk$Int(4.0, 0.0);
                                      }
                                      return new sk$Int(5.0, 0.0);
                                    }
                                    return new sk$Int(6.0, 0.0);
                                  }
                                  return new sk$Int(7.0, 0.0);
                                }
                                return new sk$Int(8.0, 0.0);
                              }
                              return new sk$Int(9.0, 0.0);
                            }
                            return new sk$Int(10.0, 0.0);
                          }
                          return new sk$Int(11.0, 0.0);
                        }
                        return new sk$Int(12.0, 0.0);
                      }
                      return new sk$Int(13.0, 0.0);
                    }
                    return new sk$Int(14.0, 0.0);
                  }
                  return new sk$Int(15.0, 0.0);
                }
                return new sk$Int(10.0, 0.0);
              }
              return new sk$Int(11.0, 0.0);
            }
            return new sk$Int(12.0, 0.0);
          }
          return new sk$Int(13.0, 0.0);
        }
        return new sk$Int(14.0, 0.0);
      }
      return new sk$Int(15.0, 0.0);
    }
    return sk$invariant_violation(new sk$String(('Unexpected hex digit')));
  }
};

var sk$Chars$dthexDigitsToInt = sk.Chars$dthexDigitsToInt = function(digits) {
  var t$ = digits;
  return t$.foldl(((current, digit) => 
  {
    var t$1 = current;
    var t$2 = t$1.$ti(new sk$Int(16.0, 0.0));
    var t$3 = digit;
    var t$4 = sk$Chars$dthexDigitToInt(t$3);
    return t$2.$pl(t$4);
  }), new sk$Int(0.0, 0.0));
};

var sk$Chars$dtintToHexDigit = sk.Chars$dtintToHexDigit = function(value) {
  var t$ = value;
  return (sk$Chars$dthexDigitChars()).get(t$);
};

var sk$Chars$dtintToHexDigits = sk.Chars$dtintToHexDigits = function(n, numDigits) {
  var t$ = numDigits;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$1 = n;
      var t$2 = t$1.$eq$eq(new sk$Int(0.0, 0.0));
      sk$invariant(t$2, new sk$String(('intToHexDigits - not enough digits for value')));
      return new sk$String((''));
    }
  else
    {
      var t$3 = n;
      var loBits = t$3.and(new sk$Int(15.0, 0.0));
      var t$4 = loBits;
      var ch = sk$Chars$dtintToHexDigit(t$4);
      var t$5 = n;
      var t$6 = t$5.shr(new sk$Int(4.0, 0.0));
      var t$7 = numDigits;
      var t$8 = t$7.$mi(new sk$Int(1.0, 0.0));
      var t$9 = sk$Chars$dtintToHexDigits(t$6, t$8);
      var t$10 = ch;
      return t$9.$pl(t$10);
    }
};

var sk$Chars$dtisBasicMultiLingualPlane = sk.Chars$dtisBasicMultiLingualPlane = function(ch) {
  var t$ = ch;
  var t$1 = t$.code();
  return t$1.$lt(new sk$Int(65536.0, 0.0));
};

var sk$Chars$dtisControlC0 = sk.Chars$dtisControlC0 = function(ch) {
  var t$ = ch;
  var t$1 = t$.code();
  return t$1.$lt(new sk$Int(32.0, 0.0));
};

var sk$Chars$dtisControlC1 = sk.Chars$dtisControlC1 = function(ch) {
  var t$ = ch;
  var code = t$.code();
  var t$1 = code;
  if (t$1.$gt$eq(new sk$Int(128.0, 0.0)).__value)
    {
      var t$2 = code;
      return t$2.$lt(new sk$Int(160.0, 0.0));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisControlCharacter = sk.Chars$dtisControlCharacter = function(ch) {
  var t$ = ch;
  if (sk$Chars$dtisControlC0(t$).__value)
    return new sk$Bool((true));
  else
    {
      var t$1 = ch;
      return sk$Chars$dtisControlC1(t$1);
    }
};

var sk$Chars$dtisDigit = sk.Chars$dtisDigit = function(ch) {
  var t$ = ch;
  var t$1 = t$.code();
  return sk$Chars$dtisDigitCode(t$1);
};

var sk$Chars$dtisDigitCode = sk.Chars$dtisDigitCode = function(code) {
  var t$ = code;
  if (t$.$gt$eq((sk$Chars$dtzeroCode())).__value)
    {
      var t$1 = code;
      return t$1.$lt$eq((sk$Chars$dtnineCode()));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisHexDigit = sk.Chars$dtisHexDigit = function(ch) {
  jumpBlockOuterjumpLab$bg29646:{
    jumpLab$bg29646:{
      jumpLab$bg29645:{
        {
          var _tmp551 = ch.__getSwitchValue();
          switch (_tmp551) {
            case 48:
              break jumpLab$bg29645;
            
            case 49:
              break jumpLab$bg29645;
            
            case 50:
              break jumpLab$bg29645;
            
            case 51:
              break jumpLab$bg29645;
            
            case 52:
              break jumpLab$bg29645;
            
            case 53:
              break jumpLab$bg29645;
            
            case 54:
              break jumpLab$bg29645;
            
            case 55:
              break jumpLab$bg29645;
            
            case 56:
              break jumpLab$bg29645;
            
            case 57:
              break jumpLab$bg29645;
            
            case 97:
              break jumpLab$bg29645;
            
            case 98:
              break jumpLab$bg29645;
            
            case 99:
              break jumpLab$bg29645;
            
            case 100:
              break jumpLab$bg29645;
            
            case 101:
              break jumpLab$bg29645;
            
            case 102:
              break jumpLab$bg29645;
            
            case 65:
              break jumpLab$bg29645;
            
            case 66:
              break jumpLab$bg29645;
            
            case 67:
              break jumpLab$bg29645;
            
            case 68:
              break jumpLab$bg29645;
            
            case 69:
              break jumpLab$bg29645;
            
            case 70:
              break jumpLab$bg29645;
            
            default:
              break jumpLab$bg29646;

          }
        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

var sk$Chars$dtisHighSurrogate = sk.Chars$dtisHighSurrogate = function(code) {
  var t$ = code;
  if (t$.$gt$eq(new sk$Int(55296.0, 0.0)).__value)
    {
      var t$1 = code;
      return t$1.$lt(new sk$Int(56320.0, 0.0));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisLowSurrogate = sk.Chars$dtisLowSurrogate = function(code) {
  var t$ = code;
  if (t$.$gt$eq(new sk$Int(56320.0, 0.0)).__value)
    {
      var t$1 = code;
      return t$1.$lt(new sk$Int(57344.0, 0.0));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisLowerCaseLetter = sk.Chars$dtisLowerCaseLetter = function(ch) {
  var t$ = ch;
  var t$1 = t$.code();
  return sk$Chars$dtisLowerCode(t$1);
};

var sk$Chars$dtisLowerCode = sk.Chars$dtisLowerCode = function(code) {
  var t$ = code;
  if (t$.$gt$eq((sk$Chars$dtaLowerCode())).__value)
    {
      var t$1 = code;
      return t$1.$lt$eq((sk$Chars$dtzLowerCode()));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisNewLine = sk.Chars$dtisNewLine = function(ch) {
  var t$ = ch;
  if (t$.$eq$eq((sk$Chars$dtlineFeed())).__value)
    return new sk$Bool((true));
  else
    {
      var t$1 = ch;
      return t$1.$eq$eq((sk$Chars$dtcarriageReturn()));
    }
};

var sk$Chars$dtisOctalDigit = sk.Chars$dtisOctalDigit = function(ch) {
  var t$ = ch;
  var t$1 = t$.code();
  return sk$Chars$dtisOctalDigitCode(t$1);
};

var sk$Chars$dtisOctalDigitCode = sk.Chars$dtisOctalDigitCode = function(code) {
  var t$ = code;
  if (t$.$gt$eq((sk$Chars$dtzeroCode())).__value)
    {
      var t$1 = code;
      return t$1.$lt$eq((sk$Chars$dtsevenCode()));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisPrintableAscii = sk.Chars$dtisPrintableAscii = function(ch) {
  var t$ = ch;
  var code = t$.code();
  var t$1 = code;
  if (t$1.$gt$eq(new sk$Int(32.0, 0.0)).__value)
    {
      var t$2 = code;
      return t$2.$lt(new sk$Int(127.0, 0.0));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisSupplementaryPlane = sk.Chars$dtisSupplementaryPlane = function(ch) {
  var t$ = ch;
  var t$1 = sk$Chars$dtisBasicMultiLingualPlane(t$);
  return t$1.$bg();
};

var sk$Chars$dtisSurrogate = sk.Chars$dtisSurrogate = function(code) {
  var t$ = code;
  if (t$.$gt$eq(new sk$Int(55296.0, 0.0)).__value)
    {
      var t$1 = code;
      return t$1.$lt(new sk$Int(57344.0, 0.0));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisUpperCaseLetter = sk.Chars$dtisUpperCaseLetter = function(ch) {
  var t$ = ch;
  var t$1 = t$.code();
  return sk$Chars$dtisUpperCode(t$1);
};

var sk$Chars$dtisUpperCode = sk.Chars$dtisUpperCode = function(code) {
  var t$ = code;
  if (t$.$gt$eq((sk$Chars$dtaUpperCode())).__value)
    {
      var t$1 = code;
      return t$1.$lt$eq((sk$Chars$dtzUpperCode()));
    }
  else
    return new sk$Bool((false));
};

var sk$Chars$dtisWhitespace = sk.Chars$dtisWhitespace = function(ch) {
  jumpBlockOuterjumpLab$bg29695:{
    jumpLab$bg29695:{
      jumpLab$bg29694:{
        {
          var _tmp552 = ch.__getSwitchValue();
          switch (_tmp552) {
            case 32:
              break jumpLab$bg29694;
            
            case 9:
              break jumpLab$bg29694;
            
            case 10:
              break jumpLab$bg29694;
            
            case 12:
              break jumpLab$bg29694;
            
            case 13:
              break jumpLab$bg29694;
            
            default:
              break jumpLab$bg29695;

          }
        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

var sk$Chars$dttoUTF16SurrogatePair = sk.Chars$dttoUTF16SurrogatePair = function(ch) {
  var t$ = ch;
  var t$1 = sk$Chars$dtisSupplementaryPlane(t$);
  sk$invariant(t$1, undefined);
  var t$2 = ch;
  var t$3 = t$2.code();
  var bits = t$3.$mi(new sk$Int(65536.0, 0.0));
  var t$4 = bits;
  var loBits = t$4.and(new sk$Int(1023.0, 0.0));
  var t$5 = bits;
  var hiBits = t$5.ushr(new sk$Int(10.0, 0.0));
  var t$6 = hiBits;
  var high = new sk$Int(55296.0, 0.0).$pl(t$6);
  var t$7 = loBits;
  var low = new sk$Int(56320.0, 0.0).$pl(t$7);
  var t$8 = high;
  var t$9 = low;
  return new (sk$Tuple2)(t$8, t$9);
};

var sk$Debug$dtdebugImpl = sk.Debug$dtdebugImpl = function(x, print) {
  var t$ = print;
  var writer = new (sk$Debug$dtBufferedWriter)(t$, undefined, undefined);
  var t$1 = x;
  var t$2 = sk$inspect(t$1);
  var t$3 = writer;
  t$2.print(t$3);
  var t$4 = writer;
  t$4.write(new sk$String(('\n')));
  var t$5 = writer;
  return t$5.flush();
};

var sk$Debug$dtgetLeakCounter = sk.Debug$dtgetLeakCounter = function(classname) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Debug$dtgetMemoryFrameUsage = sk.Debug$dtgetMemoryFrameUsage = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Debug$dtprintBoxedObjectSize = sk.Debug$dtprintBoxedObjectSize = function(box) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Debug$dtprintCommaGroupJSON = sk.Debug$dtprintCommaGroupJSON = function(print, left, right, elemFns, indent) {
  var t$ = elemFns;
  var t$1 = t$.size();
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    {
      var t$2 = print;
      var t$3 = left;
      var t$4 = right;
      var t$5 = t$3.$pl(t$4);
      return t$2(t$5);
    }
  else
    {
      var t$6 = indent;
      var newIndent = t$6.$pl(new sk$String(('  ')));
      var t$7 = print;
      var t$8 = left;
      t$7(t$8);
      var t$9 = print;
      t$9(new sk$String(('\n')));
      var t$10 = elemFns;
      t$10.eachWithIndex(((i, elemFn) => 
      {
        var t$11 = print;
        var t$12 = newIndent;
        t$11(t$12);
        var t$13 = elemFn;
        var t$14 = newIndent;
        t$13(t$14);
        var t$15 = i;
        var t$16 = elemFns;
        var t$17 = t$16.size();
        var t$18 = t$17.$mi(new sk$Int(1.0, 0.0));
        if (t$15.$bg$eq(t$18).__value)
          {
            var t$19 = print;
            t$19(new sk$String((',')));
          }
        else
          {}
        var t$20 = print;
        return t$20(new sk$String(('\n')));
      }));
      var t$21 = print;
      var t$22 = indent;
      var t$23 = right;
      var t$24 = t$22.$pl(t$23);
      return t$21(t$24);
    }
};

var sk$Debug$dtprintMemoryStatistics = sk.Debug$dtprintMemoryStatistics = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Debug$dtprintObjectSize = sk.Debug$dtprintObjectSize = function(value) {
  var t$ = value;
  var t$1 = new (sk$Debug$dtDebugBox)(t$);
  return sk$Debug$dtprintBoxedObjectSize(t$1);
};

var sk$Debug$dtuntracked_debug_FOR_TESTING_DO_NOT_USE = sk.Debug$dtuntracked_debug_FOR_TESTING_DO_NOT_USE = function(x, print) {
  var t$ = x;
  var t$1 = print;
  return sk$Debug$dtdebugImpl(t$, t$1);
};

var sk$DirectedGraph$dtcreate = sk.DirectedGraph$dtcreate = function(successors) {
  var t$ = successors;
  var map = t$.collect(sk$UnorderedMap);
  var t$1 = map;
  var t$2 = t$1.keys();
  var t$3 = t$2.collect(sk$Vector);
  return new (sk$DirectedGraph)({
    vertexToSuccessors: ((vertex) => 
    {
      var t$4 = map;
      var t$5 = vertex;
      return t$4.get(t$5);
    }),
    vertices: t$3
  });
};

var sk$Doc$dtfits = sk.Doc$dtfits = function(next, restCommands, width, marker) {
  if (marker === undefined)
    marker = ((() => 
    {
      return singleton$None;
    })());
  var t$ = restCommands;
  var restIdx = t$.size();
  var t$1 = next;
  var t$2 = new (sk$Array)([
    t$1
  ]);
  var cmds = sk$Vector.mcreateFromItems(t$2);
  {
    jumpBlockOuterbreak$bg29759:{
      break$bg29759:{
        while_else$bg29758:{
          do
            {
              jumpBlockOutercontinue$bg29760:{
                continue$bg29760:{
                  {
                    var t$3 = width;
                    if (t$3.$gt$eq(new sk$Int(0.0, 0.0)).__value)
                      {
                        var t$4 = cmds;
                        var $var = sk$Doc$dtpop(t$4);
                        var mode;
                        var ind;
                        var doc;
                        {
                          jumpBlockOuterjumpLab$bg29860:{
                            jumpLab$bg29860:{
                              jumpLab$bg29859:{
                                jumpLab$bg29861:{
                                  switch ($var.__type_switch_id) {
                                    case 204:
                                      break jumpLab$bg29859;
                                    
                                    case 205:
                                      break jumpLab$bg29861;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                switch ($var.value.__type_switch_id) {
                                  case 40:
                                    doc = $var.value.doc;
                                    ind = $var.value.indent;
                                    mode = $var.value.mode;
                                    break jumpLab$bg29860;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var t$5 = restIdx;
                                var t$6;
                                if (t$5.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                                  {
                                    var t$7 = marker;
                                    var t$8 = t$7.isSome();
                                    return t$8.$bg();
                                  }
                                else
                                  t$6 = sk.__.$void;
                                var t$9 = cmds;
                                var t$10 = restCommands;
                                var t$11 = restIdx;
                                var t$12 = t$11.$mi(new sk$Int(1.0, 0.0));
                                var t$13 = t$10.get(t$12);
                                t$9.push(t$13);
                                var t$14 = restIdx;
                                restIdx = t$14.$mi(new sk$Int(1.0, 0.0));
                              }
                              break jumpBlockOuterjumpLab$bg29860;
                            }
                            {
                              var contents;
                              var breakLine;
                              var line;
                              var n;
                              var m;
                              var _;
                              var str;
                              var contents1;
                              var parts;
                              var flatContents;
                              var breakContents;
                              var parts1;
                              var contents2;
                              var _marker;
                              {
                                jumpBlockOuterjumpLab$bg29856:{
                                  jumpLab$bg29856:{
                                    jumpLab$bg29855:{
                                      jumpLab$bg29854:{
                                        jumpLab$bg29853:{
                                          jumpLab$bg29852:{
                                            jumpLab$bg29851:{
                                              jumpLab$bg29850:{
                                                jumpLab$bg29849:{
                                                  jumpLab$bg29848:{
                                                    jumpLab$bg29847:{
                                                      switch (doc.__type_switch_id) {
                                                        case 26:
                                                          line = doc;
                                                          break jumpLab$bg29853;
                                                        
                                                        case 27:
                                                          line = doc;
                                                          break jumpLab$bg29853;
                                                        
                                                        case 28:
                                                          line = doc;
                                                          break jumpLab$bg29853;
                                                        
                                                        case 39:
                                                          str = doc.str;
                                                          break jumpLab$bg29847;
                                                        
                                                        case 30:
                                                          parts1 = doc.parts;
                                                          break jumpLab$bg29848;
                                                        
                                                        case 35:
                                                          contents = doc.contents;
                                                          break jumpLab$bg29849;
                                                        
                                                        case 29:
                                                          contents1 = doc.contents;
                                                          n = doc.n;
                                                          break jumpLab$bg29850;
                                                        
                                                        case 33:
                                                          breakLine = doc.breakLine;
                                                          contents2 = doc.contents;
                                                          _marker = doc.marker;
                                                          break jumpLab$bg29851;
                                                        
                                                        case 34:
                                                          breakContents = doc.breakContents;
                                                          flatContents = doc.flatContents;
                                                          break jumpLab$bg29852;
                                                        
                                                        case 38:
                                                          m = doc;
                                                          _ = doc.id;
                                                          break jumpLab$bg29854;
                                                        
                                                        case 32:
                                                          parts = doc.parts;
                                                          break jumpLab$bg29855;
                                                        
                                                        case 36:
                                                          break jumpLab$bg29856;
                                                        
                                                        case 37:
                                                          break jumpLab$bg29856;
                                                        
                                                        case 31:
                                                          break jumpLab$bg29856;
                                                        
                                                        default:
                                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                                      }
                                                    }
                                                    {
                                                      var t$15 = width;
                                                      var t$16 = str;
                                                      var t$17 = t$16.length();
                                                      width = t$15.$mi(t$17);
                                                    }
                                                    break jumpBlockOuterjumpLab$bg29856;
                                                  }
                                                  {
                                                    var t$18 = parts1;
                                                    t$18.eachWithIndex(((i, _1) => 
                                                    {
                                                      var t$19 = cmds;
                                                      var t$20 = ind;
                                                      var t$21 = mode;
                                                      var t$22 = parts1;
                                                      var t$23 = parts1;
                                                      var t$24 = t$23.size();
                                                      var t$25 = i;
                                                      var t$26 = t$24.$mi(t$25);
                                                      var t$27 = t$26.$mi(new sk$Int(1.0, 0.0));
                                                      var t$28 = t$22.get(t$27);
                                                      var t$29 = new (sk$Doc$dtCommand)(t$20, t$21, t$28);
                                                      return t$19.push(t$29);
                                                    }));
                                                  }
                                                  break jumpBlockOuterjumpLab$bg29856;
                                                }
                                                {
                                                  var t$30 = cmds;
                                                  var t$31 = ind;
                                                  var t$32 = sk$Doc$dtmakeIndent(t$31);
                                                  var t$33 = mode;
                                                  var t$34 = contents;
                                                  var t$35 = new (sk$Doc$dtCommand)(t$32, t$33, t$34);
                                                  t$30.push(t$35);
                                                }
                                                break jumpBlockOuterjumpLab$bg29856;
                                              }
                                              {
                                                var t$36 = cmds;
                                                var t$37 = ind;
                                                var t$38 = n;
                                                var t$39 = sk$Doc$dtmakeAlign(t$37, t$38);
                                                var t$40 = mode;
                                                var t$41 = contents1;
                                                var t$42 = new (sk$Doc$dtCommand)(t$39, t$40, t$41);
                                                t$36.push(t$42);
                                              }
                                              break jumpBlockOuterjumpLab$bg29856;
                                            }
                                            {
                                              var t$43;
                                              if (breakLine.__value)
                                                {
                                                  var t$44 = marker;
                                                  var t$45 = t$44.isSome();
                                                  t$43 = t$45.$bg();
                                                }
                                              else
                                                t$43 = new sk$Bool((false));
                                              var t$46;
                                              if (t$43.__value)
                                                t$46 = singleton$Doc$dtBreak;
                                              else
                                                t$46 = mode;
                                              var newMode = t$46;
                                              var t$47 = cmds;
                                              var t$48 = ind;
                                              var t$49 = newMode;
                                              var t$50 = contents2;
                                              var t$51 = new (sk$Doc$dtCommand)(t$48, t$49, t$50);
                                              t$47.push(t$51);
                                            }
                                            break jumpBlockOuterjumpLab$bg29856;
                                          }
                                          {
                                            jumpBlockOuterjumpLab$bg29838:{
                                              jumpLab$bg29838:{
                                                jumpLab$bg29837:{
                                                  switch (mode.__type_switch_id) {
                                                    case 42:
                                                      break jumpLab$bg29837;
                                                    
                                                    case 43:
                                                      break jumpLab$bg29838;
                                                    
                                                    default:
                                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                                  }
                                                }
                                                {
                                                  var t$52 = cmds;
                                                  var t$53 = ind;
                                                  var t$54 = mode;
                                                  var t$55 = breakContents;
                                                  var t$56 = new (sk$Doc$dtCommand)(t$53, t$54, t$55);
                                                  t$52.push(t$56);
                                                }
                                                break jumpBlockOuterjumpLab$bg29838;
                                              }
                                              {
                                                var t$57 = cmds;
                                                var t$58 = ind;
                                                var t$59 = mode;
                                                var t$60 = flatContents;
                                                var t$61 = new (sk$Doc$dtCommand)(t$58, t$59, t$60);
                                                t$57.push(t$61);
                                              }
                                              break jumpBlockOuterjumpLab$bg29838;
                                            }
                                          }
                                          break jumpBlockOuterjumpLab$bg29856;
                                        }
                                        {
                                          jumpBlockOuterjumpLab$bg29845:{
                                            jumpLab$bg29845:{
                                              jumpLab$bg29844:{
                                                switch (mode.__type_switch_id) {
                                                  case 43:
                                                    break jumpLab$bg29844;
                                                  
                                                  case 42:
                                                    break jumpLab$bg29845;
                                                  
                                                  default:
                                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                                }
                                              }
                                              {
                                                jumpBlockOuterjumpLab$bg29842:{
                                                  jumpLab$bg29842:{
                                                    jumpLab$bg29841:{
                                                      jumpLab$bg29840:{
                                                        switch (line.__type_switch_id) {
                                                          case 27:
                                                            break jumpLab$bg29840;
                                                          
                                                          case 26:
                                                            break jumpLab$bg29841;
                                                          
                                                          case 28:
                                                            break jumpLab$bg29842;
                                                          
                                                          default:
                                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                                        }
                                                      }
                                                      {
                                                        var t$62 = width;
                                                        width = t$62.$mi(new sk$Int(1.0, 0.0));
                                                      }
                                                      break jumpBlockOuterjumpLab$bg29842;
                                                    }
                                                    {
                                                      var t$63 = marker;
                                                      var t$64 = t$63.isSome();
                                                      return t$64.$bg();
                                                    }
                                                  }
                                                  {}
                                                  break jumpBlockOuterjumpLab$bg29842;
                                                }
                                              }
                                              break jumpBlockOuterjumpLab$bg29845;
                                            }
                                            {
                                              var t$65 = marker;
                                              var t$66 = t$65.isSome();
                                              return t$66.$bg();
                                            }
                                          }
                                        }
                                        break jumpBlockOuterjumpLab$bg29856;
                                      }
                                      {
                                        var t$67 = marker;
                                        var t$68 = m;
                                        var t$69 = new (sk$Some)(t$68);
                                        if (t$67.$eq$eq(t$69).__value)
                                          return new sk$Bool((true));
                                        else
                                          {}
                                      }
                                      break jumpBlockOuterjumpLab$bg29856;
                                    }
                                    {
                                      var t$70 = parts;
                                      var t$71 = t$70.reversed();
                                      t$71.each(((part) => 
                                      {
                                        var t$72 = cmds;
                                        var t$73 = ind;
                                        var t$74 = mode;
                                        var t$75 = part;
                                        var t$76 = new (sk$Doc$dtCommand)(t$73, t$74, t$75);
                                        return t$72.push(t$76);
                                      }));
                                    }
                                    break jumpBlockOuterjumpLab$bg29856;
                                  }
                                  {}
                                  break jumpBlockOuterjumpLab$bg29856;
                                }
                              }
                            }
                            break jumpBlockOuterjumpLab$bg29860;
                          }
                        }
                      }
                    else
                      break while_else$bg29758;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg29760;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg29759;
      }
      {}
      break jumpBlockOuterbreak$bg29759;
    }
  }
  return new sk$Bool((false));
};

var sk$Doc$dtflattenUntilMarker = sk.Doc$dtflattenUntilMarker = function(doc, marker) {
  var m;
  var parts;
  var flatContents;
  var contents;
  var contents1;
  var groupMarker;
  var contents2;
  {
    jumpBlockOuterjumpLab$bg29914:{
      jumpLab$bg29914:{
        jumpLab$bg29913:{
          jumpLab$bg29912:{
            jumpLab$bg29911:{
              jumpLab$bg29910:{
                jumpLab$bg29909:{
                  jumpLab$bg29908:{
                    jumpLab$bg29907:{
                      jumpLab$bg29906:{
                        switch (doc.__type_switch_id) {
                          case 30:
                            parts = doc.parts;
                            break jumpLab$bg29906;
                          
                          case 35:
                            contents2 = doc.contents;
                            break jumpLab$bg29907;
                          
                          case 29:
                            contents = doc.contents;
                            break jumpLab$bg29908;
                          
                          case 34:
                            flatContents = doc.flatContents;
                            break jumpLab$bg29909;
                          
                          case 33:
                            contents1 = doc.contents;
                            groupMarker = doc.marker;
                            break jumpLab$bg29910;
                          
                          case 26:
                            break jumpLab$bg29911;
                          
                          case 28:
                            break jumpLab$bg29911;
                          
                          case 27:
                            break jumpLab$bg29912;
                          
                          case 32:
                            break jumpLab$bg29913;
                          
                          case 36:
                            break jumpLab$bg29913;
                          
                          case 37:
                            break jumpLab$bg29913;
                          
                          case 31:
                            break jumpLab$bg29913;
                          
                          case 39:
                            break jumpLab$bg29913;
                          
                          case 38:
                            m = doc;
                            break jumpLab$bg29914;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var found = new sk$Bool((false));
                        var t$ = parts;
                        var newParts = t$.map(((part) => 
                        {
                          var t$1 = found;
                          if (t$1.$bg().__value)
                            {
                              var t$2 = part;
                              var t$3 = marker;
                              var $var = sk$Doc$dtflattenUntilMarker(t$2, t$3);
                              var var1;
                              var var2;
                              {
                                jumpBlockOuterjumpLab$bg29898:{
                                  jumpLab$bg29898:{
                                    switch ($var.__type_switch_id) {
                                      case 392:
                                        var1 = $var.i0;
                                        var2 = $var.i1;
                                        break jumpLab$bg29898;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var foundPart = var2;
                                    var newPart = var1;
                                    if (foundPart.__value)
                                      found = new sk$Bool((true));
                                    else
                                      {}
                                    return newPart;
                                  }
                                }
                              }
                            }
                          else
                            return part;
                        }));
                        var t$4 = newParts;
                        var t$5 = new (sk$Doc$dtConcat)(t$4);
                        var t$6 = found;
                        return new (sk$Tuple2)(t$5, t$6);
                      }
                    }
                    {
                      var t$7 = contents2;
                      var t$8 = marker;
                      return sk$Doc$dtflattenUntilMarker(t$7, t$8);
                    }
                  }
                  {
                    var t$9 = contents;
                    var t$10 = marker;
                    return sk$Doc$dtflattenUntilMarker(t$9, t$10);
                  }
                }
                {
                  var t$11 = flatContents;
                  var t$12 = marker;
                  return sk$Doc$dtflattenUntilMarker(t$11, t$12);
                }
              }
              {
                var t$13 = contents1;
                var t$14 = marker;
                var var3 = sk$Doc$dtflattenUntilMarker(t$13, t$14);
                var var4;
                var var5;
                {
                  jumpBlockOuterjumpLab$bg29904:{
                    jumpLab$bg29904:{
                      switch (var3.__type_switch_id) {
                        case 392:
                          var4 = var3.i0;
                          var5 = var3.i1;
                          break jumpLab$bg29904;
                        
                        default:
                          skip.throwException(sk, new Error('Unmatched Branch'));

                      }
                    }
                    {
                      var found1 = var5;
                      var newContents = var4;
                      var t$15 = found1;
                      if (t$15.$bg().__value)
                        {
                          var t$16 = newContents;
                          var t$17 = found1;
                          return new (sk$Tuple2)(t$16, t$17);
                        }
                      else
                        {
                          var t$18 = newContents;
                          var var6 = sk$Doc$dtpropagateBreaks(t$18);
                          var var7;
                          var var8;
                          {
                            jumpBlockOuterjumpLab$bg29901:{
                              jumpLab$bg29901:{
                                switch (var6.__type_switch_id) {
                                  case 392:
                                    var7 = var6.i0;
                                    var8 = var6.i1;
                                    break jumpLab$bg29901;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var newBreak = var8;
                                newContents = var7;
                                var t$19 = newContents;
                                var t$20 = newBreak;
                                var t$21 = groupMarker;
                                var t$22 = new (sk$Doc$dtGroup)(t$19, t$20, t$21);
                                var t$23 = found1;
                                return new (sk$Tuple2)(t$22, t$23);
                              }
                            }
                          }
                        }
                    }
                  }
                }
              }
            }
            return new (sk$Tuple2)(singleton$Doc$dtEmpty, new sk$Bool((false)));
          }
          return new (sk$Tuple2)((sk$Doc$dtspace()), new sk$Bool((false)));
        }
        {
          var t$24 = doc;
          return new (sk$Tuple2)(t$24, new sk$Bool((false)));
        }
      }
      {
        var t$25 = m;
        var t$26 = m;
        var t$27 = marker;
        var t$28 = t$26.$eq$eq(t$27);
        return new (sk$Tuple2)(t$25, t$28);
      }
    }
  }
};

var sk$Doc$dtmakeAlign = sk.Doc$dtmakeAlign = function(ind, n) {
  var t$ = n;
  var t$1 = sk$Int.max.negate();
  if (t$.$eq$eq(t$1).__value)
    return new (sk$Doc$dtIndentComputation)(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
  else
    {
      var t$2 = ind;
      var t$3 = t$2.indent;
      var t$4 = ind;
      var t$5 = t$4.alignSpaces;
      var t$6 = n;
      var t$7 = t$5.$pl(t$6);
      var t$8 = ind;
      var t$9 = t$8.alignTabs;
      var t$10 = n;
      var t$11;
      if (t$10.$gt(new sk$Int(0.0, 0.0)).__value)
        t$11 = new sk$Int(1.0, 0.0);
      else
        t$11 = new sk$Int(0.0, 0.0);
      var t$12 = t$11;
      var t$13 = t$9.$pl(t$12);
      return new (sk$Doc$dtIndentComputation)(t$3, t$7, t$13);
    }
};

var sk$Doc$dtmakeIndent = sk.Doc$dtmakeIndent = function(ind) {
  var t$ = ind;
  var t$1 = t$.indent;
  var t$2 = t$1.$pl(new sk$Int(1.0, 0.0));
  var t$3 = ind;
  var t$4 = t$3.alignSpaces;
  var t$5 = ind;
  var t$6 = t$5.alignTabs;
  return new (sk$Doc$dtIndentComputation)(t$2, t$4, t$6);
};

var sk$Doc$dtpop = sk.Doc$dtpop = function(buffer) {
  var t$ = buffer;
  var t$1 = t$.size();
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$2 = buffer;
      var t$3 = t$2.pop();
      return new (sk$Some)(t$3);
    }
};

var sk$Doc$dtprintDoc = sk.Doc$dtprintDoc = function(doc, print, width, tabWidth, useTabs, newLine) {
  if (width === undefined)
    width = ((() => 
    {
      return new sk$Int(80.0, 0.0);
    })());
  if (tabWidth === undefined)
    tabWidth = ((() => 
    {
      return new sk$Int(2.0, 0.0);
    })());
  if (useTabs === undefined)
    useTabs = ((() => 
    {
      return new sk$Bool((false));
    })());
  if (newLine === undefined)
    newLine = ((() => 
    {
      return new sk$String(('\n'));
    })());
  var t$ = doc;
  var $var = sk$Doc$dtpropagateBreaks(t$);
  var var1;
  {
    jumpBlockOuterjumpLab$bg30230:{
      jumpLab$bg30230:{
        switch ($var.__type_switch_id) {
          case 392:
            var1 = $var.i0;
            break jumpLab$bg30230;
          
          default:
            skip.throwException(sk, new Error('Unmatched Branch'));

        }
      }
      {
        doc = var1;
        var pos = new sk$Int(0.0, 0.0);
        var t$1 = sk$Doc$dtrootIndent();
        var t$2 = doc;
        var t$3 = new (sk$Doc$dtCommand)(t$1, singleton$Doc$dtBreak, t$2);
        var t$4 = new (sk$Array)([
          t$3
        ]);
        var cmds = sk$Vector.mcreateFromItems(t$4);
        var shouldRemeasure = new sk$Bool((false));
        var out = sk$Vector.mcreateFromItems(new (sk$Array)([]));
        var lineSuffix = sk$Vector.mcreateFromItems(new (sk$Array)([]));
        {
          jumpBlockOuterbreak$bg29951:{
            break$bg29951:{
              while_else$bg29950:{
                do
                  {
                    jumpBlockOutercontinue$bg29952:{
                      continue$bg29952:{
                        {
                          var t$5 = cmds;
                          var t$6;
                          var var2 = sk$Doc$dtpop(t$5);
                          var ind;
                          var mode;
                          var cmd_doc;
                          var cmd;
                          {
                            jumpBlockOuterjumpLab$bg30226:{
                              jumpLab$bg30226:{
                                jumpLab$bg30225:{
                                  jumpLab$bg30227:{
                                    switch (var2.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg30225;
                                      
                                      case 205:
                                        break jumpLab$bg30227;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  switch (var2.value.__type_switch_id) {
                                    case 40:
                                      cmd = var2.value;
                                      cmd_doc = var2.value.doc;
                                      ind = var2.value.indent;
                                      mode = var2.value.mode;
                                      break jumpLab$bg30226;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var t$7 = lineSuffix;
                                  var t$8;
                                  if (t$7.isEmpty().__value)
                                    t$8 = new sk$Bool((false));
                                  else
                                    {
                                      var t$9 = lineSuffix;
                                      var t$10 = t$9.reversed();
                                      t$10.each(((cmd1) => 
                                      {
                                        var t$11 = cmds;
                                        var t$12 = cmd1;
                                        return t$11.push(t$12);
                                      }));
                                      var t$13 = lineSuffix;
                                      t$13.clear();
                                      t$8 = new sk$Bool((true));
                                    }
                                  t$6 = t$8;
                                }
                                break jumpBlockOuterjumpLab$bg30226;
                              }
                              {
                                var t$14;
                                var contents;
                                var parts;
                                var contents1;
                                var contents2;
                                var n;
                                var str;
                                var marker;
                                var breakContents;
                                var breakLine;
                                var flatContents;
                                var line;
                                var parts1;
                                var contents3;
                                {
                                  jumpBlockOuterjumpLab$bg30222:{
                                    jumpLab$bg30222:{
                                      jumpLab$bg30221:{
                                        jumpLab$bg30220:{
                                          jumpLab$bg30219:{
                                            jumpLab$bg30218:{
                                              jumpLab$bg30217:{
                                                jumpLab$bg30216:{
                                                  jumpLab$bg30215:{
                                                    jumpLab$bg30214:{
                                                      jumpLab$bg30213:{
                                                        jumpLab$bg30212:{
                                                          switch (cmd_doc.__type_switch_id) {
                                                            case 26:
                                                              line = cmd_doc;
                                                              break jumpLab$bg30220;
                                                            
                                                            case 27:
                                                              line = cmd_doc;
                                                              break jumpLab$bg30220;
                                                            
                                                            case 28:
                                                              line = cmd_doc;
                                                              break jumpLab$bg30220;
                                                            
                                                            case 39:
                                                              str = cmd_doc.str;
                                                              break jumpLab$bg30212;
                                                            
                                                            case 30:
                                                              parts1 = cmd_doc.parts;
                                                              break jumpLab$bg30213;
                                                            
                                                            case 35:
                                                              contents = cmd_doc.contents;
                                                              break jumpLab$bg30214;
                                                            
                                                            case 29:
                                                              contents2 = cmd_doc.contents;
                                                              n = cmd_doc.n;
                                                              break jumpLab$bg30215;
                                                            
                                                            case 33:
                                                              breakLine = cmd_doc.breakLine;
                                                              contents1 = cmd_doc.contents;
                                                              marker = cmd_doc.marker;
                                                              break jumpLab$bg30216;
                                                            
                                                            case 34:
                                                              breakContents = cmd_doc.breakContents;
                                                              flatContents = cmd_doc.flatContents;
                                                              break jumpLab$bg30217;
                                                            
                                                            case 36:
                                                              contents3 = cmd_doc.contents;
                                                              break jumpLab$bg30218;
                                                            
                                                            case 37:
                                                              break jumpLab$bg30219;
                                                            
                                                            case 32:
                                                              parts = cmd_doc.parts;
                                                              break jumpLab$bg30221;
                                                            
                                                            case 38:
                                                              break jumpLab$bg30222;
                                                            
                                                            case 31:
                                                              break jumpLab$bg30222;
                                                            
                                                            default:
                                                              skip.throwException(sk, new Error('Unmatched Branch'));

                                                          }
                                                        }
                                                        {
                                                          var t$15 = out;
                                                          var t$16 = str;
                                                          t$15.push(t$16);
                                                          var t$17 = pos;
                                                          var t$18 = str;
                                                          var t$19 = t$18.length();
                                                          pos = t$17.$pl(t$19);
                                                          t$14 = sk.__.$void;
                                                        }
                                                        break jumpBlockOuterjumpLab$bg30222;
                                                      }
                                                      {
                                                        var t$20 = parts1;
                                                        t$14 = t$20.eachWithIndex(((i, _) => 
                                                        {
                                                          var t$21 = cmds;
                                                          var t$22 = ind;
                                                          var t$23 = mode;
                                                          var t$24 = parts1;
                                                          var t$25 = parts1;
                                                          var t$26 = t$25.size();
                                                          var t$27 = i;
                                                          var t$28 = t$26.$mi(t$27);
                                                          var t$29 = t$28.$mi(new sk$Int(1.0, 0.0));
                                                          var t$30 = t$24.get(t$29);
                                                          var t$31 = new (sk$Doc$dtCommand)(t$22, t$23, t$30);
                                                          return t$21.push(t$31);
                                                        }));
                                                      }
                                                      break jumpBlockOuterjumpLab$bg30222;
                                                    }
                                                    {
                                                      var t$32 = cmds;
                                                      var t$33 = ind;
                                                      var t$34 = sk$Doc$dtmakeIndent(t$33);
                                                      var t$35 = mode;
                                                      var t$36 = contents;
                                                      var t$37 = new (sk$Doc$dtCommand)(t$34, t$35, t$36);
                                                      t$14 = t$32.push(t$37);
                                                    }
                                                    break jumpBlockOuterjumpLab$bg30222;
                                                  }
                                                  {
                                                    var t$38 = cmds;
                                                    var t$39 = ind;
                                                    var t$40 = n;
                                                    var t$41 = sk$Doc$dtmakeAlign(t$39, t$40);
                                                    var t$42 = mode;
                                                    var t$43 = contents2;
                                                    var t$44 = new (sk$Doc$dtCommand)(t$41, t$42, t$43);
                                                    t$14 = t$38.push(t$44);
                                                  }
                                                  break jumpBlockOuterjumpLab$bg30222;
                                                }
                                                {
                                                  var t$45 = marker;
                                                  var t$46 = t$45.isSome();
                                                  var t$47;
                                                  if (t$46.$bg().__value)
                                                    {
                                                      var t$48;
                                                      var _1;
                                                      {
                                                        jumpBlockOuterjumpLab$bg30189:{
                                                          jumpLab$bg30189:{
                                                            jumpLab$bg30188:{
                                                              switch (mode.__type_switch_id) {
                                                                case 43:
                                                                  break jumpLab$bg30188;
                                                                
                                                                default:
                                                                  _1 = mode;
                                                                  break jumpLab$bg30189;

                                                              }
                                                            }
                                                            t$48 = new sk$Bool((true));
                                                            break jumpBlockOuterjumpLab$bg30189;
                                                          }
                                                          t$48 = new sk$Bool((false));
                                                          break jumpBlockOuterjumpLab$bg30189;
                                                        }
                                                      }
                                                      t$47 = t$48;
                                                    }
                                                  else
                                                    t$47 = new sk$Bool((false));
                                                  var t$49;
                                                  if (t$47.__value)
                                                    {
                                                      var t$50 = shouldRemeasure;
                                                      t$49 = t$50.$bg();
                                                    }
                                                  else
                                                    t$49 = new sk$Bool((false));
                                                  var t$51;
                                                  if (t$49.__value)
                                                    {
                                                      var t$52 = cmds;
                                                      var t$53 = ind;
                                                      var t$54;
                                                      if (breakLine.__value)
                                                        t$54 = singleton$Doc$dtBreak;
                                                      else
                                                        t$54 = singleton$Doc$dtFlat;
                                                      var t$55 = t$54;
                                                      var t$56 = contents1;
                                                      var t$57 = new (sk$Doc$dtCommand)(t$53, t$55, t$56);
                                                      t$51 = t$52.push(t$57);
                                                    }
                                                  else
                                                    {
                                                      shouldRemeasure = new sk$Bool((false));
                                                      var t$58 = ind;
                                                      var t$59 = contents1;
                                                      var next = new (sk$Doc$dtCommand)(t$58, singleton$Doc$dtFlat, t$59);
                                                      var t$60 = width;
                                                      var t$61 = pos;
                                                      var rem = t$60.$mi(t$61);
                                                      var t$62 = next;
                                                      var t$63 = cmds;
                                                      var t$64 = rem;
                                                      var t$65 = marker;
                                                      var doesFit = sk$Doc$dtfits(t$62, t$63, t$64, t$65);
                                                      var t$66 = marker;
                                                      var t$67;
                                                      if (t$66.isSome().__value)
                                                        t$67 = doesFit;
                                                      else
                                                        t$67 = new sk$Bool((false));
                                                      var t$68;
                                                      if (t$67.__value)
                                                        {
                                                          var t$69 = contents1;
                                                          var t$70 = marker;
                                                          var t$71 = t$70.fromSome(undefined);
                                                          var t$72 = sk$Doc$dtflattenUntilMarker(t$69, t$71);
                                                          var newContents = t$72.i0;
                                                          var t$73 = cmds;
                                                          var t$74 = ind;
                                                          var t$75 = newContents;
                                                          var t$76 = new (sk$Doc$dtCommand)(t$74, singleton$Doc$dtFlat, t$75);
                                                          t$73.push(t$76);
                                                          shouldRemeasure = new sk$Bool((true));
                                                          t$68 = sk.__.$void;
                                                        }
                                                      else
                                                        {
                                                          var t$77 = breakLine;
                                                          var t$78;
                                                          if (t$77.$bg().__value)
                                                            t$78 = doesFit;
                                                          else
                                                            t$78 = new sk$Bool((false));
                                                          var t$79;
                                                          if (t$78.__value)
                                                            {
                                                              var t$80 = cmds;
                                                              var t$81 = next;
                                                              t$79 = t$80.push(t$81);
                                                            }
                                                          else
                                                            {
                                                              var t$82 = cmds;
                                                              var t$83 = ind;
                                                              var t$84 = contents1;
                                                              var t$85 = new (sk$Doc$dtCommand)(t$83, singleton$Doc$dtBreak, t$84);
                                                              t$79 = t$82.push(t$85);
                                                            }
                                                          t$68 = t$79;
                                                        }
                                                      t$51 = t$68;
                                                    }
                                                  t$14 = t$51;
                                                }
                                                break jumpBlockOuterjumpLab$bg30222;
                                              }
                                              {
                                                var t$86;
                                                {
                                                  jumpBlockOuterjumpLab$bg30192:{
                                                    jumpLab$bg30192:{
                                                      jumpLab$bg30191:{
                                                        switch (mode.__type_switch_id) {
                                                          case 42:
                                                            break jumpLab$bg30191;
                                                          
                                                          case 43:
                                                            break jumpLab$bg30192;
                                                          
                                                          default:
                                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                                        }
                                                      }
                                                      {
                                                        var t$87 = cmds;
                                                        var t$88 = ind;
                                                        var t$89 = mode;
                                                        var t$90 = breakContents;
                                                        var t$91 = new (sk$Doc$dtCommand)(t$88, t$89, t$90);
                                                        t$86 = t$87.push(t$91);
                                                      }
                                                      break jumpBlockOuterjumpLab$bg30192;
                                                    }
                                                    {
                                                      var t$92 = cmds;
                                                      var t$93 = ind;
                                                      var t$94 = mode;
                                                      var t$95 = flatContents;
                                                      var t$96 = new (sk$Doc$dtCommand)(t$93, t$94, t$95);
                                                      t$86 = t$92.push(t$96);
                                                    }
                                                    break jumpBlockOuterjumpLab$bg30192;
                                                  }
                                                }
                                                t$14 = t$86;
                                              }
                                              break jumpBlockOuterjumpLab$bg30222;
                                            }
                                            {
                                              var t$97 = lineSuffix;
                                              var t$98 = ind;
                                              var t$99 = mode;
                                              var t$100 = contents3;
                                              var t$101 = new (sk$Doc$dtCommand)(t$98, t$99, t$100);
                                              t$14 = t$97.push(t$101);
                                            }
                                            break jumpBlockOuterjumpLab$bg30222;
                                          }
                                          {
                                            var t$102 = lineSuffix;
                                            var t$103 = t$102.isEmpty();
                                            var t$104;
                                            if (t$103.$bg().__value)
                                              {
                                                var t$105 = cmds;
                                                var t$106 = ind;
                                                var t$107 = mode;
                                                var t$108 = new (sk$Doc$dtCommand)(t$106, t$107, singleton$Doc$dtHardLine);
                                                t$104 = t$105.push(t$108);
                                              }
                                            else
                                              t$104 = sk.__.$void;
                                            t$14 = t$104;
                                          }
                                          break jumpBlockOuterjumpLab$bg30222;
                                        }
                                        {
                                          var t$109;
                                          var _2;
                                          {
                                            jumpBlockOuterjumpLab$bg30195:{
                                              jumpLab$bg30195:{
                                                jumpLab$bg30194:{
                                                  switch (mode.__type_switch_id) {
                                                    case 43:
                                                      break jumpLab$bg30194;
                                                    
                                                    default:
                                                      _2 = mode;
                                                      break jumpLab$bg30195;

                                                  }
                                                }
                                                t$109 = new sk$Bool((true));
                                                break jumpBlockOuterjumpLab$bg30195;
                                              }
                                              t$109 = new sk$Bool((false));
                                              break jumpBlockOuterjumpLab$bg30195;
                                            }
                                          }
                                          var t$110;
                                          if (t$109.__value)
                                            {
                                              var t$111;
                                              var _3;
                                              {
                                                jumpBlockOuterjumpLab$bg30198:{
                                                  jumpLab$bg30198:{
                                                    jumpLab$bg30197:{
                                                      switch (line.__type_switch_id) {
                                                        case 27:
                                                          break jumpLab$bg30197;
                                                        
                                                        default:
                                                          _3 = line;
                                                          break jumpLab$bg30198;

                                                      }
                                                    }
                                                    t$111 = new sk$Bool((true));
                                                    break jumpBlockOuterjumpLab$bg30198;
                                                  }
                                                  t$111 = new sk$Bool((false));
                                                  break jumpBlockOuterjumpLab$bg30198;
                                                }
                                              }
                                              t$110 = t$111;
                                            }
                                          else
                                            t$110 = new sk$Bool((false));
                                          var t$112;
                                          if (t$110.__value)
                                            {
                                              var t$113 = out;
                                              t$113.push(new sk$String((' ')));
                                              var t$114 = pos;
                                              pos = t$114.$pl(new sk$Int(1.0, 0.0));
                                              t$112 = sk.__.$void;
                                            }
                                          else
                                            {
                                              var t$115;
                                              var _4;
                                              {
                                                jumpBlockOuterjumpLab$bg30201:{
                                                  jumpLab$bg30201:{
                                                    jumpLab$bg30200:{
                                                      switch (mode.__type_switch_id) {
                                                        case 43:
                                                          break jumpLab$bg30200;
                                                        
                                                        default:
                                                          _4 = mode;
                                                          break jumpLab$bg30201;

                                                      }
                                                    }
                                                    t$115 = new sk$Bool((true));
                                                    break jumpBlockOuterjumpLab$bg30201;
                                                  }
                                                  t$115 = new sk$Bool((false));
                                                  break jumpBlockOuterjumpLab$bg30201;
                                                }
                                              }
                                              var t$116;
                                              if (t$115.__value)
                                                {
                                                  var t$117;
                                                  var _5;
                                                  {
                                                    jumpBlockOuterjumpLab$bg30204:{
                                                      jumpLab$bg30204:{
                                                        jumpLab$bg30203:{
                                                          switch (line.__type_switch_id) {
                                                            case 28:
                                                              break jumpLab$bg30203;
                                                            
                                                            default:
                                                              _5 = line;
                                                              break jumpLab$bg30204;

                                                          }
                                                        }
                                                        t$117 = new sk$Bool((true));
                                                        break jumpBlockOuterjumpLab$bg30204;
                                                      }
                                                      t$117 = new sk$Bool((false));
                                                      break jumpBlockOuterjumpLab$bg30204;
                                                    }
                                                  }
                                                  t$116 = t$117;
                                                }
                                              else
                                                t$116 = new sk$Bool((false));
                                              var t$118;
                                              if (t$116.__value)
                                                t$118 = sk.__.$void;
                                              else
                                                {
                                                  var t$119;
                                                  var _6;
                                                  {
                                                    jumpBlockOuterjumpLab$bg30207:{
                                                      jumpLab$bg30207:{
                                                        jumpLab$bg30206:{
                                                          switch (mode.__type_switch_id) {
                                                            case 43:
                                                              break jumpLab$bg30206;
                                                            
                                                            default:
                                                              _6 = mode;
                                                              break jumpLab$bg30207;

                                                          }
                                                        }
                                                        t$119 = new sk$Bool((true));
                                                        break jumpBlockOuterjumpLab$bg30207;
                                                      }
                                                      t$119 = new sk$Bool((false));
                                                      break jumpBlockOuterjumpLab$bg30207;
                                                    }
                                                  }
                                                  var t$120;
                                                  if (t$119.__value)
                                                    {
                                                      var t$121;
                                                      var _7;
                                                      {
                                                        jumpBlockOuterjumpLab$bg30210:{
                                                          jumpLab$bg30210:{
                                                            jumpLab$bg30209:{
                                                              switch (line.__type_switch_id) {
                                                                case 26:
                                                                  break jumpLab$bg30209;
                                                                
                                                                default:
                                                                  _7 = line;
                                                                  break jumpLab$bg30210;

                                                              }
                                                            }
                                                            t$121 = new sk$Bool((true));
                                                            break jumpBlockOuterjumpLab$bg30210;
                                                          }
                                                          t$121 = new sk$Bool((false));
                                                          break jumpBlockOuterjumpLab$bg30210;
                                                        }
                                                      }
                                                      t$120 = t$121;
                                                    }
                                                  else
                                                    t$120 = new sk$Bool((false));
                                                  var t$122;
                                                  if (t$120.__value)
                                                    {
                                                      shouldRemeasure = new sk$Bool((true));
                                                      t$122 = sk.__.$void;
                                                    }
                                                  else
                                                    t$122 = sk.__.$void;
                                                  var t$123 = lineSuffix;
                                                  var t$124 = t$123.isEmpty();
                                                  var t$125;
                                                  if (t$124.$bg().__value)
                                                    {
                                                      var t$126 = cmds;
                                                      var t$127 = cmd;
                                                      t$126.push(t$127);
                                                      var t$128 = lineSuffix;
                                                      var t$129 = t$128.reversed();
                                                      t$129.each(((cmd2) => 
                                                      {
                                                        var t$130 = cmds;
                                                        var t$131 = cmd2;
                                                        return t$130.push(t$131);
                                                      }));
                                                      var t$132 = lineSuffix;
                                                      t$125 = t$132.clear();
                                                    }
                                                  else
                                                    {
                                                      var t$133 = ind;
                                                      var t$134 = t$133.indent;
                                                      var t$135 = tabWidth;
                                                      var t$136 = t$134.$ti(t$135);
                                                      var t$137 = ind;
                                                      var t$138 = t$137.alignSpaces;
                                                      var length = t$136.$pl(t$138);
                                                      var t$139;
                                                      if (useTabs.__value)
                                                        {
                                                          var t$140 = ind;
                                                          var t$141 = t$140.indent;
                                                          var t$142 = ind;
                                                          var t$143 = t$142.alignTabs;
                                                          var t$144 = t$141.$pl(t$143);
                                                          t$139 = new sk$String(('\t')).repeat(t$144);
                                                        }
                                                      else
                                                        {
                                                          var t$145 = length;
                                                          t$139 = new sk$String((' ')).repeat(t$145);
                                                        }
                                                      var indentString = t$139;
                                                      var t$146 = out;
                                                      var t$147 = t$146.size();
                                                      var t$148;
                                                      if (t$147.$gt(new sk$Int(0.0, 0.0)).__value)
                                                        {
                                                          var t$149 = print;
                                                          var t$150 = out;
                                                          var t$151 = t$150.join(new sk$String(('')));
                                                          var t$152 = t$151.trimRight();
                                                          t$149(t$152);
                                                          var t$153 = out;
                                                          t$148 = t$153.clear();
                                                        }
                                                      else
                                                        t$148 = sk.__.$void;
                                                      var t$154 = print;
                                                      var t$155 = newLine;
                                                      t$154(t$155);
                                                      var t$156 = out;
                                                      var t$157 = indentString;
                                                      t$156.push(t$157);
                                                      pos = length;
                                                      t$125 = sk.__.$void;
                                                    }
                                                  t$118 = t$125;
                                                }
                                              t$112 = t$118;
                                            }
                                          t$14 = t$112;
                                        }
                                        break jumpBlockOuterjumpLab$bg30222;
                                      }
                                      {
                                        var t$158 = width;
                                        var t$159 = pos;
                                        var rem1 = t$158.$mi(t$159);
                                        var t$160 = parts;
                                        var t$161 = t$160.size();
                                        var t$162;
                                        if (t$161.$bg$eq(new sk$Int(0.0, 0.0)).__value)
                                          {
                                            var t$163 = parts;
                                            var content = t$163.get(new sk$Int(0.0, 0.0));
                                            var t$164 = ind;
                                            var t$165 = content;
                                            var contentFlatCmd = new (sk$Doc$dtCommand)(t$164, singleton$Doc$dtFlat, t$165);
                                            var t$166 = ind;
                                            var t$167 = content;
                                            var contentBreakCmd = new (sk$Doc$dtCommand)(t$166, singleton$Doc$dtBreak, t$167);
                                            var t$168 = contentFlatCmd;
                                            var t$169 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
                                            var t$170 = rem1;
                                            var contentFits = sk$Doc$dtfits(t$168, t$169, t$170, undefined);
                                            var t$171 = parts;
                                            var t$172 = t$171.size();
                                            var t$173;
                                            if (t$172.$eq$eq(new sk$Int(1.0, 0.0)).__value)
                                              {
                                                var t$174;
                                                if (contentFits.__value)
                                                  {
                                                    var t$175 = cmds;
                                                    var t$176 = contentFlatCmd;
                                                    t$174 = t$175.push(t$176);
                                                  }
                                                else
                                                  {
                                                    var t$177 = cmds;
                                                    var t$178 = contentBreakCmd;
                                                    t$174 = t$177.push(t$178);
                                                  }
                                                t$173 = t$174;
                                              }
                                            else
                                              {
                                                var t$179 = parts;
                                                var whitespace = t$179.get(new sk$Int(1.0, 0.0));
                                                var t$180 = ind;
                                                var t$181 = whitespace;
                                                var whitespaceFlatCmd = new (sk$Doc$dtCommand)(t$180, singleton$Doc$dtFlat, t$181);
                                                var t$182 = ind;
                                                var t$183 = whitespace;
                                                var whitespaceBreakCmd = new (sk$Doc$dtCommand)(t$182, singleton$Doc$dtBreak, t$183);
                                                var t$184 = parts;
                                                var t$185 = t$184.size();
                                                var t$186;
                                                if (t$185.$eq$eq(new sk$Int(2.0, 0.0)).__value)
                                                  {
                                                    var t$187;
                                                    if (contentFits.__value)
                                                      {
                                                        var t$188 = cmds;
                                                        var t$189 = whitespaceFlatCmd;
                                                        t$188.push(t$189);
                                                        var t$190 = cmds;
                                                        var t$191 = contentFlatCmd;
                                                        t$187 = t$190.push(t$191);
                                                      }
                                                    else
                                                      {
                                                        var t$192 = cmds;
                                                        var t$193 = whitespaceBreakCmd;
                                                        t$192.push(t$193);
                                                        var t$194 = cmds;
                                                        var t$195 = contentBreakCmd;
                                                        t$187 = t$194.push(t$195);
                                                      }
                                                    t$186 = t$187;
                                                  }
                                                else
                                                  {
                                                    var t$196 = ind;
                                                    var t$197 = mode;
                                                    var t$198 = parts;
                                                    var t$199 = t$198.slice(new sk$Int(2.0, 0.0), undefined);
                                                    var t$200 = new (sk$Doc$dtFill)(t$199);
                                                    var remainingCmd = new (sk$Doc$dtCommand)(t$196, t$197, t$200);
                                                    var t$201 = parts;
                                                    var secondContent = t$201.get(new sk$Int(2.0, 0.0));
                                                    var t$202 = ind;
                                                    var t$203 = content;
                                                    var t$204 = whitespace;
                                                    var t$205 = secondContent;
                                                    var t$206 = new (sk$Array)([
                                                      t$203,
                                                      t$204,
                                                      t$205
                                                    ]);
                                                    var t$207 = sk$Doc$dtConcat.createFromItems(t$206);
                                                    var firstAndSecondContentFlatCmd = new (sk$Doc$dtCommand)(t$202, singleton$Doc$dtFlat, t$207);
                                                    var t$208 = firstAndSecondContentFlatCmd;
                                                    var t$209 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
                                                    var t$210 = rem1;
                                                    var firstAndSecondContentFits = sk$Doc$dtfits(t$208, t$209, t$210, undefined);
                                                    var t$211;
                                                    if (firstAndSecondContentFits.__value)
                                                      {
                                                        var t$212 = cmds;
                                                        var t$213 = remainingCmd;
                                                        t$212.push(t$213);
                                                        var t$214 = cmds;
                                                        var t$215 = whitespaceFlatCmd;
                                                        t$214.push(t$215);
                                                        var t$216 = cmds;
                                                        var t$217 = contentFlatCmd;
                                                        t$211 = t$216.push(t$217);
                                                      }
                                                    else
                                                      {
                                                        var t$218;
                                                        if (contentFits.__value)
                                                          {
                                                            var t$219 = cmds;
                                                            var t$220 = remainingCmd;
                                                            t$219.push(t$220);
                                                            var t$221 = cmds;
                                                            var t$222 = whitespaceBreakCmd;
                                                            t$221.push(t$222);
                                                            var t$223 = cmds;
                                                            var t$224 = contentFlatCmd;
                                                            t$218 = t$223.push(t$224);
                                                          }
                                                        else
                                                          {
                                                            var t$225 = cmds;
                                                            var t$226 = remainingCmd;
                                                            t$225.push(t$226);
                                                            var t$227 = cmds;
                                                            var t$228 = whitespaceBreakCmd;
                                                            t$227.push(t$228);
                                                            var t$229 = cmds;
                                                            var t$230 = contentBreakCmd;
                                                            t$218 = t$229.push(t$230);
                                                          }
                                                        t$211 = t$218;
                                                      }
                                                    t$186 = t$211;
                                                  }
                                                t$173 = t$186;
                                              }
                                            t$162 = t$173;
                                          }
                                        else
                                          t$162 = sk.__.$void;
                                        t$14 = t$162;
                                      }
                                      break jumpBlockOuterjumpLab$bg30222;
                                    }
                                    t$14 = sk.__.$void;
                                    break jumpBlockOuterjumpLab$bg30222;
                                  }
                                }
                                t$6 = new sk$Bool((true));
                              }
                              break jumpBlockOuterjumpLab$bg30226;
                            }
                          }
                          if (t$6.__value)
                            {}
                          else
                            break while_else$bg29950;
                        }
                      }
                      {}
                      break jumpBlockOutercontinue$bg29952;
                    }
                  }
                while (true);
              }
              {}
              break jumpBlockOuterbreak$bg29951;
            }
            {}
            break jumpBlockOuterbreak$bg29951;
          }
        }
        var t$231 = out;
        var t$232 = t$231.size();
        if (t$232.$gt(new sk$Int(0.0, 0.0)).__value)
          {
            var t$233 = print;
            var t$234 = out;
            var t$235 = t$234.join(new sk$String(('')));
            var t$236 = t$235.trimRight();
            return t$233(t$236);
          }
        else
          return sk.__.$void;
      }
    }
  }
};

var sk$Doc$dtprintDocToString = sk.Doc$dtprintDocToString = function(doc, width, tabWidth, useTabs, newLine) {
  if (width === undefined)
    width = ((() => 
    {
      return new sk$Int(80.0, 0.0);
    })());
  if (tabWidth === undefined)
    tabWidth = ((() => 
    {
      return new sk$Int(2.0, 0.0);
    })());
  if (useTabs === undefined)
    useTabs = ((() => 
    {
      return new sk$Bool((false));
    })());
  if (newLine === undefined)
    newLine = ((() => 
    {
      return new sk$String(('\n'));
    })());
  var out = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = doc;
  var t$1 = out;
  var t$2 = t$1;
  var t$3 = width;
  var t$4 = tabWidth;
  var t$5 = useTabs;
  var t$6 = newLine;
  sk$Doc$dtprintDoc(t$, ((_tmp30235) => 
  {
    return t$2.push(_tmp30235);
  }), t$3, t$4, t$5, t$6);
  var t$7 = out;
  return t$7.join(new sk$String(('')));
};

var sk$Doc$dtpropagateBreaks = sk.Doc$dtpropagateBreaks = function(doc) {
  var contents;
  var breakContents;
  var n;
  var parts;
  var breakLine;
  var contents1;
  var marker;
  var flatContents;
  var contents2;
  {
    jumpBlockOuterjumpLab$bg30300:{
      jumpLab$bg30300:{
        jumpLab$bg30299:{
          jumpLab$bg30298:{
            jumpLab$bg30297:{
              jumpLab$bg30296:{
                jumpLab$bg30295:{
                  jumpLab$bg30294:{
                    switch (doc.__type_switch_id) {
                      case 30:
                        parts = doc.parts;
                        break jumpLab$bg30294;
                      
                      case 35:
                        contents2 = doc.contents;
                        break jumpLab$bg30295;
                      
                      case 29:
                        contents1 = doc.contents;
                        n = doc.n;
                        break jumpLab$bg30296;
                      
                      case 33:
                        breakLine = doc.breakLine;
                        contents = doc.contents;
                        marker = doc.marker;
                        break jumpLab$bg30297;
                      
                      case 34:
                        breakContents = doc.breakContents;
                        flatContents = doc.flatContents;
                        break jumpLab$bg30298;
                      
                      case 36:
                        break jumpLab$bg30299;
                      
                      case 26:
                        break jumpLab$bg30299;
                      
                      case 32:
                        break jumpLab$bg30300;
                      
                      case 38:
                        break jumpLab$bg30300;
                      
                      case 37:
                        break jumpLab$bg30300;
                      
                      case 28:
                        break jumpLab$bg30300;
                      
                      case 27:
                        break jumpLab$bg30300;
                      
                      case 31:
                        break jumpLab$bg30300;
                      
                      case 39:
                        break jumpLab$bg30300;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var shouldBreakParts = new sk$Bool((false));
                    var t$ = parts;
                    var newParts = t$.map(((part) => 
                    {
                      var t$1 = part;
                      var $var = sk$Doc$dtpropagateBreaks(t$1);
                      var var1;
                      var var2;
                      {
                        jumpBlockOuterjumpLab$bg30277:{
                          jumpLab$bg30277:{
                            switch ($var.__type_switch_id) {
                              case 392:
                                var1 = $var.i0;
                                var2 = $var.i1;
                                break jumpLab$bg30277;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var shouldBreak = var2;
                            var newPart = var1;
                            var t$2;
                            if (shouldBreakParts.__value)
                              t$2 = new sk$Bool((true));
                            else
                              t$2 = shouldBreak;
                            shouldBreakParts = t$2;
                            return newPart;
                          }
                        }
                      }
                    }));
                    var t$3 = newParts;
                    var t$4 = new (sk$Doc$dtConcat)(t$3);
                    var t$5 = shouldBreakParts;
                    return new (sk$Tuple2)(t$4, t$5);
                  }
                }
                {
                  var t$6 = contents2;
                  var var3 = sk$Doc$dtpropagateBreaks(t$6);
                  var var4;
                  var var5;
                  {
                    jumpBlockOuterjumpLab$bg30280:{
                      jumpLab$bg30280:{
                        switch (var3.__type_switch_id) {
                          case 392:
                            var4 = var3.i0;
                            var5 = var3.i1;
                            break jumpLab$bg30280;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var shouldBreak1 = var5;
                        var newContents = var4;
                        var t$7 = newContents;
                        var t$8 = new (sk$Doc$dtIndent)(t$7);
                        var t$9 = shouldBreak1;
                        return new (sk$Tuple2)(t$8, t$9);
                      }
                    }
                  }
                }
              }
              {
                var t$10 = contents1;
                var var6 = sk$Doc$dtpropagateBreaks(t$10);
                var var7;
                var var8;
                {
                  jumpBlockOuterjumpLab$bg30283:{
                    jumpLab$bg30283:{
                      switch (var6.__type_switch_id) {
                        case 392:
                          var8 = var6.i0;
                          var7 = var6.i1;
                          break jumpLab$bg30283;
                        
                        default:
                          skip.throwException(sk, new Error('Unmatched Branch'));

                      }
                    }
                    {
                      var shouldBreak2 = var7;
                      var newContents1 = var8;
                      var t$11 = n;
                      var t$12 = newContents1;
                      var t$13 = new (sk$Doc$dtAlign)(t$11, t$12);
                      var t$14 = shouldBreak2;
                      return new (sk$Tuple2)(t$13, t$14);
                    }
                  }
                }
              }
            }
            {
              var t$15 = contents;
              var var9 = sk$Doc$dtpropagateBreaks(t$15);
              var var10;
              var var11;
              {
                jumpBlockOuterjumpLab$bg30286:{
                  jumpLab$bg30286:{
                    switch (var9.__type_switch_id) {
                      case 392:
                        var10 = var9.i0;
                        var11 = var9.i1;
                        break jumpLab$bg30286;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var shouldBreak3 = var11;
                    var newContents2 = var10;
                    var t$16 = marker;
                    var t$17;
                    if (t$16.isSome().__value)
                      t$17 = new sk$Bool((false));
                    else
                      {
                        var t$18;
                        if (breakLine.__value)
                          t$18 = new sk$Bool((true));
                        else
                          t$18 = shouldBreak3;
                        t$17 = t$18;
                      }
                    var groupShouldBreak = t$17;
                    var t$19 = newContents2;
                    var t$20 = groupShouldBreak;
                    var t$21 = marker;
                    var t$22 = new (sk$Doc$dtGroup)(t$19, t$20, t$21);
                    var t$23;
                    if (breakLine.__value)
                      t$23 = new sk$Bool((true));
                    else
                      t$23 = shouldBreak3;
                    var t$24 = t$23;
                    return new (sk$Tuple2)(t$22, t$24);
                  }
                }
              }
            }
          }
          {
            var t$25 = breakContents;
            var var12 = sk$Doc$dtpropagateBreaks(t$25);
            var var13;
            {
              jumpBlockOuterjumpLab$bg30292:{
                jumpLab$bg30292:{
                  switch (var12.__type_switch_id) {
                    case 392:
                      var13 = var12.i0;
                      break jumpLab$bg30292;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var newBreak = var13;
                  var t$26 = flatContents;
                  var var14 = sk$Doc$dtpropagateBreaks(t$26);
                  var var15;
                  var var16;
                  {
                    jumpBlockOuterjumpLab$bg30289:{
                      jumpLab$bg30289:{
                        switch (var14.__type_switch_id) {
                          case 392:
                            var16 = var14.i0;
                            var15 = var14.i1;
                            break jumpLab$bg30289;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var shouldBreak4 = var15;
                        var newFlat = var16;
                        var t$27 = newBreak;
                        var t$28 = newFlat;
                        var t$29 = new (sk$Doc$dtIfBreak)(t$27, t$28);
                        var t$30 = shouldBreak4;
                        return new (sk$Tuple2)(t$29, t$30);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        {
          var t$31 = doc;
          return new (sk$Tuple2)(t$31, new sk$Bool((true)));
        }
      }
      {
        var t$32 = doc;
        return new (sk$Tuple2)(t$32, new sk$Bool((false)));
      }
    }
  }
};

var sk$Doc$dtrootIndent = sk.Doc$dtrootIndent = function() {
  return new (sk$Doc$dtIndentComputation)(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
};

var sk$Doc$dtsimplifyDoc = sk.Doc$dtsimplifyDoc = function(doc) {
  var contents;
  var n;
  var flatContents;
  var breakLine;
  var parts;
  var parts1;
  var contents1;
  var breakContents;
  var contents2;
  var marker;
  {
    jumpBlockOuterjumpLab$bg30393:{
      jumpLab$bg30393:{
        jumpLab$bg30392:{
          jumpLab$bg30391:{
            jumpLab$bg30390:{
              jumpLab$bg30389:{
                jumpLab$bg30388:{
                  jumpLab$bg30387:{
                    jumpLab$bg30386:{
                      jumpLab$bg30394:{
                        switch (doc.__type_switch_id) {
                          case 30:
                            parts = doc.parts;
                            break jumpLab$bg30386;
                          
                          case 35:
                            contents2 = doc.contents;
                            break jumpLab$bg30387;
                          
                          case 29:
                            contents1 = doc.contents;
                            n = doc.n;
                            break jumpLab$bg30388;
                          
                          case 33:
                            breakLine = doc.breakLine;
                            contents = doc.contents;
                            marker = doc.marker;
                            break jumpLab$bg30389;
                          
                          case 34:
                            breakContents = doc.breakContents;
                            flatContents = doc.flatContents;
                            break jumpLab$bg30390;
                          
                          case 32:
                            parts1 = doc.parts;
                            break jumpLab$bg30391;
                          
                          case 31:
                            break jumpLab$bg30393;
                          
                          case 36:
                            break jumpLab$bg30393;
                          
                          case 26:
                            break jumpLab$bg30393;
                          
                          case 38:
                            break jumpLab$bg30393;
                          
                          case 37:
                            break jumpLab$bg30393;
                          
                          case 28:
                            break jumpLab$bg30393;
                          
                          case 27:
                            break jumpLab$bg30393;
                          
                          case 39:
                            break jumpLab$bg30394;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var _tmp553 = doc.str.__getSwitchValue();
                        switch (_tmp553) {
                          case '':
                            break jumpLab$bg30392;
                          
                          default:
                            break jumpLab$bg30393;

                        }
                      }
                    }
                    {
                      var newParts = sk$Vector.mcreateFromItems(new (sk$Array)([]));
                      var pushPart = ((_part) => 
                      {
                        return sk.__.$void;
                      });
                      pushPart = ((part) => 
                      {
                        var t$ = part;
                        var $var = sk$Doc$dtsimplifyDoc(t$);
                        var xParts;
                        var str;
                        var x;
                        var x1;
                        {
                          jumpBlockOuterjumpLab$bg30366:{
                            jumpLab$bg30366:{
                              jumpLab$bg30365:{
                                jumpLab$bg30364:{
                                  jumpLab$bg30363:{
                                    switch ($var.__type_switch_id) {
                                      case 31:
                                        break jumpLab$bg30363;
                                      
                                      case 39:
                                        x = $var;
                                        str = $var.str;
                                        break jumpLab$bg30364;
                                      
                                      case 30:
                                        xParts = $var.parts;
                                        break jumpLab$bg30365;
                                      
                                      default:
                                        x1 = $var;
                                        break jumpLab$bg30366;

                                    }
                                  }
                                  return sk.__.$void;
                                }
                                {
                                  var t$1 = newParts;
                                  var t$2 = t$1.size();
                                  if (t$2.$gt(new sk$Int(0.0, 0.0)).__value)
                                    {
                                      var t$3 = newParts;
                                      var t$4 = newParts;
                                      var t$5 = t$4.size();
                                      var t$6 = t$5.$mi(new sk$Int(1.0, 0.0));
                                      var var1 = t$3.get(t$6);
                                      var lastStr;
                                      {
                                        jumpBlockOuterjumpLab$bg30360:{
                                          jumpLab$bg30360:{
                                            jumpLab$bg30359:{
                                              switch (var1.__type_switch_id) {
                                                case 39:
                                                  lastStr = var1.str;
                                                  break jumpLab$bg30359;
                                                
                                                default:
                                                  break jumpLab$bg30360;

                                              }
                                            }
                                            {
                                              var t$7 = newParts;
                                              var t$8 = newParts;
                                              var t$9 = t$8.size();
                                              var t$10 = t$9.$mi(new sk$Int(1.0, 0.0));
                                              var t$11 = lastStr;
                                              var t$12 = str;
                                              var t$13 = t$11.$pl(t$12);
                                              var t$14 = new (sk$Doc$dtStr)(t$13);
                                              t$7.set(t$10, t$14);
                                              return sk.__.$void;
                                            }
                                          }
                                          {
                                            var t$15 = newParts;
                                            var t$16 = x;
                                            return t$15.push(t$16);
                                          }
                                        }
                                      }
                                    }
                                  else
                                    {
                                      var t$17 = newParts;
                                      var t$18 = x;
                                      return t$17.push(t$18);
                                    }
                                }
                              }
                              {
                                var t$19 = xParts;
                                var t$20 = pushPart;
                                return t$19.each(t$20);
                              }
                            }
                            {
                              var t$21 = newParts;
                              var t$22 = x1;
                              return t$21.push(t$22);
                            }
                          }
                        }
                      });
                      var t$23 = parts;
                      t$23.each(((part1) => 
                      {
                        var t$24 = pushPart;
                        var t$25 = part1;
                        return t$24(t$25);
                      }));
                      var t$26 = newParts;
                      var t$27 = t$26.size();
                      if (t$27.$eq$eq(new sk$Int(0.0, 0.0)).__value)
                        return singleton$Doc$dtEmpty;
                      else
                        {
                          var t$28 = newParts;
                          var t$29 = t$28.size();
                          if (t$29.$eq$eq(new sk$Int(1.0, 0.0)).__value)
                            {
                              var t$30 = newParts;
                              return t$30.get(new sk$Int(0.0, 0.0));
                            }
                          else
                            {
                              var t$31 = skip.deepFreeze(newParts, new Map());
                              return new (sk$Doc$dtConcat)(t$31);
                            }
                        }
                    }
                  }
                  {
                    var t$32 = contents2;
                    var var2 = sk$Doc$dtsimplifyDoc(t$32);
                    var x2;
                    {
                      jumpBlockOuterjumpLab$bg30370:{
                        jumpLab$bg30370:{
                          jumpLab$bg30369:{
                            switch (var2.__type_switch_id) {
                              case 31:
                                break jumpLab$bg30369;
                              
                              default:
                                x2 = var2;
                                break jumpLab$bg30370;

                            }
                          }
                          return singleton$Doc$dtEmpty;
                        }
                        {
                          var t$33 = x2;
                          return new (sk$Doc$dtIndent)(t$33);
                        }
                      }
                    }
                  }
                }
                {
                  var t$34 = contents1;
                  var var3 = sk$Doc$dtsimplifyDoc(t$34);
                  var x3;
                  {
                    jumpBlockOuterjumpLab$bg30374:{
                      jumpLab$bg30374:{
                        jumpLab$bg30373:{
                          switch (var3.__type_switch_id) {
                            case 31:
                              break jumpLab$bg30373;
                            
                            default:
                              x3 = var3;
                              break jumpLab$bg30374;

                          }
                        }
                        return singleton$Doc$dtEmpty;
                      }
                      {
                        var t$35 = n;
                        var t$36 = x3;
                        return new (sk$Doc$dtAlign)(t$35, t$36);
                      }
                    }
                  }
                }
              }
              {
                var t$37 = contents;
                var var4 = sk$Doc$dtsimplifyDoc(t$37);
                var x4;
                {
                  jumpBlockOuterjumpLab$bg30378:{
                    jumpLab$bg30378:{
                      jumpLab$bg30377:{
                        switch (var4.__type_switch_id) {
                          case 31:
                            break jumpLab$bg30377;
                          
                          default:
                            x4 = var4;
                            break jumpLab$bg30378;

                        }
                      }
                      return singleton$Doc$dtEmpty;
                    }
                    {
                      var t$38 = x4;
                      var t$39 = breakLine;
                      var t$40 = marker;
                      return new (sk$Doc$dtGroup)(t$38, t$39, t$40);
                    }
                  }
                }
              }
            }
            {
              var t$41 = breakContents;
              var t$42 = sk$Doc$dtsimplifyDoc(t$41);
              var t$43 = flatContents;
              var t$44 = sk$Doc$dtsimplifyDoc(t$43);
              var var5 = new (sk$Tuple2)(t$42, t$44);
              var y;
              var x5;
              {
                jumpBlockOuterjumpLab$bg30382:{
                  jumpLab$bg30382:{
                    jumpLab$bg30381:{
                      jumpLab$bg30383:{
                        jumpLab$bg30384:{
                          switch (var5.__type_switch_id) {
                            case 392:
                              break jumpLab$bg30384;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        switch (var5.i0.__type_switch_id) {
                          case 31:
                            break jumpLab$bg30383;
                          
                          default:
                            x5 = var5.i0;
                            y = var5.i1;
                            break jumpLab$bg30382;

                        }
                      }
                      switch (var5.i1.__type_switch_id) {
                        case 31:
                          break jumpLab$bg30381;
                        
                        default:
                          x5 = var5.i0;
                          y = var5.i1;
                          break jumpLab$bg30382;

                      }
                    }
                    return singleton$Doc$dtEmpty;
                  }
                  {
                    var t$45 = x5;
                    var t$46 = y;
                    return new (sk$Doc$dtIfBreak)(t$45, t$46);
                  }
                }
              }
            }
          }
          {
            var t$47 = parts1;
            var t$48 = t$47.map(((_tmp30356) => 
            {
              return sk$Doc$dtsimplifyDoc(_tmp30356);
            }));
            return new (sk$Doc$dtFill)(t$48);
          }
        }
        return singleton$Doc$dtEmpty;
      }
      return doc;
    }
  }
};

var sk$FilePosition$dtcreate = sk.FilePosition$dtcreate = function(filename, position) {
  var t$ = filename;
  var t$1 = position;
  return new (sk$FilePosition)({
    filename: t$,
    position: t$1
  });
};

var sk$FileRange$dtcreate = sk.FileRange$dtcreate = function(filename, range) {
  var t$ = filename;
  var t$1 = range;
  return sk$FileRange.create(t$, t$1);
};

var sk$FileRange$dtfromStartEnd = sk.FileRange$dtfromStartEnd = function(start, end) {
  var t$ = start;
  var t$1 = end;
  return sk$FileRange.fromStartEnd(t$, t$1);
};

var sk$FileSystem$dtappendTextFile = sk.FileSystem$dtappendTextFile = function(filename, contents) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$FileSystem$dtensureDirectory = sk.FileSystem$dtensureDirectory = function(dirname) {
  var t$ = dirname;
  return sk$FileSystem$dtensure_directory(t$);
};

var sk$FileSystem$dtensure_directory = sk.FileSystem$dtensure_directory = function(dirname) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$FileSystem$dtexists = sk.FileSystem$dtexists = function(filename) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$FileSystem$dtfindNearestFile = sk.FileSystem$dtfindNearestFile = function(dirname, filename) {
  do
    {
      jumpBlockOuterloop_end$bg30415:{
        loop_end$bg30415:{
          {
            var t$ = dirname;
            var t$1 = filename;
            var t$2 = sk$Path$dtjoin(t$, t$1, undefined);
            if (sk$FileSystem$dtexists(t$2).__value)
              {
                var t$3 = dirname;
                return new (sk$Some)(t$3);
              }
            else
              {
                var t$4 = dirname;
                if (sk$Path$dtisRoot(t$4).__value)
                  return singleton$None;
                else
                  {
                    var t$5 = dirname;
                    var t$6 = sk$Path$dtdirname(t$5);
                    var t$7 = filename;
                    var t$8 = t$6;
                    var t$9 = t$7;
                    dirname = t$8;
                    filename = t$9;
                    break loop_end$bg30415;
                  }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg30415;
      }
    }
  while (true);
};

var sk$FileSystem$dtisDirectory = sk.FileSystem$dtisDirectory = function(filename) {
  var t$ = filename;
  return sk$FileSystem$dtis_directory(t$);
};

var sk$FileSystem$dtis_directory = sk.FileSystem$dtis_directory = function(filename) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$FileSystem$dtreadDirectory = sk.FileSystem$dtreadDirectory = function(dirname) {
  var t$ = dirname;
  var t$1 = sk$FileSystem$dtreaddir(t$);
  return t$1.sorted(undefined);
};

var sk$FileSystem$dtreadFilesRecursive = sk.FileSystem$dtreadFilesRecursive = function(dirname, fileFilter, directoryFilter) {
  if (fileFilter === undefined)
    fileFilter = ((() => 
    {
      return ((_) => 
      {
        return new sk$Bool((true));
      });
    })());
  if (directoryFilter === undefined)
    directoryFilter = ((() => 
    {
      return ((_) => 
      {
        return new sk$Bool((true));
      });
    })());
  var t$ = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var result = t$;
  var processDirectory = ((_) => 
  {
    return sk.__.$void;
  });
  processDirectory = ((dir) => 
  {
    var t$1 = dir;
    var t$2 = sk$FileSystem$dtreadDirectory(t$1);
    var $var = t$2.values();
    var var1 = new sk$Bool((true));
    var break_val;
    {
      jumpBlockOuterbreak$bg30429:{
        break$bg30429:{
          dowhile_else$bg30428:{
            do
              {
                jumpBlockOuterdowhile_cond$bg30430:{
                  dowhile_cond$bg30430:{
                    {
                      var t$3 = $var;
                      var var2 = t$3.next();
                      var entry;
                      {
                        jumpBlockOuterjumpLab$bg30453:{
                          jumpLab$bg30453:{
                            jumpLab$bg30452:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg30452;
                                
                                case 205:
                                  entry = var2.value;
                                  break jumpLab$bg30453;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            {
                              var1 = new sk$Bool((false));
                              break dowhile_cond$bg30430;
                            }
                          }
                          {
                            var t$4 = dir;
                            var t$5 = entry;
                            var entryPath = sk$Path$dtjoin(t$4, t$5, undefined);
                            var t$6 = entryPath;
                            var t$7;
                            if (sk$FileSystem$dtisDirectory(t$6).__value)
                              {
                                var t$8 = directoryFilter;
                                var t$9 = entryPath;
                                var t$10;
                                if (t$8(t$9).__value)
                                  {
                                    var t$11 = processDirectory;
                                    var t$12 = entryPath;
                                    t$10 = t$11(t$12);
                                  }
                                else
                                  t$10 = sk.__.$void;
                                t$7 = t$10;
                              }
                            else
                              {
                                var t$13 = fileFilter;
                                var t$14 = entryPath;
                                var t$15;
                                if (t$13(t$14).__value)
                                  {
                                    var t$16 = result;
                                    var t$17 = entryPath;
                                    t$15 = t$16.push(t$17);
                                  }
                                else
                                  t$15 = sk.__.$void;
                                t$7 = t$15;
                              }
                          }
                          break jumpBlockOuterjumpLab$bg30453;
                        }
                      }
                      break dowhile_cond$bg30430;
                    }
                  }
                  if (var1.__value)
                    {}
                  else
                    break dowhile_else$bg30428;
                  break jumpBlockOuterdowhile_cond$bg30430;
                }
              }
            while (true);
          }
          break_val = sk.__.$void;
          break jumpBlockOuterbreak$bg30429;
        }
        {}
        break jumpBlockOuterbreak$bg30429;
      }
    }
    return break_val;
  });
  var t$18 = processDirectory;
  var t$19 = dirname;
  var t$20 = sk$Path$dtnormalize(t$19);
  t$18(t$20);
  return skip.deepFreeze(result, new Map());
};

var sk$FileSystem$dtreadTextFile = sk.FileSystem$dtreadTextFile = function(filename) {
  var t$ = filename;
  return sk$open_file(t$);
};

var sk$FileSystem$dtreaddir = sk.FileSystem$dtreaddir = function(dirname) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$FileSystem$dtwriteTextFile = sk.FileSystem$dtwriteTextFile = function(filename, contents) {
  var t$ = contents;
  var t$1 = filename;
  return sk$string_to_file(t$, t$1);
};

var sk$Glob$dttoRegex = sk.Glob$dttoRegex = function(pattern) {
  var res = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = pattern;
  t$.foldl(((state, c) => 
  {
    jumpBlockOuterjumpLab$bg30512:{
      jumpLab$bg30512:{
        jumpLab$bg30511:{
          jumpLab$bg30510:{
            jumpLab$bg30509:{
              jumpLab$bg30508:{
                jumpLab$bg30507:{
                  jumpLab$bg30506:{
                    jumpLab$bg30505:{
                      jumpLab$bg30504:{
                        switch (state.__type_switch_id) {
                          case 86:
                            var $var = new sk$Bool((false));
                            var t$1 = c;
                            $var = t$1.$eq$eq($makeChar(91));
                            if ($var.__value)
                              break jumpLab$bg30504;
                            else
                              {
                                var var1 = new sk$Bool((false));
                                var t$2 = c;
                                var1 = t$2.$eq$eq($makeChar(92));
                                if (var1.__value)
                                  break jumpLab$bg30505;
                                else
                                  break jumpLab$bg30506;
                              }
                          
                          case 85:
                            break jumpLab$bg30507;
                          
                          case 83:
                            break jumpLab$bg30508;
                          
                          case 84:
                            var var2 = new sk$Bool((false));
                            var t$3 = c;
                            var2 = t$3.$eq$eq($makeChar(92));
                            if (var2.__value)
                              break jumpLab$bg30509;
                            else
                              {
                                var var3 = new sk$Bool((false));
                                var t$4 = c;
                                var3 = t$4.$eq$eq($makeChar(93));
                                if (var3.__value)
                                  break jumpLab$bg30510;
                                else
                                  break jumpLab$bg30511;
                              }
                          
                          case 82:
                            break jumpLab$bg30512;
                          
                          default:
                            skip.throwException(sk, new Error('Unmatched Branch'));

                        }
                      }
                      {
                        var t$5 = res;
                        var t$6 = c;
                        t$5.push(t$6);
                        return singleton$Glob$dtGlobStateCharClassFirst;
                      }
                    }
                    {
                      var t$7 = res;
                      var t$8 = c;
                      t$7.push(t$8);
                      return singleton$Glob$dtGlobStateEscape;
                    }
                  }
                  {
                    {
                      jumpBlockOuterjumpLab$bg30498:{
                        jumpLab$bg30498:{
                          jumpLab$bg30497:{
                            jumpLab$bg30496:{
                              {
                                var _tmp554 = c.__getSwitchValue();
                                switch (_tmp554) {
                                  case 42:
                                    break jumpLab$bg30496;
                                  
                                  case 63:
                                    break jumpLab$bg30497;
                                  
                                  default:
                                    break jumpLab$bg30498;

                                }
                              }
                            }
                            {
                              var t$9 = res;
                              t$9.push($makeChar(46));
                              var t$10 = res;
                              t$10.push($makeChar(42));
                            }
                            break jumpBlockOuterjumpLab$bg30498;
                          }
                          {
                            var t$11 = res;
                            t$11.push($makeChar(46));
                          }
                          break jumpBlockOuterjumpLab$bg30498;
                        }
                        {
                          var t$12 = res;
                          var t$13 = c;
                          var t$14 = t$13.toString();
                          var t$15 = sk$Regex$dtescape(t$14);
                          var t$16 = t$15.chars();
                          t$12.extend(t$16);
                        }
                        break jumpBlockOuterjumpLab$bg30498;
                      }
                    }
                    return singleton$Glob$dtGlobStateNormal;
                  }
                }
                {
                  var t$17 = res;
                  var t$18 = c;
                  t$17.push(t$18);
                  return singleton$Glob$dtGlobStateNormal;
                }
              }
              {
                {
                  jumpBlockOuterjumpLab$bg30502:{
                    jumpLab$bg30502:{
                      jumpLab$bg30501:{
                        jumpLab$bg30500:{
                          {
                            var _tmp555 = c.__getSwitchValue();
                            switch (_tmp555) {
                              case 94:
                                break jumpLab$bg30500;
                              
                              case 33:
                                break jumpLab$bg30501;
                              
                              default:
                                break jumpLab$bg30502;

                            }
                          }
                        }
                        {
                          var t$19 = res;
                          t$19.push($makeChar(92));
                          var t$20 = res;
                          t$20.push($makeChar(94));
                        }
                        break jumpBlockOuterjumpLab$bg30502;
                      }
                      {
                        var t$21 = res;
                        t$21.push($makeChar(94));
                      }
                      break jumpBlockOuterjumpLab$bg30502;
                    }
                    {
                      var t$22 = res;
                      var t$23 = c;
                      t$22.push(t$23);
                    }
                    break jumpBlockOuterjumpLab$bg30502;
                  }
                }
                return singleton$Glob$dtGlobStateCharClassRest;
              }
            }
            {
              var t$24 = res;
              t$24.push($makeChar(92));
              return singleton$Glob$dtGlobStateCharClassEscape;
            }
          }
          {
            var t$25 = res;
            var t$26 = c;
            t$25.push(t$26);
            return singleton$Glob$dtGlobStateNormal;
          }
        }
        {
          var t$27 = res;
          var t$28 = c;
          t$27.push(t$28);
          return singleton$Glob$dtGlobStateCharClassRest;
        }
      }
      {
        var t$29 = res;
        var t$30 = c;
        t$29.push(t$30);
        return singleton$Glob$dtGlobStateCharClassRest;
      }
    }
  }), singleton$Glob$dtGlobStateNormal);
  var t$31 = res;
  var t$32 = t$31.toArray();
  return sk$String.fromChars(t$32);
};

var sk$Hashable$dtcombine = sk.Hashable$dtcombine = function(seed, n) {
  var t$ = seed;
  var t$1 = t$.shl(new sk$Int(6.0, 0.0));
  var t$2 = seed;
  var t$3 = t$2.ushr(new sk$Int(2.0, 0.0));
  var mix = t$1.$pl(t$3);
  var t$4 = seed;
  var t$5 = mix;
  var t$6 = new sk$Int(2135587861.0, 2654435769.0).$pl(t$5);
  var t$7 = n;
  var t$8 = t$7.hash();
  var t$9 = t$6.$pl(t$8);
  return t$4.xor(t$9);
};

var sk$HhvmInterop$dtconvertToHhvmHandle = sk.HhvmInterop$dtconvertToHhvmHandle = function(h) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtconvertToHhvmShapeHandle = sk.HhvmInterop$dtconvertToHhvmShapeHandle = function(h) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtcopyFromHhvm = sk.HhvmInterop$dtcopyFromHhvm = function(handle) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtcopyOptionToHhvm = sk.HhvmInterop$dtcopyOptionToHhvm = function(option) {
  var t$ = option;
  return t$.map(((_tmp30534) => 
  {
    return sk$HhvmInterop$dtcopyToHhvm(_tmp30534);
  }));
};

var sk$HhvmInterop$dtcopyToHhvm = sk.HhvmInterop$dtcopyToHhvm = function(o) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtcreateArrayFromFixedVector = sk.HhvmInterop$dtcreateArrayFromFixedVector = function(kind, v, size) {
  var t$ = kind;
  var t$1 = size;
  var t$2 = v;
  var t$3 = t$2.values();
  var t$4 = t$3.map(((i) => 
  {
    var t$5 = i;
    return sk$HhvmInterop$dtinternalBitcastToRetValue(t$5);
  }));
  return sk$HhvmInterop$dtinnerCreateArrayFromFixedVector(t$, t$1, t$4);
};

var sk$HhvmInterop$dtcreateFromProxyPointer = sk.HhvmInterop$dtcreateFromProxyPointer = function(handle) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtcreateFromProxyPointerAndType = sk.HhvmInterop$dtcreateFromProxyPointerAndType = function(handle, hhvmType) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtcreateHhvmProxyClass = sk.HhvmInterop$dtcreateHhvmProxyClass = function(name) {
  var t$ = name;
  var t$1 = sk$HhvmInterop$dtinternalCreateHhvmProxyClass(t$);
  return sk$HhvmInterop$dtcreateFromProxyPointer(t$1);
};

var sk$HhvmInterop$dtfetchProxyPointer = sk.HhvmInterop$dtfetchProxyPointer = function(obj) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dthhvmVariantFactory = sk.HhvmInterop$dthhvmVariantFactory = function(variant, value) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dthhvmVariantFactoryFromNullable = sk.HhvmInterop$dthhvmVariantFactoryFromNullable = function(variant, value) {
  var v;
  {
    jumpBlockOuterjumpLab$bg30550:{
      jumpLab$bg30550:{
        jumpLab$bg30549:{
          switch (value.__type_switch_id) {
            case 202:
              v = value.value;
              break jumpLab$bg30549;
            
            case 203:
              break jumpLab$bg30550;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = variant;
          var t$1 = v;
          return sk$HhvmInterop$dthhvmVariantFactory(t$, t$1);
        }
      }
      {
        var t$2 = variant;
        return sk$HhvmInterop$dthhvmVariantNullFactory(t$2);
      }
    }
  }
};

var sk$HhvmInterop$dthhvmVariantNullFactory = sk.HhvmInterop$dthhvmVariantNullFactory = function(variant) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinnerCreateArrayFromFixedVector = sk.HhvmInterop$dtinnerCreateArrayFromFixedVector = function(kind, size, iterator) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalBitcastLambdaToRetValue = sk.HhvmInterop$dtinternalBitcastLambdaToRetValue = function(value) {
  var s;
  var o;
  {
    jumpBlockOuterjumpLab$bg30556:{
      jumpLab$bg30556:{
        jumpLab$bg30555:{
          switch (value.__type_switch_id) {
            case 88:
              s = value.lambda;
              break jumpLab$bg30555;
            
            case 87:
              o = value.lambda;
              break jumpLab$bg30556;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = s;
          return sk$HhvmInterop$dtinternalBitcastToRetValue(t$);
        }
      }
      {
        var t$1 = o;
        return sk$HhvmInterop$dtinternalBitcastToRetValue(t$1);
      }
    }
  }
};

var sk$HhvmInterop$dtinternalBitcastToRetValue = sk.HhvmInterop$dtinternalBitcastToRetValue = function(v) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalCreateFrozenFromItems = sk.HhvmInterop$dtinternalCreateFrozenFromItems = function(i) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalCreateFrozenFromIterator = sk.HhvmInterop$dtinternalCreateFrozenFromIterator = function(i) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalCreateHhvmProxyClass = sk.HhvmInterop$dtinternalCreateHhvmProxyClass = function(name) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalCreateMutableFromItems = sk.HhvmInterop$dtinternalCreateMutableFromItems = function(i) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalCreateMutableFromIterator = sk.HhvmInterop$dtinternalCreateMutableFromIterator = function(i) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtinternalCreateParamTupleFromNullableObject = sk.HhvmInterop$dtinternalCreateParamTupleFromNullableObject = function(nullable) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30562:{
      jumpLab$bg30562:{
        jumpLab$bg30561:{
          switch (nullable.__type_switch_id) {
            case 202:
              value = nullable.value;
              break jumpLab$bg30561;
            
            case 203:
              break jumpLab$bg30562;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          var t$1 = sk$HhvmInterop$dtfetchProxyPointer(t$);
          return sk$Unsafe$dtRawStorage.make(t$1);
        }
      }
      return sk$Unsafe$dtRawStorage.uninitialized();
    }
  }
};

var sk$HhvmInterop$dtinternalCreateParamTupleFromNullableString = sk.HhvmInterop$dtinternalCreateParamTupleFromNullableString = function(nullable) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30567:{
      jumpLab$bg30567:{
        jumpLab$bg30566:{
          switch (nullable.__type_switch_id) {
            case 202:
              value = nullable.value;
              break jumpLab$bg30566;
            
            case 203:
              break jumpLab$bg30567;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          return sk$Unsafe$dtRawStorage.make(t$);
        }
      }
      return sk$Unsafe$dtRawStorage.uninitialized();
    }
  }
};

var sk$HhvmInterop$dtinternalCreateParamTupleFromNullableT = sk.HhvmInterop$dtinternalCreateParamTupleFromNullableT = function(nullable) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30574:{
      jumpLab$bg30574:{
        jumpLab$bg30573:{
          switch (nullable.__type_switch_id) {
            case 202:
              value = nullable.value;
              break jumpLab$bg30573;
            
            case 203:
              break jumpLab$bg30574;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          var t$1 = sk$Unsafe$dtRawStorage.make(t$);
          return new (sk$Tuple2)(new sk$Int(1.0, 0.0), t$1);
        }
      }
      {
        var t$2 = sk$Unsafe$dtRawStorage.uninitialized();
        return new (sk$Tuple2)(new sk$Int(0.0, 0.0), t$2);
      }
    }
  }
};

var sk$HhvmInterop$dtinternalCreateParamTupleFromOption = sk.HhvmInterop$dtinternalCreateParamTupleFromOption = function(option) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30581:{
      jumpLab$bg30581:{
        jumpLab$bg30580:{
          switch (option.__type_switch_id) {
            case 205:
              value = option.value;
              break jumpLab$bg30580;
            
            case 204:
              break jumpLab$bg30581;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          var t$1 = sk$Unsafe$dtRawStorage.make(t$);
          return new (sk$Tuple2)(new sk$Int(1.0, 0.0), t$1);
        }
      }
      {
        var t$2 = sk$Unsafe$dtRawStorage.uninitialized();
        return new (sk$Tuple2)(new sk$Int(0.0, 0.0), t$2);
      }
    }
  }
};

var sk$HhvmInterop$dtinternalCreateParamTupleFromOptionObject = sk.HhvmInterop$dtinternalCreateParamTupleFromOptionObject = function(option) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30587:{
      jumpLab$bg30587:{
        jumpLab$bg30586:{
          switch (option.__type_switch_id) {
            case 205:
              value = option.value;
              break jumpLab$bg30586;
            
            case 204:
              break jumpLab$bg30587;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          var t$1 = sk$HhvmInterop$dtfetchProxyPointer(t$);
          return sk$Unsafe$dtRawStorage.make(t$1);
        }
      }
      return sk$Unsafe$dtRawStorage.uninitialized();
    }
  }
};

var sk$HhvmInterop$dtinternalCreateParamTupleFromOptionString = sk.HhvmInterop$dtinternalCreateParamTupleFromOptionString = function(option) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30592:{
      jumpLab$bg30592:{
        jumpLab$bg30591:{
          switch (option.__type_switch_id) {
            case 205:
              value = option.value;
              break jumpLab$bg30591;
            
            case 204:
              break jumpLab$bg30592;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          return sk$Unsafe$dtRawStorage.make(t$);
        }
      }
      return sk$Unsafe$dtRawStorage.uninitialized();
    }
  }
};

var sk$HhvmInterop$dtinternalCreateRetValueFromMixed = sk.HhvmInterop$dtinternalCreateRetValueFromMixed = function(m) {
  var v;
  var v1;
  var v2;
  var v3;
  {
    jumpBlockOuterjumpLab$bg30611:{
      jumpLab$bg30611:{
        jumpLab$bg30610:{
          jumpLab$bg30609:{
            jumpLab$bg30608:{
              jumpLab$bg30607:{
                jumpLab$bg30606:{
                  jumpLab$bg30605:{
                    jumpLab$bg30604:{
                      jumpLab$bg30603:{
                        jumpLab$bg30602:{
                          jumpLab$bg30601:{
                            jumpLab$bg30600:{
                              switch (m.__type_switch_id) {
                                case 97:
                                  break jumpLab$bg30610;
                                
                                case 98:
                                  break jumpLab$bg30610;
                                
                                case 99:
                                  break jumpLab$bg30610;
                                
                                case 100:
                                  break jumpLab$bg30610;
                                
                                case 101:
                                  break jumpLab$bg30610;
                                
                                case 103:
                                  break jumpLab$bg30611;
                                
                                case 104:
                                  break jumpLab$bg30600;
                                
                                case 102:
                                  v1 = m.x;
                                  break jumpLab$bg30601;
                                
                                case 94:
                                  v = m.x;
                                  break jumpLab$bg30602;
                                
                                case 96:
                                  v3 = m.x;
                                  break jumpLab$bg30603;
                                
                                case 95:
                                  v2 = m.x;
                                  break jumpLab$bg30604;
                                
                                case 89:
                                  break jumpLab$bg30605;
                                
                                case 92:
                                  break jumpLab$bg30606;
                                
                                case 93:
                                  break jumpLab$bg30607;
                                
                                case 90:
                                  break jumpLab$bg30608;
                                
                                case 91:
                                  break jumpLab$bg30609;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            return new (sk$Tuple2)(new sk$Int(0.0, 0.0), (sk$HhvmInterop$dtnullType()));
                          }
                          {
                            var t$;
                            if (v1.__value)
                              t$ = new sk$Int(1.0, 0.0);
                            else
                              t$ = new sk$Int(0.0, 0.0);
                            var t$1 = t$;
                            return new (sk$Tuple2)(t$1, (sk$HhvmInterop$dtboolType()));
                          }
                        }
                        {
                          var t$2 = v;
                          return new (sk$Tuple2)(t$2, (sk$HhvmInterop$dtintType()));
                        }
                      }
                      {
                        var t$3 = v3;
                        return sk$HhvmInterop$dtinternalBitcastToRetValue(t$3);
                      }
                    }
                    {
                      var t$4 = v2;
                      return sk$HhvmInterop$dtinternalBitcastToRetValue(t$4);
                    }
                  }
                  return sk$invariant_violation(new sk$String(('Cannot convert HH.Darray to HHVM')));
                }
                return sk$invariant_violation(new sk$String(('Cannot convert HH.Varray to HHVM')));
              }
              return sk$invariant_violation(new sk$String(('Cannot convert HH.Vec to HHVM')));
            }
            return sk$invariant_violation(new sk$String(('Cannot convert HH.Dict to HHVM')));
          }
          return sk$invariant_violation(new sk$String(('Cannot convert HH.Keyset to HHVM')));
        }
        return sk$invariant_violation(new sk$String(('Cannot convert HH.Object to HHVM')));
      }
      return sk$invariant_violation(new sk$String(('Cannot convert HH.Resource to HHVM')));
    }
  }
};

var sk$HhvmInterop$dtinternalCreateVarrayFromItems = sk.HhvmInterop$dtinternalCreateVarrayFromItems = function(items) {
  var t$ = items;
  return sk$Vector$dtHH_varray2.createFromItems(t$);
};

var sk$HhvmInterop$dtinternalIteratorNext = sk.HhvmInterop$dtinternalIteratorNext = function(iterator) {
  var t$ = iterator;
  var $var = t$.next();
  var value;
  {
    jumpBlockOuterjumpLab$bg30619:{
      jumpLab$bg30619:{
        jumpLab$bg30618:{
          switch ($var.__type_switch_id) {
            case 205:
              value = $var.value;
              break jumpLab$bg30618;
            
            case 204:
              break jumpLab$bg30619;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return value;
      }
      return sk$invariant_violation(new sk$String(('unexpected end of iterator')));
    }
  }
};

var sk$HhvmInterop$dtinternalMapGetItems = sk.HhvmInterop$dtinternalMapGetItems = function(src) {
  var t$ = src;
  return t$.items();
};

var sk$HhvmInterop$dtinternalSetGetValues = sk.HhvmInterop$dtinternalSetGetValues = function(src) {
  var t$ = src;
  return t$.values();
};

var sk$HhvmInterop$dtpropertyGetHelper = sk.HhvmInterop$dtpropertyGetHelper = function(obj, field) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtpropertySetHelper = sk.HhvmInterop$dtpropertySetHelper = function(obj, field, value) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop$dtthrowUnknownHhvmTypeError = sk.HhvmInterop$dtthrowUnknownHhvmTypeError = function(t, baseClass) {
  var t$ = new sk$String(('unknown hhvm type: \'')).toString();
  var t$1 = t;
  var t$2 = t$1.toString();
  var t$3 = new sk$String(('\' on base class \'')).toString();
  var t$4 = baseClass;
  var t$5 = t$4.toString();
  var t$6 = new sk$String(('\'')).toString();
  var t$7 = new sk$String(('')).join(new (sk$Array)([
    t$,
    t$2,
    t$3,
    t$5,
    t$6
  ]));
  skip.throwException(sk, new (sk$RuntimeError)(t$7));
};

var sk$HhvmInterop$dttupleHelperAppend = sk.HhvmInterop$dttupleHelperAppend = function(obj, v) {
  var t$ = obj;
  var t$1 = v;
  return t$.append(t$1);
};

var sk$HhvmInterop$dttupleHelperCreate = sk.HhvmInterop$dttupleHelperCreate = function() {
  return sk$HhvmInterop$dtTupleHelper.internalCreate();
};

var sk$HhvmInterop$dttupleHelperGet = sk.HhvmInterop$dttupleHelperGet = function(obj, idx) {
  var t$ = obj;
  var t$1 = idx;
  return t$.get(t$1);
};

var sk$HhvmInterop_ObjectCons$dtcreate = sk.HhvmInterop_ObjectCons$dtcreate = function(classId) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_ObjectCons$dtfinish = sk.HhvmInterop_ObjectCons$dtfinish = function(handle) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_ObjectCons$dtsetFieldMixed = sk.HhvmInterop_ObjectCons$dtsetFieldMixed = function(handle, slot, value) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_PropertyGetHelper$dtcheckRetValueType = sk.HhvmInterop_PropertyGetHelper$dtcheckRetValueType = function(t, validTypeMask) {
  var t$ = validTypeMask;
  var t$1 = t;
  var t$2 = t$1.i1;
  var t$3 = new sk$Int(1.0, 0.0).shl(t$2);
  var t$4 = t$.and(t$3);
  if (t$4.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    return sk.__.$void;
  else
    {}
  var t$5 = t;
  var t$6 = t$5.i1;
  var t$7;
  if (t$6.$eq$eq((sk$HhvmInterop$dtnullType())).__value)
    {
      var t$8 = t;
      var t$9 = t$8.i0;
      var t$10;
      if (t$9.$eq$eq((sk$HhvmInterop$dtundefinedValue())).__value)
        t$10 = new sk$String(('Undefined'));
      else
        t$10 = new sk$String(('Null'));
      t$7 = t$10;
    }
  else
    {
      var t$11 = t;
      var t$12 = t$11.i1;
      var t$13;
      if (t$12.$eq$eq((sk$HhvmInterop$dtboolType())).__value)
        t$13 = new sk$String(('Bool'));
      else
        {
          var t$14 = t;
          var t$15 = t$14.i1;
          var t$16;
          if (t$15.$eq$eq((sk$HhvmInterop$dtintType())).__value)
            t$16 = new sk$String(('Int'));
          else
            {
              var t$17 = t;
              var t$18 = t$17.i1;
              var t$19;
              if (t$18.$eq$eq((sk$HhvmInterop$dtfloatType())).__value)
                t$19 = new sk$String(('Float'));
              else
                {
                  var t$20 = t;
                  var t$21 = t$20.i1;
                  var t$22;
                  if (t$21.$eq$eq((sk$HhvmInterop$dtstringType())).__value)
                    t$22 = new sk$String(('String'));
                  else
                    {
                      var t$23 = t;
                      var t$24 = t$23.i1;
                      var t$25;
                      if (t$24.$eq$eq((sk$HhvmInterop$dtobjectType())).__value)
                        t$25 = new sk$String(('Object'));
                      else
                        {
                          var t$26 = t;
                          var t$27 = t$26.i1;
                          var t$28;
                          if (t$27.$eq$eq((sk$HhvmInterop$dtarrayType())).__value)
                            t$28 = new sk$String(('Array'));
                          else
                            {
                              var t$29 = new sk$String(('(unknown type ')).toString();
                              var t$30 = t;
                              var t$31 = t$30.i1;
                              var t$32 = t$31.toString();
                              var t$33 = new sk$String((')')).toString();
                              t$28 = new sk$String(('')).join(new (sk$Array)([
                                t$29,
                                t$32,
                                t$33
                              ]));
                            }
                          t$25 = t$28;
                        }
                      t$22 = t$25;
                    }
                  t$19 = t$22;
                }
              t$16 = t$19;
            }
          t$13 = t$16;
        }
      t$7 = t$13;
    }
  var srcKind = t$7;
  var t$34 = validTypeMask;
  var t$35 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtnullType()));
  var t$36 = t$34.and(t$35);
  var t$37;
  if (t$36.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$37 = new sk$String(('?'));
  else
    t$37 = new sk$String((''));
  var t$38 = t$37;
  var t$39 = validTypeMask;
  var t$40 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtboolType()));
  var t$41 = t$39.and(t$40);
  var t$42;
  if (t$41.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$42 = new sk$String(('Bool|'));
  else
    t$42 = new sk$String((''));
  var t$43 = t$42;
  var t$44 = t$38.$pl(t$43);
  var t$45 = validTypeMask;
  var t$46 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtintType()));
  var t$47 = t$45.and(t$46);
  var t$48;
  if (t$47.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$48 = new sk$String(('Int|'));
  else
    t$48 = new sk$String((''));
  var t$49 = t$48;
  var t$50 = t$44.$pl(t$49);
  var t$51 = validTypeMask;
  var t$52 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtfloatType()));
  var t$53 = t$51.and(t$52);
  var t$54;
  if (t$53.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$54 = new sk$String(('Float|'));
  else
    t$54 = new sk$String((''));
  var t$55 = t$54;
  var t$56 = t$50.$pl(t$55);
  var t$57 = validTypeMask;
  var t$58 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtstringType()));
  var t$59 = t$57.and(t$58);
  var t$60;
  if (t$59.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$60 = new sk$String(('String|'));
  else
    t$60 = new sk$String((''));
  var t$61 = t$60;
  var t$62 = t$56.$pl(t$61);
  var t$63 = validTypeMask;
  var t$64 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtobjectType()));
  var t$65 = t$63.and(t$64);
  var t$66;
  if (t$65.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$66 = new sk$String(('Object|'));
  else
    t$66 = new sk$String((''));
  var t$67 = t$66;
  var t$68 = t$62.$pl(t$67);
  var t$69 = validTypeMask;
  var t$70 = new sk$Int(1.0, 0.0).shl((sk$HhvmInterop$dtarrayType()));
  var t$71 = t$69.and(t$70);
  var t$72;
  if (t$71.$bg$eq(new sk$Int(0.0, 0.0)).__value)
    t$72 = new sk$String(('Array|'));
  else
    t$72 = new sk$String((''));
  var t$73 = t$72;
  var t$74 = t$68.$pl(t$73);
  var targetKind = t$74.stripSuffix(new sk$String(('|')));
  var t$75 = new sk$String(('Cannot cast from ')).toString();
  var t$76 = srcKind;
  var t$77 = t$76.toString();
  var t$78 = new sk$String((' to ')).toString();
  var t$79 = targetKind;
  var t$80 = t$79.toString();
  var t$81 = new sk$String(('')).join(new (sk$Array)([
    t$75,
    t$77,
    t$78,
    t$80
  ]));
  skip.throwException(sk, new (sk$RuntimeError)(t$81));
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalBitcastFromInt = sk.HhvmInterop_PropertyGetHelper$dtinternalBitcastFromInt = function(i) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue = function(v) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateLambdaFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateLambdaFromRetValue = function(t) {
  var t$ = t;
  var t$1 = t$.i1;
  if (t$1.$eq$eq((sk$HhvmInterop$dtstringType())).__value)
    {
      var t$2 = t;
      var t$3 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$2);
      return new (sk$HH$dtLambdaString)(t$3);
    }
  else
    {
      var t$4 = t;
      var t$5 = t$4.i1;
      if (t$5.$eq$eq((sk$HhvmInterop$dtobjectType())).__value)
        {
          var t$6 = t;
          var t$7 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$6);
          return new (sk$HH$dtLambdaObject)(t$7);
        }
      else
        {
          var t$8 = new sk$String(('Cannot convert hhvm type ')).toString();
          var t$9 = t;
          var t$10 = t$9.i1;
          var t$11 = t$10.toString();
          var t$12 = new sk$String((' to Lambda')).toString();
          var t$13 = new sk$String(('')).join(new (sk$Array)([
            t$8,
            t$11,
            t$12
          ]));
          return sk$invariant_violation(t$13);
        }
    }
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateMixedFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateMixedFromRetValue = function(t, validTypeMask) {
  var t$ = t;
  var t$1 = validTypeMask;
  sk$HhvmInterop_PropertyGetHelper$dtcheckRetValueType(t$, t$1);
  var t$2 = t;
  var t$3 = t$2.i1;
  if (t$3.$eq$eq((sk$HhvmInterop$dtnullType())).__value)
    return singleton$HH$dtNull;
  else
    {
      var t$4 = t;
      var t$5 = t$4.i1;
      if (t$5.$eq$eq((sk$HhvmInterop$dtboolType())).__value)
        {
          var t$6 = t;
          var t$7 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$6);
          return new (sk$HH$dtBool)(t$7);
        }
      else
        {
          var t$8 = t;
          var t$9 = t$8.i1;
          if (t$9.$eq$eq((sk$HhvmInterop$dtintType())).__value)
            {
              var t$10 = t;
              var t$11 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$10);
              return new (sk$HH$dtInt)(t$11);
            }
          else
            {
              var t$12 = t;
              var t$13 = t$12.i1;
              if (t$13.$eq$eq((sk$HhvmInterop$dtfloatType())).__value)
                {
                  var t$14 = t;
                  var t$15 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$14);
                  return new (sk$HH$dtFloat)(t$15);
                }
              else
                {
                  var t$16 = t;
                  var t$17 = t$16.i1;
                  if (t$17.$eq$eq((sk$HhvmInterop$dtstringType())).__value)
                    {
                      var t$18 = t;
                      var t$19 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$18);
                      return new (sk$HH$dtString)(t$19);
                    }
                  else
                    {
                      var t$20 = t;
                      var t$21 = t$20.i1;
                      if (t$21.$eq$eq((sk$HhvmInterop$dtobjectType())).__value)
                        {
                          var t$22 = t;
                          var t$23 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$22);
                          return new (sk$HH$dtProxyObject)(t$23);
                        }
                      else
                        {
                          var t$24 = new sk$String(('Cannot convert hhvm type ')).toString();
                          var t$25 = t;
                          var t$26 = t$25.i1;
                          var t$27 = t$26.toString();
                          var t$28 = new sk$String((' to Mixed')).toString();
                          var t$29 = new sk$String(('')).join(new (sk$Array)([
                            t$24,
                            t$27,
                            t$28
                          ]));
                          return sk$invariant_violation(t$29);
                        }
                    }
                }
            }
        }
    }
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue = function(t) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNullableFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateNullableFromRetValue = function(t) {
  var t$ = t;
  var t$1 = t$.i1;
  if (t$1.$eq$eq((sk$HhvmInterop$dtnullType())).__value)
    return singleton$Null;
  else
    {
      var t$2 = t;
      var t$3 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$2);
      return new (sk$Box)(t$3);
    }
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateOptionFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateOptionFromRetValue = function(t) {
  var t$ = t;
  var t$1 = t$.i1;
  if (t$1.$eq$eq((sk$HhvmInterop$dtnullType())).__value)
    return singleton$None;
  else
    {
      var t$2 = t;
      var t$3 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue(t$2);
      return new (sk$Some)(t$3);
    }
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateOptionOptionFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateOptionOptionFromRetValue = function(t) {
  var t$ = t;
  var t$1 = t$.i1;
  if (t$1.$eq$eq((sk$HhvmInterop$dtnullType())).__value)
    {
      var t$2 = t;
      var t$3 = t$2.i0;
      if (t$3.$eq$eq((sk$HhvmInterop$dtundefinedValue())).__value)
        return singleton$None;
      else
        return new (sk$Some)(singleton$None);
    }
  else
    {
      var t$4 = t;
      var t$5 = sk$HhvmInterop_PropertyGetHelper$dtinternalCreateOptionFromRetValue(t$4);
      return new (sk$Some)(t$5);
    }
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateRetValueFromOption = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateRetValueFromOption = function(option) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30791:{
      jumpLab$bg30791:{
        jumpLab$bg30790:{
          switch (option.__type_switch_id) {
            case 205:
              value = option.value;
              break jumpLab$bg30790;
            
            case 204:
              break jumpLab$bg30791;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = value;
          return sk$HhvmInterop$dtinternalBitcastToRetValue(t$);
        }
      }
      return new (sk$Tuple2)((sk$HhvmInterop$dtnullValue()), new sk$Int(0.0, 0.0));
    }
  }
};

var sk$HhvmInterop_PropertyGetHelper$dtinternalCreateRetValueFromOptionOption = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateRetValueFromOptionOption = function(option) {
  var value;
  {
    jumpBlockOuterjumpLab$bg30797:{
      jumpLab$bg30797:{
        jumpLab$bg30796:{
          jumpLab$bg30795:{
            jumpLab$bg30798:{
              switch (option.__type_switch_id) {
                case 205:
                  break jumpLab$bg30798;
                
                case 204:
                  break jumpLab$bg30797;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch (option.value.__type_switch_id) {
              case 205:
                value = option.value.value;
                break jumpLab$bg30795;
              
              case 204:
                break jumpLab$bg30796;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$ = value;
            return sk$HhvmInterop$dtinternalBitcastToRetValue(t$);
          }
        }
        return new (sk$Tuple2)((sk$HhvmInterop$dtnullValue()), new sk$Int(0.0, 0.0));
      }
      return new (sk$Tuple2)((sk$HhvmInterop$dtundefinedValue()), new sk$Int(0.0, 0.0));
    }
  }
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetLambdaProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetLambdaProperty = function(obj, field, value) {
  var s;
  var o;
  {
    jumpBlockOuterjumpLab$bg30808:{
      jumpLab$bg30808:{
        jumpLab$bg30807:{
          switch (value.__type_switch_id) {
            case 88:
              s = value.lambda;
              break jumpLab$bg30807;
            
            case 87:
              o = value.lambda;
              break jumpLab$bg30808;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = obj;
          var t$1 = field;
          var t$2 = s;
          return sk$HhvmInterop$dtpropertySetHelper(t$, t$1, t$2);
        }
      }
      {
        var t$3 = obj;
        var t$4 = field;
        var t$5 = o;
        return sk$HhvmInterop$dtpropertySetHelper(t$3, t$4, t$5);
      }
    }
  }
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetMixedProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetMixedProperty = function(obj, field, value) {
  var v;
  var v1;
  var v2;
  var v3;
  {
    jumpBlockOuterjumpLab$bg30830:{
      jumpLab$bg30830:{
        jumpLab$bg30829:{
          jumpLab$bg30828:{
            jumpLab$bg30827:{
              jumpLab$bg30826:{
                jumpLab$bg30825:{
                  switch (value.__type_switch_id) {
                    case 97:
                      break jumpLab$bg30830;
                    
                    case 98:
                      break jumpLab$bg30830;
                    
                    case 99:
                      break jumpLab$bg30830;
                    
                    case 103:
                      break jumpLab$bg30830;
                    
                    case 104:
                      break jumpLab$bg30825;
                    
                    case 102:
                      v1 = value.x;
                      break jumpLab$bg30826;
                    
                    case 94:
                      v = value.x;
                      break jumpLab$bg30827;
                    
                    case 96:
                      v3 = value.x;
                      break jumpLab$bg30828;
                    
                    case 95:
                      v2 = value.x;
                      break jumpLab$bg30829;
                    
                    case 89:
                      break jumpLab$bg30830;
                    
                    case 90:
                      break jumpLab$bg30830;
                    
                    case 91:
                      break jumpLab$bg30830;
                    
                    case 100:
                      break jumpLab$bg30830;
                    
                    case 92:
                      break jumpLab$bg30830;
                    
                    case 101:
                      break jumpLab$bg30830;
                    
                    case 93:
                      break jumpLab$bg30830;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var t$ = obj;
                  var t$1 = field;
                  return sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull(t$, t$1);
                }
              }
              {
                var t$2 = obj;
                var t$3 = field;
                var t$4 = v1;
                return sk$HhvmInterop$dtpropertySetHelper(t$2, t$3, t$4);
              }
            }
            {
              var t$5 = obj;
              var t$6 = field;
              var t$7 = v;
              return sk$HhvmInterop$dtpropertySetHelper(t$5, t$6, t$7);
            }
          }
          {
            var t$8 = obj;
            var t$9 = field;
            var t$10 = v3;
            return sk$HhvmInterop$dtpropertySetHelper(t$8, t$9, t$10);
          }
        }
        {
          var t$11 = obj;
          var t$12 = field;
          var t$13 = v2;
          return sk$HhvmInterop$dtpropertySetHelper(t$11, t$12, t$13);
        }
      }
      return sk$invariant_violation(new sk$String(('internalSetNonNullMixedProperty type not yet supported')));
    }
  }
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetNullableProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetNullableProperty = function(obj, field, value) {
  var v;
  {
    jumpBlockOuterjumpLab$bg30839:{
      jumpLab$bg30839:{
        jumpLab$bg30838:{
          switch (value.__type_switch_id) {
            case 202:
              v = value.value;
              break jumpLab$bg30838;
            
            case 203:
              break jumpLab$bg30839;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = obj;
          var t$1 = field;
          var t$2 = v;
          return sk$HhvmInterop$dtpropertySetHelper(t$, t$1, t$2);
        }
      }
      {
        var t$3 = obj;
        var t$4 = field;
        return sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull(t$3, t$4);
      }
    }
  }
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetOptionOptionProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetOptionOptionProperty = function(obj, field, value) {
  var v;
  {
    jumpBlockOuterjumpLab$bg30848:{
      jumpLab$bg30848:{
        jumpLab$bg30847:{
          switch (value.__type_switch_id) {
            case 205:
              v = value.value;
              break jumpLab$bg30847;
            
            case 204:
              break jumpLab$bg30848;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = obj;
          var t$1 = field;
          var t$2 = v;
          return sk$HhvmInterop_PropertySetHelper$dtinternalSetOptionProperty(t$, t$1, t$2);
        }
      }
      {
        var t$3 = obj;
        var t$4 = field;
        return sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToUndefined(t$3, t$4);
      }
    }
  }
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetOptionProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetOptionProperty = function(obj, field, value) {
  var v;
  {
    jumpBlockOuterjumpLab$bg30857:{
      jumpLab$bg30857:{
        jumpLab$bg30856:{
          switch (value.__type_switch_id) {
            case 205:
              v = value.value;
              break jumpLab$bg30856;
            
            case 204:
              break jumpLab$bg30857;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$ = obj;
          var t$1 = field;
          var t$2 = v;
          return sk$HhvmInterop$dtpropertySetHelper(t$, t$1, t$2);
        }
      }
      {
        var t$3 = obj;
        var t$4 = field;
        return sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull(t$3, t$4);
      }
    }
  }
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetProperty = function(obj, field, value) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull = sk.HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull = function(obj, field) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToUndefined = sk.HhvmInterop_PropertySetHelper$dtinternalSetPropertyToUndefined = function(obj, field) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_ShapeCons$dtcreate = sk.HhvmInterop_ShapeCons$dtcreate = function(shapeId) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_ShapeCons$dtfinish = sk.HhvmInterop_ShapeCons$dtfinish = function(handle) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$HhvmInterop_ShapeCons$dtsetFieldMixed = sk.HhvmInterop_ShapeCons$dtsetFieldMixed = function(handle, slot, value) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$IndentedWriter$dtcreate = sk.IndentedWriter$dtcreate = function(writeRaw, indentSize) {
  if (indentSize === undefined)
    indentSize = ((() => 
    {
      return (sk$IndentedWriter$dtdefaultIndentSize());
    })());
  var t$ = writeRaw;
  var t$1 = indentSize;
  return sk$IndentedWriter.create(t$, t$1);
};

var sk$IndentedWriter$dtcreateOnStderr = sk.IndentedWriter$dtcreateOnStderr = function(indentSize) {
  if (indentSize === undefined)
    indentSize = ((() => 
    {
      return (sk$IndentedWriter$dtdefaultIndentSize());
    })());
  var t$ = indentSize;
  return sk$IndentedWriter$dtcreate(((_tmp30863) => 
  {
    return sk$print_error(_tmp30863);
  }), t$);
};

var sk$IndentedWriter$dtcreateOnStdout = sk.IndentedWriter$dtcreateOnStdout = function(indentSize) {
  if (indentSize === undefined)
    indentSize = ((() => 
    {
      return (sk$IndentedWriter$dtdefaultIndentSize());
    })());
  var t$ = indentSize;
  return sk$IndentedWriter$dtcreate(((_tmp30866) => 
  {
    return sk$print_raw(_tmp30866);
  }), t$);
};

var sk$JSON$dtcharToString = sk.JSON$dtcharToString = function(ch) {
  var t$ = ch;
  var t$1 = sk$JSON$dtrequiresEscape(t$);
  if (t$1.$bg().__value)
    {
      var t$2 = ch;
      return t$2.toString();
    }
  else
    {
      var addCode = ((chars, code) => 
      {
        var t$3 = chars;
        t$3.push($makeChar(92));
        var t$4 = chars;
        t$4.push($makeChar(117));
        var t$5 = code;
        var t$6 = sk$Chars$dtintToHexDigits(t$5, new sk$Int(4.0, 0.0));
        var t$7 = chars;
        var t$8 = t$7;
        return t$6.each(((_tmp30878) => 
        {
          return t$8.push(_tmp30878);
        }));
      });
      {
        jumpBlockOuterjumpLab$bg30908:{
          jumpLab$bg30908:{
            jumpLab$bg30907:{
              jumpLab$bg30906:{
                jumpLab$bg30905:{
                  jumpLab$bg30904:{
                    jumpLab$bg30903:{
                      jumpLab$bg30902:{
                        jumpLab$bg30901:{
                          jumpLab$bg30900:{
                            {
                              var _tmp556 = ch.__getSwitchValue();
                              switch (_tmp556) {
                                case 92:
                                  break jumpLab$bg30900;
                                
                                case 34:
                                  break jumpLab$bg30901;
                                
                                case 8:
                                  break jumpLab$bg30902;
                                
                                case 12:
                                  break jumpLab$bg30903;
                                
                                case 10:
                                  break jumpLab$bg30904;
                                
                                case 13:
                                  break jumpLab$bg30905;
                                
                                case 9:
                                  break jumpLab$bg30906;
                                
                                default:
                                  {
                                    var $var = new sk$Bool((false));
                                    var t$9 = ch;
                                    $var = sk$Chars$dtisBasicMultiLingualPlane(t$9);
                                    if ($var.__value)
                                      break jumpLab$bg30907;
                                    else
                                      break jumpLab$bg30908;
                                  }

                              }
                            }
                          }
                          return new sk$String(('\\\\'));
                        }
                        return new sk$String(('\\"'));
                      }
                      return new sk$String(('\\b'));
                    }
                    return new sk$String(('\\f'));
                  }
                  return new sk$String(('\\n'));
                }
                return new sk$String(('\\r'));
              }
              return new sk$String(('\\t'));
            }
            {
              var chars1 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
              var t$10 = addCode;
              var t$11 = chars1;
              var t$12 = ch;
              var t$13 = t$12.code();
              t$10(t$11, t$13);
              var t$14 = chars1;
              var t$15 = t$14.toArray();
              return sk$String.fromChars(t$15);
            }
          }
          {
            var chars2 = sk$Vector.mcreateFromItems(new (sk$Array)([]));
            var t$16 = ch;
            var var1 = sk$Chars$dttoUTF16SurrogatePair(t$16);
            var var2;
            var var3;
            {
              jumpBlockOuterjumpLab$bg30898:{
                jumpLab$bg30898:{
                  switch (var1.__type_switch_id) {
                    case 392:
                      var2 = var1.i0;
                      var3 = var1.i1;
                      break jumpLab$bg30898;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var low = var3;
                  var high = var2;
                  var t$17 = addCode;
                  var t$18 = chars2;
                  var t$19 = high;
                  t$17(t$18, t$19);
                  var t$20 = addCode;
                  var t$21 = chars2;
                  var t$22 = low;
                  t$20(t$21, t$22);
                  var t$23 = chars2;
                  var t$24 = t$23.toArray();
                  return sk$String.fromChars(t$24);
                }
              }
            }
          }
        }
      }
    }
};

var sk$JSON$dtdecode = sk.JSON$dtdecode = function(value) {
  var t$ = value;
  var iter = sk$Lexer$dtLexingPosition.create(t$);
  var t$1 = iter;
  var result = sk$JSON$dtdecodeValue(t$1);
  var t$2 = iter;
  sk$JSON$dteatWhitespace(t$2);
  var t$3 = iter;
  var t$4 = t$3.atEnd();
  if (t$4.$bg().__value)
    {
      var t$5 = iter;
      sk$JSON$dtreportInvalidJSON(t$5, new sk$String(('Expected end of JSON string.')));
    }
  else
    {}
  return result;
};

var sk$JSON$dtdecodeArray = sk.JSON$dtdecodeArray = function(iter) {
  var t$ = iter;
  sk$JSON$dteat(t$, $makeChar(91));
  var t$1 = iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = iter;
  if (sk$JSON$dteatOpt(t$2, $makeChar(93)).__value)
    {
      var t$3 = sk$Vector.createFromItems(new (sk$Array)([]));
      return new (sk$JSON$dtArray)(t$3);
    }
  else
    {
      var vector = sk$Vector.mcreateFromItems(new (sk$Array)([]));
      var t$4 = iter;
      var t$5 = vector;
      sk$JSON$dtdecodeArrayElements(t$4, t$5);
      var t$6 = skip.deepFreeze(vector, new Map());
      return new (sk$JSON$dtArray)(t$6);
    }
};

var sk$JSON$dtdecodeArrayElements = sk.JSON$dtdecodeArrayElements = function(iter, vector) {
  do
    {
      jumpBlockOuterloop_end$bg30952:{
        loop_end$bg30952:{
          {
            var t$ = iter;
            var v = sk$JSON$dtdecodeValue(t$);
            var t$1 = vector;
            var t$2 = v;
            t$1.push(t$2);
            var t$3 = iter;
            sk$JSON$dteatWhitespace(t$3);
            var t$4 = iter;
            var $var = t$4.peek();
            var c;
            {
              jumpBlockOuterjumpLab$bg30950:{
                jumpLab$bg30950:{
                  jumpLab$bg30949:{
                    jumpLab$bg30948:{
                      {
                        var _tmp557 = $var.__getSwitchValue();
                        switch (_tmp557) {
                          case 93:
                            break jumpLab$bg30948;
                          
                          case 44:
                            break jumpLab$bg30949;
                          
                          default:
                            {
                              c = $var;
                              break jumpLab$bg30950;
                            }

                        }
                      }
                    }
                    {
                      var t$5 = iter;
                      return t$5.advance();
                    }
                  }
                  {
                    var t$6 = iter;
                    t$6.advance();
                    var t$7 = iter;
                    sk$JSON$dteatWhitespace(t$7);
                    var t$8 = iter;
                    var t$9 = vector;
                    var t$10 = t$8;
                    var t$11 = t$9;
                    iter = t$10;
                    vector = t$11;
                    break loop_end$bg30952;
                  }
                }
                {
                  var t$12 = iter;
                  var t$13 = new sk$String(('Unexpected character \'')).toString();
                  var t$14 = c;
                  var t$15 = sk$JSON$dtcharToString(t$14);
                  var t$16 = t$15.toString();
                  var t$17 = new sk$String(('\' in JSON Array. Expected \',\' or \']\'.')).toString();
                  var t$18 = new sk$String(('')).join(new (sk$Array)([
                    t$13,
                    t$16,
                    t$17
                  ]));
                  return sk$JSON$dtreportInvalidJSON(t$12, t$18);
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg30952;
      }
    }
  while (true);
};

var sk$JSON$dtdecodeNumber = sk.JSON$dtdecodeNumber = function(iter) {
  var t$ = iter;
  var start = t$.clone();
  var t$1 = iter;
  sk$JSON$dtskipSignOpt(t$1);
  var t$2 = iter;
  sk$JSON$dtskipDigits(t$2);
  var t$3 = iter;
  var hadFraction = sk$JSON$dtskipFractionOpt(t$3);
  var t$4 = iter;
  var hadExponent = sk$JSON$dtskipExponentOpt(t$4);
  var t$5 = start;
  var t$6 = iter;
  var value = t$5.getText(t$6);
  try {
    {
      var t$7 = value;
      if (t$7.$eq$eq(new sk$String(('-0'))).__value)
        return new (sk$JSON$dtFloatNumber)(new sk$Float((-0.0)));
      else
        {
          var t$8 = hadFraction;
          var t$9;
          if (t$8.$bg().__value)
            {
              var t$10 = hadExponent;
              t$9 = t$10.$bg();
            }
          else
            t$9 = new sk$Bool((false));
          if (t$9.__value)
            {
              var t$11 = value;
              var t$12 = t$11.toInt();
              return new (sk$JSON$dtIntNumber)(t$12);
            }
          else
            {
              var t$13 = value;
              var t$14 = t$13.toFloat();
              return new (sk$JSON$dtFloatNumber)(t$14);
            }
        }
    }
  }catch ($var){
    {
      var ex;
      {
        jumpBlockOuterjumpLab$bg30979:{
          jumpLab$bg30979:{
            {
              ex = $var;
              break jumpLab$bg30979;
            }
          }
          {
            var t$15 = start;
            var t$16 = ex;
            var t$17 = t$16.getMessage();
            var t$18 = new sk$String(('Bad number format: ')).$pl(t$17);
            return sk$JSON$dtreportInvalidJSON(t$15, t$18);
          }
        }
      }
    }
  }
};

var sk$JSON$dtdecodeObject = sk.JSON$dtdecodeObject = function(iter) {
  var t$ = iter;
  sk$JSON$dteat(t$, $makeChar(123));
  var t$1 = iter;
  sk$JSON$dteatWhitespace(t$1);
  var t$2 = iter;
  if (sk$JSON$dteatOpt(t$2, $makeChar(125)).__value)
    {
      var t$3 = sk$Map.createFromItems(new (sk$Array)([]));
      return new (sk$JSON$dtObject)(t$3);
    }
  else
    {
      var map = sk$Map.mcreateFromItems(new (sk$Array)([]));
      var t$4 = iter;
      var t$5 = map;
      sk$JSON$dtdecodeObjectFields(t$4, t$5);
      var t$6 = skip.deepFreeze(map, new Map());
      return new (sk$JSON$dtObject)(t$6);
    }
};

var sk$JSON$dtdecodeObjectFields = sk.JSON$dtdecodeObjectFields = function(iter, map) {
  do
    {
      jumpBlockOuterloop_end$bg31027:{
        loop_end$bg31027:{
          {
            var t$ = iter;
            var fieldStart = t$.clone();
            var t$1 = iter;
            var s = sk$JSON$dtdecodeString(t$1);
            var t$2 = iter;
            sk$JSON$dteatWhitespace(t$2);
            var t$3 = iter;
            sk$JSON$dteat(t$3, $makeChar(58));
            var t$4 = iter;
            var v = sk$JSON$dtdecodeValue(t$4);
            var t$5 = map;
            var t$6 = s;
            if (t$5.containsKey(t$6).__value)
              {
                var t$7 = fieldStart;
                var t$8 = new sk$String(('Duplicate object key \'')).toString();
                var t$9 = s;
                var t$10 = t$9.toString();
                var t$11 = new sk$String(('\'.')).toString();
                var t$12 = new sk$String(('')).join(new (sk$Array)([
                  t$8,
                  t$10,
                  t$11
                ]));
                sk$JSON$dtreportInvalidJSON(t$7, t$12);
              }
            else
              {}
            var t$13 = map;
            var t$14 = s;
            var t$15 = v;
            t$13.add(t$14, t$15);
            var t$16 = iter;
            sk$JSON$dteatWhitespace(t$16);
            var t$17 = iter;
            var $var = t$17.peek();
            var c;
            {
              jumpBlockOuterjumpLab$bg31025:{
                jumpLab$bg31025:{
                  jumpLab$bg31024:{
                    jumpLab$bg31023:{
                      {
                        var _tmp558 = $var.__getSwitchValue();
                        switch (_tmp558) {
                          case 125:
                            break jumpLab$bg31023;
                          
                          case 44:
                            break jumpLab$bg31024;
                          
                          default:
                            {
                              c = $var;
                              break jumpLab$bg31025;
                            }

                        }
                      }
                    }
                    {
                      var t$18 = iter;
                      return t$18.advance();
                    }
                  }
                  {
                    var t$19 = iter;
                    t$19.advance();
                    var t$20 = iter;
                    sk$JSON$dteatWhitespace(t$20);
                    var t$21 = iter;
                    var t$22 = map;
                    var t$23 = t$21;
                    var t$24 = t$22;
                    iter = t$23;
                    map = t$24;
                    break loop_end$bg31027;
                  }
                }
                {
                  var t$25 = iter;
                  var t$26 = new sk$String(('Unexpected character \'')).toString();
                  var t$27 = c;
                  var t$28 = sk$JSON$dtcharToString(t$27);
                  var t$29 = t$28.toString();
                  var t$30 = new sk$String(('\' in JSON Object. Expected \',\' or \'}\'.')).toString();
                  var t$31 = new sk$String(('')).join(new (sk$Array)([
                    t$26,
                    t$29,
                    t$30
                  ]));
                  return sk$JSON$dtreportInvalidJSON(t$25, t$31);
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg31027;
      }
    }
  while (true);
};

var sk$JSON$dtdecodeString = sk.JSON$dtdecodeString = function(iter) {
  var t$ = iter;
  sk$JSON$dteat(t$, $makeChar(34));
  var result = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  {
    jumpBlockOuterbreak$bg31034:{
      break$bg31034:{
        while_else$bg31033:{
          do
            {
              jumpBlockOutercontinue$bg31035:{
                continue$bg31035:{
                  {
                    var t$1 = iter;
                    var t$2;
                    var $var = t$1.peek();
                    var ch;
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg31110:{
                        jumpLab$bg31110:{
                          jumpLab$bg31109:{
                            jumpLab$bg31108:{
                              jumpLab$bg31107:{
                                {
                                  var _tmp559 = $var.__getSwitchValue();
                                  switch (_tmp559) {
                                    case 92:
                                      break jumpLab$bg31107;
                                    
                                    case 34:
                                      break jumpLab$bg31108;
                                    
                                    default:
                                      {
                                        ch = $var;
                                        var var1 = new sk$Bool((false));
                                        var t$3 = ch;
                                        var1 = sk$Chars$dtisControlC0(t$3);
                                        if (var1.__value)
                                          break jumpLab$bg31109;
                                        else
                                          {
                                            _ = $var;
                                            break jumpLab$bg31110;
                                          }
                                      }

                                  }
                                }
                              }
                              {
                                var t$4 = iter;
                                t$4.advance();
                                var t$5 = iter;
                                var t$6;
                                var var2 = t$5.peek();
                                var _1;
                                {
                                  jumpBlockOuterjumpLab$bg31104:{
                                    jumpLab$bg31104:{
                                      jumpLab$bg31103:{
                                        jumpLab$bg31102:{
                                          jumpLab$bg31101:{
                                            jumpLab$bg31100:{
                                              jumpLab$bg31099:{
                                                jumpLab$bg31098:{
                                                  jumpLab$bg31097:{
                                                    jumpLab$bg31096:{
                                                      jumpLab$bg31095:{
                                                        {
                                                          var _tmp560 = var2.__getSwitchValue();
                                                          switch (_tmp560) {
                                                            case 34:
                                                              break jumpLab$bg31095;
                                                            
                                                            case 92:
                                                              break jumpLab$bg31096;
                                                            
                                                            case 47:
                                                              break jumpLab$bg31097;
                                                            
                                                            case 98:
                                                              break jumpLab$bg31098;
                                                            
                                                            case 102:
                                                              break jumpLab$bg31099;
                                                            
                                                            case 110:
                                                              break jumpLab$bg31100;
                                                            
                                                            case 114:
                                                              break jumpLab$bg31101;
                                                            
                                                            case 116:
                                                              break jumpLab$bg31102;
                                                            
                                                            case 117:
                                                              break jumpLab$bg31103;
                                                            
                                                            default:
                                                              {
                                                                _1 = var2;
                                                                break jumpLab$bg31104;
                                                              }

                                                          }
                                                        }
                                                      }
                                                      {
                                                        var t$7 = result;
                                                        t$7.push($makeChar(34));
                                                        var t$8 = iter;
                                                        t$6 = t$8.advance();
                                                      }
                                                      break jumpBlockOuterjumpLab$bg31104;
                                                    }
                                                    {
                                                      var t$9 = result;
                                                      t$9.push($makeChar(92));
                                                      var t$10 = iter;
                                                      t$6 = t$10.advance();
                                                    }
                                                    break jumpBlockOuterjumpLab$bg31104;
                                                  }
                                                  {
                                                    var t$11 = result;
                                                    t$11.push($makeChar(47));
                                                    var t$12 = iter;
                                                    t$6 = t$12.advance();
                                                  }
                                                  break jumpBlockOuterjumpLab$bg31104;
                                                }
                                                {
                                                  var t$13 = result;
                                                  t$13.push($makeChar(8));
                                                  var t$14 = iter;
                                                  t$6 = t$14.advance();
                                                }
                                                break jumpBlockOuterjumpLab$bg31104;
                                              }
                                              {
                                                var t$15 = result;
                                                t$15.push($makeChar(12));
                                                var t$16 = iter;
                                                t$6 = t$16.advance();
                                              }
                                              break jumpBlockOuterjumpLab$bg31104;
                                            }
                                            {
                                              var t$17 = result;
                                              t$17.push($makeChar(10));
                                              var t$18 = iter;
                                              t$6 = t$18.advance();
                                            }
                                            break jumpBlockOuterjumpLab$bg31104;
                                          }
                                          {
                                            var t$19 = result;
                                            t$19.push($makeChar(13));
                                            var t$20 = iter;
                                            t$6 = t$20.advance();
                                          }
                                          break jumpBlockOuterjumpLab$bg31104;
                                        }
                                        {
                                          var t$21 = result;
                                          t$21.push($makeChar(9));
                                          var t$22 = iter;
                                          t$6 = t$22.advance();
                                        }
                                        break jumpBlockOuterjumpLab$bg31104;
                                      }
                                      {
                                        var t$23 = iter;
                                        t$23.advance();
                                        var t$24 = iter;
                                        var digitsStart = t$24.clone();
                                        var t$25 = iter;
                                        var leadingCode = sk$JSON$dteatHexDigits(t$25);
                                        var t$26 = leadingCode;
                                        var t$27 = sk$Chars$dtisSurrogate(t$26);
                                        var t$28;
                                        if (t$27.$bg().__value)
                                          {
                                            var t$29 = result;
                                            var t$30 = leadingCode;
                                            var t$31 = sk$Char.fromCode(t$30);
                                            t$28 = t$29.push(t$31);
                                          }
                                        else
                                          {
                                            var t$32 = leadingCode;
                                            var t$33;
                                            if (sk$Chars$dtisLowSurrogate(t$32).__value)
                                              {
                                                var t$34 = digitsStart;
                                                t$33 = sk$JSON$dtreportInvalidJSON(t$34, new sk$String(('Trailing surrogate without leading surrogate')));
                                              }
                                            else
                                              {
                                                var t$35 = iter;
                                                sk$JSON$dteatString(t$35, new sk$String(('\\u')));
                                                var t$36 = iter;
                                                var trailingStart = t$36.clone();
                                                var t$37 = iter;
                                                var trailingCode = sk$JSON$dteatHexDigits(t$37);
                                                var t$38 = trailingCode;
                                                var t$39 = sk$Chars$dtisLowSurrogate(t$38);
                                                var t$40;
                                                if (t$39.$bg().__value)
                                                  {
                                                    var t$41 = trailingStart;
                                                    t$40 = sk$JSON$dtreportInvalidJSON(t$41, new sk$String(('Bad low surrogate')));
                                                  }
                                                else
                                                  t$40 = sk.__.$void;
                                                var t$42 = result;
                                                var t$43 = leadingCode;
                                                var t$44 = trailingCode;
                                                var t$45 = sk$Chars$dtfromSurrogatePair(t$43, t$44);
                                                t$33 = t$42.push(t$45);
                                              }
                                            t$28 = t$33;
                                          }
                                        t$6 = t$28;
                                      }
                                      break jumpBlockOuterjumpLab$bg31104;
                                    }
                                    {
                                      var t$46 = iter;
                                      t$6 = sk$JSON$dtreportInvalidJSON(t$46, new sk$String(('Invalid escape sequence in JSON string')));
                                    }
                                    break jumpBlockOuterjumpLab$bg31104;
                                  }
                                }
                                t$2 = new sk$Bool((true));
                              }
                              break jumpBlockOuterjumpLab$bg31110;
                            }
                            {
                              var t$47 = iter;
                              t$47.advance();
                              t$2 = new sk$Bool((false));
                            }
                            break jumpBlockOuterjumpLab$bg31110;
                          }
                          {
                            var t$48 = iter;
                            var t$49 = ch;
                            var t$50 = t$49.code();
                            var t$51 = new sk$String(('Control C0 character in JSON string: ')).$pl(t$50);
                            t$2 = sk$JSON$dtreportInvalidJSON(t$48, t$51);
                          }
                          break jumpBlockOuterjumpLab$bg31110;
                        }
                        {
                          var t$52 = result;
                          var t$53 = iter;
                          var t$54 = t$53.next();
                          t$52.push(t$54);
                          t$2 = new sk$Bool((true));
                        }
                        break jumpBlockOuterjumpLab$bg31110;
                      }
                    }
                    if (t$2.__value)
                      {}
                    else
                      break while_else$bg31033;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg31035;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg31034;
      }
      {}
      break jumpBlockOuterbreak$bg31034;
    }
  }
  var t$55 = result;
  var t$56 = t$55.toArray();
  return sk$String.fromChars(t$56);
};

var sk$JSON$dtdecodeValue = sk.JSON$dtdecodeValue = function(iter) {
  var t$ = iter;
  sk$JSON$dteatWhitespace(t$);
  var t$1 = iter;
  var c = t$1.peek();
  {
    jumpBlockOuterjumpLab$bg31139:{
      jumpLab$bg31139:{
        jumpLab$bg31138:{
          jumpLab$bg31137:{
            jumpLab$bg31136:{
              jumpLab$bg31135:{
                jumpLab$bg31134:{
                  jumpLab$bg31133:{
                    jumpLab$bg31132:{
                      {
                        var _tmp561 = c.__getSwitchValue();
                        switch (_tmp561) {
                          case 110:
                            break jumpLab$bg31132;
                          
                          case 116:
                            break jumpLab$bg31133;
                          
                          case 102:
                            break jumpLab$bg31134;
                          
                          case 48:
                            break jumpLab$bg31135;
                          
                          case 49:
                            break jumpLab$bg31135;
                          
                          case 50:
                            break jumpLab$bg31135;
                          
                          case 51:
                            break jumpLab$bg31135;
                          
                          case 52:
                            break jumpLab$bg31135;
                          
                          case 53:
                            break jumpLab$bg31135;
                          
                          case 54:
                            break jumpLab$bg31135;
                          
                          case 55:
                            break jumpLab$bg31135;
                          
                          case 56:
                            break jumpLab$bg31135;
                          
                          case 57:
                            break jumpLab$bg31135;
                          
                          case 45:
                            break jumpLab$bg31135;
                          
                          case 34:
                            break jumpLab$bg31136;
                          
                          case 123:
                            break jumpLab$bg31137;
                          
                          case 91:
                            break jumpLab$bg31138;
                          
                          default:
                            break jumpLab$bg31139;

                        }
                      }
                    }
                    {
                      var t$2 = iter;
                      sk$JSON$dteatString(t$2, new sk$String(('null')));
                      return singleton$JSON$dtNull;
                    }
                  }
                  {
                    var t$3 = iter;
                    sk$JSON$dteatString(t$3, new sk$String(('true')));
                    return new (sk$JSON$dtBool)(new sk$Bool((true)));
                  }
                }
                {
                  var t$4 = iter;
                  sk$JSON$dteatString(t$4, new sk$String(('false')));
                  return new (sk$JSON$dtBool)(new sk$Bool((false)));
                }
              }
              {
                var t$5 = iter;
                return sk$JSON$dtdecodeNumber(t$5);
              }
            }
            {
              var t$6 = iter;
              var t$7 = sk$JSON$dtdecodeString(t$6);
              return new (sk$JSON$dtString)(t$7);
            }
          }
          {
            var t$8 = iter;
            return sk$JSON$dtdecodeObject(t$8);
          }
        }
        {
          var t$9 = iter;
          return sk$JSON$dtdecodeArray(t$9);
        }
      }
      {
        var t$10 = iter;
        var t$11 = new sk$String(('Invalid JSON start character \'')).toString();
        var t$12 = c;
        var t$13 = t$12.toString();
        var t$14 = new sk$String(('\'.')).toString();
        var t$15 = new sk$String(('')).join(new (sk$Array)([
          t$11,
          t$13,
          t$14
        ]));
        return sk$JSON$dtreportInvalidJSON(t$10, t$15);
      }
    }
  }
};

var sk$JSON$dtdeserialize = sk.JSON$dtdeserialize = function(data, serializer) {
  var t$ = data;
  var t$1 = serializer;
  return sk$JSON$dtFormat.deserialize(t$, t$1);
};

var sk$JSON$dteat = sk.JSON$dteat = function(iter, ch) {
  var t$ = iter;
  if (t$.atEnd().__value)
    {
      var t$1 = iter;
      var t$2 = new sk$String(('Unexpected end of JSON. Expected \'')).toString();
      var t$3 = ch;
      var t$4 = t$3.toString();
      var t$5 = new sk$String(('\'.')).toString();
      var t$6 = new sk$String(('')).join(new (sk$Array)([
        t$2,
        t$4,
        t$5
      ]));
      sk$JSON$dtreportInvalidJSON(t$1, t$6);
    }
  else
    {
      var t$7 = iter;
      var t$8 = t$7.peek();
      var t$9 = ch;
      if (t$8.$bg$eq(t$9).__value)
        {
          var t$10 = iter;
          var t$11 = new sk$String(('Unexpected character \'')).toString();
          var t$12 = iter;
          var t$13 = t$12.peek();
          var t$14 = sk$JSON$dtcharToString(t$13);
          var t$15 = t$14.toString();
          var t$16 = new sk$String(('\' in JSON. Expected \'')).toString();
          var t$17 = ch;
          var t$18 = t$17.toString();
          var t$19 = new sk$String(('\'.')).toString();
          var t$20 = new sk$String(('')).join(new (sk$Array)([
            t$11,
            t$15,
            t$16,
            t$18,
            t$19
          ]));
          sk$JSON$dtreportInvalidJSON(t$10, t$20);
        }
      else
        {}
    }
  var t$21 = iter;
  return t$21.advance();
};

var sk$JSON$dteatHexDigit = sk.JSON$dteatHexDigit = function(iter) {
  var t$ = iter;
  var t$1 = t$.peek();
  var t$2 = sk$Chars$dtisHexDigit(t$1);
  if (t$2.$bg().__value)
    {
      var t$3 = iter;
      sk$JSON$dtreportInvalidJSON(t$3, new sk$String(('Expected hex digit')));
    }
  else
    {}
  var t$4 = iter;
  return t$4.advance();
};

var sk$JSON$dteatHexDigits = sk.JSON$dteatHexDigits = function(iter) {
  var t$ = iter;
  var digitsStart = t$.clone();
  var $var = new (sk$Range)(new sk$Int(0.0, 0.0), new sk$Int(4.0, 0.0)).values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg31180:{
      break$bg31180:{
        dowhile_else$bg31179:{
          do
            {
              jumpBlockOuterdowhile_cond$bg31181:{
                dowhile_cond$bg31181:{
                  {
                    var t$1 = $var;
                    var var2 = t$1.next();
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg31191:{
                        jumpLab$bg31191:{
                          jumpLab$bg31190:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg31190;
                              
                              case 205:
                                _ = var2.value;
                                break jumpLab$bg31191;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg31181;
                          }
                        }
                        {
                          var t$2 = iter;
                          sk$JSON$dteatHexDigit(t$2);
                        }
                        break jumpBlockOuterjumpLab$bg31191;
                      }
                    }
                    break dowhile_cond$bg31181;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg31179;
                break jumpBlockOuterdowhile_cond$bg31181;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg31180;
      }
      {}
      break jumpBlockOuterbreak$bg31180;
    }
  }
  var t$3 = digitsStart;
  var t$4 = iter;
  var t$5 = t$3.getText(t$4);
  return sk$Chars$dthexDigitsToInt(t$5);
};

var sk$JSON$dteatOpt = sk.JSON$dteatOpt = function(iter, ch) {
  var t$ = iter;
  var t$1 = t$.peek();
  var t$2 = ch;
  if (t$1.$eq$eq(t$2).__value)
    {
      var t$3 = iter;
      t$3.advance();
      return new sk$Bool((true));
    }
  else
    return new sk$Bool((false));
};

var sk$JSON$dteatString = sk.JSON$dteatString = function(iter, value) {
  var t$ = value;
  return t$.each(((ch) => 
  {
    var t$1 = iter;
    var t$2 = ch;
    return sk$JSON$dteat(t$1, t$2);
  }));
};

var sk$JSON$dteatWhitespace = sk.JSON$dteatWhitespace = function(iter) {
  var break_val;
  {
    jumpBlockOuterbreak$bg31204:{
      break$bg31204:{
        do
          {
            jumpBlockOutercontinue$bg31205:{
              continue$bg31205:{
                {
                  var t$ = iter;
                  var $var = t$.peek();
                  var _;
                  {
                    jumpBlockOuterjumpLab$bg31212:{
                      jumpLab$bg31212:{
                        jumpLab$bg31211:{
                          {
                            var _tmp562 = $var.__getSwitchValue();
                            switch (_tmp562) {
                              case 32:
                                break jumpLab$bg31211;
                              
                              case 10:
                                break jumpLab$bg31211;
                              
                              default:
                                {
                                  _ = $var;
                                  break jumpLab$bg31212;
                                }

                            }
                          }
                        }
                        {
                          var t$1 = iter;
                          t$1.advance();
                        }
                        break jumpBlockOuterjumpLab$bg31212;
                      }
                      {
                        break_val = sk.__.$void;
                        break break$bg31204;
                      }
                    }
                  }
                }
              }
              {}
              break jumpBlockOutercontinue$bg31205;
            }
          }
        while (true);
      }
      {}
      break jumpBlockOuterbreak$bg31204;
    }
  }
  return break_val;
};

var sk$JSON$dtindent = sk.JSON$dtindent = function(write, nspaces) {
  var t$ = nspaces;
  var istr = new sk$String((' ')).repeat(t$);
  var t$1 = write;
  var t$2 = istr;
  return t$1(t$2);
};

var sk$JSON$dtreportInvalidJSON = sk.JSON$dtreportInvalidJSON = function(iter, message) {
  var t$ = iter;
  var t$1 = t$.position;
  var t$2 = message;
  skip.throwException(sk, new (sk$JSON$dtInvalidJSONError)(t$1, t$2));
};

var sk$JSON$dtrequiresEscape = sk.JSON$dtrequiresEscape = function(ch) {
  var t$ = ch;
  var t$1 = sk$Chars$dtisPrintableAscii(t$);
  var t$2;
  if (t$1.$bg().__value)
    t$2 = new sk$Bool((true));
  else
    {
      var t$3 = ch;
      t$2 = t$3.$eq$eq($makeChar(34));
    }
  if (t$2.__value)
    return new sk$Bool((true));
  else
    {
      var t$4 = ch;
      return t$4.$eq$eq($makeChar(92));
    }
};

var sk$JSON$dtserialize = sk.JSON$dtserialize = function(value, serializer, isPretty) {
  if (isPretty === undefined)
    isPretty = ((() => 
    {
      return new sk$Bool((false));
    })());
  var t$ = value;
  var t$1 = serializer;
  var t$2 = isPretty;
  return sk$JSON$dtFormat.serialize(t$, t$1, t$2);
};

var sk$JSON$dtskipDigits = sk.JSON$dtskipDigits = function(iter) {
  var t$ = iter;
  var t$1 = t$.peek();
  var t$2 = sk$Chars$dtisDigit(t$1);
  if (t$2.$bg().__value)
    {
      var t$3 = iter;
      sk$JSON$dtreportInvalidJSON(t$3, new sk$String(('Must have at least one digit')));
    }
  else
    {}
  var t$4 = iter;
  t$4.advance();
  var break_val;
  {
    jumpBlockOuterbreak$bg31242:{
      break$bg31242:{
        while_else$bg31241:{
          do
            {
              jumpBlockOutercontinue$bg31243:{
                continue$bg31243:{
                  {
                    var t$5 = iter;
                    var t$6 = t$5.peek();
                    if (sk$Chars$dtisDigit(t$6).__value)
                      {
                        var t$7 = iter;
                        t$7.advance();
                      }
                    else
                      break while_else$bg31241;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg31243;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg31242;
      }
      {}
      break jumpBlockOuterbreak$bg31242;
    }
  }
  return break_val;
};

var sk$JSON$dtskipExponentOpt = sk.JSON$dtskipExponentOpt = function(iter) {
  var t$ = iter;
  var $var = t$.peek();
  {
    jumpBlockOuterjumpLab$bg31256:{
      jumpLab$bg31256:{
        jumpLab$bg31255:{
          {
            var _tmp563 = $var.__getSwitchValue();
            switch (_tmp563) {
              case 101:
                break jumpLab$bg31255;
              
              case 69:
                break jumpLab$bg31255;
              
              default:
                break jumpLab$bg31256;

            }
          }
        }
        {
          var t$1 = iter;
          t$1.advance();
          var t$2 = iter;
          sk$JSON$dtskipSignOpt(t$2);
          var t$3 = iter;
          sk$JSON$dtskipDigits(t$3);
          return new sk$Bool((true));
        }
      }
      return new sk$Bool((false));
    }
  }
};

var sk$JSON$dtskipFractionOpt = sk.JSON$dtskipFractionOpt = function(iter) {
  var t$ = iter;
  if (sk$JSON$dteatOpt(t$, $makeChar(46)).__value)
    {
      var t$1 = iter;
      sk$JSON$dtskipDigits(t$1);
      return new sk$Bool((true));
    }
  else
    return new sk$Bool((false));
};

var sk$JSON$dtskipSignOpt = sk.JSON$dtskipSignOpt = function(iter) {
  var t$ = iter;
  var $var = t$.peek();
  {
    jumpBlockOuterjumpLab$bg31267:{
      jumpLab$bg31267:{
        jumpLab$bg31266:{
          {
            var _tmp564 = $var.__getSwitchValue();
            switch (_tmp564) {
              case 43:
                break jumpLab$bg31266;
              
              case 45:
                break jumpLab$bg31266;
              
              default:
                break jumpLab$bg31267;

            }
          }
        }
        {
          var t$1 = iter;
          return t$1.advance();
        }
      }
      return sk.__.$void;
    }
  }
};

var sk$JSON$dtstreamDeserialize = sk.JSON$dtstreamDeserialize = function(data, serializer) {
  var t$ = data;
  var t$1 = serializer;
  return sk$JSON$dtFormat.streamDeserialize(t$, t$1);
};

var sk$JSON$dtstreamSerialize = sk.JSON$dtstreamSerialize = function(value, serializer, write, isPretty) {
  if (isPretty === undefined)
    isPretty = ((() => 
    {
      return new sk$Bool((false));
    })());
  var t$ = value;
  var t$1 = serializer;
  var t$2 = write;
  var t$3 = isPretty;
  return sk$JSON$dtFormat.streamSerialize(t$, t$1, t$2, t$3);
};

var sk$JSON$dtwriteStringValue = sk.JSON$dtwriteStringValue = function(write, s) {
  var t$ = s;
  var t$1;
  var $var = t$.search(new sk$Int(0.0, 0.0), ((_tmp31279) => 
  {
    return sk$JSON$dtrequiresEscape(_tmp31279);
  }));
  {
    jumpBlockOuterjumpLab$bg31294:{
      jumpLab$bg31294:{
        jumpLab$bg31293:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg31293;
            
            case 205:
              break jumpLab$bg31294;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        t$1 = s;
        break jumpBlockOuterjumpLab$bg31294;
      }
      {
        var strings = sk$Vector.mcreateFromItems(new (sk$Array)([]));
        var t$2 = s;
        t$2.each(((ch) => 
        {
          var t$3 = strings;
          var t$4 = ch;
          var t$5 = sk$JSON$dtcharToString(t$4);
          return t$3.push(t$5);
        }));
        var t$6 = strings;
        t$1 = t$6.join(new sk$String(('')));
      }
      break jumpBlockOuterjumpLab$bg31294;
    }
  }
  var target = t$1;
  var t$7 = write;
  var t$8 = $makeChar(34).toString();
  t$7(t$8);
  var t$9 = write;
  var t$10 = target;
  t$9(t$10);
  var t$11 = write;
  var t$12 = $makeChar(34).toString();
  return t$11(t$12);
};

var sk$Map$dtfinalizeHash = sk.Map$dtfinalizeHash = function(h) {
  var t$ = h;
  return t$.$ti(new sk$Int(444984402.0, 3301882366.0));
};

var sk$Map$dtgetLogSlotSizeForCapacity = sk.Map$dtgetLogSlotSizeForCapacity = function(capacity) {
  var t$ = capacity;
  if (t$.$lt(new sk$Int(0.0, 0.0)).__value)
    return new sk$Int(3.0, 0.0);
  else
    {
      var t$1 = capacity;
      var t$2 = t$1.clz();
      return new sk$Int(65.0, 0.0).$mi(t$2);
    }
};

var sk$Map$dtgetShiftForLogTableSize = sk.Map$dtgetShiftForLogTableSize = function(log2NumSlots) {
  var t$ = log2NumSlots;
  return new sk$Int(64.0, 0.0).$mi(t$);
};

var sk$Map$dtgetSlotSizeForLogTableSize = sk.Map$dtgetSlotSizeForLogTableSize = function(log2NumSlots) {
  var t$ = log2NumSlots;
  var t$1 = t$.$mi(new sk$Int(1.0, 0.0));
  var t$2 = new sk$Int(1.0, 0.0).shl(t$1);
  return t$2.$mi(new sk$Int(1.0, 0.0));
};

var sk$Map$dtunsafeGet = sk.Map$dtunsafeGet = function(array, index) {
  var t$;
  if ((sk$Map$dtdebugEnableBoundsCheck()).__value)
    {
      var t$1 = index;
      var t$2 = array;
      var t$3 = t$2.size();
      t$ = t$1.uge(t$3);
    }
  else
    t$ = new sk$Bool((false));
  if (t$.__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = array;
  var t$5 = index;
  return sk$Unsafe$dtarray_get(t$4, t$5);
};

var sk$Map$dtunsafeSet = sk.Map$dtunsafeSet = function(array, index, value) {
  var t$;
  if ((sk$Map$dtdebugEnableBoundsCheck()).__value)
    {
      var t$1 = index;
      var t$2 = array;
      var t$3 = t$2.size();
      t$ = t$1.uge(t$3);
    }
  else
    t$ = new sk$Bool((false));
  if (t$.__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = array;
  var t$5 = index;
  var t$6 = value;
  return sk$Unsafe$dtarray_set(t$4, t$5, t$6);
};

var sk$Math$dtabs = sk.Math$dtabs = function(val) {
  var t$ = val;
  var t$1 = val;
  var t$2 = t$1.fromInt(new sk$Int(0.0, 0.0));
  if (t$.$lt(t$2).__value)
    {
      var t$3 = val;
      return t$3.negate();
    }
  else
    return val;
};

var sk$Math$dtacos = sk.Math$dtacos = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtasin = sk.Math$dtasin = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtceil = sk.Math$dtceil = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtcos = sk.Math$dtcos = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtfloor = sk.Math$dtfloor = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtpow = sk.Math$dtpow = function(val, power) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtround = sk.Math$dtround = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtsin = sk.Math$dtsin = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Math$dtsqrt = sk.Math$dtsqrt = function(val) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Orderable$dtcreate = sk.Orderable$dtcreate = function(value, compare) {
  var t$ = value;
  var t$1 = compare;
  return new (sk$Orderable$dtLambdaOrderable)(t$, t$1);
};

var sk$Parallel$dtcallTabulateLambda = sk.Parallel$dtcallTabulateLambda = function(f, i) {
  var t$ = f;
  var t$1 = i;
  return t$(t$1);
};

var sk$Parallel$dtgetNumThreads = sk.Parallel$dtgetNumThreads = function() {
  return new sk$Int(1.0, 0.0);
};

var sk$Parallel$dtmultiThreadedTabulate = sk.Parallel$dtmultiThreadedTabulate = function(count, f) {
  var t$ = count;
  var t$1 = f;
  return sk$Parallel$dtsingleThreadedTabulate(t$, t$1);
};

var sk$Parallel$dtsingleThreadedTabulate = sk.Parallel$dtsingleThreadedTabulate = function(count, f) {
  var t$ = count;
  return sk$Array.mfillBy(t$, ((i) => 
  {
    var t$1 = f;
    var t$2 = i;
    var t$3 = t$1(t$2);
    return t$3.get(new sk$Int(0.0, 0.0));
  }));
};

var sk$Parallel$dttabulate = sk.Parallel$dttabulate = function(count, f) {
  var t$ = count;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return sk$Parallel$dtcallTabulateLambda(((_) => 
    {
      return new (sk$Array)([]);
    }), new sk$Int(0.0, 0.0));
  else
    {
      var f2 = ((i) => 
      {
        var t$1 = f;
        var t$2 = i;
        var t$3 = t$1(t$2);
        return new (sk$Array)([
          t$3
        ]);
      });
      var t$4 = count;
      if (t$4.$eq$eq(new sk$Int(1.0, 0.0)).__value)
        {
          var t$5 = f2;
          return sk$Parallel$dtcallTabulateLambda(t$5, new sk$Int(0.0, 0.0));
        }
      else
        {
          var t$6 = count;
          var t$7 = t$6.$gt(new sk$Int(0.0, 0.0));
          sk$invariant(t$7, new sk$String(('Called tabulate() with a negative count.')));
          var t$8 = sk$Parallel$dtgetNumThreads();
          if (t$8.$gt(new sk$Int(1.0, 0.0)).__value)
            {
              var t$9 = count;
              var t$10 = f2;
              return sk$Parallel$dtmultiThreadedTabulate(t$9, t$10);
            }
          else
            {
              var t$11 = count;
              var t$12 = f2;
              return sk$Parallel$dtsingleThreadedTabulate(t$11, t$12);
            }
        }
    }
};

var sk$Parser$dtcreateEmptyParseTreeList = sk.Parser$dtcreateEmptyParseTreeList = function(range) {
  var t$ = range;
  return sk$ParseTree$dtParseTreeList.makeList({
    elements: new (sk$Array)([]),
    range: t$
  });
};

var sk$Parser$dtcreateEmptyTreeBeforeTree = sk.Parser$dtcreateEmptyTreeBeforeTree = function(tree) {
  var t$ = tree;
  var t$1 = sk$Parser$dtcreateRangeBeforeTree(t$);
  return new (sk$ParseTree$dtEmptyTree)({
    range: t$1
  });
};

var sk$Parser$dtcreateErrorTree = sk.Parser$dtcreateErrorTree = function(token) {
  var t$ = token;
  var t$1 = t$.range;
  return new (sk$ParseTree$dtErrorTree)({
    range: t$1,
    value: undefined
  });
};

var sk$Parser$dtcreateRangeAfterToken = sk.Parser$dtcreateRangeAfterToken = function(token) {
  var t$ = token;
  var t$1 = sk$Parser$dtpositionAfterToken(t$);
  return sk$TextRange$dtempty(t$1);
};

var sk$Parser$dtcreateRangeBeforeTree = sk.Parser$dtcreateRangeBeforeTree = function(tree) {
  var t$ = tree;
  var t$1 = t$.range;
  var t$2 = t$1.start;
  return sk$TextRange$dtempty(t$2);
};

var sk$Parser$dtcreateRangeOfList = sk.Parser$dtcreateRangeOfList = function(elements) {
  var t$ = elements;
  var t$1 = t$.first();
  var t$2 = elements;
  var t$3 = t$2.last();
  return sk$Parser$dtcreateRangeOfTrees(t$1, t$3);
};

var sk$Parser$dtcreateRangeOfTreeAndCurrent = sk.Parser$dtcreateRangeOfTreeAndCurrent = function(start, end) {
  var t$ = start;
  var t$1 = t$.range;
  var t$2 = t$1.start;
  var t$3 = end;
  var t$4 = t$3.positionBefore();
  return sk$TextRange$dtcreate(t$2, t$4);
};

var sk$Parser$dtcreateRangeOfTrees = sk.Parser$dtcreateRangeOfTrees = function(start, end) {
  var t$ = start;
  var t$1 = t$.range;
  var t$2 = t$1.start;
  var t$3 = end;
  var t$4 = t$3.range;
  var t$5 = t$4.end;
  return sk$TextRange$dtcreate(t$2, t$5);
};

var sk$Parser$dtcreateTokenTree = sk.Parser$dtcreateTokenTree = function(token) {
  var t$ = token;
  var t$1 = t$.range;
  var t$2 = token;
  return new (sk$ParseTree$dtTokenTree)({
    range: t$1,
    token: t$2
  });
};

var sk$Parser$dtpositionAfterToken = sk.Parser$dtpositionAfterToken = function(token) {
  var t$ = token;
  var t$1 = t$.range;
  return t$1.start;
};

var sk$Parser$dtreturnParseTreeList = sk.Parser$dtreturnParseTreeList = function(emptyPosition, elements) {
  var t$ = elements;
  if (t$.isEmpty().__value)
    {
      var t$1 = emptyPosition;
      return sk$Parser$dtcreateEmptyParseTreeList(t$1);
    }
  else
    {
      var t$2 = elements;
      var t$3 = sk$Parser$dtcreateRangeOfList(t$2);
      var t$4 = elements;
      return sk$ParseTree$dtParseTreeList.makeList({
        elements: t$4,
        range: t$3
      });
    }
};

var sk$Parser$dtvalidateParse = sk.Parser$dtvalidateParse = function(tokens, tree, filename) {
  var t$ = tokens;
  var t$1 = tree;
  var t$2 = filename;
  var lastTreeToken = sk$Parser$dtvalidateTreeTokens(t$, new sk$Int(0.0, 0.0), t$1, t$2);
  var t$3 = lastTreeToken;
  var t$4 = tokens;
  var t$5 = t$4.size();
  if (t$3.$bg$eq(t$5).__value)
    {
      var t$6 = filename;
      var t$7 = t$6.toString();
      var t$8 = new sk$String((': Did not consume all tokens in tree: ')).toString();
      var t$9 = tokens;
      var t$10 = lastTreeToken;
      var t$11 = t$9.get(t$10);
      var t$12 = t$11.toString();
      var t$13 = new sk$String(('')).join(new (sk$Array)([
        t$7,
        t$8,
        t$12
      ]));
      sk$invariant_violation(t$13);
    }
  else
    {}
  var t$14 = tree;
  var t$15 = filename;
  return sk$Parser$dtvalidateTreeRanges(t$14, t$15);
};

var sk$Parser$dtvalidateTreeRanges = sk.Parser$dtvalidateTreeRanges = function(tree, filename) {
  var t$ = tree;
  var childs = t$.getChildren();
  var t$1 = tree;
  var t$2 = t$1.range;
  var start = t$2.start;
  var t$3 = childs;
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg31429:{
      break$bg31429:{
        dowhile_else$bg31428:{
          do
            {
              jumpBlockOuterdowhile_cond$bg31430:{
                dowhile_cond$bg31430:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var child;
                    {
                      jumpBlockOuterjumpLab$bg31473:{
                        jumpLab$bg31473:{
                          jumpLab$bg31472:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg31472;
                              
                              case 205:
                                child = var2.value;
                                break jumpLab$bg31473;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg31430;
                          }
                        }
                        {
                          var t$5 = tree;
                          var t$6 = t$5.range;
                          var t$7 = child;
                          var t$8 = t$7.range;
                          var t$9 = t$6.containsRange(t$8);
                          var t$10;
                          if (t$9.$bg().__value)
                            {
                              var t$11 = filename;
                              var t$12 = t$11.toString();
                              var t$13 = new sk$String((': Parent tree ')).toString();
                              var t$14 = tree;
                              var t$15 = t$14.toDebugString();
                              var t$16 = t$15.toString();
                              var t$17 = new sk$String((' does not contain child ')).toString();
                              var t$18 = child;
                              var t$19 = t$18.toDebugString();
                              var t$20 = t$19.toString();
                              var t$21 = new sk$String(('')).join(new (sk$Array)([
                                t$12,
                                t$13,
                                t$16,
                                t$17,
                                t$20
                              ]));
                              t$10 = sk$invariant_violation(t$21);
                            }
                          else
                            t$10 = sk.__.$void;
                          var t$22 = child;
                          var t$23 = t$22.range;
                          var t$24 = t$23.start;
                          var t$25 = start;
                          var t$26;
                          if (t$24.$lt(t$25).__value)
                            {
                              var t$27 = filename;
                              var t$28 = t$27.toString();
                              var t$29 = new sk$String((': Child tree ')).toString();
                              var t$30 = child;
                              var t$31 = t$30.toDebugString();
                              var t$32 = t$31.toString();
                              var t$33 = new sk$String((' overlaps with its predeccessor in parent ')).toString();
                              var t$34 = tree;
                              var t$35 = t$34.toDebugString();
                              var t$36 = t$35.toString();
                              var t$37 = new sk$String(('')).join(new (sk$Array)([
                                t$28,
                                t$29,
                                t$32,
                                t$33,
                                t$36
                              ]));
                              t$26 = sk$invariant_violation(t$37);
                            }
                          else
                            t$26 = sk.__.$void;
                          var t$38 = child;
                          var t$39 = t$38.range;
                          start = t$39.end;
                          var t$40 = child;
                          var t$41 = filename;
                          sk$Parser$dtvalidateTreeRanges(t$40, t$41);
                        }
                        break jumpBlockOuterjumpLab$bg31473;
                      }
                    }
                    break dowhile_cond$bg31430;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg31428;
                break jumpBlockOuterdowhile_cond$bg31430;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg31429;
      }
      {}
      break jumpBlockOuterbreak$bg31429;
    }
  }
  return break_val;
};

var sk$Parser$dtvalidateTreeTokens = sk.Parser$dtvalidateTreeTokens = function(tokens, tokenIndex, tree, filename) {
  var t$ = tokenIndex;
  var t$1 = tokens;
  var t$2 = t$1.size();
  if (t$.$gt$eq(t$2).__value)
    {
      var t$3 = filename;
      var t$4 = t$3.toString();
      var t$5 = new sk$String((': Ran out of tokens: ')).toString();
      var t$6 = tree;
      var t$7 = t$6.toDebugString();
      var t$8 = t$7.toString();
      var t$9 = new sk$String(('')).join(new (sk$Array)([
        t$4,
        t$5,
        t$8
      ]));
      sk$invariant_violation(t$9);
    }
  else
    {}
  var t$10 = tree;
  if (t$10.isToken().__value)
    {
      var t$11 = tree;
      var t$12 = t$11.asToken();
      var token = t$12.token;
      var t$13 = token;
      var t$14 = tokens;
      var t$15 = tokenIndex;
      var t$16 = t$14.get(t$15);
      if (t$13.$bg$eq(t$16).__value)
        {
          var t$17 = filename;
          var t$18 = t$17.toString();
          var t$19 = new sk$String((': Expected token: ')).toString();
          var t$20 = tokens;
          var t$21 = tokenIndex;
          var t$22 = t$20.get(t$21);
          var t$23 = t$22.toString();
          var t$24 = new sk$String((' but found ')).toString();
          var t$25 = token;
          var t$26 = t$25.toString();
          var t$27 = new sk$String(('')).join(new (sk$Array)([
            t$18,
            t$19,
            t$23,
            t$24,
            t$26
          ]));
          sk$invariant_violation(t$27);
        }
      else
        {}
      var t$28 = tokenIndex;
      return t$28.$pl(new sk$Int(1.0, 0.0));
    }
  else
    {
      var t$29 = tree;
      var t$30 = t$29.getChildren();
      var $var = t$30.values();
      var var1 = new sk$Bool((true));
      {
        jumpBlockOuterbreak$bg31511:{
          break$bg31511:{
            dowhile_else$bg31510:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg31512:{
                    dowhile_cond$bg31512:{
                      {
                        var t$31 = $var;
                        var var2 = t$31.next();
                        var child;
                        {
                          jumpBlockOuterjumpLab$bg31522:{
                            jumpLab$bg31522:{
                              jumpLab$bg31521:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg31521;
                                  
                                  case 205:
                                    child = var2.value;
                                    break jumpLab$bg31522;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg31512;
                              }
                            }
                            {
                              var t$32 = tokens;
                              var t$33 = tokenIndex;
                              var t$34 = child;
                              var t$35 = filename;
                              tokenIndex = sk$Parser$dtvalidateTreeTokens(t$32, t$33, t$34, t$35);
                            }
                            break jumpBlockOuterjumpLab$bg31522;
                          }
                        }
                        break dowhile_cond$bg31512;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg31510;
                    break jumpBlockOuterdowhile_cond$bg31512;
                  }
                }
              while (true);
            }
            {}
            break jumpBlockOuterbreak$bg31511;
          }
          {}
          break jumpBlockOuterbreak$bg31511;
        }
      }
      return tokenIndex;
    }
};

var sk$Path$dtbasename = sk.Path$dtbasename = function(path) {
  var t$ = path;
  var t$1 = sk$Path$dtsplit(t$);
  return t$1.i1;
};

var sk$Path$dtdirname = sk.Path$dtdirname = function(path) {
  var t$ = path;
  var t$1 = sk$Path$dtsplit(t$);
  return t$1.i0;
};

var sk$Path$dtextname = sk.Path$dtextname = function(path) {
  var t$ = path;
  var base = sk$Path$dtbasename(t$);
  {
    jumpBlockOuterjumpLab$bg31550:{
      jumpLab$bg31550:{
        jumpLab$bg31549:{
          {
            var _tmp565 = base.__getSwitchValue();
            switch (_tmp565) {
              case '':
                break jumpLab$bg31549;
              
              case '.':
                break jumpLab$bg31549;
              
              case '..':
                break jumpLab$bg31549;
              
              default:
                break jumpLab$bg31550;

            }
          }
        }
        return new sk$String((''));
      }
      {
        var t$1 = base;
        var $var = t$1.splitLast((sk$Path$dtextSeparator()));
        var ext;
        var ext1;
        {
          jumpBlockOuterjumpLab$bg31543:{
            jumpLab$bg31543:{
              jumpLab$bg31542:{
                jumpLab$bg31547:{
                  switch ($var.__type_switch_id) {
                    case 392:
                      break jumpLab$bg31547;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var _tmp566 = $var.i0.__getSwitchValue();
                  switch (_tmp566) {
                    case '':
                      {
                        ext = $var.i1;
                        var var1 = new sk$Bool((false));
                        var t$2 = base;
                        var t$3 = t$2.startsWith((sk$Path$dtextSeparator()));
                        var1 = t$3.$bg();
                        if (var1.__value)
                          break jumpLab$bg31542;
                        else
                          {
                            ext1 = $var.i1;
                            break jumpLab$bg31543;
                          }
                      }
                    
                    default:
                      {
                        ext1 = $var.i1;
                        break jumpLab$bg31543;
                      }

                  }
                }
              }
              {
                var t$4 = base;
                var t$5 = ext;
                var t$6 = t$4.$eq$eq(t$5);
                sk$invariant(t$6, undefined);
                return new sk$String((''));
              }
            }
            {
              var t$7 = ext1;
              return (sk$Path$dtextSeparator()).$pl(t$7);
            }
          }
        }
      }
    }
  }
};

var sk$Path$dtisAbsolute = sk.Path$dtisAbsolute = function(path) {
  var t$ = path;
  return t$.startsWith((sk$Path$dtrootDirectory()));
};

var sk$Path$dtisNormalized = sk.Path$dtisNormalized = function(path) {
  var t$ = path;
  var t$1 = sk$Path$dtnormalize(t$);
  var t$2 = path;
  return t$1.$eq$eq(t$2);
};

var sk$Path$dtisRelative = sk.Path$dtisRelative = function(path) {
  var t$ = path;
  var t$1 = sk$Path$dtisAbsolute(t$);
  return t$1.$bg();
};

var sk$Path$dtisRoot = sk.Path$dtisRoot = function(path) {
  var t$ = path;
  var t$1 = sk$Path$dtnormalize(t$);
  return t$1.$eq$eq((sk$Path$dtrootDirectory()));
};

var sk$Path$dtjoin = sk.Path$dtjoin = function(path1, path2, path3) {
  if (path1 === undefined)
    path1 = ((() => 
    {
      return new sk$String((''));
    })());
  if (path2 === undefined)
    path2 = ((() => 
    {
      return new sk$String((''));
    })());
  if (path3 === undefined)
    path3 = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = path3;
  if (t$.$eq$eq(new sk$String((''))).__value)
    {
      var t$1 = path1;
      var t$2 = path2;
      return sk$Path$dtjoin2(t$1, t$2);
    }
  else
    {
      var t$3 = path1;
      var t$4 = path2;
      var t$5 = path3;
      var t$6 = sk$Path$dtjoin2(t$4, t$5);
      return sk$Path$dtjoin2(t$3, t$6);
    }
};

var sk$Path$dtjoin2 = sk.Path$dtjoin2 = function(path1, path2) {
  var t$ = path2;
  var normalizedPath2 = sk$Path$dtnormalize(t$);
  var t$1 = normalizedPath2;
  if (sk$Path$dtisAbsolute(t$1).__value)
    return normalizedPath2;
  else
    {
      var npath2;
      {
        jumpBlockOuterjumpLab$bg31595:{
          jumpLab$bg31595:{
            jumpLab$bg31594:{
              jumpLab$bg31593:{
                {
                  var _tmp567 = normalizedPath2.__getSwitchValue();
                  switch (_tmp567) {
                    case '.':
                      break jumpLab$bg31593;
                    
                    case '..':
                      break jumpLab$bg31594;
                    
                    default:
                      {
                        npath2 = normalizedPath2;
                        break jumpLab$bg31595;
                      }

                  }
                }
              }
              {
                var t$2 = path1;
                return sk$Path$dtnormalize(t$2);
              }
            }
            {
              var t$3 = path1;
              return sk$Path$dtparentname(t$3);
            }
          }
          {
            var t$4 = path1;
            var npath1 = sk$Path$dtnormalize(t$4);
            {
              jumpBlockOuterjumpLab$bg31591:{
                jumpLab$bg31591:{
                  jumpLab$bg31590:{
                    jumpLab$bg31589:{
                      {
                        var _tmp568 = npath1.__getSwitchValue();
                        switch (_tmp568) {
                          case '/':
                            break jumpLab$bg31589;
                          
                          case '.':
                            break jumpLab$bg31590;
                          
                          default:
                            break jumpLab$bg31591;

                        }
                      }
                    }
                    {
                      var t$5 = npath1;
                      var t$6 = npath2;
                      return t$5.$pl(t$6);
                    }
                  }
                  return npath2;
                }
                {
                  var t$7 = npath1;
                  var t$8 = t$7.toString();
                  var t$9 = new sk$String(('/')).toString();
                  var t$10 = npath2;
                  var t$11 = t$10.toString();
                  var t$12 = new sk$String(('')).join(new (sk$Array)([
                    t$8,
                    t$9,
                    t$11
                  ]));
                  return sk$Path$dtnormalize(t$12);
                }
              }
            }
          }
        }
      }
    }
};

var sk$Path$dtnormalize = sk.Path$dtnormalize = function(path) {
  do
    {
      jumpBlockOuterloop_end$bg31620:{
        loop_end$bg31620:{
          {
            var t$ = path;
            var $var = sk$Path$dtsplit(t$);
            var dir;
            var dir1;
            var dir2;
            var dir3;
            var base;
            {
              jumpBlockOuterjumpLab$bg31617:{
                jumpLab$bg31617:{
                  jumpLab$bg31616:{
                    jumpLab$bg31615:{
                      jumpLab$bg31614:{
                        jumpLab$bg31618:{
                          switch ($var.__type_switch_id) {
                            case 392:
                              break jumpLab$bg31618;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        {
                          var _tmp569 = $var.i1.__getSwitchValue();
                          switch (_tmp569) {
                            case '':
                              {
                                dir = $var.i0;
                                break jumpLab$bg31614;
                              }
                            
                            case '.':
                              {
                                dir1 = $var.i0;
                                break jumpLab$bg31615;
                              }
                            
                            case '..':
                              {
                                dir2 = $var.i0;
                                break jumpLab$bg31616;
                              }
                            
                            default:
                              {
                                dir3 = $var.i0;
                                base = $var.i1;
                                break jumpLab$bg31617;
                              }

                          }
                        }
                      }
                      return dir;
                    }
                    {
                      var t$1 = dir1;
                      var t$2 = t$1;
                      path = t$2;
                      break loop_end$bg31620;
                    }
                  }
                  {
                    var t$3 = dir2;
                    return sk$Path$dtparentname(t$3);
                  }
                }
                {
                  var t$4 = dir3;
                  var var1 = sk$Path$dtnormalize(t$4);
                  var normalizedDir;
                  {
                    jumpBlockOuterjumpLab$bg31611:{
                      jumpLab$bg31611:{
                        jumpLab$bg31610:{
                          jumpLab$bg31609:{
                            {
                              var _tmp570 = var1.__getSwitchValue();
                              switch (_tmp570) {
                                case '.':
                                  break jumpLab$bg31609;
                                
                                case '/':
                                  break jumpLab$bg31610;
                                
                                default:
                                  {
                                    normalizedDir = var1;
                                    break jumpLab$bg31611;
                                  }

                              }
                            }
                          }
                          return base;
                        }
                        {
                          var t$5 = base;
                          return new sk$String(('/')).$pl(t$5);
                        }
                      }
                      {
                        var t$6 = normalizedDir;
                        var t$7 = t$6.toString();
                        var t$8 = new sk$String(('/')).toString();
                        var t$9 = base;
                        var t$10 = t$9.toString();
                        return new sk$String(('')).join(new (sk$Array)([
                          t$7,
                          t$8,
                          t$10
                        ]));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg31620;
      }
    }
  while (true);
};

var sk$Path$dtparentname = sk.Path$dtparentname = function(path) {
  var t$ = path;
  var $var = sk$Path$dtnormalize(t$);
  var normalizedDir;
  {
    jumpBlockOuterjumpLab$bg31641:{
      jumpLab$bg31641:{
        jumpLab$bg31640:{
          jumpLab$bg31639:{
            jumpLab$bg31638:{
              {
                var _tmp571 = $var.__getSwitchValue();
                switch (_tmp571) {
                  case '/':
                    break jumpLab$bg31638;
                  
                  case '.':
                    break jumpLab$bg31639;
                  
                  case '..':
                    break jumpLab$bg31640;
                  
                  default:
                    {
                      normalizedDir = $var;
                      break jumpLab$bg31641;
                    }

                }
              }
            }
            return new sk$String(('/..'));
          }
          return new sk$String(('..'));
        }
        return new sk$String(('../..'));
      }
      {
        var t$1 = normalizedDir;
        var var1 = sk$Path$dtsplit(t$1);
        var dirbase;
        var dirdir;
        {
          jumpBlockOuterjumpLab$bg31634:{
            jumpLab$bg31634:{
              jumpLab$bg31633:{
                jumpLab$bg31635:{
                  switch (var1.__type_switch_id) {
                    case 392:
                      break jumpLab$bg31635;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var _tmp572 = var1.i1.__getSwitchValue();
                  switch (_tmp572) {
                    case '..':
                      break jumpLab$bg31633;
                    
                    default:
                      {
                        dirdir = var1.i0;
                        dirbase = var1.i1;
                        break jumpLab$bg31634;
                      }

                  }
                }
              }
              {
                var t$2 = normalizedDir;
                return t$2.$pl(new sk$String(('/..')));
              }
            }
            {
              var t$3 = dirbase;
              var t$4;
              if (t$3.$bg$eq(new sk$String((''))).__value)
                {
                  var t$5 = dirbase;
                  t$4 = t$5.$bg$eq(new sk$String(('.')));
                }
              else
                t$4 = new sk$Bool((false));
              var t$6;
              if (t$4.__value)
                {
                  var t$7 = dirbase;
                  t$6 = t$7.$bg$eq(new sk$String(('..')));
                }
              else
                t$6 = new sk$Bool((false));
              var t$8 = t$6;
              sk$invariant(t$8, undefined);
              return dirdir;
            }
          }
        }
      }
    }
  }
};

var sk$Path$dtresolve = sk.Path$dtresolve = function(path1, path2, path3) {
  if (path1 === undefined)
    path1 = ((() => 
    {
      return new sk$String((''));
    })());
  if (path2 === undefined)
    path2 = ((() => 
    {
      return new sk$String((''));
    })());
  if (path3 === undefined)
    path3 = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = path3;
  if (t$.isEmpty().__value)
    {
      var t$1 = path1;
      var t$2 = path2;
      return sk$Path$dtresolve2(t$1, t$2);
    }
  else
    {
      var t$3 = path1;
      var t$4 = path2;
      var t$5 = sk$Path$dtresolve2(t$3, t$4);
      var t$6 = path3;
      return sk$Path$dtresolve2(t$5, t$6);
    }
};

var sk$Path$dtresolve1 = sk.Path$dtresolve1 = function(path) {
  var t$ = path;
  var t$1;
  if (sk$Path$dtisAbsolute(t$).__value)
    t$1 = path;
  else
    {
      var t$2 = sk$getcwd();
      var t$3 = path;
      t$1 = sk$Path$dtjoin(t$2, t$3, undefined);
    }
  var t$4 = t$1;
  return sk$Path$dtnormalize(t$4);
};

var sk$Path$dtresolve2 = sk.Path$dtresolve2 = function(path1, path2) {
  var t$ = path2;
  if (t$.isEmpty().__value)
    {
      var t$1 = path1;
      return sk$Path$dtresolve1(t$1);
    }
  else
    {
      var t$2 = path2;
      if (sk$Path$dtisAbsolute(t$2).__value)
        {
          var t$3 = path2;
          return sk$Path$dtnormalize(t$3);
        }
      else
        {
          var t$4 = path1;
          var t$5 = sk$Path$dtresolve1(t$4);
          var t$6 = path2;
          return sk$Path$dtjoin(t$5, t$6, undefined);
        }
    }
};

var sk$Path$dtsplit = sk.Path$dtsplit = function(path) {
  var t$ = path;
  var trimmedPath = sk$Path$dttrimTrailingSeparators(t$);
  {
    jumpBlockOuterjumpLab$bg31699:{
      jumpLab$bg31699:{
        jumpLab$bg31698:{
          jumpLab$bg31697:{
            jumpLab$bg31696:{
              jumpLab$bg31695:{
                jumpLab$bg31694:{
                  jumpLab$bg31693:{
                    {
                      var _tmp573 = trimmedPath.__getSwitchValue();
                      switch (_tmp573) {
                        case '':
                          break jumpLab$bg31693;
                        
                        case '/':
                          break jumpLab$bg31694;
                        
                        case '.':
                          break jumpLab$bg31695;
                        
                        case '..':
                          break jumpLab$bg31696;
                        
                        case '/.':
                          break jumpLab$bg31697;
                        
                        case '/..':
                          break jumpLab$bg31698;
                        
                        default:
                          break jumpLab$bg31699;

                      }
                    }
                  }
                  return new (sk$Tuple2)((sk$Path$dtcurrentDirectory()), new sk$String(('')));
                }
                return new (sk$Tuple2)((sk$Path$dtrootDirectory()), new sk$String(('')));
              }
              return new (sk$Tuple2)((sk$Path$dtcurrentDirectory()), new sk$String(('')));
            }
            return new (sk$Tuple2)((sk$Path$dtparentDirectory()), new sk$String(('')));
          }
          return new (sk$Tuple2)((sk$Path$dtrootDirectory()), (sk$Path$dtcurrentDirectory()));
        }
        return new (sk$Tuple2)((sk$Path$dtrootDirectory()), (sk$Path$dtparentDirectory()));
      }
      {
        var t$1 = trimmedPath;
        var $var = t$1.splitLast((sk$Path$dtseparator()));
        var base;
        var dir;
        var base1;
        {
          jumpBlockOuterjumpLab$bg31689:{
            jumpLab$bg31689:{
              jumpLab$bg31688:{
                jumpLab$bg31687:{
                  jumpLab$bg31690:{
                    jumpLab$bg31691:{
                      switch ($var.__type_switch_id) {
                        case 392:
                          break jumpLab$bg31691;
                        
                        default:
                          skip.throwException(sk, new Error('Unmatched Branch'));

                      }
                    }
                    {
                      var _tmp574 = $var.i0.__getSwitchValue();
                      switch (_tmp574) {
                        case '':
                          break jumpLab$bg31690;
                        
                        default:
                          {
                            dir = $var.i0;
                            base = $var.i1;
                            break jumpLab$bg31689;
                          }

                      }
                    }
                  }
                  {
                    var _tmp575 = $var.i1.__getSwitchValue();
                    switch (_tmp575) {
                      case '':
                        break jumpLab$bg31687;
                      
                      default:
                        {
                          base1 = $var.i1;
                          break jumpLab$bg31688;
                        }

                    }
                  }
                }
                return sk$invariant_violation(new sk$String(('Should be handled above')));
              }
              {
                var t$2 = base1;
                var t$3 = t$2.isEmpty();
                var t$4 = t$3.$bg();
                sk$invariant(t$4, undefined);
                var t$5 = trimmedPath;
                if (sk$Path$dtisAbsolute(t$5).__value)
                  {
                    var t$6 = base1;
                    return new (sk$Tuple2)((sk$Path$dtrootDirectory()), t$6);
                  }
                else
                  {
                    var t$7 = base1;
                    return new (sk$Tuple2)((sk$Path$dtcurrentDirectory()), t$7);
                  }
              }
            }
            {
              var t$8 = dir;
              var t$9 = t$8.isEmpty();
              var t$10 = t$9.$bg();
              sk$invariant(t$10, undefined);
              var t$11 = base;
              var t$12 = t$11.isEmpty();
              var t$13 = t$12.$bg();
              sk$invariant(t$13, undefined);
              var t$14 = dir;
              var t$15 = sk$Path$dttrimTrailingSeparators(t$14);
              var t$16 = base;
              return new (sk$Tuple2)(t$15, t$16);
            }
          }
        }
      }
    }
  }
};

var sk$Path$dttrimTrailingSeparators = sk.Path$dttrimTrailingSeparators = function(path) {
  do
    {
      jumpBlockOuterloop_end$bg31709:{
        loop_end$bg31709:{
          {
            var t$ = path;
            if (t$.$eq$eq((sk$Path$dtrootDirectory())).__value)
              return path;
            else
              {
                var t$1 = path;
                if (t$1.endsWith((sk$Path$dtseparator())).__value)
                  {
                    var t$2 = path;
                    var t$3 = path;
                    var t$4 = t$3.length();
                    var t$5 = t$4.$mi(new sk$Int(1.0, 0.0));
                    var t$6 = t$2.sub(new sk$Int(0.0, 0.0), t$5);
                    var t$7 = t$6;
                    path = t$7;
                    break loop_end$bg31709;
                  }
                else
                  return path;
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg31709;
      }
    }
  while (true);
};

var sk$Persistent$dtiterateNode = sk.Persistent$dtiterateNode = function(node, shift, rootSize) {
  return sk.__.toSkipGenerator.call(this, function*() {
    var elements;
    var elements1;
    {
      jumpBlockOuterjumpLab$bg31769:{
        jumpLab$bg31769:{
          jumpLab$bg31768:{
            switch (node.__type_switch_id) {
              case 221:
                elements1 = node.elements;
                break jumpLab$bg31768;
              
              case 220:
                elements = node.elements;
                break jumpLab$bg31769;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$ = elements1;
            var $var = t$.values();
            var var1 = new sk$Bool((true));
            {
              jumpBlockOuterbreak$bg31716:{
                break$bg31716:{
                  dowhile_else$bg31715:{
                    do
                      {
                        jumpBlockOuterdowhile_cond$bg31717:{
                          dowhile_cond$bg31717:{
                            {
                              var t$1 = $var;
                              var var2 = t$1.next();
                              var x;
                              {
                                jumpBlockOuterjumpLab$bg31754:{
                                  jumpLab$bg31754:{
                                    jumpLab$bg31753:{
                                      switch (var2.__type_switch_id) {
                                        case 204:
                                          break jumpLab$bg31753;
                                        
                                        case 205:
                                          x = var2.value;
                                          break jumpLab$bg31754;
                                        
                                        default:
                                          skip.throwException(sk, new Error('Unmatched Branch'));

                                      }
                                    }
                                    {
                                      var1 = new sk$Bool((false));
                                      break dowhile_cond$bg31717;
                                    }
                                  }
                                  {
                                    var t$2 = x;
                                    yield new sk$Some(sk$Persistent$dtunsafeGet(t$2));
                                  }
                                  break jumpBlockOuterjumpLab$bg31754;
                                }
                              }
                              break dowhile_cond$bg31717;
                            }
                          }
                          if (var1.__value)
                            {}
                          else
                            break dowhile_else$bg31715;
                          break jumpBlockOuterdowhile_cond$bg31717;
                        }
                      }
                    while (true);
                  }
                  {}
                  break jumpBlockOuterbreak$bg31716;
                }
                {}
                break jumpBlockOuterbreak$bg31716;
              }
            }
          }
          break jumpBlockOuterjumpLab$bg31769;
        }
        {
          var t$3 = rootSize;
          var t$4 = shift;
          var t$5 = t$3.child(t$4);
          var t$6 = new (sk$Range)(new sk$Int(0.0, 0.0), t$5);
          var var3 = t$6.values();
          var var4 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg31728:{
              break$bg31728:{
                dowhile_else$bg31727:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg31729:{
                        dowhile_cond$bg31729:{
                          {
                            var t$7 = var3;
                            var var5 = t$7.next();
                            var i;
                            {
                              jumpBlockOuterjumpLab$bg31766:{
                                jumpLab$bg31766:{
                                  jumpLab$bg31765:{
                                    switch (var5.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg31765;
                                      
                                      case 205:
                                        i = var5.value;
                                        break jumpLab$bg31766;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var4 = new sk$Bool((false));
                                    break dowhile_cond$bg31729;
                                  }
                                }
                                {
                                  var t$8 = elements;
                                  var t$9 = i;
                                  var var6 = sk$Unsafe$dtarray_get(t$8, t$9);
                                  var childNode;
                                  {
                                    jumpBlockOuterjumpLab$bg31762:{
                                      jumpLab$bg31762:{
                                        jumpLab$bg31761:{
                                          switch (var6.__type_switch_id) {
                                            case 205:
                                              childNode = var6.value;
                                              break jumpLab$bg31761;
                                            
                                            case 204:
                                              break jumpLab$bg31762;
                                            
                                            default:
                                              skip.throwException(sk, new Error('Unmatched Branch'));

                                          }
                                        }
                                        {
                                          var t$10 = childNode;
                                          var t$11 = shift;
                                          var t$12 = t$11.decrement();
                                          var t$13 = rootSize;
                                          var t$14 = sk$Persistent$dtiterateNode(t$10, t$12, t$13);
                                          var var7 = t$14.values();
                                          var var8 = new sk$Bool((true));
                                          var break_val;
                                          {
                                            jumpBlockOuterbreak$bg31742:{
                                              break$bg31742:{
                                                dowhile_else$bg31741:{
                                                  do
                                                    {
                                                      jumpBlockOuterdowhile_cond$bg31743:{
                                                        dowhile_cond$bg31743:{
                                                          {
                                                            var t$15 = var7;
                                                            var var9 = t$15.next();
                                                            var x1;
                                                            {
                                                              jumpBlockOuterjumpLab$bg31758:{
                                                                jumpLab$bg31758:{
                                                                  jumpLab$bg31757:{
                                                                    switch (var9.__type_switch_id) {
                                                                      case 204:
                                                                        break jumpLab$bg31757;
                                                                      
                                                                      case 205:
                                                                        x1 = var9.value;
                                                                        break jumpLab$bg31758;
                                                                      
                                                                      default:
                                                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                                                    }
                                                                  }
                                                                  {
                                                                    var8 = new sk$Bool((false));
                                                                    break dowhile_cond$bg31743;
                                                                  }
                                                                }
                                                                yield new sk$Some(x1);
                                                                break jumpBlockOuterjumpLab$bg31758;
                                                              }
                                                            }
                                                            break dowhile_cond$bg31743;
                                                          }
                                                        }
                                                        if (var8.__value)
                                                          {}
                                                        else
                                                          break dowhile_else$bg31741;
                                                        break jumpBlockOuterdowhile_cond$bg31743;
                                                      }
                                                    }
                                                  while (true);
                                                }
                                                break_val = sk.__.$void;
                                                break jumpBlockOuterbreak$bg31742;
                                              }
                                              {}
                                              break jumpBlockOuterbreak$bg31742;
                                            }
                                          }
                                        }
                                        break jumpBlockOuterjumpLab$bg31762;
                                      }
                                      {
                                        var t$16 = new sk$String(('iterateNode: unexpected null node with shift=')).toString();
                                        var t$17 = shift;
                                        var t$18 = t$17.i;
                                        var t$19 = t$18.toString();
                                        var t$20 = new sk$String(('')).join(new (sk$Array)([
                                          t$16,
                                          t$19
                                        ]));
                                        sk$invariant_violation(t$20);
                                      }
                                      break jumpBlockOuterjumpLab$bg31762;
                                    }
                                  }
                                }
                                break jumpBlockOuterjumpLab$bg31766;
                              }
                            }
                            break dowhile_cond$bg31729;
                          }
                        }
                        if (var4.__value)
                          {}
                        else
                          break dowhile_else$bg31727;
                        break jumpBlockOuterdowhile_cond$bg31729;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg31728;
              }
              {}
              break jumpBlockOuterbreak$bg31728;
            }
          }
        }
        break jumpBlockOuterjumpLab$bg31769;
      }
    }
    return undefined;
  });
};

var sk$Persistent$dtunsafeGet = sk.Persistent$dtunsafeGet = function(storage) {
  var t$ = storage;
  return sk$Unsafe$dtRawStorage.unsafeGet(t$);
};

var sk$Persistent$dtunsafeMake = sk.Persistent$dtunsafeMake = function(value) {
  var t$ = value;
  return sk$Unsafe$dtRawStorage.make(t$);
};

var sk$Persistent$dtunsafeUninitialized = sk.Persistent$dtunsafeUninitialized = function() {
  return sk$Unsafe$dtRawStorage.uninitialized();
};

var sk$Position$dtcreate = sk.Position$dtcreate = function(line, column) {
  var t$ = line;
  var t$1 = column;
  return sk$Position.create(t$, t$1);
};

var sk$QuickCheck$dtassert = sk.QuickCheck$dtassert = function(gen, f, config) {
  if (config === undefined)
    config = ((() => 
    {
      return new (sk$QuickCheck$dtConfig)({
        attempts: undefined,
        maxSize: undefined,
        seed: undefined
      });
    })());
  var test = ((a) => 
  {
    try {
      {
        var t$ = f;
        var t$1 = a;
        t$(t$1);
        return new (sk$Success)(sk.__.$void);
      }
    }catch ($var){
      {
        var exn;
        {
          jumpBlockOuterjumpLab$bg31791:{
            jumpLab$bg31791:{
              {
                exn = $var;
                break jumpLab$bg31791;
              }
            }
            {
              var t$2 = exn;
              var t$3 = t$2.getMessage();
              return new (sk$Failure)(t$3);
            }
          }
        }
      }
    }
  });
  var t$4 = gen;
  var t$5 = test;
  var t$6 = new (sk$QuickCheck$dtForAllProperty)(t$4, t$5);
  var t$7 = config;
  var t$8 = sk$QuickCheck$dtrun(t$6, t$7);
  return sk$assertEqual(t$8, singleton$QuickCheck$dtTestSuccess, undefined);
};

var sk$QuickCheck$dtbuildShrinkTree = sk.QuickCheck$dtbuildShrinkTree = function(a, firstShrink) {
  if (firstShrink === undefined)
    firstShrink = ((() => 
    {
      return new sk$Bool((true));
    })());
  var t$ = a;
  var t$1 = new (sk$QuickCheck$dtLazySource)((() => 
  {
    var t$2 = a;
    var t$3 = firstShrink;
    return t$2.shrink(t$3);
  })).map(((x) => 
  {
    var t$4 = x;
    return sk$QuickCheck$dtbuildShrinkTree(t$4, new sk$Bool((false)));
  }));
  return new (sk$QuickCheck$dtTree)(t$, t$1);
};

var sk$QuickCheck$dtcheck = sk.QuickCheck$dtcheck = function(gen, f, config) {
  if (config === undefined)
    config = ((() => 
    {
      return new (sk$QuickCheck$dtConfig)({
        attempts: undefined,
        maxSize: undefined,
        seed: undefined
      });
    })());
  var t$ = gen;
  var t$1 = f;
  var t$2 = new (sk$QuickCheck$dtForAllProperty)(t$, t$1);
  var t$3 = config;
  return sk$QuickCheck$dtrun(t$2, t$3);
};

var sk$QuickCheck$dtrun = sk.QuickCheck$dtrun = function(test, config) {
  var t$ = config;
  var t$1 = t$.seed;
  var rng = sk$Random.mcreate(t$1);
  var t$2 = test;
  var property = t$2.property();
  var t$3 = property;
  var generator = t$3.generator();
  var size = new sk$Int(4294967295.0, 4294967295.0);
  var t$4 = config;
  var t$5 = t$4.attempts;
  var t$6 = new (sk$Range)(new sk$Int(0.0, 0.0), t$5);
  var $var = t$6.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg31812:{
      break$bg31812:{
        dowhile_else$bg31811:{
          do
            {
              jumpBlockOuterdowhile_cond$bg31813:{
                dowhile_cond$bg31813:{
                  {
                    var t$7 = $var;
                    var var2 = t$7.next();
                    var _;
                    {
                      jumpBlockOuterjumpLab$bg31835:{
                        jumpLab$bg31835:{
                          jumpLab$bg31834:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg31834;
                              
                              case 205:
                                _ = var2.value;
                                break jumpLab$bg31835;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg31813;
                          }
                        }
                        {
                          var t$8 = size;
                          var t$9 = t$8.$pl(new sk$Int(1.0, 0.0));
                          var t$10 = config;
                          var t$11 = t$10.maxSize;
                          size = t$9.$pc(t$11);
                          var t$12 = generator;
                          var t$13 = rng;
                          var t$14 = size;
                          var tree = t$12.generate(t$13, t$14);
                          var t$15 = tree;
                          var t$16;
                          var var3 = sk$QuickCheck$dtvisit(t$15);
                          var failure;
                          {
                            jumpBlockOuterjumpLab$bg31831:{
                              jumpLab$bg31831:{
                                jumpLab$bg31830:{
                                  switch (var3.__type_switch_id) {
                                    case 251:
                                      break jumpLab$bg31830;
                                    
                                    case 250:
                                      failure = var3;
                                      break jumpLab$bg31831;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                t$16 = sk.__.$void;
                                break jumpBlockOuterjumpLab$bg31831;
                              }
                              {
                                var t$17 = failure;
                                var t$18 = config;
                                var t$19 = t$18.seed;
                                break_val = ((() => 
                                {
                                  var _tmp576 = t$17.__copy();
                                  _tmp576.seed = t$19;
                                  return _tmp576;
                                })());
                                break break$bg31812;
                              }
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg31835;
                      }
                    }
                    break dowhile_cond$bg31813;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg31811;
                break jumpBlockOuterdowhile_cond$bg31813;
              }
            }
          while (true);
        }
        break_val = singleton$QuickCheck$dtTestSuccess;
        break jumpBlockOuterbreak$bg31812;
      }
      {}
      break jumpBlockOuterbreak$bg31812;
    }
  }
  return break_val;
};

var sk$QuickCheck$dtsample = sk.QuickCheck$dtsample = function(gen, config) {
  if (config === undefined)
    config = ((() => 
    {
      return new (sk$QuickCheck$dtConfig)({
        attempts: undefined,
        maxSize: undefined,
        seed: undefined
      });
    })());
  var t$ = config;
  var t$1 = t$.seed;
  var rng = sk$Random.mcreate(t$1);
  var t$2 = config;
  var t$3 = t$2.attempts;
  return sk$Vector.fillBy(t$3, ((index) => 
  {
    var t$4 = index;
    var t$5 = config;
    var t$6 = t$5.maxSize;
    var size = t$4.$pc(t$6);
    var t$7 = gen;
    var t$8 = rng;
    var t$9 = size;
    return t$7.generate(t$8, t$9);
  }));
};

var sk$QuickCheck$dtsampleShrink = sk.QuickCheck$dtsampleShrink = function(a) {
  var t$ = a;
  var t$1 = sk$QuickCheck$dtbuildShrinkTree(t$, undefined);
  return t$1.iterator();
};

var sk$QuickCheck$dtvisit = sk.QuickCheck$dtvisit = function(tree) {
  var descendants;
  var failure;
  var success;
  {
    jumpBlockOuterjumpLab$bg31859:{
      jumpLab$bg31859:{
        jumpLab$bg31858:{
          jumpLab$bg31860:{
            switch (tree.__type_switch_id) {
              case 252:
                break jumpLab$bg31860;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          switch (tree.root.__type_switch_id) {
            case 251:
              success = tree.root;
              break jumpLab$bg31858;
            
            case 250:
              descendants = tree.descendants;
              failure = tree.root;
              break jumpLab$bg31859;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return success;
      }
      {
        var t$ = descendants;
        var t$1 = t$.find(((t) => 
        {
          var t$2 = t;
          var t$3 = t$2.root;
          return t$3.isFailure();
        }));
        var t$4 = t$1.map(((_tmp31855) => 
        {
          return sk$QuickCheck$dtvisit(_tmp31855);
        }));
        var t$5 = failure;
        return t$4.$default(t$5);
      }
    }
  }
};

var sk$Random$dtrotl = sk.Random$dtrotl = function(x, k) {
  var t$ = x;
  var t$1 = k;
  var t$2 = t$.shl(t$1);
  var t$3 = x;
  var t$4 = k;
  var t$5 = new sk$Int(64.0, 0.0).$mi(t$4);
  var t$6 = t$3.ushr(t$5);
  return t$2.or(t$6);
};

var sk$Regex$dtescape = sk.Regex$dtescape = function(string) {
  var res = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = string;
  t$.each(((c) => 
  {
    var t$1 = c;
    if ((sk$Regex$dtregexEscapeChars()).contains(t$1).__value)
      {
        var t$2 = res;
        t$2.push($makeChar(92));
      }
    else
      {}
    var t$3 = res;
    var t$4 = c;
    return t$3.push(t$4);
  }));
  var t$5 = res;
  var t$6 = t$5.toArray();
  return sk$String.fromChars(t$6);
};

var sk$Runtime$dtinspectHandle = sk.Runtime$dtinspectHandle = function($atparam0) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$SkipError$dtdidYouMeanUnboundName = sk.SkipError$dtdidYouMeanUnboundName = function(name) {
  var t$ = name;
  var $var = sk$SkipError$dtunboundNameMapping(t$);
  var correct_name;
  {
    jumpBlockOuterjumpLab$bg31884:{
      jumpLab$bg31884:{
        jumpLab$bg31883:{
          switch ($var.__type_switch_id) {
            case 205:
              correct_name = $var.value;
              break jumpLab$bg31883;
            
            case 204:
              break jumpLab$bg31884;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$1 = correct_name;
          var t$2 = new sk$String(('. Did you mean \'')).$pl(t$1);
          return t$2.$pl(new sk$String(('\'?')));
        }
      }
      return new sk$String((''));
    }
  }
};

var sk$SkipError$dtdo2WithError = sk.SkipError$dtdo2WithError = function(f1, f2) {
  var t$ = f1;
  var r1 = sk$SkipError$dtdoWithError(t$);
  var t$1 = f2;
  var r2 = sk$SkipError$dtdoWithError(t$1);
  var t$2 = r1;
  var t$3 = t$2.maybeFailure();
  var t$4 = r2;
  var t$5 = t$4.maybeFailure();
  var t$6 = new (sk$Array)([
    t$3,
    t$5
  ]);
  var t$7 = sk$Vector.createFromItems(t$6);
  var t$8 = t$7.filterNone();
  sk$SkipError$dtthrowFlattenedErrors(t$8);
  var t$9 = r1;
  var t$10 = t$9.fromSuccess(undefined);
  var t$11 = r2;
  var t$12 = t$11.fromSuccess(undefined);
  return new (sk$Tuple2)(t$10, t$12);
};

var sk$SkipError$dtdo3WithError = sk.SkipError$dtdo3WithError = function(f1, f2, f3) {
  var t$ = f1;
  var r1 = sk$SkipError$dtdoWithError(t$);
  var t$1 = f2;
  var r2 = sk$SkipError$dtdoWithError(t$1);
  var t$2 = f3;
  var r3 = sk$SkipError$dtdoWithError(t$2);
  var t$3 = r1;
  var t$4 = t$3.maybeFailure();
  var t$5 = r2;
  var t$6 = t$5.maybeFailure();
  var t$7 = r3;
  var t$8 = t$7.maybeFailure();
  var t$9 = new (sk$Array)([
    t$4,
    t$6,
    t$8
  ]);
  var t$10 = sk$Vector.createFromItems(t$9);
  var t$11 = t$10.filterNone();
  sk$SkipError$dtthrowFlattenedErrors(t$11);
  var t$12 = r1;
  var t$13 = t$12.fromSuccess(undefined);
  var t$14 = r2;
  var t$15 = t$14.fromSuccess(undefined);
  var t$16 = r3;
  var t$17 = t$16.fromSuccess(undefined);
  return new (sk$Tuple3)(t$13, t$15, t$17);
};

var sk$SkipError$dtdo4WithError = sk.SkipError$dtdo4WithError = function(f1, f2, f3, f4) {
  var t$ = f1;
  var r1 = sk$SkipError$dtdoWithError(t$);
  var t$1 = f2;
  var r2 = sk$SkipError$dtdoWithError(t$1);
  var t$2 = f3;
  var r3 = sk$SkipError$dtdoWithError(t$2);
  var t$3 = f4;
  var r4 = sk$SkipError$dtdoWithError(t$3);
  var t$4 = r1;
  var t$5 = t$4.maybeFailure();
  var t$6 = r2;
  var t$7 = t$6.maybeFailure();
  var t$8 = r3;
  var t$9 = t$8.maybeFailure();
  var t$10 = r4;
  var t$11 = t$10.maybeFailure();
  var t$12 = new (sk$Array)([
    t$5,
    t$7,
    t$9,
    t$11
  ]);
  var t$13 = sk$Vector.createFromItems(t$12);
  var t$14 = t$13.filterNone();
  sk$SkipError$dtthrowFlattenedErrors(t$14);
  var t$15 = r1;
  var t$16 = t$15.fromSuccess(undefined);
  var t$17 = r2;
  var t$18 = t$17.fromSuccess(undefined);
  var t$19 = r3;
  var t$20 = t$19.fromSuccess(undefined);
  var t$21 = r4;
  var t$22 = t$21.fromSuccess(undefined);
  return new (sk$Tuple4)(t$16, t$18, t$20, t$22);
};

var sk$SkipError$dtdoAndReportErrors = sk.SkipError$dtdoAndReportErrors = function(operation) {
  var t$ = operation;
  var $var = t$();
  var result;
  var errors;
  {
    jumpBlockOuterjumpLab$bg31950:{
      jumpLab$bg31950:{
        jumpLab$bg31949:{
          switch ($var.__type_switch_id) {
            case 259:
              result = $var.value;
              break jumpLab$bg31949;
            
            case 258:
              errors = $var.error;
              break jumpLab$bg31950;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return result;
      }
      {
        var t$1 = errors;
        var t$2 = t$1.take(new sk$Int(100.0, 0.0));
        var t$3 = t$2.join(new sk$String(('\n')));
        sk$print_error(t$3);
        return sk$exit(new sk$Int(2.0, 0.0));
      }
    }
  }
};

var sk$SkipError$dtdoWithError = sk.SkipError$dtdoWithError = function(f) {
  try {
    {
      var t$ = f;
      var t$1 = t$();
      return new (sk$Success)(t$1);
    }
  }catch ($var){
    {
      var errors;
      {
        jumpBlockOuterjumpLab$bg31957:{
          jumpLab$bg31957:{
            switch ($var.__type_switch_id) {
              case 77:
                errors = $var.errors;
                break jumpLab$bg31957;
              
              default:
                skip.throwException(sk, $var);

            }
          }
          {
            var t$2 = errors;
            return new (sk$Failure)(t$2);
          }
        }
      }
    }
  }
};

var sk$SkipError$dtduplicate = sk.SkipError$dtduplicate = function(kind, pos1, pos2) {
  var t$ = pos1;
  var t$1 = kind;
  var t$2 = new sk$String(('Duplicate ')).$pl(t$1);
  var msg1 = new (sk$Tuple2)(t$, t$2);
  var t$3 = pos2;
  var msg2 = new (sk$Tuple2)(t$3, new sk$String(('Previously defined here')));
  var t$4 = msg1;
  var t$5 = msg2;
  var t$6 = new (sk$Array)([
    t$4,
    t$5
  ]);
  var t$7 = sk$List.createFromItems(t$6);
  return sk$SkipError$dterrorl(t$7, undefined);
};

var sk$SkipError$dtduplicate_class_kind = sk.SkipError$dtduplicate_class_kind = function(pos1, pos2) {
  var t$ = pos1;
  var t$1 = pos2;
  return sk$SkipError$dtduplicate(new sk$String(('class kind')), t$, t$1);
};

var sk$SkipError$dtduplicate_context_type = sk.SkipError$dtduplicate_context_type = function(pos1, pos2) {
  var t$ = pos1;
  var t$1 = pos2;
  return sk$SkipError$dtduplicate(new sk$String(('context type')), t$, t$1);
};

var sk$SkipError$dtduplicate_modifier = sk.SkipError$dtduplicate_modifier = function(pos1, pos2) {
  var t$ = pos1;
  var t$1 = pos2;
  return sk$SkipError$dtduplicate(new sk$String(('modifier')), t$, t$1);
};

var sk$SkipError$dtduplicate_visibility = sk.SkipError$dtduplicate_visibility = function(pos1, pos2) {
  var t$ = pos1;
  var t$1 = pos2;
  return sk$SkipError$dtduplicate(new sk$String(('visibility')), t$, t$1);
};

var sk$SkipError$dterror = sk.SkipError$dterror = function(pos, msg, fix) {
  if (fix === undefined)
    fix = ((() => 
    {
      return singleton$None;
    })());
  var t$ = pos;
  var t$1 = msg;
  var t$2 = new (sk$Tuple2)(t$, t$1);
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var t$4 = sk$List.createFromItems(t$3);
  var t$5 = fix;
  return sk$SkipError$dterrorl(t$4, t$5);
};

var sk$SkipError$dterrorFromSyntaxError = sk.SkipError$dterrorFromSyntaxError = function(error, filename) {
  var t$ = error;
  var t$1 = t$.messages;
  var t$2 = t$1.map(((message) => 
  {
    var t$3 = filename;
    var t$4 = message;
    var t$5 = t$4.i0;
    var t$6 = sk$FileRange$dtcreate(t$3, t$5);
    var t$7 = message;
    var t$8 = t$7.i1;
    return new (sk$Tuple2)(t$6, t$8);
  }));
  var t$9 = error;
  var t$10 = t$9.fix;
  return new (sk$SkipError$dtError)({
    fix: t$10,
    traces: t$2
  });
};

var sk$SkipError$dterrorl = sk.SkipError$dterrorl = function(traces, fix) {
  if (fix === undefined)
    fix = ((() => 
    {
      return singleton$None;
    })());
  var t$ = traces;
  var t$1 = fix;
  var t$2 = new (sk$SkipError$dtError)({
    fix: t$1,
    traces: t$
  });
  var t$3 = new (sk$Array)([
    t$2
  ]);
  var t$4 = sk$Vector.createFromItems(t$3);
  skip.throwException(sk, new (sk$SkipError$dtSkipErrorException)({
    errors: t$4
  }));
};

var sk$SkipError$dtfail = sk.SkipError$dtfail = function() {
  return sk$exit(new sk$Int(2.0, 0.0));
};

var sk$SkipError$dtgetContextOfRange = sk.SkipError$dtgetContextOfRange = function(range, fileContents) {
  var t$ = range;
  if (t$.isNone().__value)
    return new sk$String((''));
  else
    {}
  var t$1 = range;
  var t$2 = t$1.start;
  var line_number = t$2.line();
  var t$3 = range;
  var start_position = t$3.start;
  var t$4 = range;
  var end_position = t$4.end;
  var t$5 = fileContents;
  var t$6 = t$5.split(new sk$String(('\n')));
  var lines = sk$List.createFromItems(t$6);
  var t$7 = lines;
  var t$8;
  if (t$7.isEmpty().__value)
    t$8 = new sk$Int(0.0, 0.0);
  else
    {
      var t$9 = lines;
      var t$10 = t$9.size();
      var t$11 = lines;
      var t$12 = t$11.last();
      var t$13;
      if (t$12.$eq$eq(new sk$String((''))).__value)
        t$13 = new sk$Int(1.0, 0.0);
      else
        t$13 = new sk$Int(0.0, 0.0);
      var t$14 = t$13;
      t$8 = t$10.$mi(t$14);
    }
  var number_of_lines = t$8;
  var t$15 = line_number;
  var t$16 = t$15.$pl(new sk$Int(3.0, 0.0));
  var t$17 = t$16.toString();
  var prefix_size = t$17.length();
  var t$18 = number_of_lines;
  var t$19 = line_number;
  if (t$18.$lt$eq(t$19).__value)
    return new sk$String((''));
  else
    {
      var line_numbered_line = ((lineToPrint) => 
      {
        var t$20 = lineToPrint;
        var t$21;
        if (t$20.$lt(new sk$Int(0.0, 0.0)).__value)
          t$21 = new sk$Bool((true));
        else
          {
            var t$22 = lineToPrint;
            var t$23 = number_of_lines;
            t$21 = t$22.$gt$eq(t$23);
          }
        if (t$21.__value)
          return new sk$String((''));
        else
          {
            var t$24 = lineToPrint;
            var t$25 = t$24.$pl(new sk$Int(1.0, 0.0));
            var digits = t$25.toString();
            var t$26 = digits;
            var t$27 = t$26.length();
            var t$28 = prefix_size;
            var t$29;
            if (t$27.$lt(t$28).__value)
              t$29 = new sk$String((' '));
            else
              t$29 = new sk$String((''));
            var padding = t$29;
            var t$30 = lines;
            var t$31 = lineToPrint;
            var lineString = t$30.getNth(t$31);
            var t$32 = lineString;
            var t$33;
            if (t$32.$eq$eq(new sk$String((''))).__value)
              t$33 = new sk$String((''));
            else
              t$33 = new sk$String((' '));
            var linePrefix = t$33;
            var t$34 = padding;
            var t$35 = digits;
            var t$36 = t$34.$pl(t$35);
            var t$37 = t$36.$pl(new sk$String((' |')));
            var t$38 = linePrefix;
            var t$39 = t$37.$pl(t$38);
            var t$40 = lineString;
            var t$41 = t$39.$pl(t$40);
            return t$41.$pl(new sk$String(('\n')));
          }
      });
      var chevroned_line = ((start, end, line_contents) => 
      {
        var t$42 = start;
        var t$43 = t$42.line();
        var t$44 = end;
        var t$45 = t$44.line();
        if (t$43.$gt(t$45).__value)
          return new sk$String((''));
        else
          {
            var t$46 = line_contents;
            var line_length = t$46.length();
            var t$47 = line_contents;
            var firstNonSpaceColumnOpt = t$47.search(new sk$Int(0.0, 0.0), ((ch) => 
            {
              var t$48 = ch;
              return t$48.$bg$eq($makeChar(32));
            }));
            var t$49;
            var firstNonSpaceColumn;
            {
              jumpBlockOuterjumpLab$bg32138:{
                jumpLab$bg32138:{
                  jumpLab$bg32137:{
                    switch (firstNonSpaceColumnOpt.__type_switch_id) {
                      case 204:
                        break jumpLab$bg32137;
                      
                      case 205:
                        firstNonSpaceColumn = firstNonSpaceColumnOpt.value;
                        break jumpLab$bg32138;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  {
                    var t$50 = start;
                    var t$51 = t$50.line();
                    var t$52 = end;
                    var t$53 = t$52.line();
                    var t$54;
                    if (t$51.$eq$eq(t$53).__value)
                      {
                        var t$55 = start;
                        var t$56 = t$55.column();
                        var t$57 = end;
                        var t$58 = t$57.column();
                        t$54 = sk$max(t$56, t$58);
                      }
                    else
                      t$54 = line_length;
                    t$49 = t$54;
                  }
                  break jumpBlockOuterjumpLab$bg32138;
                }
                {
                  var t$59 = start;
                  var t$60 = t$59.column();
                  var t$61 = firstNonSpaceColumn;
                  t$49 = sk$max(t$60, t$61);
                }
                break jumpBlockOuterjumpLab$bg32138;
              }
            }
            var chevron_start = t$49;
            var t$62 = start;
            var t$63 = t$62.line();
            var t$64 = end;
            var t$65 = t$64.line();
            var t$66;
            if (t$63.$eq$eq(t$65).__value)
              {
                var t$67 = start;
                var t$68 = t$67.column();
                var t$69 = t$68.$pl(new sk$Int(1.0, 0.0));
                var t$70 = end;
                var t$71 = t$70.column();
                var t$72 = sk$max(t$69, t$71);
                var t$73 = chevron_start;
                t$66 = t$72.$mi(t$73);
              }
            else
              {
                var t$74 = line_length;
                var t$75 = chevron_start;
                t$66 = t$74.$mi(t$75);
              }
            var chevron_length = t$66;
            var t$76 = chevron_length;
            if (t$76.$gt(new sk$Int(0.0, 0.0)).__value)
              {
                var t$77 = prefix_size;
                var paddingSize = t$77.$pl(new sk$Int(1.0, 0.0));
                var t$78 = paddingSize;
                var t$79 = $makeChar(32).repeat(t$78);
                var t$80 = t$79.$pl(new sk$String(('| ')));
                var t$81 = chevron_start;
                var t$82 = $makeChar(32).repeat(t$81);
                var t$83 = t$80.$pl(t$82);
                var t$84 = chevron_length;
                var t$85 = $makeChar(94).repeat(t$84);
                var t$86 = t$83.$pl(t$85);
                return t$86.$pl(new sk$String(('\n')));
              }
            else
              return new sk$String((''));
          }
      });
      var t$87 = lines;
      var t$88 = line_number;
      var error_line = t$87.getNth(t$88);
      var t$89 = line_number;
      var t$90 = t$89.$pl(new sk$Int(1.0, 0.0));
      var t$91 = number_of_lines;
      var t$92;
      if (t$90.$gt$eq(t$91).__value)
        t$92 = new sk$String((''));
      else
        {
          var t$93 = lines;
          var t$94 = line_number;
          var t$95 = t$94.$pl(new sk$Int(1.0, 0.0));
          t$92 = t$93.getNth(t$95);
        }
      var after_error_line = t$92;
      var t$96 = line_numbered_line;
      var t$97 = line_number;
      var t$98 = t$97.$mi(new sk$Int(2.0, 0.0));
      var t$99 = t$96(t$98);
      var t$100 = line_numbered_line;
      var t$101 = line_number;
      var t$102 = t$101.$mi(new sk$Int(1.0, 0.0));
      var t$103 = t$100(t$102);
      var t$104 = t$99.$pl(t$103);
      var t$105 = line_numbered_line;
      var t$106 = line_number;
      var t$107 = t$105(t$106);
      var t$108 = t$104.$pl(t$107);
      var t$109 = chevroned_line;
      var t$110 = start_position;
      var t$111 = end_position;
      var t$112 = error_line;
      var t$113 = t$109(t$110, t$111, t$112);
      var t$114 = t$108.$pl(t$113);
      var t$115 = line_numbered_line;
      var t$116 = line_number;
      var t$117 = t$116.$pl(new sk$Int(1.0, 0.0));
      var t$118 = t$115(t$117);
      var t$119 = t$114.$pl(t$118);
      var t$120 = chevroned_line;
      var t$121 = start_position;
      var t$122 = t$121.nextLine();
      var t$123 = end_position;
      var t$124 = after_error_line;
      var t$125 = t$120(t$122, t$123, t$124);
      return t$119.$pl(t$125);
    }
};

var sk$SkipError$dtget_context_of_pos = sk.SkipError$dtget_context_of_pos = function(t, fileContents) {
  if (fileContents === undefined)
    fileContents = ((() => 
    {
      return singleton$None;
    })());
  var t$ = t;
  var t$1 = t$.range;
  if (t$1.isNone().__value)
    return new sk$String((''));
  else
    {}
  var t$2;
  var contents;
  {
    jumpBlockOuterjumpLab$bg32154:{
      jumpLab$bg32154:{
        jumpLab$bg32153:{
          switch (fileContents.__type_switch_id) {
            case 205:
              contents = fileContents.value;
              break jumpLab$bg32153;
            
            case 204:
              break jumpLab$bg32154;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        t$2 = contents;
        break jumpBlockOuterjumpLab$bg32154;
      }
      {
        var t$3;
        try {
          {
            var t$4 = t;
            var t$5 = t$4.filename;
            t$3 = sk$FileSystem$dtreadTextFile(t$5);
          }
        }catch ($var){
          {
            jumpBlockOuterjumpLab$bg32151:{
              jumpLab$bg32151:{
                break jumpLab$bg32151;
              }
              return new sk$String((''));
            }
          }
        }
        t$2 = t$3;
      }
      break jumpBlockOuterjumpLab$bg32154;
    }
  }
  var contents1 = t$2;
  var t$6 = t;
  var t$7 = t$6.range;
  var t$8 = contents1;
  return sk$SkipError$dtgetContextOfRange(t$7, t$8);
};

var sk$SkipError$dtindependent_errors = sk.SkipError$dtindependent_errors = function(traces) {
  var t$ = traces;
  var t$1 = t$.values();
  var t$2 = t$1.map(((trace) => 
  {
    var t$3 = trace;
    var t$4 = new (sk$Array)([
      t$3
    ]);
    var t$5 = sk$List.createFromItems(t$4);
    return new (sk$SkipError$dtError)({
      fix: singleton$None,
      traces: t$5
    });
  }));
  var t$6 = t$2.collect(sk$Vector);
  skip.throwException(sk, new (sk$SkipError$dtSkipErrorException)({
    errors: t$6
  }));
};

var sk$SkipError$dtinternal_error2 = sk.SkipError$dtinternal_error2 = function(primary_pos, primary_message, related_pos, related_message) {
  var t$ = primary_pos;
  var t$1 = primary_message;
  var t$2 = new (sk$Tuple2)(t$, t$1);
  var t$3 = related_pos;
  var t$4 = related_message;
  var t$5 = new (sk$Tuple2)(t$3, t$4);
  var t$6 = new (sk$Array)([
    t$2,
    t$5
  ]);
  var t$7 = sk$List.createFromItems(t$6);
  return sk$SkipError$dterrorl(t$7, undefined);
};

var sk$SkipError$dtname_already_bound = sk.SkipError$dtname_already_bound = function(name, pos1, pos2) {
  var t$ = pos1;
  var t$1 = name;
  var t$2 = new sk$String(('Name already bound: ')).$pl(t$1);
  var t$3 = new (sk$Tuple2)(t$, t$2);
  var t$4 = pos2;
  var t$5 = new (sk$Tuple2)(t$4, new sk$String(('Previously here')));
  var t$6 = new (sk$Array)([
    t$3,
    t$5
  ]);
  var t$7 = sk$List.createFromItems(t$6);
  return sk$SkipError$dterrorl(t$7, undefined);
};

var sk$SkipError$dtrenderTextRange = sk.SkipError$dtrenderTextRange = function(range) {
  var t$ = range;
  var t$1 = t$.start;
  var t$2 = t$1.column();
  var startColumn = t$2.$pl(new sk$Int(1.0, 0.0));
  var t$3 = new sk$String(('line ')).toString();
  var t$4 = range;
  var t$5 = t$4.start;
  var t$6 = t$5.line();
  var t$7 = t$6.$pl(new sk$Int(1.0, 0.0));
  var t$8 = t$7.toString();
  var t$9 = new sk$String((', characters ')).toString();
  var t$10 = startColumn;
  var t$11 = t$10.toString();
  var t$12 = new sk$String(('-')).toString();
  var t$13 = startColumn;
  var t$14 = range;
  var t$15 = t$14.end;
  var t$16 = t$15.column();
  var t$17 = sk$max(t$13, t$16);
  var t$18 = t$17.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$3,
    t$8,
    t$9,
    t$11,
    t$12,
    t$18
  ]));
};

var sk$SkipError$dtrender_pos = sk.SkipError$dtrender_pos = function(pos) {
  var t$ = new sk$String(('File "')).toString();
  var t$1 = pos;
  var t$2 = t$1.filename;
  var t$3 = t$2.toString();
  var t$4 = new sk$String(('"')).toString();
  var file = new sk$String(('')).join(new (sk$Array)([
    t$,
    t$3,
    t$4
  ]));
  var t$5 = pos;
  var t$6 = t$5.range;
  var t$7 = t$6.isNone();
  var t$8;
  if (t$7.$bg().__value)
    {
      var t$9 = new sk$String((', ')).toString();
      var t$10 = pos;
      var t$11 = t$10.range;
      var t$12 = sk$SkipError$dtrenderTextRange(t$11);
      var t$13 = t$12.toString();
      var t$14 = new sk$String((':')).toString();
      t$8 = new sk$String(('')).join(new (sk$Array)([
        t$9,
        t$13,
        t$14
      ]));
    }
  else
    t$8 = new sk$String((''));
  var position = t$8;
  var t$15 = file;
  var t$16 = position;
  var t$17 = t$15.$pl(t$16);
  return t$17.$pl(new sk$String(('\n')));
};

var sk$SkipError$dtsyntaxErrorMessageToString = sk.SkipError$dtsyntaxErrorMessageToString = function(message, fileContents) {
  var t$ = message;
  var t$1 = t$.i0;
  var t$2 = sk$SkipError$dtrenderTextRange(t$1);
  var t$3 = t$2.toString();
  var t$4 = new sk$String((': ')).toString();
  var t$5 = message;
  var t$6 = t$5.i1;
  var t$7 = t$6.toString();
  var t$8 = new sk$String(('\n')).toString();
  var t$9 = message;
  var t$10 = t$9.i0;
  var t$11 = fileContents;
  var t$12 = sk$SkipError$dtgetContextOfRange(t$10, t$11);
  var t$13 = t$12.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$3,
    t$4,
    t$7,
    t$8,
    t$13
  ]));
};

var sk$SkipError$dtsyntaxErrorToString = sk.SkipError$dtsyntaxErrorToString = function(error, fileContents) {
  var t$ = error;
  var t$1 = t$.messages;
  var t$2 = t$1.map(((message) => 
  {
    var t$3 = message;
    var t$4 = fileContents;
    return sk$SkipError$dtsyntaxErrorMessageToString(t$3, t$4);
  }));
  return t$2.join(new sk$String(('\n')));
};

var sk$SkipError$dtthrowErrors = sk.SkipError$dtthrowErrors = function(errors) {
  var t$ = errors;
  var t$1 = t$.isEmpty();
  if (t$1.$bg().__value)
    {
      var t$2 = errors;
      skip.throwException(sk, new (sk$SkipError$dtSkipErrorException)({
        errors: t$2
      }));
    }
  else
    return sk.__.$void;
};

var sk$SkipError$dtthrowFlattenedErrors = sk.SkipError$dtthrowFlattenedErrors = function(errors) {
  var t$ = errors;
  var t$1 = t$.flatten();
  return sk$SkipError$dtthrowErrors(t$1);
};

var sk$SkipError$dttraceToString = sk.SkipError$dttraceToString = function(trace) {
  var t$ = trace;
  var t$1 = t$.i0;
  var t$2 = sk$SkipError$dtrender_pos(t$1);
  var t$3 = trace;
  var t$4 = t$3.i1;
  var t$5 = t$2.$pl(t$4);
  var t$6 = t$5.$pl(new sk$String(('\n')));
  var t$7 = trace;
  var t$8 = t$7.i0;
  var t$9 = sk$SkipError$dtget_context_of_pos(t$8, undefined);
  return t$6.$pl(t$9);
};

var sk$SkipError$dtunboundNameMapping = sk.SkipError$dtunboundNameMapping = function(name) {
  jumpBlockOuterjumpLab$bg32263:{
    jumpLab$bg32263:{
      jumpLab$bg32262:{
        jumpLab$bg32261:{
          jumpLab$bg32260:{
            {
              var _tmp577 = name.__getSwitchValue();
              switch (_tmp577) {
                case 'Boolean':
                  break jumpLab$bg32260;
                
                case 'Integer':
                  break jumpLab$bg32261;
                
                case 'Double':
                  break jumpLab$bg32262;
                
                default:
                  break jumpLab$bg32263;

              }
            }
          }
          return new (sk$Some)(new sk$String(('Bool')));
        }
        return new (sk$Some)(new sk$String(('Int')));
      }
      return new (sk$Some)(new sk$String(('Float')));
    }
    return singleton$None;
  }
};

var sk$SkipError$dtunbound_name = sk.SkipError$dtunbound_name = function(name, pos) {
  var t$ = pos;
  var t$1 = name;
  var t$2 = new sk$String(('Unbound name: ')).$pl(t$1);
  var t$3 = name;
  var t$4 = sk$SkipError$dtdidYouMeanUnboundName(t$3);
  var t$5 = t$2.$pl(t$4);
  var t$6 = new (sk$Tuple2)(t$, t$5);
  var t$7 = new (sk$Array)([
    t$6
  ]);
  var t$8 = sk$List.createFromItems(t$7);
  return sk$SkipError$dterrorl(t$8, undefined);
};

var sk$SkipError$dtunbound_name_with_msg = sk.SkipError$dtunbound_name_with_msg = function(pos, msg, npos, name) {
  var t$ = pos;
  var t$1 = msg;
  var t$2 = new (sk$Tuple2)(t$, t$1);
  var t$3 = npos;
  var t$4 = name;
  var t$5 = new sk$String(('Unbound name: ')).$pl(t$4);
  var t$6 = name;
  var t$7 = sk$SkipError$dtdidYouMeanUnboundName(t$6);
  var t$8 = t$5.$pl(t$7);
  var t$9 = new (sk$Tuple2)(t$3, t$8);
  var t$10 = new (sk$Array)([
    t$2,
    t$9
  ]);
  var t$11 = sk$List.createFromItems(t$10);
  return sk$SkipError$dterrorl(t$11, undefined);
};

var sk$SkipProject$dtcreateError = sk.SkipProject$dtcreateError = function(projectDir, message, relatedProjects) {
  if (relatedProjects === undefined)
    relatedProjects = ((() => 
    {
      return sk$Vector.createFromItems(new (sk$Array)([]));
    })());
  var t$ = projectDir;
  var t$1 = message;
  var trace = sk$SkipProject$dtgetTraceForDirectoryMessage(t$, t$1);
  var t$2 = trace;
  var t$3 = relatedProjects;
  var t$4 = sk$SkipProject$dtgetTracesForProjectPaths(t$3);
  var t$5 = new (sk$List$dtCons)(t$2, t$4);
  return new (sk$SkipError$dtError)({
    fix: singleton$None,
    traces: t$5
  });
};

var sk$SkipProject$dtcreateErrorWithPosition = sk.SkipProject$dtcreateErrorWithPosition = function(projectDir, position, message, relatedProjects) {
  if (relatedProjects === undefined)
    relatedProjects = ((() => 
    {
      return sk$Vector.createFromItems(new (sk$Array)([]));
    })());
  var t$ = projectDir;
  var t$1 = position;
  var t$2 = message;
  var trace = sk$SkipProject$dtgetTraceForDirPositionMessage(t$, t$1, t$2);
  var t$3 = trace;
  var t$4 = relatedProjects;
  var t$5 = sk$SkipProject$dtgetTracesForProjectPaths(t$4);
  var t$6 = new (sk$List$dtCons)(t$3, t$5);
  return new (sk$SkipError$dtError)({
    fix: singleton$None,
    traces: t$6
  });
};

var sk$SkipProject$dterror = sk.SkipProject$dterror = function(message) {
  var t$ = message;
  var t$1 = t$.trim();
  sk$print_error_ln(t$1);
  sk$print_error_ln((sk$SkipProject$dthelp()));
  var t$2 = sk$ArgumentParser$dthelp((sk$SkipProject$dtschema()));
  sk$print_error_ln(t$2);
  return sk$SkipError$dtfail();
};

var sk$SkipProject$dtfilesOfProjectProgramUnit = sk.SkipProject$dtfilesOfProjectProgramUnit = function(bindings, projectPath, programUnitName) {
  var t$ = projectPath;
  var t$1 = programUnitName;
  var t$2 = sk$SkipProject$dtloadProjectProgramUnit(t$, t$1);
  return t$2.flatMap(((solutionKey) => 
  {
    var t$3 = solutionKey;
    var t$4 = t$3.i0;
    var t$5 = solutionKey;
    var t$6 = t$5.i1;
    var t$7 = bindings;
    return t$4.getAllSourceFilesFor(t$6, t$7);
  }));
};

var sk$SkipProject$dtfindProjectFileOfPath = sk.SkipProject$dtfindProjectFileOfPath = function(filename) {
  var t$ = filename;
  var t$1 = sk$Path$dtresolve(t$, undefined, undefined);
  var $var = sk$FileSystem$dtfindNearestFile(t$1, (sk$SkipProject$dtPROJECT_FILENAME()));
  var projectPath;
  {
    jumpBlockOuterjumpLab$bg32328:{
      jumpLab$bg32328:{
        jumpLab$bg32327:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg32327;
            
            case 205:
              projectPath = $var.value;
              break jumpLab$bg32328;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = filename;
          var t$3 = sk$SkipProject$dtgetTraceForFileMessage(t$2, new sk$String(('Project file not found.')));
          var t$4 = new (sk$Array)([
            t$3
          ]);
          var t$5 = sk$List.createFromItems(t$4);
          var t$6 = new (sk$SkipError$dtError)({
            fix: singleton$None,
            traces: t$5
          });
          var t$7 = new (sk$Array)([
            t$6
          ]);
          var t$8 = sk$Vector.createFromItems(t$7);
          return new (sk$Failure)(t$8);
        }
      }
      {
        var t$9 = projectPath;
        return new (sk$Success)(t$9);
      }
    }
  }
};

var sk$SkipProject$dtgetFilesForTarget = sk.SkipProject$dtgetFilesForTarget = function(bindings, target) {
  var t$ = target;
  var $var = sk$SkipProject$dtTargetArgument.parse(t$);
  var projectPath;
  var programUnit;
  var filename;
  {
    jumpBlockOuterjumpLab$bg32352:{
      jumpLab$bg32352:{
        jumpLab$bg32351:{
          jumpLab$bg32350:{
            jumpLab$bg32353:{
              switch ($var.__type_switch_id) {
                case 204:
                  break jumpLab$bg32350;
                
                case 205:
                  break jumpLab$bg32353;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch ($var.value.__type_switch_id) {
              case 305:
                filename = $var.value.filename;
                break jumpLab$bg32351;
              
              case 304:
                programUnit = $var.value.programUnit;
                projectPath = $var.value.projectPath;
                break jumpLab$bg32352;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$1 = new sk$String(('\'')).toString();
            var t$2 = target;
            var t$3 = t$2.toString();
            var t$4 = new sk$String(('\' is not a source file, project directory, or compilation target.')).toString();
            var t$5 = new sk$String(('')).join(new (sk$Array)([
              t$1,
              t$3,
              t$4
            ]));
            var t$6 = sk$SkipProject$dtgetTraceForMessage(t$5);
            var t$7 = new (sk$Array)([
              t$6
            ]);
            var t$8 = sk$List.createFromItems(t$7);
            var t$9 = new (sk$SkipError$dtError)({
              fix: singleton$None,
              traces: t$8
            });
            var t$10 = new (sk$Array)([
              t$9
            ]);
            var t$11 = sk$Vector.createFromItems(t$10);
            return new (sk$Failure)(t$11);
          }
        }
        {
          var t$12 = filename;
          var t$13 = new (sk$Array)([
            t$12
          ]);
          var t$14 = sk$Set.createFromItems(t$13);
          return new (sk$Success)(t$14);
        }
      }
      {
        var t$15 = bindings;
        var t$16 = projectPath;
        var t$17 = programUnit;
        return sk$SkipProject$dtfilesOfProjectProgramUnit(t$15, t$16, t$17);
      }
    }
  }
};

var sk$SkipProject$dtgetFilesForTargets = sk.SkipProject$dtgetFilesForTargets = function(bindings, targets) {
  var t$ = targets;
  var t$1 = t$.map(((target) => 
  {
    return sk$SkipError$dtdoAndReportErrors((() => 
    {
      var t$2 = bindings;
      var t$3 = target;
      return sk$SkipProject$dtgetFilesForTarget(t$2, t$3);
    }));
  }));
  var t$4 = sk$Set.createFromItems(new (sk$Array)([]));
  return t$1.reduce(((t1, t2) => 
  {
    var t$5 = t1;
    var t$6 = t2;
    return t$5.union(t$6);
  }), t$4);
};

var sk$SkipProject$dtgetFilesToAnalyze = sk.SkipProject$dtgetFilesToAnalyze = function(filename) {
  var t$ = filename;
  var t$1 = sk$SkipProject$dtfindProjectFileOfPath(t$);
  var t$2 = t$1.flatMap(((projectPath) => 
  {
    var t$3 = projectPath;
    var t$4 = sk$SkipProject$dtSolutionLoader.load(t$3);
    return t$4.flatMap(((solution) => 
    {
      var t$5 = solution;
      var t$6 = filename;
      var t$7 = sk$Path$dtresolve(t$6, undefined, undefined);
      var $var = t$5.defaultProgramUnitAndBindingsOfFile(t$7);
      var var1;
      var var2;
      {
        jumpBlockOuterjumpLab$bg32383:{
          jumpLab$bg32383:{
            switch ($var.__type_switch_id) {
              case 392:
                var1 = $var.i0;
                var2 = $var.i1;
                break jumpLab$bg32383;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var bindings = var2;
            var key = var1;
            var t$8 = solution;
            var t$9 = key;
            var t$10 = bindings;
            return t$8.getAllSourceFilesFor(t$9, t$10);
          }
        }
      }
    }));
  }));
  return t$2.map(((files) => 
  {
    var t$11 = files;
    var t$12 = filename;
    var t$13;
    if (sk$SkipProject$dtisSkipFile(t$12).__value)
      {
        var t$14 = filename;
        var t$15 = sk$Path$dtresolve(t$14, undefined, undefined);
        var t$16 = new (sk$Array)([
          t$15
        ]);
        t$13 = sk$Vector.createFromItems(t$16);
      }
    else
      t$13 = sk$Vector.createFromItems(new (sk$Array)([]));
    var t$17 = t$13;
    return t$11.union(t$17);
  }));
};

var sk$SkipProject$dtgetTraceForDirPositionMessage = sk.SkipProject$dtgetTraceForDirPositionMessage = function(dirname, position, message) {
  var t$ = dirname;
  var t$1 = sk$SkipProject$dtprojectFilenameOfDirectory(t$);
  var t$2 = position;
  var t$3 = position;
  var t$4 = t$3.nextColumn();
  var t$5 = sk$TextRange$dtcreate(t$2, t$4);
  var t$6 = sk$FileRange$dtcreate(t$1, t$5);
  var t$7 = message;
  return new (sk$Tuple2)(t$6, t$7);
};

var sk$SkipProject$dtgetTraceForDirectoryMessage = sk.SkipProject$dtgetTraceForDirectoryMessage = function(dirname, message) {
  var t$ = dirname;
  var t$1 = sk$SkipProject$dtprojectFilenameOfDirectory(t$);
  var t$2 = message;
  return sk$SkipProject$dtgetTraceForFileMessage(t$1, t$2);
};

var sk$SkipProject$dtgetTraceForFileMessage = sk.SkipProject$dtgetTraceForFileMessage = function(filename, message) {
  var t$ = filename;
  var t$1 = sk$FileRange$dtcreate(t$, (sk$TextRange$dtnone()));
  var t$2 = message;
  return new (sk$Tuple2)(t$1, t$2);
};

var sk$SkipProject$dtgetTraceForMessage = sk.SkipProject$dtgetTraceForMessage = function(message) {
  var t$ = message;
  return sk$SkipProject$dtgetTraceForFileMessage(new sk$String(('')), t$);
};

var sk$SkipProject$dtgetTracesForProjectPaths = sk.SkipProject$dtgetTracesForProjectPaths = function(projectPaths) {
  var t$ = projectPaths;
  var t$1 = t$.reversed();
  var t$2 = t$1.map(((path) => 
  {
    var t$3 = path;
    var t$4 = new sk$String(('Referenced from')).toString();
    var t$5 = t$4;
    return sk$SkipProject$dtgetTraceForDirectoryMessage(t$3, t$5);
  }));
  return sk$List.createFromItems(t$2);
};

var sk$SkipProject$dtisSkipFile = sk.SkipProject$dtisSkipFile = function(path) {
  var t$ = path;
  var t$1 = sk$Path$dtextname(t$);
  return t$1.$eq$eq((sk$SkipProject$dtSKIP_FILE_EXTENSION()));
};

var sk$SkipProject$dtisTarget = sk.SkipProject$dtisTarget = function(value) {
  var t$ = value;
  return t$.contains((sk$SkipProject$dttargetSeparator()));
};

var sk$SkipProject$dtloadProjectProgramUnit = sk.SkipProject$dtloadProjectProgramUnit = function(projectPath, programUnitName) {
  var t$ = projectPath;
  var t$1 = sk$SkipProject$dtSolutionLoader.load(t$);
  return t$1.flatMap(((solution) => 
  {
    var t$2 = solution;
    var t$3 = projectPath;
    var t$4 = programUnitName;
    var t$5 = t$2.getProgramUnit(t$3, t$4);
    return t$5.map(((programUnit) => 
    {
      var t$6 = solution;
      var t$7 = programUnit;
      var t$8 = t$7.key;
      return new (sk$Tuple2)(t$6, t$8);
    }));
  }));
};

var sk$SkipProject$dtlog = sk.SkipProject$dtlog = function(value) {
  if ((sk$SkipProject$dtloggingEnabled()).__value)
    {
      var t$ = value;
      return sk$debug(t$);
    }
  else
    return sk.__.$void;
};

var sk$SkipProject$dtparseArguments = sk.SkipProject$dtparseArguments = function() {
  var t$ = sk$$arguments();
  var t$1;
  var $var = sk$ArgumentParser$dtparse((sk$SkipProject$dtschema()), t$);
  var exn;
  var results;
  {
    jumpBlockOuterjumpLab$bg32476:{
      jumpLab$bg32476:{
        jumpLab$bg32475:{
          switch ($var.__type_switch_id) {
            case 259:
              results = $var.value;
              break jumpLab$bg32475;
            
            case 258:
              exn = $var.error;
              break jumpLab$bg32476;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var t$2 = results;
          if (t$2.getBool(new sk$String(('help'))).__value)
            {
              sk$print_string((sk$SkipProject$dthelp()));
              var t$3 = sk$ArgumentParser$dthelp((sk$SkipProject$dtschema()));
              sk$print_string(t$3);
              sk$exit(new sk$Int(0.0, 0.0));
            }
          else
            {}
          var t$4 = results;
          var bindingStrings = t$4.getStringArray(new sk$String(('binding')));
          var t$5 = bindingStrings;
          var t$6 = t$5.size();
          var bindings = sk$Map.mcreate(t$6);
          var t$7 = bindingStrings;
          var var1 = t$7.values();
          var var2 = new sk$Bool((true));
          {
            jumpBlockOuterbreak$bg32438:{
              break$bg32438:{
                dowhile_else$bg32437:{
                  do
                    {
                      jumpBlockOuterdowhile_cond$bg32439:{
                        dowhile_cond$bg32439:{
                          {
                            var t$8 = var1;
                            var var3 = t$8.next();
                            var binding;
                            {
                              jumpBlockOuterjumpLab$bg32472:{
                                jumpLab$bg32472:{
                                  jumpLab$bg32471:{
                                    switch (var3.__type_switch_id) {
                                      case 204:
                                        break jumpLab$bg32471;
                                      
                                      case 205:
                                        binding = var3.value;
                                        break jumpLab$bg32472;
                                      
                                      default:
                                        skip.throwException(sk, new Error('Unmatched Branch'));

                                    }
                                  }
                                  {
                                    var2 = new sk$Bool((false));
                                    break dowhile_cond$bg32439;
                                  }
                                }
                                {
                                  var t$9 = binding;
                                  var var4 = t$9.splitLast(new sk$String(('=')));
                                  var var5;
                                  var var6;
                                  {
                                    jumpBlockOuterjumpLab$bg32468:{
                                      jumpLab$bg32468:{
                                        switch (var4.__type_switch_id) {
                                          case 392:
                                            var5 = var4.i0;
                                            var6 = var4.i1;
                                            break jumpLab$bg32468;
                                          
                                          default:
                                            skip.throwException(sk, new Error('Unmatched Branch'));

                                        }
                                      }
                                      {
                                        var value = var6;
                                        var variable = var5;
                                        var t$10 = variable;
                                        var t$11;
                                        if (t$10.$eq$eq(new sk$String((''))).__value)
                                          {
                                            var t$12 = new sk$String(('Missing variable in \'--binding\'. Use \'--binding <variable>=<value>\'.')).toString();
                                            var t$13 = t$12;
                                            t$11 = sk$SkipProject$dterror(t$13);
                                          }
                                        else
                                          t$11 = sk.__.$void;
                                        var t$14 = bindings;
                                        var t$15 = variable;
                                        var t$16;
                                        if (t$14.containsKey(t$15).__value)
                                          {
                                            var t$17 = new sk$String(('Duplicate variable \'')).toString();
                                            var t$18 = variable;
                                            var t$19 = t$18.toString();
                                            var t$20 = new sk$String(('\' in \'--binding\'.')).toString();
                                            var t$21 = new sk$String(('')).join(new (sk$Array)([
                                              t$17,
                                              t$19,
                                              t$20
                                            ]));
                                            t$16 = sk$SkipProject$dterror(t$21);
                                          }
                                        else
                                          t$16 = sk.__.$void;
                                        var t$22 = bindings;
                                        var t$23 = variable;
                                        var t$24 = value;
                                        t$22.add(t$23, t$24);
                                      }
                                      break jumpBlockOuterjumpLab$bg32468;
                                    }
                                  }
                                }
                                break jumpBlockOuterjumpLab$bg32472;
                              }
                            }
                            break dowhile_cond$bg32439;
                          }
                        }
                        if (var2.__value)
                          {}
                        else
                          break dowhile_else$bg32437;
                        break jumpBlockOuterdowhile_cond$bg32439;
                      }
                    }
                  while (true);
                }
                {}
                break jumpBlockOuterbreak$bg32438;
              }
              {}
              break jumpBlockOuterbreak$bg32438;
            }
          }
          var t$25 = results;
          var t$26 = t$25.getBool(new sk$String(('source-only')));
          var t$27 = skip.deepFreeze(bindings, new Map());
          var t$28 = results;
          var t$29 = t$28.unknown;
          t$1 = new (sk$SkipProject$dtArguments)({
            bindings: t$27,
            sourceOnly: t$26,
            targets: t$29
          });
        }
        break jumpBlockOuterjumpLab$bg32476;
      }
      {
        var t$30 = exn;
        var t$31 = t$30.getMessage();
        t$1 = sk$SkipProject$dterror(t$31);
      }
      break jumpBlockOuterjumpLab$bg32476;
    }
  }
  var args = t$1;
  var t$32 = args;
  sk$SkipProject$dtlog(t$32);
  return args;
};

var sk$SkipProject$dtprocessTarget = sk.SkipProject$dtprocessTarget = function(bindings, target, sourceOnly) {
  var t$ = target;
  var $var = sk$SkipProject$dtTargetArgument.parse(t$);
  var projectPath;
  var programUnit;
  var filename;
  {
    jumpBlockOuterjumpLab$bg32506:{
      jumpLab$bg32506:{
        jumpLab$bg32505:{
          jumpLab$bg32504:{
            jumpLab$bg32507:{
              switch ($var.__type_switch_id) {
                case 204:
                  break jumpLab$bg32504;
                
                case 205:
                  break jumpLab$bg32507;
                
                default:
                  skip.throwException(sk, new Error('Unmatched Branch'));

              }
            }
            switch ($var.value.__type_switch_id) {
              case 305:
                filename = $var.value.filename;
                break jumpLab$bg32505;
              
              case 304:
                programUnit = $var.value.programUnit;
                projectPath = $var.value.projectPath;
                break jumpLab$bg32506;
              
              default:
                skip.throwException(sk, new Error('Unmatched Branch'));

            }
          }
          {
            var t$1 = new sk$String(('Invalid target \'')).toString();
            var t$2 = target;
            var t$3 = t$2.toString();
            var t$4 = new sk$String(('\'.')).toString();
            var t$5 = new sk$String(('')).join(new (sk$Array)([
              t$1,
              t$3,
              t$4
            ]));
            return sk$SkipProject$dterror(t$5);
          }
        }
        {
          var t$6 = filename;
          return sk$print_string(t$6);
        }
      }
      {
        var t$7 = sk$SkipError$dtdoAndReportErrors((() => 
        {
          var t$8 = projectPath;
          var t$9 = programUnit;
          var t$10 = sk$SkipProject$dtloadProjectProgramUnit(t$8, t$9);
          return t$10.flatMap(((solutionKey) => 
          {
            var var1;
            var var2;
            {
              jumpBlockOuterjumpLab$bg32501:{
                jumpLab$bg32501:{
                  switch (solutionKey.__type_switch_id) {
                    case 392:
                      var1 = solutionKey.i0;
                      var2 = solutionKey.i1;
                      break jumpLab$bg32501;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var key = var2;
                  var solution = var1;
                  var t$11 = solution;
                  var t$12 = key;
                  var t$13 = bindings;
                  var t$14 = t$11.getAllSourceFilesFor(t$12, t$13);
                  return t$14.map(((sourceFiles) => 
                  {
                    if (sourceOnly.__value)
                      return sourceFiles;
                    else
                      {
                        var t$15 = sourceFiles;
                        var t$16 = solution;
                        var t$17 = key;
                        var t$18 = t$16.getProjectFilesForProgramUnit(t$17);
                        return t$15.union(t$18);
                      }
                  }));
                }
              }
            }
          }));
        }));
        var t$19 = t$7.join(new sk$String(('\n')));
        return sk$print_string(t$19);
      }
    }
  }
};

var sk$SkipProject$dtprojectFilenameOfDirectory = sk.SkipProject$dtprojectFilenameOfDirectory = function(dirname) {
  var t$ = dirname;
  return sk$Path$dtjoin(t$, (sk$SkipProject$dtPROJECT_FILENAME()), undefined);
};

var sk$SkipProject$dttargetToProjectProgramUnit = sk.SkipProject$dttargetToProjectProgramUnit = function(target) {
  var t$ = target;
  var t$1 = sk$SkipProject$dtisTarget(t$);
  sk$invariant(t$1, new sk$String(('Expected target')));
  var t$2 = target;
  return t$2.splitLast((sk$SkipProject$dttargetSeparator()));
};

var sk$Stats$dtavg = sk.Stats$dtavg = function(s) {
  var t$ = s;
  var t$1 = t$.size();
  if (t$1.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$2 = s;
      var t$3 = t$2.reduce(((acc, x) => 
      {
        var t$4 = acc;
        var t$5 = x;
        var t$6 = t$5.toFloat();
        return t$4.$pl(t$6);
      }), new sk$Float((0.0)));
      var t$7 = s;
      var t$8 = t$7.size();
      var t$9 = t$8.toFloat();
      var t$10 = t$3.$dv(t$9);
      return new (sk$Some)(t$10);
    }
};

var sk$Stats$dtmedian = sk.Stats$dtmedian = function(s) {
  var t$ = s;
  var v = sk$Vector.mcreateFromItems(t$);
  var t$1 = v;
  t$1.sort(undefined);
  var t$2 = v;
  var size = t$2.size();
  var t$3 = size;
  if (t$3.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return singleton$None;
  else
    {
      var t$4 = size;
      var t$5 = t$4.$pc(new sk$Int(2.0, 0.0));
      if (t$5.$eq$eq(new sk$Int(0.0, 0.0)).__value)
        {
          var t$6 = v;
          var t$7 = size;
          var t$8 = t$7.$dv(new sk$Int(2.0, 0.0));
          var t$9 = t$8.$mi(new sk$Int(1.0, 0.0));
          var t$10 = t$6.get(t$9);
          var lower = t$10.toFloat();
          var t$11 = v;
          var t$12 = size;
          var t$13 = t$12.$dv(new sk$Int(2.0, 0.0));
          var t$14 = t$11.get(t$13);
          var upper = t$14.toFloat();
          var t$15 = lower;
          var t$16 = upper;
          var t$17 = t$15.$pl(t$16);
          var t$18 = t$17.$dv(new sk$Float((2.0)));
          return new (sk$Some)(t$18);
        }
      else
        {
          var t$19 = v;
          var t$20 = size;
          var t$21 = t$20.$dv(new sk$Int(2.0, 0.0));
          var t$22 = t$19.get(t$21);
          var t$23 = t$22.toFloat();
          return new (sk$Some)(t$23);
        }
    }
};

var sk$Stats$dtremoveOutliers = sk.Stats$dtremoveOutliers = function(s, outlierFraction) {
  var t$ = outlierFraction;
  var t$1 = t$.$lt(new sk$Float((0.5)));
  sk$invariant(t$1, new sk$String(('Outlier fraction must be less than 0.5')));
  var t$2 = s;
  var size = t$2.size();
  var t$3 = size;
  var t$4 = t$3.toFloat();
  var t$5 = outlierFraction;
  var t$6 = t$4.$ti(t$5);
  var numIndeces = t$6.toInt();
  var t$7 = size;
  var t$8 = numIndeces;
  var firstN = t$7.$mi(t$8);
  var t$9 = size;
  var t$10 = numIndeces;
  var t$11 = new sk$Int(2.0, 0.0).$ti(t$10);
  var t$12 = t$9.$mi(t$11);
  var lastN = t$12.$mi(new sk$Int(1.0, 0.0));
  var t$13 = s;
  var t$14 = t$13.sorted(undefined);
  var t$15 = t$14.values();
  var t$16 = firstN;
  var t$17 = t$15.take(t$16);
  var t$18 = lastN;
  var t$19 = t$17.drop(t$18);
  return t$19.collect(sk$Vector);
};

var sk$Stats$dtstddev = sk.Stats$dtstddev = function(s) {
  var t$ = s;
  var $var = sk$Stats$dtavg(t$);
  var avg;
  {
    jumpBlockOuterjumpLab$bg32593:{
      jumpLab$bg32593:{
        jumpLab$bg32592:{
          switch ($var.__type_switch_id) {
            case 204:
              break jumpLab$bg32592;
            
            case 205:
              avg = $var.value;
              break jumpLab$bg32593;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        return singleton$None;
      }
      {
        var normalize = ((x) => 
        {
          var t$1 = x;
          var t$2 = t$1.toFloat();
          var t$3 = avg;
          var t$4 = t$2.$mi(t$3);
          return sk$Math$dtpow(t$4, new sk$Float((2.0)));
        });
        var t$5 = s;
        var t$6 = t$5.reduce(((acc, x1) => 
        {
          var t$7 = acc;
          var t$8 = normalize;
          var t$9 = x1;
          var t$10 = t$8(t$9);
          return t$7.$pl(t$10);
        }), new sk$Float((0.0)));
        var t$11 = s;
        var t$12 = t$11.size();
        var t$13 = t$12.toFloat();
        var t$14 = t$6.$dv(t$13);
        var t$15 = sk$Math$dtsqrt(t$14);
        return new (sk$Some)(t$15);
      }
    }
  }
};

var sk$String$dtisWhitespace = sk.String$dtisWhitespace = function(c) {
  jumpBlockOuterjumpLab$bg32596:{
    jumpLab$bg32596:{
      jumpLab$bg32595:{
        {
          var _tmp578 = c.__getSwitchValue();
          switch (_tmp578) {
            case 9:
              break jumpLab$bg32595;
            
            case 10:
              break jumpLab$bg32595;
            
            case 11:
              break jumpLab$bg32595;
            
            case 12:
              break jumpLab$bg32595;
            
            case 13:
              break jumpLab$bg32595;
            
            case 133:
              break jumpLab$bg32595;
            
            case 8232:
              break jumpLab$bg32595;
            
            case 8233:
              break jumpLab$bg32595;
            
            case 32:
              break jumpLab$bg32595;
            
            case 160:
              break jumpLab$bg32595;
            
            case 5760:
              break jumpLab$bg32595;
            
            case 8192:
              break jumpLab$bg32595;
            
            case 8193:
              break jumpLab$bg32595;
            
            case 8194:
              break jumpLab$bg32595;
            
            case 8195:
              break jumpLab$bg32595;
            
            case 8196:
              break jumpLab$bg32595;
            
            case 8197:
              break jumpLab$bg32595;
            
            case 8198:
              break jumpLab$bg32595;
            
            case 8199:
              break jumpLab$bg32595;
            
            case 8200:
              break jumpLab$bg32595;
            
            case 8201:
              break jumpLab$bg32595;
            
            case 8202:
              break jumpLab$bg32595;
            
            case 8239:
              break jumpLab$bg32595;
            
            case 8287:
              break jumpLab$bg32595;
            
            case 12288:
              break jumpLab$bg32595;
            
            default:
              break jumpLab$bg32596;

          }
        }
      }
      return new sk$Bool((true));
    }
    return new sk$Bool((false));
  }
};

var sk$String$dttoIntHelperRest = sk.String$dttoIntHelperRest = function(i, value) {
  do
    {
      jumpBlockOuterloop_end$bg32624:{
        loop_end$bg32624:{
          {
            var t$ = value;
            if (t$.$lt(new sk$Int(0.0, 0.0)).__value)
              {
                var t$1 = value;
                if (t$1.$eq$eq(sk$Int.min).__value)
                  {
                    var t$2 = i;
                    var t$3 = t$2.next();
                    if (t$3.isNone().__value)
                      return value;
                    else
                      return new sk$Int(4294967295.0, 4294967295.0);
                  }
                else
                  return new sk$Int(4294967295.0, 4294967295.0);
              }
            else
              {
                var t$4 = i;
                var $var = t$4.next();
                var ch;
                {
                  jumpBlockOuterjumpLab$bg32618:{
                    jumpLab$bg32618:{
                      jumpLab$bg32617:{
                        jumpLab$bg32616:{
                          switch ($var.__type_switch_id) {
                            case 204:
                              break jumpLab$bg32616;
                            
                            case 205:
                              ch = $var.value;
                              var var1 = new sk$Bool((false));
                              var t$5 = ch;
                              var t$6;
                              if (t$5.$gt$eq($makeChar(48)).__value)
                                {
                                  var t$7 = ch;
                                  t$6 = t$7.$lt$eq($makeChar(57));
                                }
                              else
                                t$6 = new sk$Bool((false));
                              var1 = t$6;
                              if (var1.__value)
                                break jumpLab$bg32617;
                              else
                                break jumpLab$bg32618;
                            
                            default:
                              skip.throwException(sk, new Error('Unmatched Branch'));

                          }
                        }
                        return value;
                      }
                      {
                        var t$8 = value;
                        if (t$8.$gt(new sk$Int(3435973836.0, 214748364.0)).__value)
                          return new sk$Int(4294967295.0, 4294967295.0);
                        else
                          {
                            var t$9 = ch;
                            var t$10 = t$9.code();
                            var v = t$10.$mi(new sk$Int(48.0, 0.0));
                            var t$11 = i;
                            var t$12 = value;
                            var t$13 = t$12.$ti(new sk$Int(10.0, 0.0));
                            var t$14 = v;
                            var t$15 = t$13.$pl(t$14);
                            var t$16 = t$11;
                            var t$17 = t$15;
                            i = t$16;
                            value = t$17;
                            break loop_end$bg32624;
                          }
                      }
                    }
                    return new sk$Int(4294967295.0, 4294967295.0);
                  }
                }
              }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg32624;
      }
    }
  while (true);
};

var sk$String$dttoIntOptionHelper = sk.String$dttoIntOptionHelper = function(s) {
  var t$ = s;
  var i = t$.getIter();
  var t$1 = i;
  var $var = t$1.next();
  var ch;
  {
    jumpBlockOuterjumpLab$bg32674:{
      jumpLab$bg32674:{
        jumpLab$bg32673:{
          jumpLab$bg32672:{
            jumpLab$bg32671:{
              jumpLab$bg32670:{
                jumpLab$bg32683:{
                  switch ($var.__type_switch_id) {
                    case 204:
                      break jumpLab$bg32670;
                    
                    case 205:
                      break jumpLab$bg32683;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                {
                  var _tmp579 = $var.value.__getSwitchValue();
                  switch (_tmp579) {
                    case 45:
                      break jumpLab$bg32671;
                    
                    case 48:
                      {
                        ch = $var.value;
                        var var1 = new sk$Bool((false));
                        var t$2 = ch;
                        var t$3;
                        if (t$2.$gt$eq($makeChar(49)).__value)
                          {
                            var t$4 = ch;
                            t$3 = t$4.$lt$eq($makeChar(57));
                          }
                        else
                          t$3 = new sk$Bool((false));
                        var1 = t$3;
                        if (var1.__value)
                          break jumpLab$bg32672;
                        else
                          break jumpLab$bg32673;
                      }
                    
                    default:
                      {
                        ch = $var.value;
                        var var2 = new sk$Bool((false));
                        var t$5 = ch;
                        var t$6;
                        if (t$5.$gt$eq($makeChar(49)).__value)
                          {
                            var t$7 = ch;
                            t$6 = t$7.$lt$eq($makeChar(57));
                          }
                        else
                          t$6 = new sk$Bool((false));
                        var2 = t$6;
                        if (var2.__value)
                          break jumpLab$bg32672;
                        else
                          break jumpLab$bg32674;
                      }

                  }
                }
              }
              return new (sk$Tuple2)(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
            }
            {
              var t$8 = i;
              var var3 = t$8.next();
              var ch1;
              {
                jumpBlockOuterjumpLab$bg32659:{
                  jumpLab$bg32659:{
                    jumpLab$bg32658:{
                      switch (var3.__type_switch_id) {
                        case 205:
                          ch1 = var3.value;
                          var var4 = new sk$Bool((false));
                          var t$9 = ch1;
                          var t$10;
                          if (t$9.$gt$eq($makeChar(49)).__value)
                            {
                              var t$11 = ch1;
                              t$10 = t$11.$lt$eq($makeChar(57));
                            }
                          else
                            t$10 = new sk$Bool((false));
                          var4 = t$10;
                          if (var4.__value)
                            break jumpLab$bg32658;
                          else
                            break jumpLab$bg32659;
                        
                        default:
                          break jumpLab$bg32659;

                      }
                    }
                    {
                      var t$12 = ch1;
                      var t$13 = t$12.code();
                      var v = t$13.$mi(new sk$Int(48.0, 0.0));
                      var t$14 = i;
                      var t$15 = v;
                      var n = sk$String$dttoIntHelperRest(t$14, t$15);
                      var t$16 = n;
                      var t$17 = t$16.$pl(new sk$Int(1.0, 0.0));
                      var t$18 = n;
                      var t$19 = t$18.negate();
                      return new (sk$Tuple2)(t$17, t$19);
                    }
                  }
                  return new (sk$Tuple2)(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
                }
              }
            }
          }
          {
            var t$20 = ch;
            var t$21 = t$20.code();
            var v1 = t$21.$mi(new sk$Int(48.0, 0.0));
            var t$22 = i;
            var t$23 = v1;
            var n1 = sk$String$dttoIntHelperRest(t$22, t$23);
            var t$24 = n1;
            var t$25;
            if (t$24.$gt$eq(new sk$Int(0.0, 0.0)).__value)
              t$25 = new sk$Int(1.0, 0.0);
            else
              t$25 = new sk$Int(0.0, 0.0);
            var t$26 = t$25;
            var t$27 = n1;
            return new (sk$Tuple2)(t$26, t$27);
          }
        }
        {
          var t$28 = i;
          var var5 = t$28.next();
          {
            jumpBlockOuterjumpLab$bg32667:{
              jumpLab$bg32667:{
                jumpLab$bg32666:{
                  switch (var5.__type_switch_id) {
                    case 205:
                      break jumpLab$bg32666;
                    
                    case 204:
                      break jumpLab$bg32667;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                return new (sk$Tuple2)(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
              }
              return new (sk$Tuple2)(new sk$Int(1.0, 0.0), new sk$Int(0.0, 0.0));
            }
          }
        }
      }
      return new (sk$Tuple2)(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
    }
  }
};

var sk$Subprocess$dtcreateUInt8Array = sk.Subprocess$dtcreateUInt8Array = function(size) {
  var t$ = size;
  return sk$Array.mfill(t$, sk$UInt8.min);
};

var sk$Subprocess$dtspawn = sk.Subprocess$dtspawn = function(args) {
  var t$ = args;
  if (t$.isEmpty().__value)
    skip.throwException(sk, singleton$Subprocess$dtEmptyArgumentsError);
  else
    {}
  var t$1 = args;
  return sk$Subprocess$dtspawnHelper(t$1);
};

var sk$Subprocess$dtspawnHelper = sk.Subprocess$dtspawnHelper = function(args) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Subprocess$dtunsafeCreateSubprocessOutput = sk.Subprocess$dtunsafeCreateSubprocessOutput = function(returnCode, stdout, stderr) {
  var t$ = returnCode;
  var t$1 = stdout;
  var t$2 = t$1;
  var t$3 = stderr;
  var t$4 = t$3;
  return new (sk$Subprocess$dtOutput)({
    returnCode: t$,
    stderr: t$4,
    stdout: t$2
  });
};

var sk$SyntaxError$dtcreate = sk.SyntaxError$dtcreate = function(errorCode, range, message, relatedMessages, fix) {
  if (relatedMessages === undefined)
    relatedMessages = ((() => 
    {
      return sk$List.createFromItems(new (sk$Array)([]));
    })());
  if (fix === undefined)
    fix = ((() => 
    {
      return singleton$None;
    })());
  var t$ = errorCode;
  var t$1 = range;
  var t$2 = message;
  var t$3 = new (sk$Tuple2)(t$1, t$2);
  var t$4 = relatedMessages;
  var t$5 = new (sk$List$dtCons)(t$3, t$4);
  var t$6 = fix;
  return new (sk$SyntaxError)({
    errorCode: t$,
    fix: t$6,
    messages: t$5
  });
};

var sk$SyntaxError$dterrorsToString = sk.SyntaxError$dterrorsToString = function(errors) {
  var t$ = errors;
  var t$1 = t$.map(((error) => 
  {
    var t$2 = error;
    return t$2.toString();
  }));
  var t$3 = t$1.join(new sk$String(('\n')));
  var t$4 = new sk$String(('Errors\n')).$pl(t$3);
  return t$4.$pl(new sk$String(('\n')));
};

var sk$SyntaxError$dtmessageToString = sk.SyntaxError$dtmessageToString = function(message) {
  var t$ = message;
  var t$1 = t$.i0;
  var t$2 = t$1.toString();
  var t$3 = new sk$String((': ')).toString();
  var t$4 = message;
  var t$5 = t$4.i1;
  var t$6 = t$5.toString();
  return new sk$String(('')).join(new (sk$Array)([
    t$2,
    t$3,
    t$6
  ]));
};

var sk$TextRange$dtcontentFromLines = sk.TextRange$dtcontentFromLines = function(tr, lines) {
  var result = new sk$String((''));
  var t$ = tr;
  var t$1 = t$.end;
  var t$2 = t$1.line();
  var t$3 = tr;
  var t$4 = t$3.start;
  var t$5 = t$4.line();
  var t$6 = t$2.$mi(t$5);
  var t$7 = t$6.$pl(new sk$Int(1.0, 0.0));
  var t$8 = new (sk$Range)(new sk$Int(0.0, 0.0), t$7);
  var $var = t$8.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg32731:{
      break$bg32731:{
        dowhile_else$bg32730:{
          do
            {
              jumpBlockOuterdowhile_cond$bg32732:{
                dowhile_cond$bg32732:{
                  {
                    var t$9 = $var;
                    var var2 = t$9.next();
                    var i;
                    {
                      jumpBlockOuterjumpLab$bg32773:{
                        jumpLab$bg32773:{
                          jumpLab$bg32772:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg32772;
                              
                              case 205:
                                i = var2.value;
                                break jumpLab$bg32773;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg32732;
                          }
                        }
                        {
                          var t$10 = tr;
                          var t$11 = t$10.start;
                          var t$12 = t$11.line();
                          var t$13 = i;
                          var index = t$12.$pl(t$13);
                          var t$14 = lines;
                          var t$15 = index;
                          var line = t$14.get(t$15);
                          var t$16 = index;
                          var t$17 = tr;
                          var t$18 = t$17.start;
                          var t$19 = t$18.line();
                          var t$20;
                          if (t$16.$eq$eq(t$19).__value)
                            {
                              var t$21 = tr;
                              var t$22 = t$21.start;
                              t$20 = t$22.column();
                            }
                          else
                            t$20 = new sk$Int(0.0, 0.0);
                          var startColumn = t$20;
                          var t$23 = index;
                          var t$24 = tr;
                          var t$25 = t$24.end;
                          var t$26 = t$25.line();
                          var t$27;
                          if (t$23.$eq$eq(t$26).__value)
                            {
                              var t$28 = tr;
                              var t$29 = t$28.end;
                              t$27 = t$29.column();
                            }
                          else
                            {
                              var t$30 = line;
                              t$27 = t$30.length();
                            }
                          var endColumn = t$27;
                          var t$31 = index;
                          var t$32 = tr;
                          var t$33 = t$32.start;
                          var t$34 = t$33.line();
                          var t$35;
                          if (t$31.$gt(t$34).__value)
                            {
                              var t$36 = result;
                              var t$37 = (sk$Chars$dtlineFeed()).toString();
                              result = t$36.$pl(t$37);
                              t$35 = sk.__.$void;
                            }
                          else
                            t$35 = sk.__.$void;
                          var t$38 = result;
                          var t$39 = line;
                          var t$40 = startColumn;
                          var t$41 = endColumn;
                          var t$42 = startColumn;
                          var t$43 = t$41.$mi(t$42);
                          var t$44 = t$39.sub(t$40, t$43);
                          result = t$38.$pl(t$44);
                        }
                        break jumpBlockOuterjumpLab$bg32773;
                      }
                    }
                    break dowhile_cond$bg32732;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg32730;
                break jumpBlockOuterdowhile_cond$bg32732;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg32731;
      }
      {}
      break jumpBlockOuterbreak$bg32731;
    }
  }
  return result;
};

var sk$TextRange$dtcreate = sk.TextRange$dtcreate = function(start, end) {
  var t$ = start;
  var t$1 = end;
  return sk$TextRange.create(t$, t$1);
};

var sk$TextRange$dtcreateEndOfLines = sk.TextRange$dtcreateEndOfLines = function(lines) {
  var t$ = lines;
  var t$1 = t$.size();
  var line = t$1.$mi(new sk$Int(1.0, 0.0));
  var t$2 = line;
  if (t$2.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return (sk$Position$dtstart());
  else
    {
      var t$3 = line;
      var t$4 = lines;
      var t$5 = line;
      var t$6 = t$4.get(t$5);
      var t$7 = t$6.length();
      return sk$Position$dtcreate(t$3, t$7);
    }
};

var sk$TextRange$dtempty = sk.TextRange$dtempty = function(position) {
  var t$ = position;
  var t$1 = position;
  return sk$TextRange$dtcreate(t$, t$1);
};

var sk$UnitTest$dtmain = sk.UnitTest$dtmain = function(tests) {
  var t$ = sk$$arguments();
  var t$1 = t$.values();
  var args = t$1.drop(new sk$Int(4.0, 0.0));
  var backendGen = new sk$String((''));
  var testFile = new sk$String((''));
  var expectError = new sk$Bool((false));
  var allowEmpty = new sk$Bool((false));
  var options = new (sk$UnitTest$dtOptions)({
    colorEnd: undefined,
    colorFailure: undefined,
    colorSuccess: undefined
  });
  try {
    {
      var break_val;
      {
        jumpBlockOuterbreak$bg32796:{
          break$bg32796:{
            do
              {
                jumpBlockOutercontinue$bg32797:{
                  continue$bg32797:{
                    {
                      var t$2 = args;
                      var var1 = t$2.next();
                      var str;
                      {
                        jumpBlockOuterjumpLab$bg32851:{
                          jumpLab$bg32851:{
                            jumpLab$bg32850:{
                              jumpLab$bg32849:{
                                jumpLab$bg32848:{
                                  jumpLab$bg32847:{
                                    jumpLab$bg32846:{
                                      jumpLab$bg32845:{
                                        jumpLab$bg32844:{
                                          jumpLab$bg32843:{
                                            jumpLab$bg32852:{
                                              switch (var1.__type_switch_id) {
                                                case 205:
                                                  break jumpLab$bg32852;
                                                
                                                case 204:
                                                  break jumpLab$bg32851;
                                                
                                                default:
                                                  skip.throwException(sk, new Error('Unmatched Branch'));

                                              }
                                            }
                                            {
                                              var _tmp580 = var1.value.__getSwitchValue();
                                              switch (_tmp580) {
                                                case '--backend-gen':
                                                  break jumpLab$bg32843;
                                                
                                                case '--test-file':
                                                  break jumpLab$bg32844;
                                                
                                                case '--color-success':
                                                  break jumpLab$bg32845;
                                                
                                                case '--color-failure':
                                                  break jumpLab$bg32846;
                                                
                                                case '--color-end':
                                                  break jumpLab$bg32847;
                                                
                                                case '--expect-error':
                                                  break jumpLab$bg32848;
                                                
                                                case '--allow-empty':
                                                  break jumpLab$bg32849;
                                                
                                                default:
                                                  {
                                                    str = var1.value;
                                                    break jumpLab$bg32850;
                                                  }

                                              }
                                            }
                                          }
                                          {
                                            var t$3 = args;
                                            var t$4 = t$3.next();
                                            backendGen = t$4.fromSome(new sk$String(('Missing value for --backend-gen <value>')));
                                          }
                                          break jumpBlockOuterjumpLab$bg32851;
                                        }
                                        {
                                          var t$5 = args;
                                          var t$6 = t$5.next();
                                          testFile = t$6.fromSome(new sk$String(('Missing value for --test-file <value>')));
                                        }
                                        break jumpBlockOuterjumpLab$bg32851;
                                      }
                                      {
                                        var t$7 = options;
                                        var t$8 = args;
                                        var t$9 = t$8.next();
                                        var t$10 = t$9.fromSome(new sk$String(('Missing value for --color-success <value>')));
                                        options = ((() => 
                                        {
                                          var _tmp581 = t$7.__copy();
                                          _tmp581.colorSuccess = t$10;
                                          return _tmp581;
                                        })());
                                      }
                                      break jumpBlockOuterjumpLab$bg32851;
                                    }
                                    {
                                      var t$11 = options;
                                      var t$12 = args;
                                      var t$13 = t$12.next();
                                      var t$14 = t$13.fromSome(new sk$String(('Missing value for --color-failure <value>')));
                                      options = ((() => 
                                      {
                                        var _tmp582 = t$11.__copy();
                                        _tmp582.colorFailure = t$14;
                                        return _tmp582;
                                      })());
                                    }
                                    break jumpBlockOuterjumpLab$bg32851;
                                  }
                                  {
                                    var t$15 = options;
                                    var t$16 = args;
                                    var t$17 = t$16.next();
                                    var t$18 = t$17.fromSome(new sk$String(('Missing value for --color-end <value>')));
                                    options = ((() => 
                                    {
                                      var _tmp583 = t$15.__copy();
                                      _tmp583.colorEnd = t$18;
                                      return _tmp583;
                                    })());
                                  }
                                  break jumpBlockOuterjumpLab$bg32851;
                                }
                                {
                                  var t$19 = args;
                                  var var2 = t$19.next();
                                  var _;
                                  {
                                    jumpBlockOuterjumpLab$bg32839:{
                                      jumpLab$bg32839:{
                                        jumpLab$bg32838:{
                                          jumpLab$bg32837:{
                                            jumpLab$bg32840:{
                                              switch (var2.__type_switch_id) {
                                                case 205:
                                                  break jumpLab$bg32840;
                                                
                                                default:
                                                  _ = var2;
                                                  break jumpLab$bg32839;

                                              }
                                            }
                                            {
                                              var _tmp584 = var2.value.__getSwitchValue();
                                              switch (_tmp584) {
                                                case 'true':
                                                  break jumpLab$bg32837;
                                                
                                                case 'false':
                                                  break jumpLab$bg32838;
                                                
                                                default:
                                                  {
                                                    _ = var2;
                                                    break jumpLab$bg32839;
                                                  }

                                              }
                                            }
                                          }
                                          expectError = new sk$Bool((true));
                                          break jumpBlockOuterjumpLab$bg32839;
                                        }
                                        expectError = new sk$Bool((false));
                                        break jumpBlockOuterjumpLab$bg32839;
                                      }
                                      sk$invariant_violation(new sk$String(('Missing value (true/false) for --expect-error <value>')));
                                      break jumpBlockOuterjumpLab$bg32839;
                                    }
                                  }
                                }
                                break jumpBlockOuterjumpLab$bg32851;
                              }
                              allowEmpty = new sk$Bool((true));
                              break jumpBlockOuterjumpLab$bg32851;
                            }
                            {
                              var t$20 = new sk$String(('Unexpected argument ')).toString();
                              var t$21 = str;
                              var t$22 = t$21.toString();
                              var t$23 = new sk$String(('')).join(new (sk$Array)([
                                t$20,
                                t$22
                              ]));
                              sk$invariant_violation(t$23);
                            }
                            break jumpBlockOuterjumpLab$bg32851;
                          }
                          {
                            break_val = sk.__.$void;
                            break break$bg32796;
                          }
                        }
                      }
                    }
                  }
                  {}
                  break jumpBlockOutercontinue$bg32797;
                }
              }
            while (true);
          }
          {}
          break jumpBlockOuterbreak$bg32796;
        }
      }
    }
  }catch ($var){
    {
      var exn;
      {
        jumpBlockOuterjumpLab$bg32855:{
          jumpLab$bg32855:{
            {
              exn = $var;
              break jumpLab$bg32855;
            }
          }
          {
            var t$24 = sk$$arguments();
            sk$debug(t$24);
            skip.throwException(sk, exn);
          }
        }
      }
    }
  }
  var t$25 = backendGen;
  var t$26 = t$25.toString();
  var t$27 = new sk$String((' ')).toString();
  var t$28 = testFile;
  var t$29 = t$28.toString();
  var projectName = new sk$String(('')).join(new (sk$Array)([
    t$26,
    t$27,
    t$29
  ]));
  var t$30 = allowEmpty;
  var t$31;
  if (t$30.$bg().__value)
    {
      var t$32 = tests;
      t$31 = t$32.isEmpty();
    }
  else
    t$31 = new sk$Bool((false));
  if (t$31.__value)
    {
      sk$print_error_ln(new sk$String(('No tests provided: use `--allow-empty` if this is expected.')));
      sk$exit(new sk$Int(2.0, 0.0));
    }
  else
    {}
  var t$33 = tests;
  var t$34 = projectName;
  var t$35 = expectError;
  var t$36 = options;
  return sk$UnitTest$dtrunTests(t$33, t$34, t$35, t$36);
};

var sk$UnitTest$dtreportFailure = sk.UnitTest$dtreportFailure = function(__named_parameters) {
  var exception = __named_parameters.exception;
  var name = __named_parameters.name;
  var options = __named_parameters.options;
  var messages = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = messages;
  var t$1 = name;
  var t$2 = options;
  var t$3 = sk$UnitTest$dtstatusLine({
    name: t$1,
    options: t$2,
    success: new sk$Bool((false))
  });
  t$.push(t$3);
  var e2;
  {
    jumpBlockOuterjumpLab$bg32880:{
      jumpLab$bg32880:{
        jumpLab$bg32879:{
          switch (exception.__type_switch_id) {
            case 65:
              e2 = exception;
              break jumpLab$bg32879;
            
            default:
              break jumpLab$bg32880;

          }
        }
        {
          var t$4 = messages;
          var t$5 = e2;
          var t$6 = t$5.message;
          var t$7 = new sk$String(('Assertion failed: ')).$pl(t$6);
          t$4.push(t$7);
          var t$8 = messages;
          var t$9 = e2;
          var t$10 = t$9.expected;
          var t$11 = new sk$String(('Expected: ')).$pl(t$10);
          t$8.push(t$11);
          var t$12 = messages;
          var t$13 = e2;
          var t$14 = t$13.actual;
          var t$15 = new sk$String(('Actual:   ')).$pl(t$14);
          t$12.push(t$15);
        }
        break jumpBlockOuterjumpLab$bg32880;
      }
      {
        var t$16 = messages;
        var t$17 = exception;
        var t$18 = t$17.getMessage();
        t$16.push(t$18);
      }
      break jumpBlockOuterjumpLab$bg32880;
    }
  }
  var t$19 = messages;
  return t$19.join(new sk$String(('\n')));
};

var sk$UnitTest$dtreportSuccess = sk.UnitTest$dtreportSuccess = function(__named_parameters) {
  var name = __named_parameters.name;
  var options = __named_parameters.options;
  var t$ = name;
  var t$1 = options;
  return sk$UnitTest$dtstatusLine({
    name: t$,
    options: t$1,
    success: new sk$Bool((true))
  });
};

var sk$UnitTest$dtrunTests = sk.UnitTest$dtrunTests = function(tests, projectName, expectError, options) {
  var t$;
  if (expectError.__value)
    t$ = ((_tmp32887) => 
    {
      return sk$print_error_ln(_tmp32887);
    });
  else
    t$ = ((_tmp32888) => 
    {
      return sk$print_string(_tmp32888);
    });
  var print = t$;
  var t$1 = tests;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg32892:{
      break$bg32892:{
        dowhile_else$bg32891:{
          do
            {
              jumpBlockOuterdowhile_cond$bg32893:{
                dowhile_cond$bg32893:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var test;
                    var testName;
                    {
                      jumpBlockOuterjumpLab$bg32924:{
                        jumpLab$bg32924:{
                          jumpLab$bg32923:{
                            jumpLab$bg32925:{
                              switch (var2.__type_switch_id) {
                                case 204:
                                  break jumpLab$bg32923;
                                
                                case 205:
                                  break jumpLab$bg32925;
                                
                                default:
                                  skip.throwException(sk, new Error('Unmatched Branch'));

                              }
                            }
                            switch (var2.value.__type_switch_id) {
                              case 392:
                                testName = var2.value.i0;
                                test = var2.value.i1;
                                break jumpLab$bg32924;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg32893;
                          }
                        }
                        {
                          var t$3 = projectName;
                          var t$4 = t$3.toString();
                          var t$5 = new sk$String((' ')).toString();
                          var t$6 = testName;
                          var t$7 = t$6.toString();
                          var name = new sk$String(('')).join(new (sk$Array)([
                            t$4,
                            t$5,
                            t$7
                          ]));
                          var t$8;
                          try {
                            {
                              var t$9 = test;
                              var t$10 = t$9();
                              t$8 = new (sk$Success)(t$10);
                            }
                          }catch (var3){
                            {
                              var exn;
                              {
                                jumpBlockOuterjumpLab$bg32917:{
                                  jumpLab$bg32917:{
                                    {
                                      exn = var3;
                                      break jumpLab$bg32917;
                                    }
                                  }
                                  {
                                    var t$11 = exn;
                                    t$8 = new (sk$Failure)(t$11);
                                  }
                                  break jumpBlockOuterjumpLab$bg32917;
                                }
                              }
                            }
                          }
                          var result = t$8;
                          var t$12;
                          var exception;
                          {
                            jumpBlockOuterjumpLab$bg32920:{
                              jumpLab$bg32920:{
                                jumpLab$bg32919:{
                                  switch (result.__type_switch_id) {
                                    case 259:
                                      break jumpLab$bg32919;
                                    
                                    case 258:
                                      exception = result.error;
                                      break jumpLab$bg32920;
                                    
                                    default:
                                      skip.throwException(sk, new Error('Unmatched Branch'));

                                  }
                                }
                                {
                                  var t$13 = print;
                                  var t$14 = name;
                                  var t$15 = options;
                                  var t$16 = sk$UnitTest$dtreportSuccess({
                                    name: t$14,
                                    options: t$15
                                  });
                                  t$12 = t$13(t$16);
                                }
                                break jumpBlockOuterjumpLab$bg32920;
                              }
                              {
                                var t$17 = print;
                                var t$18 = name;
                                var t$19 = exception;
                                var t$20 = options;
                                var t$21 = sk$UnitTest$dtreportFailure({
                                  exception: t$19,
                                  name: t$18,
                                  options: t$20
                                });
                                t$17(t$21);
                                t$12 = sk$exit(new sk$Int(1.0, 0.0));
                              }
                              break jumpBlockOuterjumpLab$bg32920;
                            }
                          }
                        }
                        break jumpBlockOuterjumpLab$bg32924;
                      }
                    }
                    break dowhile_cond$bg32893;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg32891;
                break jumpBlockOuterdowhile_cond$bg32893;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg32892;
      }
      {}
      break jumpBlockOuterbreak$bg32892;
    }
  }
  return break_val;
};

var sk$UnitTest$dtstatusLine = sk.UnitTest$dtstatusLine = function(__named_parameters) {
  var name = __named_parameters.name;
  var options = __named_parameters.options;
  var success = __named_parameters.success;
  var t$;
  if (success.__value)
    t$ = new sk$String(('[OK]'));
  else
    t$ = new sk$String(('[FAILED]'));
  var result = t$;
  var t$1;
  if (success.__value)
    {
      var t$2 = options;
      t$1 = t$2.colorSuccess;
    }
  else
    {
      var t$3 = options;
      t$1 = t$3.colorFailure;
    }
  var color = t$1;
  var t$4 = name;
  var t$5 = t$4.length();
  var t$6 = new sk$Int(80.0, 0.0).$mi(t$5);
  var t$7 = result;
  var t$8 = t$7.length();
  var t$9 = t$6.$mi(t$8);
  var padding = sk$max(new sk$Int(1.0, 0.0), t$9);
  var t$10 = padding;
  var spaces = new sk$String((' ')).repeat(t$10);
  var t$11 = name;
  var t$12 = spaces;
  var t$13 = t$11.$pl(t$12);
  var t$14 = color;
  var t$15 = t$13.$pl(t$14);
  var t$16 = result;
  var t$17 = t$15.$pl(t$16);
  var t$18 = options;
  var t$19 = t$18.colorEnd;
  return t$17.$pl(t$19);
};

var sk$Unsafe$dtarray_get = sk.Unsafe$dtarray_get = function(v, i) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Unsafe$dtarray_make = sk.Unsafe$dtarray_make = function(size) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Unsafe$dtarray_set = sk.Unsafe$dtarray_set = function(v, i, x) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$Vector$dtgetCapacityForSize = sk.Vector$dtgetCapacityForSize = function(newSize) {
  var t$ = newSize;
  if (t$.$lt(new sk$Int(4.0, 0.0)).__value)
    return new sk$Int(4.0, 0.0);
  else
    {
      var t$1 = newSize;
      if (t$1.$lt(new sk$Int(512.0, 0.0)).__value)
        {
          var t$2 = newSize;
          var t$3 = t$2.$mi(new sk$Int(1.0, 0.0));
          var t$4 = t$3.clz();
          var t$5 = new sk$Int(64.0, 0.0).$mi(t$4);
          return new sk$Int(1.0, 0.0).shl(t$5);
        }
      else
        {
          var overhead = new sk$Int(8.0, 0.0);
          var t$6 = newSize;
          var t$7 = overhead;
          var paddedSize = t$6.$pl(t$7);
          var t$8 = paddedSize;
          var t$9 = t$8.$mi(new sk$Int(1.0, 0.0));
          var t$10 = t$9.clz();
          var t$11 = new sk$Int(64.0, 0.0).$mi(t$10);
          var nextPowerOfTwo = new sk$Int(1.0, 0.0).shl(t$11);
          var t$12 = nextPowerOfTwo;
          var t$13 = t$12.ushr(new sk$Int(2.0, 0.0));
          var threeFourths = t$13.$ti(new sk$Int(3.0, 0.0));
          var t$14 = paddedSize;
          var t$15 = threeFourths;
          var t$16;
          if (t$14.$lt$eq(t$15).__value)
            t$16 = threeFourths;
          else
            t$16 = nextPowerOfTwo;
          var roundedUpSize = t$16;
          var t$17 = roundedUpSize;
          var t$18 = overhead;
          return t$17.$mi(t$18);
        }
    }
};

var sk$Vector$dtunsafeFillSlice = sk.Vector$dtunsafeFillSlice = function(dest, start, end, value) {
  var t$ = end;
  var t$1 = start;
  var t$2 = t$.$mi(t$1);
  var t$3 = new (sk$Range)(new sk$Int(0.0, 0.0), t$2);
  var $var = t$3.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg32975:{
      break$bg32975:{
        dowhile_else$bg32974:{
          do
            {
              jumpBlockOuterdowhile_cond$bg32976:{
                dowhile_cond$bg32976:{
                  {
                    var t$4 = $var;
                    var var2 = t$4.next();
                    var offset;
                    {
                      jumpBlockOuterjumpLab$bg32987:{
                        jumpLab$bg32987:{
                          jumpLab$bg32986:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg32986;
                              
                              case 205:
                                offset = var2.value;
                                break jumpLab$bg32987;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg32976;
                          }
                        }
                        {
                          var t$5 = start;
                          var t$6 = offset;
                          var index = t$5.$pl(t$6);
                          var t$7 = dest;
                          var t$8 = index;
                          var t$9 = value;
                          sk$Vector$dtunsafeSet(t$7, t$8, t$9);
                        }
                        break jumpBlockOuterjumpLab$bg32987;
                      }
                    }
                    break dowhile_cond$bg32976;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg32974;
                break jumpBlockOuterdowhile_cond$bg32976;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg32975;
      }
      {}
      break jumpBlockOuterbreak$bg32975;
    }
  }
  return break_val;
};

var sk$Vector$dtunsafeFreeSlice = sk.Vector$dtunsafeFreeSlice = function(dest, start, end) {
  var t$;
  if ((sk$Vector$dtdebugEnableBoundsCheck()).__value)
    {
      var t$1 = end;
      var t$2 = start;
      t$ = t$1.ugt(t$2);
    }
  else
    t$ = new sk$Bool((false));
  var t$3;
  if (t$.__value)
    {
      var t$4 = end;
      var t$5 = dest;
      var t$6 = t$5.size();
      t$3 = t$4.ugt(t$6);
    }
  else
    t$3 = new sk$Bool((false));
  if (t$3.__value)
    sk$throwOutOfBounds();
  else
    {}
  var $null = sk$Unsafe$dtRawStorage.uninitialized();
  var t$7 = end;
  var t$8 = start;
  var t$9 = t$7.$mi(t$8);
  var t$10 = new (sk$Range)(new sk$Int(0.0, 0.0), t$9);
  var $var = t$10.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg33004:{
      break$bg33004:{
        dowhile_else$bg33003:{
          do
            {
              jumpBlockOuterdowhile_cond$bg33005:{
                dowhile_cond$bg33005:{
                  {
                    var t$11 = $var;
                    var var2 = t$11.next();
                    var offset;
                    {
                      jumpBlockOuterjumpLab$bg33016:{
                        jumpLab$bg33016:{
                          jumpLab$bg33015:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg33015;
                              
                              case 205:
                                offset = var2.value;
                                break jumpLab$bg33016;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg33005;
                          }
                        }
                        {
                          var t$12 = start;
                          var t$13 = offset;
                          var index = t$12.$pl(t$13);
                          var t$14 = dest;
                          var t$15 = index;
                          var t$16 = $null;
                          sk$Unsafe$dtarray_set(t$14, t$15, t$16);
                        }
                        break jumpBlockOuterjumpLab$bg33016;
                      }
                    }
                    break dowhile_cond$bg33005;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg33003;
                break jumpBlockOuterdowhile_cond$bg33005;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg33004;
      }
      {}
      break jumpBlockOuterbreak$bg33004;
    }
  }
  return break_val;
};

var sk$Vector$dtunsafeGet = sk.Vector$dtunsafeGet = function(inner, index) {
  var t$;
  if ((sk$Vector$dtdebugEnableBoundsCheck()).__value)
    {
      var t$1 = index;
      var t$2 = inner;
      var t$3 = t$2.size();
      t$ = t$1.uge(t$3);
    }
  else
    t$ = new sk$Bool((false));
  if (t$.__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = inner;
  var t$5 = index;
  var t$6 = sk$Unsafe$dtarray_get(t$4, t$5);
  return sk$Unsafe$dtRawStorage.unsafeGet(t$6);
};

var sk$Vector$dtunsafeGetRaw = sk.Vector$dtunsafeGetRaw = function(inner, index) {
  var t$;
  if ((sk$Vector$dtdebugEnableBoundsCheck()).__value)
    {
      var t$1 = index;
      var t$2 = inner;
      var t$3 = t$2.size();
      t$ = t$1.uge(t$3);
    }
  else
    t$ = new sk$Bool((false));
  if (t$.__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = inner;
  var t$5 = index;
  return sk$Unsafe$dtarray_get(t$4, t$5);
};

var sk$Vector$dtunsafeMake = sk.Vector$dtunsafeMake = function(size) {
  var t$ = size;
  if (t$.$eq$eq(new sk$Int(0.0, 0.0)).__value)
    return new (sk$Array)([]);
  else
    {
      var t$1 = size;
      return sk$Unsafe$dtarray_make(t$1);
    }
};

var sk$Vector$dtunsafeMoveSlice = sk.Vector$dtunsafeMoveSlice = function(src, srcStart, srcEnd, dest, destStart) {
  var t$ = destStart;
  var t$1 = srcStart;
  var shift = t$.$mi(t$1);
  var t$2 = shift;
  if (t$2.$gt(new sk$Int(0.0, 0.0)).__value)
    {
      var t$3 = srcEnd;
      var srcBase = t$3.$mi(new sk$Int(1.0, 0.0));
      var t$4 = srcBase;
      var t$5 = shift;
      var destBase = t$4.$pl(t$5);
      var t$6 = srcEnd;
      var t$7 = srcStart;
      var t$8 = t$6.$mi(t$7);
      var t$9 = new (sk$Range)(new sk$Int(0.0, 0.0), t$8);
      var $var = t$9.values();
      var var1 = new sk$Bool((true));
      var break_val;
      {
        jumpBlockOuterbreak$bg33052:{
          break$bg33052:{
            dowhile_else$bg33051:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg33053:{
                    dowhile_cond$bg33053:{
                      {
                        var t$10 = $var;
                        var var2 = t$10.next();
                        var offset;
                        {
                          jumpBlockOuterjumpLab$bg33088:{
                            jumpLab$bg33088:{
                              jumpLab$bg33087:{
                                switch (var2.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg33087;
                                  
                                  case 205:
                                    offset = var2.value;
                                    break jumpLab$bg33088;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var1 = new sk$Bool((false));
                                break dowhile_cond$bg33053;
                              }
                            }
                            {
                              var t$11 = src;
                              var t$12 = srcBase;
                              var t$13 = offset;
                              var t$14 = t$12.$mi(t$13);
                              var v = sk$Vector$dtunsafeGet(t$11, t$14);
                              var t$15 = dest;
                              var t$16 = destBase;
                              var t$17 = offset;
                              var t$18 = t$16.$mi(t$17);
                              var t$19 = v;
                              sk$Vector$dtunsafeSet(t$15, t$18, t$19);
                            }
                            break jumpBlockOuterjumpLab$bg33088;
                          }
                        }
                        break dowhile_cond$bg33053;
                      }
                    }
                    if (var1.__value)
                      {}
                    else
                      break dowhile_else$bg33051;
                    break jumpBlockOuterdowhile_cond$bg33053;
                  }
                }
              while (true);
            }
            break_val = sk.__.$void;
            break jumpBlockOuterbreak$bg33052;
          }
          {}
          break jumpBlockOuterbreak$bg33052;
        }
      }
      return break_val;
    }
  else
    {
      var t$20 = srcEnd;
      var t$21 = srcStart;
      var t$22 = t$20.$mi(t$21);
      var t$23 = new (sk$Range)(new sk$Int(0.0, 0.0), t$22);
      var var3 = t$23.values();
      var var4 = new sk$Bool((true));
      var break_val1;
      {
        jumpBlockOuterbreak$bg33072:{
          break$bg33072:{
            dowhile_else$bg33071:{
              do
                {
                  jumpBlockOuterdowhile_cond$bg33073:{
                    dowhile_cond$bg33073:{
                      {
                        var t$24 = var3;
                        var var5 = t$24.next();
                        var offset1;
                        {
                          jumpBlockOuterjumpLab$bg33092:{
                            jumpLab$bg33092:{
                              jumpLab$bg33091:{
                                switch (var5.__type_switch_id) {
                                  case 204:
                                    break jumpLab$bg33091;
                                  
                                  case 205:
                                    offset1 = var5.value;
                                    break jumpLab$bg33092;
                                  
                                  default:
                                    skip.throwException(sk, new Error('Unmatched Branch'));

                                }
                              }
                              {
                                var4 = new sk$Bool((false));
                                break dowhile_cond$bg33073;
                              }
                            }
                            {
                              var t$25 = src;
                              var t$26 = srcStart;
                              var t$27 = offset1;
                              var t$28 = t$26.$pl(t$27);
                              var v1 = sk$Vector$dtunsafeGet(t$25, t$28);
                              var t$29 = dest;
                              var t$30 = destStart;
                              var t$31 = offset1;
                              var t$32 = t$30.$pl(t$31);
                              var t$33 = v1;
                              sk$Vector$dtunsafeSet(t$29, t$32, t$33);
                            }
                            break jumpBlockOuterjumpLab$bg33092;
                          }
                        }
                        break dowhile_cond$bg33073;
                      }
                    }
                    if (var4.__value)
                      {}
                    else
                      break dowhile_else$bg33071;
                    break jumpBlockOuterdowhile_cond$bg33073;
                  }
                }
              while (true);
            }
            break_val1 = sk.__.$void;
            break jumpBlockOuterbreak$bg33072;
          }
          {}
          break jumpBlockOuterbreak$bg33072;
        }
      }
      return break_val1;
    }
};

var sk$Vector$dtunsafeReverse = sk.Vector$dtunsafeReverse = function(src, srcStart, srcEnd, dest) {
  var start = srcStart;
  var t$ = srcEnd;
  var end = t$.$mi(new sk$Int(1.0, 0.0));
  {
    jumpBlockOuterbreak$bg33098:{
      break$bg33098:{
        while_else$bg33097:{
          do
            {
              jumpBlockOutercontinue$bg33099:{
                continue$bg33099:{
                  {
                    var t$1 = start;
                    var t$2 = end;
                    if (t$1.$lt(t$2).__value)
                      {
                        var t$3 = src;
                        var t$4 = start;
                        var left = sk$Vector$dtunsafeGet(t$3, t$4);
                        var t$5 = src;
                        var t$6 = end;
                        var right = sk$Vector$dtunsafeGet(t$5, t$6);
                        var t$7 = dest;
                        var t$8 = start;
                        var t$9 = right;
                        sk$Vector$dtunsafeSet(t$7, t$8, t$9);
                        var t$10 = dest;
                        var t$11 = end;
                        var t$12 = left;
                        sk$Vector$dtunsafeSet(t$10, t$11, t$12);
                        var t$13 = start;
                        start = t$13.$pl(new sk$Int(1.0, 0.0));
                        var t$14 = end;
                        end = t$14.$mi(new sk$Int(1.0, 0.0));
                      }
                    else
                      break while_else$bg33097;
                  }
                }
                {}
                break jumpBlockOutercontinue$bg33099;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg33098;
      }
      {}
      break jumpBlockOuterbreak$bg33098;
    }
  }
  var t$15 = start;
  var t$16 = end;
  if (t$15.$eq$eq(t$16).__value)
    {
      var t$17 = src;
      var t$18 = start;
      var mid = sk$Vector$dtunsafeGet(t$17, t$18);
      var t$19 = dest;
      var t$20 = start;
      var t$21 = mid;
      return sk$Vector$dtunsafeSet(t$19, t$20, t$21);
    }
  else
    return sk.__.$void;
};

var sk$Vector$dtunsafeSet = sk.Vector$dtunsafeSet = function(inner, index, value) {
  var t$;
  if ((sk$Vector$dtdebugEnableBoundsCheck()).__value)
    {
      var t$1 = index;
      var t$2 = inner;
      var t$3 = t$2.size();
      t$ = t$1.uge(t$3);
    }
  else
    t$ = new sk$Bool((false));
  if (t$.__value)
    sk$throwOutOfBounds();
  else
    {}
  var t$4 = inner;
  var t$5 = index;
  var t$6 = value;
  var t$7 = sk$Unsafe$dtRawStorage.make(t$6);
  return sk$Unsafe$dtarray_set(t$4, t$5, t$7);
};

var sk$Vector$dtunsafeSwap = sk.Vector$dtunsafeSwap = function(inner, from, to) {
  var t$ = inner;
  var t$1 = to;
  var tmp = sk$Vector$dtunsafeGet(t$, t$1);
  var t$2 = inner;
  var t$3 = to;
  var t$4 = inner;
  var t$5 = from;
  var t$6 = sk$Vector$dtunsafeGet(t$4, t$5);
  sk$Vector$dtunsafeSet(t$2, t$3, t$6);
  var t$7 = inner;
  var t$8 = from;
  var t$9 = tmp;
  return sk$Vector$dtunsafeSet(t$7, t$8, t$9);
};

var sk$Vector$dtunsafeWriteSeqToSlice = sk.Vector$dtunsafeWriteSeqToSlice = function(src, dest, start, end) {
  var index = start;
  var t$ = src;
  var t$1 = t$;
  t$1.each(((value) => 
  {
    var t$2 = index;
    var t$3 = end;
    var t$4 = t$2.ult(t$3);
    sk$invariant(t$4, new sk$String(('Vector.unsafeWriteSeqToSlice(): Invalid sequence, expected each() to yield size() items.')));
    var t$5 = dest;
    var t$6 = index;
    var t$7 = value;
    sk$Vector$dtunsafeSet(t$5, t$6, t$7);
    var t$8 = index;
    index = t$8.$pl(new sk$Int(1.0, 0.0));
    return sk.__.$void;
  }));
  var t$9 = index;
  var t$10 = end;
  var t$11 = t$9.$eq$eq(t$10);
  return sk$invariant(t$11, new sk$String(('Vector.unsafeWriteSeqToSlice(): Invalid sequence, expected each() to yield size() items.')));
};

var sk$annotationsContain = sk.annotationsContain = function(annotations, name, pos) {
  var t$ = annotations;
  var t$1 = name;
  var t$2 = pos;
  var t$3 = sk$annotationsContainHelper(t$, t$1, t$2, new sk$Bool((false)), new sk$Bool((false)));
  return t$3.isSome();
};

var sk$annotationsContainHelper = sk.annotationsContainHelper = function(annotations, name, pos, allowParameters, requireParameters) {
  if (allowParameters === undefined)
    allowParameters = ((() => 
    {
      return new sk$Bool((false));
    })());
  if (requireParameters === undefined)
    requireParameters = ((() => 
    {
      return new sk$Bool((false));
    })());
  var t$ = annotations;
  var t$1 = name;
  var t$2;
  if (t$.contains(t$1).__value)
    t$2 = new (sk$Some)(new sk$String(('')));
  else
    {
      var t$3;
      if (allowParameters.__value)
        {
          var t$4 = name;
          var open = t$4.$pl(new sk$String(('("')));
          var t$5 = annotations;
          t$3 = t$5.reduce(((param, annotation) => 
          {
            var t$6 = annotation;
            var t$7 = open;
            if (t$6.startsWith(t$7).__value)
              {
                var t$8 = annotation;
                var t$9 = t$8.endsWith(new sk$String(('")')));
                if (t$9.$bg().__value)
                  {
                    var t$10 = pos;
                    var t$11 = new sk$String(('Annotation ')).toString();
                    var t$12 = name;
                    var t$13 = t$12.toString();
                    var t$14 = new sk$String((' missing closing parenthesis')).toString();
                    var t$15 = new sk$String(('')).join(new (sk$Array)([
                      t$11,
                      t$13,
                      t$14
                    ]));
                    t$10.die(t$15);
                  }
                else
                  {}
                var t$16 = param;
                if (t$16.isSome().__value)
                  {
                    var t$17 = pos;
                    var t$18 = new sk$String(('Annotation ')).toString();
                    var t$19 = name;
                    var t$20 = t$19.toString();
                    var t$21 = new sk$String((' specified multiple times')).toString();
                    var t$22 = new sk$String(('')).join(new (sk$Array)([
                      t$18,
                      t$20,
                      t$21
                    ]));
                    t$17.die(t$22);
                  }
                else
                  {}
                var t$23 = annotation;
                var t$24 = open;
                var t$25 = t$23.stripPrefix(t$24);
                var t$26 = t$25.stripSuffix(new sk$String(('")')));
                return new (sk$Some)(t$26);
              }
            else
              return param;
          }), singleton$None);
        }
      else
        t$3 = singleton$None;
      t$2 = t$3;
    }
  var param1 = t$2;
  var t$27;
  if (requireParameters.__value)
    {
      var t$28 = param1;
      t$27 = t$28.test(((s) => 
      {
        var t$29 = s;
        return t$29.isEmpty();
      }));
    }
  else
    t$27 = new sk$Bool((false));
  if (t$27.__value)
    {
      var t$30 = pos;
      var t$31 = new sk$String(('Annotation ')).toString();
      var t$32 = name;
      var t$33 = t$32.toString();
      var t$34 = new sk$String((' requires parameters')).toString();
      var t$35 = new sk$String(('')).join(new (sk$Array)([
        t$31,
        t$33,
        t$34
      ]));
      t$30.die(t$35);
    }
  else
    {}
  return param1;
};

var sk$annotationsContainParam = sk.annotationsContainParam = function(annotations, name, pos, requireParameters) {
  if (requireParameters === undefined)
    requireParameters = ((() => 
    {
      return new sk$Bool((false));
    })());
  var t$ = annotations;
  var t$1 = name;
  var t$2 = pos;
  var t$3 = requireParameters;
  return sk$annotationsContainHelper(t$, t$1, t$2, new sk$Bool((true)), t$3);
};

var sk$$arguments = sk.$arguments = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$assert = sk.assert = function(cond) {
  var t$ = cond;
  return sk$invariant(t$, new sk$String(('assert')));
};

var sk$assertDoesNotThrow = sk.assertDoesNotThrow = function(f) {
  try {
    {
      var t$ = f;
      t$();
      return sk.__.$void;
    }
  }catch ($var){
    {
      var e;
      {
        jumpBlockOuterjumpLab$bg33214:{
          jumpLab$bg33214:{
            {
              e = $var;
              break jumpLab$bg33214;
            }
          }
          {
            var t$1 = e;
            var t$2 = t$1.getMessage();
            return sk$assertFailure({
              actual: t$2,
              expected: new sk$String(('no exception')),
              message: new sk$String(('an exception was thrown'))
            });
          }
        }
      }
    }
  }
};

var sk$assertEqual = sk.assertEqual = function(actual, expected, message) {
  if (message === undefined)
    message = ((() => 
    {
      return new sk$String(('values are not equal'));
    })());
  var t$ = expected;
  var t$1 = actual;
  if (t$.$bg$eq(t$1).__value)
    {
      var t$2 = message;
      var t$3 = expected;
      var t$4 = t$3.toString();
      var t$5 = actual;
      var t$6 = t$5.toString();
      skip.throwException(sk, new (sk$AssertionFailure)(t$2, t$4, t$6));
    }
  else
    return sk.__.$void;
};

var sk$assertEqualOption = sk.assertEqualOption = function(actual, expected) {
  var x;
  {
    jumpBlockOuterjumpLab$bg33240:{
      jumpLab$bg33240:{
        jumpLab$bg33239:{
          switch (expected.__type_switch_id) {
            case 204:
              break jumpLab$bg33239;
            
            case 205:
              x = expected.value;
              break jumpLab$bg33240;
            
            default:
              skip.throwException(sk, new Error('Unmatched Branch'));

          }
        }
        {
          var y;
          {
            jumpBlockOuterjumpLab$bg33234:{
              jumpLab$bg33234:{
                jumpLab$bg33233:{
                  switch (actual.__type_switch_id) {
                    case 204:
                      break jumpLab$bg33233;
                    
                    case 205:
                      y = actual.value;
                      break jumpLab$bg33234;
                    
                    default:
                      skip.throwException(sk, new Error('Unmatched Branch'));

                  }
                }
                return sk.__.$void;
              }
              {
                var t$ = y;
                var t$1 = new sk$String(('Some(')).$pl(t$);
                var t$2 = t$1.$pl(new sk$String((')')));
                return sk$assertFailure({
                  actual: t$2,
                  expected: new sk$String(('None')),
                  message: new sk$String(('values are not equal'))
                });
              }
            }
          }
        }
      }
      {
        var y1;
        {
          jumpBlockOuterjumpLab$bg33237:{
            jumpLab$bg33237:{
              jumpLab$bg33236:{
                switch (actual.__type_switch_id) {
                  case 204:
                    break jumpLab$bg33236;
                  
                  case 205:
                    y1 = actual.value;
                    break jumpLab$bg33237;
                  
                  default:
                    skip.throwException(sk, new Error('Unmatched Branch'));

                }
              }
              {
                var t$3 = x;
                var t$4 = new sk$String(('Some(')).$pl(t$3);
                var t$5 = t$4.$pl(new sk$String((')')));
                return sk$assertFailure({
                  actual: new sk$String(('None')),
                  expected: t$5,
                  message: new sk$String(('values are not equal'))
                });
              }
            }
            {
              var t$6 = y1;
              var t$7 = x;
              return sk$assertEqual(t$6, t$7, undefined);
            }
          }
        }
      }
    }
  }
};

var sk$assertFailure = sk.assertFailure = function(__named_parameters) {
  var actual = __named_parameters.actual;
  var expected = __named_parameters.expected;
  var message = __named_parameters.message;
  if (expected === undefined)
    expected = ((() => 
    {
      return new sk$String((''));
    })());
  if (actual === undefined)
    actual = ((() => 
    {
      return new sk$String((''));
    })());
  var t$ = message;
  var t$1 = expected;
  var t$2 = actual;
  skip.throwException(sk, new (sk$AssertionFailure)(t$, t$1, t$2));
};

var sk$assertFalse = sk.assertFalse = function(b) {
  var t$ = b;
  return sk$assertEqual(t$, new sk$Bool((false)), undefined);
};

var sk$assertNotEqual = sk.assertNotEqual = function(actual, expected) {
  var t$ = expected;
  var t$1 = actual;
  if (t$.$eq$eq(t$1).__value)
    {
      var t$2 = expected;
      var t$3 = t$2.toString();
      var t$4 = actual;
      var t$5 = t$4.toString();
      skip.throwException(sk, new (sk$AssertionFailure)(new sk$String(('values are equal')), t$3, t$5));
    }
  else
    return sk.__.$void;
};

var sk$assertThrows = sk.assertThrows = function(f) {
  var threw = new sk$Bool((false));
  try {
    {
      var t$ = f;
      t$();
    }
  }catch ($var){
    {
      jumpBlockOuterjumpLab$bg33261:{
        jumpLab$bg33261:{
          break jumpLab$bg33261;
        }
        threw = new sk$Bool((true));
        break jumpBlockOuterjumpLab$bg33261;
      }
    }
  }
  var t$1 = threw;
  if (t$1.$bg().__value)
    return sk$assertFailure({
      actual: new sk$String(('no exception')),
      expected: new sk$String(('an exception')),
      message: new sk$String(('expected an exception, but none were thrown'))
    });
  else
    return sk.__.$void;
};

var sk$assertTrue = sk.assertTrue = function(b) {
  var t$ = b;
  return sk$assertEqual(t$, new sk$Bool((true)), undefined);
};

var sk$awaitSynchronously = sk.awaitSynchronously = function(awaitHandle) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$compare = sk.compare = function(x, y) {
  var t$ = x;
  var t$1 = y;
  return t$.compare(t$1);
};

var sk$cycle = sk.cycle = function(state, f) {
  do
    {
      jumpBlockOuterloop_end$bg33277:{
        loop_end$bg33277:{
          {
            var t$ = f;
            var t$1 = state;
            var $var = t$(t$1);
            var state_;
            var t;
            {
              jumpBlockOuterjumpLab$bg33275:{
                jumpLab$bg33275:{
                  jumpLab$bg33274:{
                    switch ($var.__type_switch_id) {
                      case 21:
                        t = $var.$atparam0;
                        break jumpLab$bg33274;
                      
                      case 22:
                        state_ = $var.$atparam0;
                        break jumpLab$bg33275;
                      
                      default:
                        skip.throwException(sk, new Error('Unmatched Branch'));

                    }
                  }
                  return t;
                }
                {
                  var t$2 = state_;
                  var t$3 = f;
                  var t$4 = t$2;
                  var t$5 = t$3;
                  state = t$4;
                  f = t$5;
                  break loop_end$bg33277;
                }
              }
            }
          }
        }
        sk.__.$void;
        break jumpBlockOuterloop_end$bg33277;
      }
    }
  while (true);
};

var sk$debug = sk.debug = function(x) {
  var t$ = x;
  return sk$Debug$dtdebugImpl(t$, ((_tmp33282) => 
  {
    return sk$print_error(_tmp33282);
  }));
};

var sk$debug_break = sk.debug_break = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$debug_json = sk.debug_json = function(x) {
  var writer = new (sk$Debug$dtBufferedWriter)(((_tmp33284) => 
  {
    return sk$print_error(_tmp33284);
  }), undefined, undefined);
  var t$ = x;
  var t$1 = sk$inspect(t$);
  var t$2 = writer;
  t$1.printJSON(t$2, undefined);
  var t$3 = writer;
  t$3.write(new sk$String(('\n')));
  var t$4 = writer;
  return t$4.flush();
};

var sk$exit = sk.exit = function(res) {
  var t$ = res;
  sk$internalExit(t$);
  return sk$invariant_violation(new sk$String(('never')));
};

var sk$flush_stdout = sk.flush_stdout = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$getAnnotationParams = sk.getAnnotationParams = function(annotations, name, pos) {
  var results = sk$Vector.mcreateFromItems(new (sk$Array)([]));
  var t$ = name;
  var open = t$.$pl(new sk$String(('("')));
  var t$1 = annotations;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  {
    jumpBlockOuterbreak$bg33297:{
      break$bg33297:{
        dowhile_else$bg33296:{
          do
            {
              jumpBlockOuterdowhile_cond$bg33298:{
                dowhile_cond$bg33298:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var annotation;
                    {
                      jumpBlockOuterjumpLab$bg33321:{
                        jumpLab$bg33321:{
                          jumpLab$bg33320:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg33320;
                              
                              case 205:
                                annotation = var2.value;
                                break jumpLab$bg33321;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg33298;
                          }
                        }
                        {
                          var t$3 = annotation;
                          var t$4 = open;
                          if (t$3.startsWith(t$4).__value)
                            {
                              var t$5 = annotation;
                              var t$6 = t$5.endsWith(new sk$String(('")')));
                              var t$7;
                              if (t$6.$bg().__value)
                                {
                                  var t$8 = pos;
                                  var t$9 = new sk$String(('Annotation ')).toString();
                                  var t$10 = name;
                                  var t$11 = t$10.toString();
                                  var t$12 = new sk$String((' missing closing parenthesis')).toString();
                                  var t$13 = new sk$String(('')).join(new (sk$Array)([
                                    t$9,
                                    t$11,
                                    t$12
                                  ]));
                                  t$7 = t$8.die(t$13);
                                }
                              else
                                t$7 = sk.__.$void;
                              var t$14 = results;
                              var t$15 = annotation;
                              var t$16 = open;
                              var t$17 = t$15.stripPrefix(t$16);
                              var t$18 = t$17.stripSuffix(new sk$String(('")')));
                              t$14.push(t$18);
                            }
                          else
                            {}
                        }
                        break jumpBlockOuterjumpLab$bg33321;
                      }
                    }
                    break dowhile_cond$bg33298;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg33296;
                break jumpBlockOuterdowhile_cond$bg33298;
              }
            }
          while (true);
        }
        {}
        break jumpBlockOuterbreak$bg33297;
      }
      {}
      break jumpBlockOuterbreak$bg33297;
    }
  }
  var t$19 = results;
  return t$19.chill();
};

var sk$getBuildVersion = sk.getBuildVersion = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$getcwd = sk.getcwd = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$id = sk.id = function(x) {
  return x;
};

var sk$ignore = sk.ignore = function(_ignoredValue) {
  return sk.__.$void;
};

var sk$inspect = sk.inspect = function(x) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$intern = sk.intern = function(x) {
  return x;
};

var sk$internalExit = sk.internalExit = function($atparam0) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$invariant = sk.invariant = function(cond, msg) {
  if (msg === undefined)
    msg = ((() => 
    {
      return new sk$String(('assert'));
    })());
  var t$ = cond;
  if (t$.$bg().__value)
    {
      var t$1 = msg;
      return sk$invariant_violation(t$1);
    }
  else
    return sk.__.$void;
};

var sk$invariant_violation = sk.invariant_violation = function(msg) {
  sk$debug_break();
  var t$ = msg;
  var ex = new (sk$InvariantViolation)(t$);
  if ((sk$print_stack_on_invariant_violation()).__value)
    {
      var t$1 = ex;
      sk$print_last_exception_stack_trace_and_exit(t$1);
    }
  else
    {}
  skip.throwException(sk, ex);
};

var sk$isEqual = sk.isEqual = function(a, b) {
  var t$ = a;
  var t$1 = b;
  return t$.$eq$eq(t$1);
};

var sk$localGC = sk.localGC = function() {
  return sk.__.$void;
};

var sk$main = sk.main = function() {
  var args = sk$SkipProject$dtparseArguments();
  var t$ = args;
  var t$1 = t$.targets;
  var $var = t$1.values();
  var var1 = new sk$Bool((true));
  var break_val;
  {
    jumpBlockOuterbreak$bg33342:{
      break$bg33342:{
        dowhile_else$bg33341:{
          do
            {
              jumpBlockOuterdowhile_cond$bg33343:{
                dowhile_cond$bg33343:{
                  {
                    var t$2 = $var;
                    var var2 = t$2.next();
                    var target;
                    {
                      jumpBlockOuterjumpLab$bg33354:{
                        jumpLab$bg33354:{
                          jumpLab$bg33353:{
                            switch (var2.__type_switch_id) {
                              case 204:
                                break jumpLab$bg33353;
                              
                              case 205:
                                target = var2.value;
                                break jumpLab$bg33354;
                              
                              default:
                                skip.throwException(sk, new Error('Unmatched Branch'));

                            }
                          }
                          {
                            var1 = new sk$Bool((false));
                            break dowhile_cond$bg33343;
                          }
                        }
                        {
                          var t$3 = args;
                          var t$4 = t$3.bindings;
                          var t$5 = target;
                          var t$6 = args;
                          var t$7 = t$6.sourceOnly;
                          sk$SkipProject$dtprocessTarget(t$4, t$5, t$7);
                        }
                        break jumpBlockOuterjumpLab$bg33354;
                      }
                    }
                    break dowhile_cond$bg33343;
                  }
                }
                if (var1.__value)
                  {}
                else
                  break dowhile_else$bg33341;
                break jumpBlockOuterdowhile_cond$bg33343;
              }
            }
          while (true);
        }
        break_val = sk.__.$void;
        break jumpBlockOuterbreak$bg33342;
      }
      {}
      break jumpBlockOuterbreak$bg33342;
    }
  }
  return break_val;
};

var sk$max = sk.max = function(x, y) {
  var t$ = x;
  var t$1 = y;
  if (t$.$lt(t$1).__value)
    return y;
  else
    return x;
};

var sk$min = sk.min = function(x, y) {
  var t$ = x;
  var t$1 = y;
  if (t$.$lt(t$1).__value)
    return x;
  else
    return y;
};

var sk$now = sk.now = function() {
  var t$ = sk$nowNanos();
  var t$1 = t$.toFloat();
  var t$2 = new sk$Float((1.0)).$dv(new sk$Float((1000000.0)));
  return t$1.$ti(t$2);
};

var sk$nowNanos = sk.nowNanos = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$open_file = sk.open_file = function($atparam0) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$print_error = sk.print_error = function($atparam0) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$print_error_ln = sk.print_error_ln = function(value) {
  var t$ = value;
  var t$1 = t$.toString();
  sk$print_error(t$1);
  return sk$print_error(new sk$String(('\n')));
};

var sk$print_last_exception_stack_trace_and_exit = sk.print_last_exception_stack_trace_and_exit = function($atparam0) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$print_newline = sk.print_newline = function() {
  return sk$print_raw(new sk$String(('\n')));
};

var sk$print_raw = sk.print_raw = function($atparam0) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$print_stack_trace = sk.print_stack_trace = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$print_string = sk.print_string = function(value) {
  var t$ = value;
  var t$1 = t$.toString();
  sk$print_raw(t$1);
  return sk$print_newline();
};

var sk$profile_report = sk.profile_report = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$profile_start = sk.profile_start = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$profile_stop = sk.profile_stop = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$read_line = sk.read_line = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$read_stdin = sk.read_stdin = function() {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$read_stdin_bytes = sk.read_stdin_bytes = function(bytes) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$string_to_file = sk.string_to_file = function(s, file) {
  skip.throwException(sk, new Error('Unimplemented native function'));
};

var sk$throwContainerChanged = sk.throwContainerChanged = function() {
  skip.throwException(sk, singleton$ContainerChanged);
};

var sk$throwKeyNotFound = sk.throwKeyNotFound = function() {
  skip.throwException(sk, singleton$KeyNotFound);
};

var sk$throwOutOfBounds = sk.throwOutOfBounds = function() {
  skip.throwException(sk, singleton$OutOfBounds);
};

skip.mixinBaseMembers(sk, sk$Class, []);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtParam, []);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtParseResult, []);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtValue, []);

skip.mixinBaseMembers(sk, sk$Arguments$dtSpec, []);

skip.mixinBaseMembers(sk, sk$Array$dtArrayIterator, []);

skip.mixinBaseMembers(sk, sk$Awaitable, []);

skip.mixinBaseMembers(sk, sk$Bencher, []);

skip.mixinBaseMembers(sk, sk$Bencher$dtBenchmarkStats, []);

skip.mixinBaseMembers(sk, sk$Bencher$dtOptions, []);

skip.mixinBaseMembers(sk, sk$Bool, []);

skip.mixinBaseMembers(sk, sk$Char, []);

skip.mixinBaseMembers(sk, sk$Cycle$dtState, []);

skip.mixinBaseMembers(sk, sk$Debug$dtBufferedWriter, []);

skip.mixinBaseMembers(sk, sk$Debug$dtDebugBoxBase, []);

skip.mixinBaseMembers(sk, sk$DirectedGraph, []);

skip.mixinBaseMembers(sk, sk$Doc, []);

skip.mixinBaseMembers(sk, sk$Doc$dtCommand, []);

skip.mixinBaseMembers(sk, sk$Doc$dtIndentComputation, []);

skip.mixinBaseMembers(sk, sk$Doc$dtMode, []);

skip.mixinBaseMembers(sk, sk$Equality, []);

skip.mixinBaseMembers(sk, sk$Exception, []);

skip.mixinBaseMembers(sk, sk$FilePosition, []);

skip.mixinBaseMembers(sk, sk$Float, []);

skip.mixinBaseMembers(sk, sk$FromIterator, []);

skip.mixinBaseMembers(sk, sk$GTest$dtTestCase, []);

skip.mixinBaseMembers(sk, sk$Glob$dtGlobState, []);

skip.mixinBaseMembers(sk, sk$HH$dtLambda, []);

skip.mixinBaseMembers(sk, sk$HH$dtMixed, []);

skip.mixinBaseMembers(sk, sk$HasClassName, []);

skip.mixinBaseMembers(sk, sk$Hashable, []);

skip.mixinBaseMembers(sk, sk$HhvmInterop$dtHHArray, []);

skip.mixinBaseMembers(sk, sk$HhvmInterop$dtObject, []);

skip.mixinBaseMembers(sk, sk$HhvmInterop$dtTupleHelper, []);

skip.mixinBaseMembers(sk, sk$IndentedWriter, []);

skip.mixinBaseMembers(sk, sk$IndentedWriter$dtWriter, []);

skip.mixinBaseMembers(sk, sk$Inspect, []);

skip.mixinBaseMembers(sk, sk$Int, []);

skip.mixinBaseMembers(sk, sk$Int16, []);

skip.mixinBaseMembers(sk, sk$Int32, []);

skip.mixinBaseMembers(sk, sk$Int8, []);

skip.mixinBaseMembers(sk, sk$IntoIterator, []);

skip.mixinBaseMembers(sk, sk$Iterator, []);

skip.mixinBaseMembers(sk, sk$Iterator$dtGeneratorBase, []);

skip.mixinBaseMembers(sk, sk$JSON$dtFormat, []);

skip.mixinBaseMembers(sk, sk$JSON$dtFormatter, []);

skip.mixinBaseMembers(sk, sk$JSON$dtItemReader, []);

skip.mixinBaseMembers(sk, sk$JSON$dtItemWriter, []);

skip.mixinBaseMembers(sk, sk$JSON$dtValue, []);

skip.mixinBaseMembers(sk, sk$JSON$dtValueReader, []);

skip.mixinBaseMembers(sk, sk$JSON$dtValueWriter, []);

skip.mixinBaseMembers(sk, sk$KeyedSequence, []);

skip.mixinBaseMembers(sk, sk$Lexer$dtLexer, []);

skip.mixinBaseMembers(sk, sk$Lexer$dtLexingPosition, []);

skip.mixinBaseMembers(sk, sk$Lexer$dtTokenResult, []);

skip.mixinBaseMembers(sk, sk$Map$dtMapEntry, []);

skip.mixinBaseMembers(sk, sk$Map$dtMapIndex, []);

skip.mixinBaseMembers(sk, sk$Map$dtMapIterator, []);

skip.mixinBaseMembers(sk, sk$Map$dtUnorderedMapSlot, []);

skip.mixinBaseMembers(sk, sk$MetaClass, []);

skip.mixinBaseMembers(sk, sk$Nullable, []);

skip.mixinBaseMembers(sk, sk$Option, []);

skip.mixinBaseMembers(sk, sk$Order, []);

skip.mixinBaseMembers(sk, sk$Orderable$dtLambdaOrderable, []);

skip.mixinBaseMembers(sk, sk$ParseTree$dtCodeMod, []);

skip.mixinBaseMembers(sk, sk$ParseTree$dtParseTree, []);

skip.mixinBaseMembers(sk, sk$ParseTree$dtParseTreeVisitor, []);

skip.mixinBaseMembers(sk, sk$Parser$dtParsePosition, []);

skip.mixinBaseMembers(sk, sk$Parser$dtParseResults, []);

skip.mixinBaseMembers(sk, sk$Parser$dtParser, []);

skip.mixinBaseMembers(sk, sk$Persistent$dtIndex, []);

skip.mixinBaseMembers(sk, sk$Persistent$dtNode, []);

skip.mixinBaseMembers(sk, sk$Persistent$dtShift, []);

skip.mixinBaseMembers(sk, sk$Pos, []);

skip.mixinBaseMembers(sk, sk$Position, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtConfig, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtFun1, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtGeneratable, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtGenerator, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtLazy, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtPerturb, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtProperty, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtShrinkable, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTestResult, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTestable, []);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTree, []);

skip.mixinBaseMembers(sk, sk$Random, []);

skip.mixinBaseMembers(sk, sk$Random$dtSplitmix64, []);

skip.mixinBaseMembers(sk, sk$Ref, []);

skip.mixinBaseMembers(sk, sk$Regex, []);

skip.mixinBaseMembers(sk, sk$Regex$dtMatch, []);

skip.mixinBaseMembers(sk, sk$Result, []);

skip.mixinBaseMembers(sk, sk$Runtime$dtGCPointer, []);

skip.mixinBaseMembers(sk, sk$Runtime$dtHhvmHandle, []);

skip.mixinBaseMembers(sk, sk$Runtime$dtHhvmShapeHandle, []);

skip.mixinBaseMembers(sk, sk$Runtime$dtNonGCPointer, []);

skip.mixinBaseMembers(sk, sk$Sequence, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtFormat, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtKeyedSequenceReader, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtKeyedSequenceWriter, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtReader, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtRecordReader, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtRecordWriter, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtSequenceReader, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtSequenceWriter, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtSerializer, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtTestRecord, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtTupleReader, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtTupleWriter, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtVisitor, []);

skip.mixinBaseMembers(sk, sk$Serialization$dtWriter, []);

skip.mixinBaseMembers(sk, sk$Set$dtEmptyValue, []);

skip.mixinBaseMembers(sk, sk$Show, []);

skip.mixinBaseMembers(sk, sk$SkipError$dtError, []);

skip.mixinBaseMembers(sk, sk$SkipError$dtFix, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtArguments, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtBinding, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtFileInfo, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtParameter, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtProgramUnit, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtProgramUnitKey, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtProject, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtSolution, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtSolutionConfig, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtSolutionLoader, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtTargetArgument, []);

skip.mixinBaseMembers(sk, sk$SkipProject$dtVariable, []);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtParameterValue, []);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgramUnit, []);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgramUnitKind, []);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgramUnitReference, []);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProject, []);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtVariable, []);

skip.mixinBaseMembers(sk, sk$SortedMap, []);

skip.mixinBaseMembers(sk, sk$SortedMap$dtLookup, []);

skip.mixinBaseMembers(sk, sk$SortedSet, []);

skip.mixinBaseMembers(sk, sk$String, []);

skip.mixinBaseMembers(sk, sk$String$dtEncoding, []);

skip.mixinBaseMembers(sk, sk$Subprocess$dtOutput, []);

skip.mixinBaseMembers(sk, sk$SyntaxError, []);

skip.mixinBaseMembers(sk, sk$Test$dtMixedScalar, []);

skip.mixinBaseMembers(sk, sk$TextRange, []);

skip.mixinBaseMembers(sk, sk$Token$dtComment, []);

skip.mixinBaseMembers(sk, sk$Token$dtCommentKind, []);

skip.mixinBaseMembers(sk, sk$Token$dtToken, []);

skip.mixinBaseMembers(sk, sk$TokenKind$dtTokenKind, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC2, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC3, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC4, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC5, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8, []);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9, []);

skip.mixinBaseMembers(sk, sk$Tuple10, []);

skip.mixinBaseMembers(sk, sk$Tuple2, []);

skip.mixinBaseMembers(sk, sk$Tuple3, []);

skip.mixinBaseMembers(sk, sk$Tuple4, []);

skip.mixinBaseMembers(sk, sk$Tuple5, []);

skip.mixinBaseMembers(sk, sk$Tuple6, []);

skip.mixinBaseMembers(sk, sk$Tuple7, []);

skip.mixinBaseMembers(sk, sk$Tuple8, []);

skip.mixinBaseMembers(sk, sk$Tuple9, []);

skip.mixinBaseMembers(sk, sk$UInt16, []);

skip.mixinBaseMembers(sk, sk$UInt32, []);

skip.mixinBaseMembers(sk, sk$UInt8, []);

skip.mixinBaseMembers(sk, sk$UnitTest$dtOptions, []);

skip.mixinBaseMembers(sk, sk$UnorderedSet$dtEmptyValue, []);

skip.mixinBaseMembers(sk, sk$Unsafe$dtRawStorage, []);

skip.mixinBaseMembers(sk, sk$Vector$dtVectorIterator, []);

skip.mixinBaseMembers(sk, sk$Void, []);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtArgumentError, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtBoolParam, [
  sk$ArgumentParser$dtParam
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtBoolValue, [
  sk$ArgumentParser$dtValue
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtIntParam, [
  sk$ArgumentParser$dtParam
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtIntValue, [
  sk$ArgumentParser$dtValue
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtMissingValue, [
  sk$ArgumentParser$dtValue
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtStringArrayParam, [
  sk$ArgumentParser$dtParam
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtStringArrayValue, [
  sk$ArgumentParser$dtValue
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtStringParam, [
  sk$ArgumentParser$dtParam
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtStringValue, [
  sk$ArgumentParser$dtValue
]);

skip.mixinBaseMembers(sk, sk$Arguments$dtHelp, [
  sk$Arguments$dtSpec
]);

skip.mixinBaseMembers(sk, sk$Arguments$dtSetBool, [
  sk$Arguments$dtSpec
]);

skip.mixinBaseMembers(sk, sk$Arguments$dtSetString, [
  sk$Arguments$dtSpec
]);

skip.mixinBaseMembers(sk, sk$Arguments$dtSetTrue, [
  sk$Arguments$dtSpec
]);

skip.mixinBaseMembers(sk, sk$Array, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Array$dtItemsIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Array$dtKeysIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Array$dtReversedValuesIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Array$dtValuesIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$ArrayMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Assert$dtInternalError, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$AssertionFailure, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Base, [
  sk$Class
]);

skip.mixinBaseMembers(sk, sk$Bencher$dtBenchmarkStatsMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$BoolMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Box, [
  sk$Nullable
]);

skip.mixinBaseMembers(sk, sk$Concrete, [
  sk$Class
]);

skip.mixinBaseMembers(sk, sk$ContainerChanged, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Cycle$dtDone, [
  sk$Cycle$dtState
]);

skip.mixinBaseMembers(sk, sk$Cycle$dtNext, [
  sk$Cycle$dtState
]);

skip.mixinBaseMembers(sk, sk$Debug$dtDebugBox, [
  sk$Debug$dtDebugBoxBase
]);

skip.mixinBaseMembers(sk, sk$DivisionByZeroException, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Doc$dtAlign, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtBreak, [
  sk$Doc$dtMode
]);

skip.mixinBaseMembers(sk, sk$Doc$dtConcat, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtEmpty, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtFill, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtFlat, [
  sk$Doc$dtMode
]);

skip.mixinBaseMembers(sk, sk$Doc$dtGenericLine, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtGroup, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtIfBreak, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtIndent, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtLineSuffix, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtLineSuffixBoundary, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtMarker, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtStr, [
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Duplicate, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$EQ, [
  sk$Order
]);

skip.mixinBaseMembers(sk, sk$Failure, [
  sk$Result
]);

skip.mixinBaseMembers(sk, sk$FileRange, [
  sk$Pos
]);

skip.mixinBaseMembers(sk, sk$FloatMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$GT, [
  sk$Order
]);

skip.mixinBaseMembers(sk, sk$Glob$dtGlobStateCharClassEscape, [
  sk$Glob$dtGlobState
]);

skip.mixinBaseMembers(sk, sk$Glob$dtGlobStateCharClassFirst, [
  sk$Glob$dtGlobState
]);

skip.mixinBaseMembers(sk, sk$Glob$dtGlobStateCharClassRest, [
  sk$Glob$dtGlobState
]);

skip.mixinBaseMembers(sk, sk$Glob$dtGlobStateEscape, [
  sk$Glob$dtGlobState
]);

skip.mixinBaseMembers(sk, sk$Glob$dtGlobStateNormal, [
  sk$Glob$dtGlobState
]);

skip.mixinBaseMembers(sk, sk$HH$dtArraykeylike, [
  sk$Hashable,
  sk$Equality
]);

skip.mixinBaseMembers(sk, sk$HH$dtLambdaObject, [
  sk$HH$dtLambda
]);

skip.mixinBaseMembers(sk, sk$HH$dtLambdaString, [
  sk$HH$dtLambda
]);

skip.mixinBaseMembers(sk, sk$HH$dtNonnull, [
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtNull, [
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$IndexedSequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$InspectCall, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$InspectLiteral, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$InspectMap, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$InspectObject, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$InspectSpecial, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$InspectString, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$InspectVector, [
  sk$Inspect
]);

skip.mixinBaseMembers(sk, sk$IntMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$InvalidCast, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$InvalidIntegralCastError, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$InvalidRegex, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Invalid_utf8_char, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$InvariantViolation, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Iterator$dtDropIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Iterator$dtGenerator, [
  sk$Iterator$dtGeneratorBase,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Iterator$dtMapIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Iterator$dtTakeIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Iterator$dtZipIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Iterator$dtZipWithIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$JSON$dtArray, [
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtBool, [
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtCompactFormatter, [
  sk$JSON$dtFormatter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtDefaultReader, [
  sk$Serialization$dtReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtDefaultWriter, [
  sk$Serialization$dtWriter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtKeyedSequenceReader, [
  sk$Serialization$dtKeyedSequenceReader,
  sk$JSON$dtItemReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtKeyedSequenceWriter, [
  sk$Serialization$dtKeyedSequenceWriter,
  sk$JSON$dtItemWriter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtNull, [
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtNumber, [
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtObject, [
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtPrettyFormatter, [
  sk$JSON$dtFormatter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtRecordReader, [
  sk$Serialization$dtRecordReader,
  sk$JSON$dtItemReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtRecordWriter, [
  sk$Serialization$dtRecordWriter,
  sk$JSON$dtItemWriter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtSequenceReader, [
  sk$Serialization$dtSequenceReader,
  sk$JSON$dtValueReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtSequenceWriter, [
  sk$Serialization$dtSequenceWriter,
  sk$JSON$dtValueWriter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtString, [
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtTupleReader, [
  sk$Serialization$dtTupleReader,
  sk$JSON$dtValueReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtTupleWriter, [
  sk$Serialization$dtTupleWriter,
  sk$JSON$dtValueWriter
]);

skip.mixinBaseMembers(sk, sk$KeyNotFound, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$LT, [
  sk$Order
]);

skip.mixinBaseMembers(sk, sk$List, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$List$dtListIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtDArrayIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtHH_darray2, [
  sk$KeyedSequence
]);

skip.mixinBaseMembers(sk, sk$Map$dtMapItemsIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtMapKeysIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtMapValuesIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtUnorderedMapIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$MapMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$MutableKeyedSequence, [
  sk$KeyedSequence
]);

skip.mixinBaseMembers(sk, sk$None, [
  sk$Option
]);

skip.mixinBaseMembers(sk, sk$Null, [
  sk$Nullable
]);

skip.mixinBaseMembers(sk, sk$OptionMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Orderable, [
  sk$HasClassName,
  sk$Equality
]);

skip.mixinBaseMembers(sk, sk$OutOfBounds, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtEmptyTree, [
  sk$ParseTree$dtParseTree
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtErrorTree, [
  sk$ParseTree$dtParseTree
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtLazyTree, [
  sk$ParseTree$dtParseTree
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtParseTreeList, [
  sk$ParseTree$dtParseTree
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtReplaceTokenCodeMod, [
  sk$ParseTree$dtCodeMod
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtTokenAccumulator, [
  sk$ParseTree$dtParseTreeVisitor
]);

skip.mixinBaseMembers(sk, sk$ParseTree$dtTokenTree, [
  sk$ParseTree$dtParseTree
]);

skip.mixinBaseMembers(sk, sk$Persistent$dtInternal, [
  sk$Persistent$dtNode
]);

skip.mixinBaseMembers(sk, sk$Persistent$dtLeaf, [
  sk$Persistent$dtNode
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtBoolGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtCharGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtConcatLazy, [
  sk$QuickCheck$dtLazy
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtCreateComposedGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtEmptyLazy, [
  sk$QuickCheck$dtLazy
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtFloatGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtForAllGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtForAllProperty, [
  sk$QuickCheck$dtProperty
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtFun1Generator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtIntGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtLazySource, [
  sk$QuickCheck$dtLazy
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtMapComposedGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtMapGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtMapLazy, [
  sk$QuickCheck$dtLazy
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtOptionGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtOrderGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtResultGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtSetGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtStringGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTestFailure, [
  sk$QuickCheck$dtTestResult
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTestResultGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTestResultProperty, [
  sk$QuickCheck$dtProperty
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTestSuccess, [
  sk$QuickCheck$dtTestResult
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtTuple2Generator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$QuickCheck$dtVectorGenerator, [
  sk$QuickCheck$dtGenerator
]);

skip.mixinBaseMembers(sk, sk$Range, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Range$dtRangeIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Range$dtRangeReverseIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$RuntimeError, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtIndexedSequenceIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip10Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip2Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip3Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip4Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip5Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip6Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip7Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip8Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Sequence$dtZip9Sequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultKeyedSequenceReader, [
  sk$Serialization$dtKeyedSequenceReader
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultKeyedSequenceWriter, [
  sk$Serialization$dtKeyedSequenceWriter
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultReader, [
  sk$Serialization$dtReader
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultRecordReader, [
  sk$Serialization$dtRecordReader
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultRecordWriter, [
  sk$Serialization$dtRecordWriter
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultSequenceReader, [
  sk$Serialization$dtSequenceReader
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultSequenceWriter, [
  sk$Serialization$dtSequenceWriter
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultTupleReader, [
  sk$Serialization$dtTupleReader
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultTupleWriter, [
  sk$Serialization$dtTupleWriter
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtDefaultWriter, [
  sk$Serialization$dtWriter
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtSerializationError, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtTestRecordMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Set$dtKeysetIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$SetMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$SkipError$dtSkipErrorException, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$SkipProject$dtProgramUnitArgument, [
  sk$SkipProject$dtTargetArgument
]);

skip.mixinBaseMembers(sk, sk$SkipProject$dtSourceFileArgument, [
  sk$SkipProject$dtTargetArgument
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtLibrary, [
  sk$SkipProjectConfig$dtProgramUnitKind
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtParameterValueMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgram, [
  sk$SkipProjectConfig$dtProgramUnitKind
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgramUnitKindMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgramUnitMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtProjectMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$SkipProjectConfig$dtVariableMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Some, [
  sk$Option
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtExact, [
  sk$SortedMap$dtLookup
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtInBetween, [
  sk$SortedMap$dtLookup
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtNil, [
  sk$SortedMap
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtNode, [
  sk$SortedMap
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtSortedMapIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$String$dtAscii, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$String$dtCp437, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$String$dtCustomEncoding, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$String$dtIso8859_1, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$String$dtStringIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$String$dtUtf16BE, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$String$dtUtf16LE, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$String$dtUtf8, [
  sk$String$dtEncoding
]);

skip.mixinBaseMembers(sk, sk$StringMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Subprocess$dtEmptyArgumentsError, [
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Success, [
  sk$Result
]);

skip.mixinBaseMembers(sk, sk$Test$dtMixedInt, [
  sk$Test$dtMixedScalar
]);

skip.mixinBaseMembers(sk, sk$Test$dtMixedString, [
  sk$Test$dtMixedScalar
]);

skip.mixinBaseMembers(sk, sk$TokenKind$dtBEGINNING_OF_FILE, [
  sk$TokenKind$dtTokenKind
]);

skip.mixinBaseMembers(sk, sk$TokenKind$dtEND_OF_FILE, [
  sk$TokenKind$dtTokenKind
]);

skip.mixinBaseMembers(sk, sk$TokenKind$dtERROR, [
  sk$TokenKind$dtTokenKind
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_0, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_1, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_2, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_3, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_4, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_5, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_6, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_7, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_8, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC10_9, [
  sk$Tuple$dtC10
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC2_0, [
  sk$Tuple$dtC2
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC2_1, [
  sk$Tuple$dtC2
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC3_0, [
  sk$Tuple$dtC3
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC3_1, [
  sk$Tuple$dtC3
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC3_2, [
  sk$Tuple$dtC3
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC4_0, [
  sk$Tuple$dtC4
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC4_1, [
  sk$Tuple$dtC4
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC4_2, [
  sk$Tuple$dtC4
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC4_3, [
  sk$Tuple$dtC4
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC5_0, [
  sk$Tuple$dtC5
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC5_1, [
  sk$Tuple$dtC5
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC5_2, [
  sk$Tuple$dtC5
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC5_3, [
  sk$Tuple$dtC5
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC5_4, [
  sk$Tuple$dtC5
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6_0, [
  sk$Tuple$dtC6
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6_1, [
  sk$Tuple$dtC6
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6_2, [
  sk$Tuple$dtC6
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6_3, [
  sk$Tuple$dtC6
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6_4, [
  sk$Tuple$dtC6
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC6_5, [
  sk$Tuple$dtC6
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_0, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_1, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_2, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_3, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_4, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_5, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC7_6, [
  sk$Tuple$dtC7
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_0, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_1, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_2, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_3, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_4, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_5, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_6, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC8_7, [
  sk$Tuple$dtC8
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_0, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_1, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_2, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_3, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_4, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_5, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_6, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_7, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple$dtC9_8, [
  sk$Tuple$dtC9
]);

skip.mixinBaseMembers(sk, sk$Tuple10MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple2MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple3MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple4MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple5MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple6MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple7MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple8MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$Tuple9MetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$UniqueSequence, [
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Vector$dtItemsIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Vector$dtKeysIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Vector$dtReversedValuesIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Vector$dtValuesIterator, [
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$VectorMetaClass, [
  sk$MetaClass
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtInvalidValueError, [
  sk$ArgumentParser$dtArgumentError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$ArgumentParser$dtMissingValueError, [
  sk$ArgumentParser$dtArgumentError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Doc$dtHardLine, [
  sk$Doc$dtGenericLine,
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtLine, [
  sk$Doc$dtGenericLine,
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$Doc$dtSoftLine, [
  sk$Doc$dtGenericLine,
  sk$Doc
]);

skip.mixinBaseMembers(sk, sk$HH$dtArraybacked, [
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtObject, [
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtPrimitive, [
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtResource, [
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$Integral, [
  sk$Orderable,
  sk$Show,
  sk$Hashable,
  sk$HasClassName,
  sk$Equality
]);

skip.mixinBaseMembers(sk, sk$JSON$dtFloatNumber, [
  sk$JSON$dtNumber,
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtIntNumber, [
  sk$JSON$dtNumber,
  sk$JSON$dtValue
]);

skip.mixinBaseMembers(sk, sk$JSON$dtInvalidJSONError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$JSON$dtJSONError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$JSON$dtKeyNotFoundError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$JSON$dtOptionReader, [
  sk$JSON$dtDefaultReader,
  sk$Serialization$dtReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtOptionWriter, [
  sk$JSON$dtDefaultWriter,
  sk$Serialization$dtWriter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtReader, [
  sk$JSON$dtDefaultReader,
  sk$Serialization$dtReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtStringReader, [
  sk$Serialization$dtDefaultReader,
  sk$Serialization$dtReader
]);

skip.mixinBaseMembers(sk, sk$JSON$dtStringWriter, [
  sk$Serialization$dtDefaultWriter,
  sk$Serialization$dtWriter
]);

skip.mixinBaseMembers(sk, sk$JSON$dtWriter, [
  sk$JSON$dtDefaultWriter,
  sk$Serialization$dtWriter
]);

skip.mixinBaseMembers(sk, sk$List$dtCons, [
  sk$List,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$List$dtNil, [
  sk$List,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Map, [
  sk$MutableKeyedSequence,
  sk$KeyedSequence
]);

skip.mixinBaseMembers(sk, sk$Map$dtUnorderedMapItemsIterator, [
  sk$Map$dtUnorderedMapIterator,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtUnorderedMapKeysIterator, [
  sk$Map$dtUnorderedMapIterator,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$Map$dtUnorderedMapValuesIterator, [
  sk$Map$dtUnorderedMapIterator,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$MutableIndexedSequence, [
  sk$IndexedSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Number, [
  sk$Orderable,
  sk$Show,
  sk$Hashable,
  sk$HasClassName,
  sk$Equality
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtCollectionNotDoneError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtFieldNotInClassError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtNotChildClassError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtNotExpectedClassError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtNotImplementedError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtNotSupportedError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtRecordMissingFieldError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtRecordNoValuesLeftError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtTupleSizeOutOfBoundsError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtTupleSizeUnexpectedError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtTypeNotImplementedError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtUnnamedPositionalParameterError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtUnrecognizedDefaultValueError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Serialization$dtVariantMissingError, [
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Set, [
  sk$UniqueSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Set$dtHH_keyset2, [
  sk$UniqueSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtItemsIterator, [
  sk$SortedMap$dtSortedMapIterator,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtKeysIterator, [
  sk$SortedMap$dtSortedMapIterator,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$SortedMap$dtValuesIterator, [
  sk$SortedMap$dtSortedMapIterator,
  sk$Iterator
]);

skip.mixinBaseMembers(sk, sk$String$dtUtf8View, [
  sk$IndexedSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$UnorderedMap, [
  sk$MutableKeyedSequence,
  sk$KeyedSequence
]);

skip.mixinBaseMembers(sk, sk$UnorderedSet, [
  sk$UniqueSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Vector$dtHH_varray2, [
  sk$IndexedSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$HH$dtArraykey, [
  sk$HH$dtPrimitive,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtBool, [
  sk$HH$dtPrimitive,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtDarray, [
  sk$HH$dtArraybacked,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtDict, [
  sk$HH$dtArraybacked,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtKeyset, [
  sk$HH$dtArraybacked,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtMap, [
  sk$HH$dtObject,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtNonexhuastivePlaceholderObject, [
  sk$HH$dtObject,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtNonexhuastivePlaceholderResource, [
  sk$HH$dtResource,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtNumber, [
  sk$HH$dtPrimitive,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtProxyObject, [
  sk$HH$dtObject,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtSet, [
  sk$HH$dtObject,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtVarray, [
  sk$HH$dtArraybacked,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtVec, [
  sk$HH$dtArraybacked,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtVector, [
  sk$HH$dtObject,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$JSON$dtJSONSetNonObjectError, [
  sk$JSON$dtJSONError,
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$JSON$dtJSONValueExpectedError, [
  sk$JSON$dtJSONError,
  sk$Serialization$dtSerializationError,
  sk$Exception
]);

skip.mixinBaseMembers(sk, sk$Persistent$dtRadixTreeVector, [
  sk$MutableIndexedSequence,
  sk$IndexedSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$Vector, [
  sk$MutableIndexedSequence,
  sk$IndexedSequence,
  sk$Sequence
]);

skip.mixinBaseMembers(sk, sk$HH$dtFloat, [
  sk$HH$dtNumber,
  sk$HH$dtPrimitive,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtInt, [
  sk$HH$dtNumber,
  sk$HH$dtArraykey,
  sk$HH$dtPrimitive,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

skip.mixinBaseMembers(sk, sk$HH$dtString, [
  sk$HH$dtArraykey,
  sk$HH$dtPrimitive,
  sk$HH$dtNonnull,
  sk$HH$dtMixed
]);

var sk$ArgumentParser$dtnonEmpty = sk.ArgumentParser$dtnonEmpty = (() => 
{
  var temp = ((() => 
  {
    return ((str) => 
    {
      var t$ = str;
      var t$1 = t$.trim();
      var t$2 = t$1.isEmpty();
      if (t$2.$bg().__value)
        return new (sk$Success)(sk.__.$void);
      else
        {
          var t$3 = new sk$String(('Expected value to be non-empty, got \'')).toString();
          var t$4 = str;
          var t$5 = t$4.toString();
          var t$6 = new sk$String(('\'.')).toString();
          var t$7 = new sk$String(('')).join(new (sk$Array)([
            t$3,
            t$5,
            t$6
          ]));
          return new (sk$Failure)(t$7);
        }
    });
  })());
  sk$ArgumentParser$dtnonEmpty = sk.ArgumentParser$dtnonEmpty = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$ArgumentParser$dtnonNegative = sk.ArgumentParser$dtnonNegative = (() => 
{
  var temp = ((() => 
  {
    return ((int) => 
    {
      var t$ = int;
      if (t$.$gt$eq(new sk$Int(0.0, 0.0)).__value)
        return new (sk$Success)(sk.__.$void);
      else
        {
          var t$1 = new sk$String(('Expected value to be nonnegative, got \'')).toString();
          var t$2 = int;
          var t$3 = t$2.toString();
          var t$4 = new sk$String(('\'.')).toString();
          var t$5 = new sk$String(('')).join(new (sk$Array)([
            t$1,
            t$3,
            t$4
          ]));
          return new (sk$Failure)(t$5);
        }
    });
  })());
  sk$ArgumentParser$dtnonNegative = sk.ArgumentParser$dtnonNegative = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$ArgumentParser$dtstrictlyPositive = sk.ArgumentParser$dtstrictlyPositive = (() => 
{
  var temp = ((() => 
  {
    return ((int) => 
    {
      var t$ = int;
      if (t$.$gt(new sk$Int(0.0, 0.0)).__value)
        return new (sk$Success)(sk.__.$void);
      else
        {
          var t$1 = new sk$String(('Expected value to be strictly positive (greater than zero), got \'')).toString();
          var t$2 = int;
          var t$3 = t$2.toString();
          var t$4 = new sk$String(('\'')).toString();
          var t$5 = new sk$String(('')).join(new (sk$Array)([
            t$1,
            t$3,
            t$4
          ]));
          return new (sk$Failure)(t$5);
        }
    });
  })());
  sk$ArgumentParser$dtstrictlyPositive = sk.ArgumentParser$dtstrictlyPositive = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Bencher$dtdefaultItersPerGc = sk.Bencher$dtdefaultItersPerGc = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(50.0, 0.0);
  })());
  sk$Bencher$dtdefaultItersPerGc = sk.Bencher$dtdefaultItersPerGc = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Bencher$dtdefaultMinIterations = sk.Bencher$dtdefaultMinIterations = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })());
  sk$Bencher$dtdefaultMinIterations = sk.Bencher$dtdefaultMinIterations = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Bencher$dtdefaultNameColumns = sk.Bencher$dtdefaultNameColumns = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(40.0, 0.0);
  })());
  sk$Bencher$dtdefaultNameColumns = sk.Bencher$dtdefaultNameColumns = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Bencher$dtdefaultStatsColumns = sk.Bencher$dtdefaultStatsColumns = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(16.0, 0.0);
  })());
  sk$Bencher$dtdefaultStatsColumns = sk.Bencher$dtdefaultStatsColumns = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Bencher$dtschema = sk.Bencher$dtschema = (() => 
{
  var temp = ((() => 
  {
    return new (sk$Array)([
      new (sk$ArgumentParser$dtBoolParam)({
        help: undefined,
        name: new sk$String(('help')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      new (sk$ArgumentParser$dtBoolParam)({
        help: undefined,
        name: new sk$String(('allow-empty')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      new (sk$ArgumentParser$dtBoolParam)({
        help: new sk$String(('Display results after all benchmarks complete')),
        name: new sk$String(('display-output')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      new (sk$ArgumentParser$dtBoolParam)({
        help: new sk$String(('Include individual samples in the --output file in addition to summary statistics')),
        name: new sk$String(('keep-samples')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      new (sk$ArgumentParser$dtBoolParam)({
        help: new sk$String(('Display results as benchmarks are completed')),
        name: new sk$String(('verbose')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      new (sk$ArgumentParser$dtStringParam)({
        $default: undefined,
        help: undefined,
        name: new sk$String(('output')),
        required: undefined,
        validate: undefined
      }),
      new (sk$ArgumentParser$dtIntParam)({
        $default: new (sk$Some)((sk$Bencher$dtdefaultMinIterations())),
        help: undefined,
        name: new sk$String(('min-iterations')),
        required: undefined,
        validate: undefined
      }),
      new (sk$ArgumentParser$dtIntParam)({
        $default: new (sk$Some)((sk$Bencher$dtdefaultItersPerGc())),
        help: undefined,
        name: new sk$String(('iters-per-gc')),
        required: undefined,
        validate: undefined
      })
    ]);
  })());
  sk$Bencher$dtschema = sk.Bencher$dtschema = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtaLowerCode = sk.Chars$dtaLowerCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(97).code();
  })());
  sk$Chars$dtaLowerCode = sk.Chars$dtaLowerCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtaUpperCode = sk.Chars$dtaUpperCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(65).code();
  })());
  sk$Chars$dtaUpperCode = sk.Chars$dtaUpperCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtcarriageReturn = sk.Chars$dtcarriageReturn = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(13);
  })());
  sk$Chars$dtcarriageReturn = sk.Chars$dtcarriageReturn = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtescape = sk.Chars$dtescape = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(14);
  })());
  sk$Chars$dtescape = sk.Chars$dtescape = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtformFeed = sk.Chars$dtformFeed = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(12);
  })());
  sk$Chars$dtformFeed = sk.Chars$dtformFeed = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtforwardSlash = sk.Chars$dtforwardSlash = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(47);
  })());
  sk$Chars$dtforwardSlash = sk.Chars$dtforwardSlash = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dthexDigitChars = sk.Chars$dthexDigitChars = (() => 
{
  var temp = ((() => 
  {
    return new (sk$Array)([
      $makeChar(48),
      $makeChar(49),
      $makeChar(50),
      $makeChar(51),
      $makeChar(52),
      $makeChar(53),
      $makeChar(54),
      $makeChar(55),
      $makeChar(56),
      $makeChar(57),
      $makeChar(97),
      $makeChar(98),
      $makeChar(99),
      $makeChar(100),
      $makeChar(101),
      $makeChar(102)
    ]);
  })());
  sk$Chars$dthexDigitChars = sk.Chars$dthexDigitChars = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtlineFeed = sk.Chars$dtlineFeed = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(10);
  })());
  sk$Chars$dtlineFeed = sk.Chars$dtlineFeed = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtnineCode = sk.Chars$dtnineCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(57).code();
  })());
  sk$Chars$dtnineCode = sk.Chars$dtnineCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtnull = sk.Chars$dtnull = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(0);
  })());
  sk$Chars$dtnull = sk.Chars$dtnull = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtsevenCode = sk.Chars$dtsevenCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(55).code();
  })());
  sk$Chars$dtsevenCode = sk.Chars$dtsevenCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtspace = sk.Chars$dtspace = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(32);
  })());
  sk$Chars$dtspace = sk.Chars$dtspace = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtstar = sk.Chars$dtstar = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(42);
  })());
  sk$Chars$dtstar = sk.Chars$dtstar = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dttab = sk.Chars$dttab = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(9);
  })());
  sk$Chars$dttab = sk.Chars$dttab = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtunderscoreCode = sk.Chars$dtunderscoreCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(95).code();
  })());
  sk$Chars$dtunderscoreCode = sk.Chars$dtunderscoreCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtverticalTab = sk.Chars$dtverticalTab = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(11);
  })());
  sk$Chars$dtverticalTab = sk.Chars$dtverticalTab = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtzLowerCode = sk.Chars$dtzLowerCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(122).code();
  })());
  sk$Chars$dtzLowerCode = sk.Chars$dtzLowerCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtzUpperCode = sk.Chars$dtzUpperCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(90).code();
  })());
  sk$Chars$dtzUpperCode = sk.Chars$dtzUpperCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Chars$dtzeroCode = sk.Chars$dtzeroCode = (() => 
{
  var temp = ((() => 
  {
    return $makeChar(48).code();
  })());
  sk$Chars$dtzeroCode = sk.Chars$dtzeroCode = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Doc$dtspace = sk.Doc$dtspace = (() => 
{
  var temp = ((() => 
  {
    return new (sk$Doc$dtStr)(new sk$String((' ')));
  })());
  sk$Doc$dtspace = sk.Doc$dtspace = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$FileRange$dtbuiltin = sk.FileRange$dtbuiltin = (() => 
{
  var temp = ((() => 
  {
    return sk$FileRange$dtcreate(new sk$String(('<builtin>')), (sk$TextRange$dtnone()));
  })());
  sk$FileRange$dtbuiltin = sk.FileRange$dtbuiltin = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$FileRange$dtnone = sk.FileRange$dtnone = (() => 
{
  var temp = ((() => 
  {
    return sk$FileRange$dtcreate(new sk$String(('')), (sk$TextRange$dtnone()));
  })());
  sk$FileRange$dtnone = sk.FileRange$dtnone = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtarrayType = sk.HhvmInterop$dtarrayType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(6.0, 0.0);
  })());
  sk$HhvmInterop$dtarrayType = sk.HhvmInterop$dtarrayType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtboolType = sk.HhvmInterop$dtboolType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(1.0, 0.0);
  })());
  sk$HhvmInterop$dtboolType = sk.HhvmInterop$dtboolType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtfloatType = sk.HhvmInterop$dtfloatType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(3.0, 0.0);
  })());
  sk$HhvmInterop$dtfloatType = sk.HhvmInterop$dtfloatType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtintType = sk.HhvmInterop$dtintType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(2.0, 0.0);
  })());
  sk$HhvmInterop$dtintType = sk.HhvmInterop$dtintType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtnullType = sk.HhvmInterop$dtnullType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })());
  sk$HhvmInterop$dtnullType = sk.HhvmInterop$dtnullType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtnullValue = sk.HhvmInterop$dtnullValue = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(0.0, 0.0);
  })());
  sk$HhvmInterop$dtnullValue = sk.HhvmInterop$dtnullValue = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtobjectType = sk.HhvmInterop$dtobjectType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(5.0, 0.0);
  })());
  sk$HhvmInterop$dtobjectType = sk.HhvmInterop$dtobjectType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtstringType = sk.HhvmInterop$dtstringType = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(4.0, 0.0);
  })());
  sk$HhvmInterop$dtstringType = sk.HhvmInterop$dtstringType = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$HhvmInterop$dtundefinedValue = sk.HhvmInterop$dtundefinedValue = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(4294967295.0, 4294967295.0);
  })());
  sk$HhvmInterop$dtundefinedValue = sk.HhvmInterop$dtundefinedValue = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$IndentedWriter$dtdefaultIndentSize = sk.IndentedWriter$dtdefaultIndentSize = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(2.0, 0.0);
  })());
  sk$IndentedWriter$dtdefaultIndentSize = sk.IndentedWriter$dtdefaultIndentSize = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Int$dtlow32BitMask = sk.Int$dtlow32BitMask = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(4294967295.0, 0.0);
  })());
  sk$Int$dtlow32BitMask = sk.Int$dtlow32BitMask = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Map$dtdebugEnableBoundsCheck = sk.Map$dtdebugEnableBoundsCheck = (() => 
{
  var temp = ((() => 
  {
    return new sk$Bool((false));
  })());
  sk$Map$dtdebugEnableBoundsCheck = sk.Map$dtdebugEnableBoundsCheck = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Map$dtemptyHash = sk.Map$dtemptyHash = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(1.0, 0.0);
  })());
  sk$Map$dtemptyHash = sk.Map$dtemptyHash = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Map$dtemptyIndex = sk.Map$dtemptyIndex = (() => 
{
  var temp = ((() => 
  {
    return sk$UInt32.max;
  })());
  sk$Map$dtemptyIndex = sk.Map$dtemptyIndex = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Map$dtgenerationSkip = sk.Map$dtgenerationSkip = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(0.0, 1.0);
  })());
  sk$Map$dtgenerationSkip = sk.Map$dtgenerationSkip = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Math$dtPI = sk.Math$dtPI = (() => 
{
  var temp = ((() => 
  {
    return new sk$Float((3.1415926535897931));
  })());
  sk$Math$dtPI = sk.Math$dtPI = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Path$dtcurrentDirectory = sk.Path$dtcurrentDirectory = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('.'));
  })());
  sk$Path$dtcurrentDirectory = sk.Path$dtcurrentDirectory = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Path$dtextSeparator = sk.Path$dtextSeparator = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('.'));
  })());
  sk$Path$dtextSeparator = sk.Path$dtextSeparator = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Path$dtparentDirectory = sk.Path$dtparentDirectory = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('..'));
  })());
  sk$Path$dtparentDirectory = sk.Path$dtparentDirectory = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Path$dtrootDirectory = sk.Path$dtrootDirectory = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('/'));
  })());
  sk$Path$dtrootDirectory = sk.Path$dtrootDirectory = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Path$dtseparator = sk.Path$dtseparator = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('/'));
  })());
  sk$Path$dtseparator = sk.Path$dtseparator = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Persistent$dtbitsPerLevel = sk.Persistent$dtbitsPerLevel = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(5.0, 0.0);
  })());
  sk$Persistent$dtbitsPerLevel = sk.Persistent$dtbitsPerLevel = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Persistent$dtbranchFactor = sk.Persistent$dtbranchFactor = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(32.0, 0.0);
  })());
  sk$Persistent$dtbranchFactor = sk.Persistent$dtbranchFactor = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Persistent$dtdebugEnableValidation = sk.Persistent$dtdebugEnableValidation = (() => 
{
  var temp = ((() => 
  {
    return new sk$Bool((false));
  })());
  sk$Persistent$dtdebugEnableValidation = sk.Persistent$dtdebugEnableValidation = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Position$dtstart = sk.Position$dtstart = (() => 
{
  var temp = ((() => 
  {
    return sk$Position$dtcreate(new sk$Int(0.0, 0.0), new sk$Int(0.0, 0.0));
  })());
  sk$Position$dtstart = sk.Position$dtstart = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$QuickCheck$dtdefaultAttempts = sk.QuickCheck$dtdefaultAttempts = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(100.0, 0.0);
  })());
  sk$QuickCheck$dtdefaultAttempts = sk.QuickCheck$dtdefaultAttempts = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$QuickCheck$dtdefaultMaxSize = sk.QuickCheck$dtdefaultMaxSize = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(30.0, 0.0);
  })());
  sk$QuickCheck$dtdefaultMaxSize = sk.QuickCheck$dtdefaultMaxSize = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$QuickCheck$dtdefaultSeed = sk.QuickCheck$dtdefaultSeed = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(2.0, 0.0);
  })());
  sk$QuickCheck$dtdefaultSeed = sk.QuickCheck$dtdefaultSeed = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Regex$dtregexEscapeChars = sk.Regex$dtregexEscapeChars = (() => 
{
  var temp = ((() => 
  {
    return sk$UnorderedSet.createFromItems(new (sk$Array)([
      $makeChar(40),
      $makeChar(41),
      $makeChar(91),
      $makeChar(93),
      $makeChar(123),
      $makeChar(125),
      $makeChar(63),
      $makeChar(42),
      $makeChar(43),
      $makeChar(124),
      $makeChar(94),
      $makeChar(36),
      $makeChar(92),
      $makeChar(46)
    ]));
  })());
  sk$Regex$dtregexEscapeChars = sk.Regex$dtregexEscapeChars = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtPROJECT_FILENAME = sk.SkipProject$dtPROJECT_FILENAME = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('skip.project.json'));
  })());
  sk$SkipProject$dtPROJECT_FILENAME = sk.SkipProject$dtPROJECT_FILENAME = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtSKIP_FILE_EXTENSION = sk.SkipProject$dtSKIP_FILE_EXTENSION = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('.sk'));
  })());
  sk$SkipProject$dtSKIP_FILE_EXTENSION = sk.SkipProject$dtSKIP_FILE_EXTENSION = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dthelp = sk.SkipProject$dthelp = (() => 
{
  var temp = ((() => 
  {
    var t$ = new sk$String(('\nUsage: skip_depends [--binding <variable>=<value>] [--source-only] <target>\nWhere <target> is one of:\n  - project-dir\n  - program-unit\n  - project-dir:program-unit\nOptions:\n')).toString();
    var t$1 = t$;
    return t$1.trim();
  })());
  sk$SkipProject$dthelp = sk.SkipProject$dthelp = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtloggingEnabled = sk.SkipProject$dtloggingEnabled = (() => 
{
  var temp = ((() => 
  {
    return new sk$Bool((false));
  })());
  sk$SkipProject$dtloggingEnabled = sk.SkipProject$dtloggingEnabled = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtnativePreludeBindings = sk.SkipProject$dtnativePreludeBindings = (() => 
{
  var temp = ((() => 
  {
    return sk$Map.createFromItems(new (sk$Array)([
      new (sk$Tuple2)(new sk$String(('backend')), new sk$String(('native')))
    ]));
  })());
  sk$SkipProject$dtnativePreludeBindings = sk.SkipProject$dtnativePreludeBindings = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtnonnativePreludeBindings = sk.SkipProject$dtnonnativePreludeBindings = (() => 
{
  var temp = ((() => 
  {
    return sk$Map.createFromItems(new (sk$Array)([
      new (sk$Tuple2)(new sk$String(('backend')), new sk$String(('nonnative')))
    ]));
  })());
  sk$SkipProject$dtnonnativePreludeBindings = sk.SkipProject$dtnonnativePreludeBindings = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtschema = sk.SkipProject$dtschema = (() => 
{
  var temp = ((() => 
  {
    var t$ = sk$Vector.createFromItems(new (sk$Array)([]));
    var t$1 = new (sk$Some)(t$);
    var t$2 = new (sk$ArgumentParser$dtStringArrayParam)({
      $default: t$1,
      help: new sk$String(('Project bindings (<variable>=<value>)')),
      name: new sk$String(('binding')),
      required: undefined,
      validate: undefined
    });
    return new (sk$Array)([
      new (sk$ArgumentParser$dtBoolParam)({
        help: new sk$String(('Show help')),
        name: new sk$String(('help')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      new (sk$ArgumentParser$dtBoolParam)({
        help: new sk$String(('Set to only include source files in the output and exclude skip.project.json files from the output')),
        name: new sk$String(('source-only')),
        negatable: new sk$Bool((false)),
        value: undefined
      }),
      t$2
    ]);
  })());
  sk$SkipProject$dtschema = sk.SkipProject$dtschema = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dttargetSeparator = sk.SkipProject$dttargetSeparator = (() => 
{
  var temp = ((() => 
  {
    return new sk$String((':'));
  })());
  sk$SkipProject$dttargetSeparator = sk.SkipProject$dttargetSeparator = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProject$dtunixShellGlobbingExcludes = sk.SkipProject$dtunixShellGlobbingExcludes = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('^\\.[^.]'));
  })());
  sk$SkipProject$dtunixShellGlobbingExcludes = sk.SkipProject$dtunixShellGlobbingExcludes = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$SkipProjectConfig$dtCURRENT_VERSION = sk.SkipProjectConfig$dtCURRENT_VERSION = (() => 
{
  var temp = ((() => 
  {
    return new sk$String(('1.0'));
  })());
  sk$SkipProjectConfig$dtCURRENT_VERSION = sk.SkipProjectConfig$dtCURRENT_VERSION = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$TextRange$dtnone = sk.TextRange$dtnone = (() => 
{
  var temp = ((() => 
  {
    return sk$TextRange$dtempty((sk$Position$dtstart()));
  })());
  sk$TextRange$dtnone = sk.TextRange$dtnone = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Vector$dtdebugEnableBoundsCheck = sk.Vector$dtdebugEnableBoundsCheck = (() => 
{
  var temp = ((() => 
  {
    return new sk$Bool((false));
  })());
  sk$Vector$dtdebugEnableBoundsCheck = sk.Vector$dtdebugEnableBoundsCheck = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$Vector$dtgenerationSkip = sk.Vector$dtgenerationSkip = (() => 
{
  var temp = ((() => 
  {
    return new sk$Int(0.0, 1.0);
  })());
  sk$Vector$dtgenerationSkip = sk.Vector$dtgenerationSkip = (() => 
  {
    return temp;
  });
  return temp;
});

var sk$print_stack_on_invariant_violation = sk.print_stack_on_invariant_violation = (() => 
{
  var temp = ((() => 
  {
    return new sk$Bool((false));
  })());
  sk$print_stack_on_invariant_violation = sk.print_stack_on_invariant_violation = (() => 
  {
    return temp;
  });
  return temp;
});

var singleton$Base = new (sk$Base)();

var singleton$Bencher$dtBenchmarkStatsMetaClass = new (sk$Bencher$dtBenchmarkStatsMetaClass)();

var singleton$BoolMetaClass = new (sk$BoolMetaClass)();

var singleton$Concrete = new (sk$Concrete)();

var singleton$ContainerChanged = new (sk$ContainerChanged)();

var singleton$DivisionByZeroException = new (sk$DivisionByZeroException)();

var singleton$Doc$dtBreak = new (sk$Doc$dtBreak)();

var singleton$Doc$dtEmpty = new (sk$Doc$dtEmpty)();

var singleton$Doc$dtFlat = new (sk$Doc$dtFlat)();

var singleton$Doc$dtHardLine = new (sk$Doc$dtHardLine)();

var singleton$Doc$dtLine = new (sk$Doc$dtLine)();

var singleton$Doc$dtLineSuffixBoundary = new (sk$Doc$dtLineSuffixBoundary)();

var singleton$Doc$dtSoftLine = new (sk$Doc$dtSoftLine)();

var singleton$Duplicate = new (sk$Duplicate)();

var singleton$EQ = new (sk$EQ)();

var singleton$FloatMetaClass = new (sk$FloatMetaClass)();

var singleton$GT = new (sk$GT)();

var singleton$Glob$dtGlobStateCharClassEscape = new (sk$Glob$dtGlobStateCharClassEscape)();

var singleton$Glob$dtGlobStateCharClassFirst = new (sk$Glob$dtGlobStateCharClassFirst)();

var singleton$Glob$dtGlobStateCharClassRest = new (sk$Glob$dtGlobStateCharClassRest)();

var singleton$Glob$dtGlobStateEscape = new (sk$Glob$dtGlobStateEscape)();

var singleton$Glob$dtGlobStateNormal = new (sk$Glob$dtGlobStateNormal)();

var singleton$HH$dtNonexhuastivePlaceholderObject = new (sk$HH$dtNonexhuastivePlaceholderObject)();

var singleton$HH$dtNonexhuastivePlaceholderResource = new (sk$HH$dtNonexhuastivePlaceholderResource)();

var singleton$HH$dtNull = new (sk$HH$dtNull)();

var singleton$HhvmInterop$dtHHArray = new (sk$HhvmInterop$dtHHArray)();

var singleton$HhvmInterop$dtObject = new (sk$HhvmInterop$dtObject)();

var singleton$HhvmInterop$dtTupleHelper = new (sk$HhvmInterop$dtTupleHelper)();

var singleton$IntMetaClass = new (sk$IntMetaClass)();

var singleton$Invalid_utf8_char = new (sk$Invalid_utf8_char)();

var singleton$Iterator$dtGenerator = new (sk$Iterator$dtGenerator)();

var singleton$JSON$dtFormat = new (sk$JSON$dtFormat)();

var singleton$JSON$dtJSONSetNonObjectError = new (sk$JSON$dtJSONSetNonObjectError)();

var singleton$JSON$dtNull = new (sk$JSON$dtNull)();

var singleton$KeyNotFound = new (sk$KeyNotFound)();

var singleton$LT = new (sk$LT)();

var singleton$List$dtNil = new (sk$List$dtNil)();

var singleton$Map$dtHH_darray2 = new (sk$Map$dtHH_darray2)();

var singleton$None = new (sk$None)();

var singleton$Null = new (sk$Null)();

var singleton$OutOfBounds = new (sk$OutOfBounds)();

var singleton$QuickCheck$dtBoolGenerator = new (sk$QuickCheck$dtBoolGenerator)();

var singleton$QuickCheck$dtCharGenerator = new (sk$QuickCheck$dtCharGenerator)();

var singleton$QuickCheck$dtEmptyLazy = new (sk$QuickCheck$dtEmptyLazy)();

var singleton$QuickCheck$dtFloatGenerator = new (sk$QuickCheck$dtFloatGenerator)();

var singleton$QuickCheck$dtIntGenerator = new (sk$QuickCheck$dtIntGenerator)();

var singleton$QuickCheck$dtOrderGenerator = new (sk$QuickCheck$dtOrderGenerator)();

var singleton$QuickCheck$dtStringGenerator = new (sk$QuickCheck$dtStringGenerator)();

var singleton$QuickCheck$dtTestSuccess = new (sk$QuickCheck$dtTestSuccess)();

var singleton$Runtime$dtHhvmShapeHandle = new (sk$Runtime$dtHhvmShapeHandle)();

var singleton$Serialization$dtCollectionNotDoneError = new (sk$Serialization$dtCollectionNotDoneError)();

var singleton$Serialization$dtRecordNoValuesLeftError = new (sk$Serialization$dtRecordNoValuesLeftError)();

var singleton$Serialization$dtTestRecordMetaClass = new (sk$Serialization$dtTestRecordMetaClass)();

var singleton$Serialization$dtTupleSizeOutOfBoundsError = new (sk$Serialization$dtTupleSizeOutOfBoundsError)();

var singleton$Serialization$dtUnnamedPositionalParameterError = new (sk$Serialization$dtUnnamedPositionalParameterError)();

var singleton$Serialization$dtUnrecognizedDefaultValueError = new (sk$Serialization$dtUnrecognizedDefaultValueError)();

var singleton$Serialization$dtVariantMissingError = new (sk$Serialization$dtVariantMissingError)();

var singleton$Set$dtEmptyValue = new (sk$Set$dtEmptyValue)();

var singleton$Set$dtHH_keyset2 = new (sk$Set$dtHH_keyset2)();

var singleton$SkipProjectConfig$dtLibrary = new (sk$SkipProjectConfig$dtLibrary)();

var singleton$SkipProjectConfig$dtParameterValueMetaClass = new (sk$SkipProjectConfig$dtParameterValueMetaClass)();

var singleton$SkipProjectConfig$dtProgram = new (sk$SkipProjectConfig$dtProgram)();

var singleton$SkipProjectConfig$dtProgramUnitKindMetaClass = new (sk$SkipProjectConfig$dtProgramUnitKindMetaClass)();

var singleton$SkipProjectConfig$dtProgramUnitMetaClass = new (sk$SkipProjectConfig$dtProgramUnitMetaClass)();

var singleton$SkipProjectConfig$dtProgramUnitReferenceMetaClass = new (sk$SkipProjectConfig$dtProgramUnitReferenceMetaClass)();

var singleton$SkipProjectConfig$dtProjectMetaClass = new (sk$SkipProjectConfig$dtProjectMetaClass)();

var singleton$SkipProjectConfig$dtVariableMetaClass = new (sk$SkipProjectConfig$dtVariableMetaClass)();

var singleton$SortedMap$dtNil = new (sk$SortedMap$dtNil)();

var singleton$String$dtAscii = new (sk$String$dtAscii)();

var singleton$String$dtCp437 = new (sk$String$dtCp437)();

var singleton$String$dtIso8859_1 = new (sk$String$dtIso8859_1)();

var singleton$String$dtUtf16BE = new (sk$String$dtUtf16BE)();

var singleton$String$dtUtf16LE = new (sk$String$dtUtf16LE)();

var singleton$String$dtUtf8 = new (sk$String$dtUtf8)();

var singleton$StringMetaClass = new (sk$StringMetaClass)();

var singleton$Subprocess$dtEmptyArgumentsError = new (sk$Subprocess$dtEmptyArgumentsError)();

var singleton$TokenKind$dtBEGINNING_OF_FILE = new (sk$TokenKind$dtBEGINNING_OF_FILE)();

var singleton$TokenKind$dtEND_OF_FILE = new (sk$TokenKind$dtEND_OF_FILE)();

var singleton$TokenKind$dtERROR = new (sk$TokenKind$dtERROR)();

var singleton$UnorderedSet$dtEmptyValue = new (sk$UnorderedSet$dtEmptyValue)();

var singleton$Vector$dtHH_varray2 = new (sk$Vector$dtHH_varray2)();

skip.copyNativeFunctions(sk);

var $makeChar = sk.__.makeChar;

var $void = sk.__.$void;

sk.__.singleton$None = singleton$None;

sk$Debug$dtgetLeakCounter = sk.Debug$dtgetLeakCounter;

sk$Debug$dtgetMemoryFrameUsage = sk.Debug$dtgetMemoryFrameUsage;

sk$Debug$dtprintBoxedObjectSize = sk.Debug$dtprintBoxedObjectSize;

sk$Debug$dtprintMemoryStatistics = sk.Debug$dtprintMemoryStatistics;

sk$FileSystem$dtappendTextFile = sk.FileSystem$dtappendTextFile;

sk$FileSystem$dtensure_directory = sk.FileSystem$dtensure_directory;

sk$FileSystem$dtexists = sk.FileSystem$dtexists;

sk$FileSystem$dtis_directory = sk.FileSystem$dtis_directory;

sk$FileSystem$dtreaddir = sk.FileSystem$dtreaddir;

sk$HhvmInterop$dtconvertToHhvmHandle = sk.HhvmInterop$dtconvertToHhvmHandle;

sk$HhvmInterop$dtconvertToHhvmShapeHandle = sk.HhvmInterop$dtconvertToHhvmShapeHandle;

sk$HhvmInterop$dtcopyFromHhvm = sk.HhvmInterop$dtcopyFromHhvm;

sk$HhvmInterop$dtcopyToHhvm = sk.HhvmInterop$dtcopyToHhvm;

sk$HhvmInterop$dtcreateFromProxyPointer = sk.HhvmInterop$dtcreateFromProxyPointer;

sk$HhvmInterop$dtcreateFromProxyPointerAndType = sk.HhvmInterop$dtcreateFromProxyPointerAndType;

sk$HhvmInterop$dtfetchProxyPointer = sk.HhvmInterop$dtfetchProxyPointer;

sk$HhvmInterop$dthhvmVariantFactory = sk.HhvmInterop$dthhvmVariantFactory;

sk$HhvmInterop$dthhvmVariantNullFactory = sk.HhvmInterop$dthhvmVariantNullFactory;

sk$HhvmInterop$dtinnerCreateArrayFromFixedVector = sk.HhvmInterop$dtinnerCreateArrayFromFixedVector;

sk$HhvmInterop$dtinternalBitcastToRetValue = sk.HhvmInterop$dtinternalBitcastToRetValue;

sk$HhvmInterop$dtinternalCreateFrozenFromItems = sk.HhvmInterop$dtinternalCreateFrozenFromItems;

sk$HhvmInterop$dtinternalCreateFrozenFromIterator = sk.HhvmInterop$dtinternalCreateFrozenFromIterator;

sk$HhvmInterop$dtinternalCreateHhvmProxyClass = sk.HhvmInterop$dtinternalCreateHhvmProxyClass;

sk$HhvmInterop$dtinternalCreateMutableFromItems = sk.HhvmInterop$dtinternalCreateMutableFromItems;

sk$HhvmInterop$dtinternalCreateMutableFromIterator = sk.HhvmInterop$dtinternalCreateMutableFromIterator;

sk$HhvmInterop$dtpropertyGetHelper = sk.HhvmInterop$dtpropertyGetHelper;

sk$HhvmInterop$dtpropertySetHelper = sk.HhvmInterop$dtpropertySetHelper;

sk$HhvmInterop_ObjectCons$dtcreate = sk.HhvmInterop_ObjectCons$dtcreate;

sk$HhvmInterop_ObjectCons$dtfinish = sk.HhvmInterop_ObjectCons$dtfinish;

sk$HhvmInterop_ObjectCons$dtsetFieldMixed = sk.HhvmInterop_ObjectCons$dtsetFieldMixed;

sk$HhvmInterop_PropertyGetHelper$dtinternalBitcastFromInt = sk.HhvmInterop_PropertyGetHelper$dtinternalBitcastFromInt;

sk$HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateFromRetValue;

sk$HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue = sk.HhvmInterop_PropertyGetHelper$dtinternalCreateNonNullableFromRetValue;

sk$HhvmInterop_PropertySetHelper$dtinternalSetProperty = sk.HhvmInterop_PropertySetHelper$dtinternalSetProperty;

sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull = sk.HhvmInterop_PropertySetHelper$dtinternalSetPropertyToNull;

sk$HhvmInterop_PropertySetHelper$dtinternalSetPropertyToUndefined = sk.HhvmInterop_PropertySetHelper$dtinternalSetPropertyToUndefined;

sk$HhvmInterop_ShapeCons$dtcreate = sk.HhvmInterop_ShapeCons$dtcreate;

sk$HhvmInterop_ShapeCons$dtfinish = sk.HhvmInterop_ShapeCons$dtfinish;

sk$HhvmInterop_ShapeCons$dtsetFieldMixed = sk.HhvmInterop_ShapeCons$dtsetFieldMixed;

sk$Math$dtacos = sk.Math$dtacos;

sk$Math$dtasin = sk.Math$dtasin;

sk$Math$dtceil = sk.Math$dtceil;

sk$Math$dtcos = sk.Math$dtcos;

sk$Math$dtfloor = sk.Math$dtfloor;

sk$Math$dtpow = sk.Math$dtpow;

sk$Math$dtround = sk.Math$dtround;

sk$Math$dtsin = sk.Math$dtsin;

sk$Math$dtsqrt = sk.Math$dtsqrt;

sk$Runtime$dtinspectHandle = sk.Runtime$dtinspectHandle;

sk$Subprocess$dtspawnHelper = sk.Subprocess$dtspawnHelper;

sk$Unsafe$dtarray_get = sk.Unsafe$dtarray_get;

sk$Unsafe$dtarray_make = sk.Unsafe$dtarray_make;

sk$Unsafe$dtarray_set = sk.Unsafe$dtarray_set;

sk$$arguments = sk.$arguments;

sk$awaitSynchronously = sk.awaitSynchronously;

sk$debug_break = sk.debug_break;

sk$flush_stdout = sk.flush_stdout;

sk$getBuildVersion = sk.getBuildVersion;

sk$getcwd = sk.getcwd;

sk$inspect = sk.inspect;

sk$internalExit = sk.internalExit;

sk$nowNanos = sk.nowNanos;

sk$open_file = sk.open_file;

sk$print_error = sk.print_error;

sk$print_last_exception_stack_trace_and_exit = sk.print_last_exception_stack_trace_and_exit;

sk$print_raw = sk.print_raw;

sk$print_stack_trace = sk.print_stack_trace;

sk$profile_report = sk.profile_report;

sk$profile_start = sk.profile_start;

sk$profile_stop = sk.profile_stop;

sk$read_line = sk.read_line;

sk$read_stdin = sk.read_stdin;

sk$read_stdin_bytes = sk.read_stdin_bytes;

sk$string_to_file = sk.string_to_file;

module.exports = sk;


//# sourceMappingURL=skip_depends.js.map
