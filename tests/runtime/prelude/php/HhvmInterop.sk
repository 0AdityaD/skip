/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This file contains various native stubs needed for interoperating with HHVM

// -- Pointers --

module Runtime;
// Dummy class indicating an opaque pointer analogous to "void*"
// A real (untyped) skip object that the GC understands
native value class GCPointer
// A pointer to random non-GC'd memory
native value class NonGCPointer {
  @intrinsic
  static native fun zero(): NonGCPointer;
}

@hhvm_import("skip_hhvm_handle_inspect")
private native fun inspectHandle(Runtime.HhvmHandle): String;

// Dummy class indicating an opaque handle to a pointer in HHVM
native value class HhvmHandle {
  fun inspect(): Inspect {
    InspectLiteral(inspectHandle(this))
  }
}

// Dummy class used internally to indicate that an HhvmHandle represents a Shape
// rather than an Object.
@hhvm_shape
value class HhvmShapeHandle private () {}

module end;

// -- HHVM Collections --

/**
 * This section describes the collections used for interop purposes with HHVM.
 *
 * The naming convention is: <SkipName>.HH_<HackName>.
 * For example OrderedMap.HH_darray, Vector.HH_vec...
 *
 * From a semantic point of view, OrderedMap.HH_darray has the same API and
 * behavior as a pure-Skip OrderedMap. The only difference is that the physical
 * representation of the values is a darray.
 *
 * The idea is that you start migrating things over using those as a way to
 * interop and once you converted the transitive closure and don't need those
 * collections to be used anymore, you can drop the suffix and have the perf of
 * pure-Skip collections.
 *
 * The term 'interop-portable' below refers to types that can be transmitted
 * between HHVM and Skip - primitive types (Int, Float, Bool, String, HH.Mixed,
 * etc) and user types marked as portable (@hhvm_import, @hhvm_copy, etc)
 */

// TODO: once @hhvm_import works properly, those should all be proxy and no
// longer type aliases.

module Vector;

@hhvm_array
mutable class HH_varray2<+T> private {} extends IndexedSequence<T> {
  readonly fun get(index: Int): T {
    HhvmInterop_PropertyGetHelper.internalCreateFromRetValue(
      this.internalGet(index),
    )
  }

  @hhvm_extern("Vector.HH_varray::get")
  private readonly native fun internalGet(index: Int): (Int, Int);

  readonly fun chill(): this {
    // We need to provide chill() so that functions which take a readonly array
    // can return a frozen one.  We know that the underlying array is actually
    // immutable so we can just construct a new wrapper around it.
    HhvmInterop.createFromProxyPointer<HH_varray2<T>>(
      HhvmInterop.fetchProxyPointer(this),
    )
  }

  @hhvm_extern("Vector.HH_varray::size")
  readonly native fun size(): Int;

  @always_inline
  static fun createFromItems(items: readonly Sequence<T>): this {
    items match {
    | v @ Array _ -> static::fromFixedVector(v, v.size())
    | v @ Vector _ -> static::fromFixedVector(v.toArray(), v.size())
    | _ -> static::fromFixedVector(items.collect(Array), items.size())
    }
  }

  private static fun fromFixedVector(
    v: readonly Array<T>,
    size: Int = -1,
  ): this {
    if (size == -1) {
      !size = v.size();
    };
    handle = HhvmInterop.createArrayFromFixedVector<T>("HH_varray", v, size);
    HhvmInterop.createFromProxyPointer<HH_varray2<T>>(handle)
  }

  readonly fun toMutableVector(capacity: Int = 0): mutable Vector<T> {
    // TODO: once this is a perf issue we can make it much faster by adding an
    // intrinsic that reads directly out of the HHVM array.
    sz = this.size();
    vec = Vector::mfillBy(sz, this.get);
    vec.ensureCapacity(capacity);
    vec
  }
}

module end;

module Map;

// TODO: K should be constrained by Arraykeyish
@hhvm_array
mutable class HH_darray2<+K: Hashable & Equality, +V> private {} extends
  KeyedSequence<K, V>,
{
  static fun createFromIterator<I: mutable Iterator<(K, V)>>(items: I): this {
    res = static::internalCreate();
    items.each(i -> {
      static::internalSet(res, i.i0, i.i1);
    });
    unsafe_chill_trust_me(res)
  }

  @hhvm_extern("Map.HH_darray::internalCreate")
  private static native fun internalCreate(): mutable this;

  @hhvm_extern("Map.HH_darray::internalSet")
  private static native fun internalSetHelper(
    array: mutable this,
    k: (Int, Int),
    v: (Int, Int),
  ): void;

  private static fun internalSet(array: mutable this, k: K, v: V): void {
    static::internalSetHelper(
      array,
      HhvmInterop.internalBitcastToRetValue(k),
      HhvmInterop.internalBitcastToRetValue(v),
    );
  }

  readonly fun chill(): this {
    // We need to provide chill() so that functions which take a readonly array
    // can return a frozen one.  We know that the underlying array is actually
    // immutable so we can just construct a new wrapper around it.
    HhvmInterop.createFromProxyPointer<HH_darray2<K, V>>(
      HhvmInterop.fetchProxyPointer(this),
    )
  }

  readonly fun items(): mutable Iterator<(K, V)> {
    DArrayIterator<K, V>::make(this)
  }

  @hhvm_extern("Map.HH_darray::size")
  readonly native fun size(): Int;

  @hhvm_extern("Map.HH_darray::maybeGetItem")
  readonly native fun maybeGetItem<K2: Hashable & Equality>[K: K2](
    k: K2,
  ): ?(K, V);
}

private mutable class DArrayIterator<+K: Hashable & Equality, +V> private (
  private array: readonly HH_darray2<K, V>,
  private mutable pos: Int,
  private mutable end: Int,
) extends Iterator<(K, V)> {
  static fun make(array: readonly HH_darray2<K, V>): mutable this {
    mutable DArrayIterator(
      array,
      static::iterBegin(array),
      static::iterEnd(array),
    )
  }

  mutable fun next(): ?(K, V) {
    if (this.pos == this.end) {
      None()
    } else {
      k = static::iterGetKey(this.array, this.pos);
      v = static::iterGetValue(this.array, this.pos);
      this.!pos = static::iterAdvance(this.array, this.pos);
      Some((k, v))
    }
  }

  @hhvm_extern("Map.HH_darray::iterBegin")
  static native fun iterBegin(array: readonly HH_darray2<K, V>): Int;

  @hhvm_extern("Map.HH_darray::iterEnd")
  static native fun iterEnd(array: readonly HH_darray2<K, V>): Int;

  @hhvm_extern("Map.HH_darray::iterAdvance")
  static native fun iterAdvance(array: readonly HH_darray2<K, V>, i: Int): Int;

  @hhvm_extern("Map.HH_darray::iterGetKey")
  static private native fun internalIterGetKey(
    array: readonly HH_darray2<K, V>,
    i: Int,
  ): (Int, Int);

  static fun iterGetKey(array: readonly HH_darray2<K, V>, i: Int): K {
    HhvmInterop_PropertyGetHelper.internalCreateFromRetValue(
      static::internalIterGetKey(array, i),
    )
  }

  @hhvm_extern("Map.HH_darray::iterGetValue")
  static private native fun internalIterGetValue(
    array: readonly HH_darray2<K, V>,
    i: Int,
  ): (Int, Int);

  static fun iterGetValue(array: readonly HH_darray2<K, V>, i: Int): V {
    HhvmInterop_PropertyGetHelper.internalCreateFromRetValue(
      static::internalIterGetValue(array, i),
    )
  }
}

module end;

module Set;

@hhvm_array
mutable class HH_keyset2<+T: Equality & Hashable> private {} extends
  UniqueSequence<T>,
{
  readonly fun values(): mutable Iterator<T> {
    KeysetIterator<T>::make(this)
  }

  static fun createFromIterator<I: mutable Iterator<T>>(items: I): this {
    res = static::internalCreate();
    items.each(i -> static::internalSet(res, i));
    res.chill()
  }

  @hhvm_extern("Set.HH_keyset::internalCreate")
  private static native fun internalCreate(): mutable this;

  @hhvm_extern("Set.HH_keyset::internalSet")
  private static native fun internalSetHelper(
    array: mutable this,
    k: (Int, Int),
  ): void;

  private static fun internalSet(array: mutable this, k: T): void {
    static::internalSetHelper(array, HhvmInterop.internalBitcastToRetValue(k));
  }

  readonly fun chill(): this {
    // We need to provide chill() so that functions which take a readonly array
    // can return a frozen one.  We know that the underlying array is actually
    // immutable so we can just construct a new wrapper around it.
    HhvmInterop.createFromProxyPointer<HH_keyset2<T>>(
      HhvmInterop.fetchProxyPointer(this),
    )
  }

  // ----------

  // Create a mutable container with the given capacity.
  static fun mcreate(_capacity: Int = 0): mutable this {
    invariant_violation("unimplemented")
  }

  // Create a frozen container from a sequence of items.
  static fun createFromItems<I: readonly Sequence<T>>(_items: I): this {
    invariant_violation("unimplemented")
  }

  // Create a mutable container from a sequence of items.
  static fun mcreateFromItems<I: readonly Sequence<T>>(
    _items: I,
  ): mutable this {
    invariant_violation("unimplemented")
  }

  readonly fun containsAll<S: readonly Sequence<T>>(items: S): Bool {
    items.all(this.contains)
  }

  readonly fun containsAny<S: readonly Sequence<T>>(items: S): Bool {
    items.any(this.contains)
  }

  // Create a mutable, shallow copy of the contents of this container.
  // The capacity of the returned container is only guaranteed to be
  // greater than or equal to this' size. To ensure space for more items,
  // pass a non-zero reserveCapacity.
  readonly fun clone(_reserveCapacity: Int = 0): mutable this {
    invariant_violation("unimplemented")
  }

  // # Sizing
  // Methods to query or change the size or capacity of a container.

  // Returns the total number of items contained by this container.
  readonly fun size(): Int {
    invariant_violation("unimplemented")
  }

  // Grows the container's internal storage as necessary to ensure that the
  // container has capacity for at least the specified number of items: the
  // container may grow more than requested.
  mutable fun ensureCapacity(_capacity: Int): void {
    invariant_violation("unimplemented")
  }

  // Remove all items, setting the container's size to 0 without changing its
  // capacity.
  mutable fun clear(): void {
    invariant_violation("unimplemented")
  }

  // # Accessing Items

  readonly fun contains<T2: Hashable & Equality>[T: T2](_k: T2): Bool {
    invariant_violation("unimplemented")
  }

  readonly fun get<T2: Hashable & Equality>[T: T2](_k: T2): T {
    invariant_violation("unimplemented")
  }

  readonly fun maybeGet<T2: Hashable & Equality>[T: T2](_k: T2): ?T {
    invariant_violation("unimplemented")
  }

  // # Modifying Items

  // Adds the item to this sequence if is not present, otherwise throws.
  mutable fun add(_v: T): void {
    invariant_violation("unimplemented")
  }

  // Removes the item from this sequence if present, otherwise throws.
  mutable fun remove(_v: T): void {
    invariant_violation("unimplemented")
  }

  // Removes the item from this sequence:
  // - If the item is present removes it and return true
  // - Otherwise do nothing and returns false
  mutable fun maybeRemove(_v: T): Bool {
    invariant_violation("unimplemented")
  }

  // Adds the item to this sequence if is not present, otherwise has no effect.
  mutable fun insert(_v: T): void {
    invariant_violation("unimplemented")
  }

  // Inserts the item into this sequence:
  // - If not already present adds it and returns true
  // - If already present does nothing and returns false
  mutable fun maybeInsert(_v: T): Bool {
    invariant_violation("unimplemented")
  }

  // # Set Arithmetic

  // Returns a new sequence containing all the items of this sequence and the second sequence.
  readonly fun union<U: Hashable & Equality, S: readonly Sequence<U>>[T: U](
    _items: S,
  ): UniqueSequence<U> {
    invariant_violation("unimplemented")
  }

  // Returns a new sequence containing the items of this sequence that do not appear in
  // the second sequence.
  readonly fun difference<U: Hashable & Equality, S: readonly Sequence<U>>[
    T: U,
  ](
    _items: S,
  ): UniqueSequence<U> {
    invariant_violation("unimplemented")
  }

  // Return a new sequence containing the items of this sequence that appear in the
  // second sequence.
  readonly fun intersection<U: Hashable & Equality, S: readonly Sequence<U>>[
    T: U,
  ](
    _items: S,
  ): UniqueSequence<U> {
    invariant_violation("unimplemented")
  }
}

private mutable class KeysetIterator<+T: Equality & Hashable> private (
  private array: readonly HH_keyset2<T>,
  private mutable pos: Int,
  private mutable end: Int,
) extends Iterator<T> {
  static fun make(array: readonly HH_keyset2<T>): mutable this {
    mutable KeysetIterator(
      array,
      static::iterBegin(array),
      static::iterEnd(array),
    )
  }

  mutable fun next(): ?T {
    if (this.pos == this.end) {
      None()
    } else {
      k = static::iterGetKey(this.array, this.pos);
      this.!pos = static::iterAdvance(this.array, this.pos);
      Some(k)
    }
  }

  @hhvm_extern("Map.HH_darray::iterBegin")
  static native fun iterBegin(array: readonly HH_keyset2<T>): Int;

  @hhvm_extern("Map.HH_darray::iterEnd")
  static native fun iterEnd(array: readonly HH_keyset2<T>): Int;

  @hhvm_extern("Map.HH_darray::iterAdvance")
  static native fun iterAdvance(array: readonly HH_keyset2<T>, i: Int): Int;

  @hhvm_extern("Map.HH_darray::iterGetKey")
  static private native fun internalIterGetKey(
    array: readonly HH_keyset2<T>,
    i: Int,
  ): (Int, Int);

  static fun iterGetKey(array: readonly HH_keyset2<T>, i: Int): T {
    HhvmInterop_PropertyGetHelper.internalCreateFromRetValue(
      static::internalIterGetKey(array, i),
    )
  }

  @hhvm_extern("Map.HH_darray::iterGetValue")
  static private native fun internalIterGetValue(
    array: readonly HH_keyset2<T>,
    i: Int,
  ): (Int, Int);
}

module end;

module HhvmInterop;

const nullType: Int = 0;
const boolType: Int = 1;
const intType: Int = 2;
const floatType: Int = 3;
const stringType: Int = 4;
const objectType: Int = 5;
const arrayType: Int = 6;

// For a type of nullType the value indicates either null or undefined
const nullValue: Int = 0;
const undefinedValue: Int = -1;

// -- @hhvm_import --

// Get the named field from the object.  Values must be interop-portable.
@intrinsic
@may_alloc // only true for some U
native fun propertyGetHelper<T, U>(obj: T, field: String): U;

// Set the named field on the object to the given value.  Values must be
// interop-portable.
@intrinsic
native fun propertySetHelper<T, U>(obj: T, field: String, value: U): void;

@intrinsic
@may_alloc
native fun copyFromHhvm<T>(handle: readonly Runtime.HhvmHandle): T;

@intrinsic
@may_alloc // only true for some T
native fun copyToHhvm<T>(o: T): readonly Runtime.HhvmHandle;

fun copyOptionToHhvm<T>(option: ?T): ?readonly Runtime.HhvmHandle {
  option.map(copyToHhvm)
}

// The compiler converts calls to this to calls to one of the
// SKIP_HhvmVariant_from* calls.
@intrinsic
private native fun hhvmVariantFactory<T: nonNullable>(
  variant: Runtime.NonGCPointer,
  value: T,
): void;

@cpp_runtime("SKIP_HhvmVariant_fromNull")
private native fun hhvmVariantNullFactory(variant: Runtime.NonGCPointer): void;

private fun hhvmVariantFactoryFromNullable<T: nonNullable>(
  variant: Runtime.NonGCPointer,
  value: Nullable<T>,
): void {
  value match {
  | Box(v) -> hhvmVariantFactory<T>(variant, v)
  | Null _ -> hhvmVariantNullFactory(variant)
  }
}

// Returns the proxyPointer for a @hhvm_import class.
@intrinsic
native fun fetchProxyPointer<T>(obj: T): mutable Runtime.HhvmHandle;

// Creates a @hhvm_import class given its proxyPointer.
@intrinsic
@may_alloc
native fun createFromProxyPointer<T>(handle: readonly Runtime.HhvmHandle): T;

// Creates a @hhvm_import class from its HHVM name
fun createHhvmProxyClass<T>(name: String): T {
  createFromProxyPointer(internalCreateHhvmProxyClass(name))
}

@cpp_runtime("SKIP_HHVM_Object_create")
private native fun internalCreateHhvmProxyClass(
  name: String,
): Runtime.HhvmHandle;

@intrinsic
@may_alloc
native fun createFromProxyPointerAndType<T>(
  handle: mutable Runtime.HhvmHandle,
  hhvmType: String,
): T;

@intrinsic
private native fun internalBitcastToRetValue<T>(v: T): (Int, Int);

private fun internalBitcastLambdaToRetValue(value: HH.Lambda): (Int, Int) {
  value match {
  | HH.LambdaString(s) -> internalBitcastToRetValue(s)
  | HH.LambdaObject(o) -> internalBitcastToRetValue(o)
  }
}

// T::createFromIterator(src)
// T::mcreateFromIterator(src)
@intrinsic
private native fun internalCreateFrozenFromIterator<T, I>(i: I): T;
@intrinsic
private native fun internalCreateMutableFromIterator<T, I>(i: I): T;

// T::createFromItems(src)
// T::mcreateFromItems(src)
@intrinsic
private native fun internalCreateFrozenFromItems<T, I>(i: I): T;
@intrinsic
private native fun internalCreateMutableFromItems<T, I>(i: I): T;

private fun internalCreateVarrayFromItems<T, I: readonly Sequence<T>>(
  items: I,
): Vector.HH_varray2<T> {
  Vector.HH_varray2::createFromItems(items)
}

private fun internalMapGetItems<K: Hashable & Equality, V>(
  src: KeyedSequence<K, V>,
): mutable Iterator<(K, V)> {
  src.items()
}

private fun internalSetGetValues<K: Hashable & Equality>(
  src: UniqueSequence<K>,
): mutable Iterator<K> {
  src.values()
}

@cpp_export("SKIP_createTupleFromMixed")
fun internalCreateRetValueFromMixed(m: HH.Mixed): (Int, Int) {
  m match {
  | HH.Null() -> (0, nullType)
  | HH.Bool(v) -> (if (v) 1 else 0, boolType)
  | HH.Int(v) -> (v, intType)
  | HH.Float(v) -> internalBitcastToRetValue(v)
  | HH.String(v) -> internalBitcastToRetValue(v)
  | HH.Darray _ -> invariant_violation("Cannot convert HH.Darray to HHVM")
  | HH.Varray _ -> invariant_violation("Cannot convert HH.Varray to HHVM")
  | HH.Vec _ -> invariant_violation("Cannot convert HH.Vec to HHVM")
  | HH.Dict _ -> invariant_violation("Cannot convert HH.Dict to HHVM")
  | HH.Keyset _ -> invariant_violation("Cannot convert HH.Keyset to HHVM")
  | HH.Object _ -> invariant_violation("Cannot convert HH.Object to HHVM")
  | HH.Resource _ -> invariant_violation("Cannot convert HH.Resource to HHVM")
  }
}

private fun internalCreateParamTupleFromOption<T>(
  option: ?T,
): (Int, Unsafe.RawStorage<T>) {
  option match {
  | Some(value) -> (1, Unsafe.RawStorage::make(value))
  | None() -> (0, Unsafe.RawStorage::uninitialized())
  }
}

// Turn a Nullable<T> into a SVMI (isNull: Int, value: T) pair
private fun internalCreateParamTupleFromNullableT<T: nonNullable>(
  nullable: Nullable<T>,
): (Int, Unsafe.RawStorage<T>) {
  nullable match {
  | Box(value) -> (1, Unsafe.RawStorage::make(value))
  | Null _ -> (0, Unsafe.RawStorage::uninitialized())
  }
}

// Turn a Nullable<@hhvm_import|@hhvm_array> into a SVMI
// (isNull: Int, value: HhvmHandle) pair
private fun internalCreateParamTupleFromNullableObject<T: nonNullable>(
  nullable: Nullable<T>,
): Unsafe.RawStorage<mutable Runtime.HhvmHandle> {
  nullable match {
  | Box(value) -> Unsafe.RawStorage::make(fetchProxyPointer(value))
  | Null _ -> Unsafe.RawStorage::uninitialized()
  }
}

private fun internalCreateParamTupleFromOptionObject<T>(
  option: ?T,
): Unsafe.RawStorage<mutable Runtime.HhvmHandle> {
  option match {
  | Some(value) -> Unsafe.RawStorage::make(fetchProxyPointer(value))
  | None() -> Unsafe.RawStorage::uninitialized()
  }
}

// Turn a Nullable<String> into it's proper SVMI form (null or a Skip string)
private fun internalCreateParamTupleFromNullableString(
  nullable: Nullable<String>,
): Unsafe.RawStorage<String> {
  nullable match {
  | Box(value) -> Unsafe.RawStorage::make(value)
  | Null _ -> Unsafe.RawStorage::uninitialized()
  }
}

private fun internalCreateParamTupleFromOptionString(
  option: ?String,
): Unsafe.RawStorage<String> {
  option match {
  | Some(value) -> Unsafe.RawStorage::make(value)
  | None() -> Unsafe.RawStorage::uninitialized()
  }
}

fun throwUnknownHhvmTypeError(t: String, baseClass: String): void {
  throw RuntimeError(`unknown hhvm type: '${t}' on base class '${baseClass}'`);
}

@cpp_export("SKIPC_iteratorNext")
fun internalIteratorNext(iterator: mutable Iterator<(Int, Int)>): (Int, Int) {
  iterator.next() match {
  | Some(value) -> value
  | None() -> invariant_violation("unexpected end of iterator")
  }
}

@cpp_runtime("SKIP_HhvmInterop_createArrayFromFixedVector")
private native fun innerCreateArrayFromFixedVector(
  kind: String,
  size: Int,
  iterator: mutable Iterator<(Int, Int)>,
): mutable Runtime.HhvmHandle;

private fun createArrayFromFixedVector<T>(
  kind: String,
  v: readonly Array<T>,
  size: Int,
): mutable Runtime.HhvmHandle {
  innerCreateArrayFromFixedVector(
    kind,
    size,
    v.values().map(i -> internalBitcastToRetValue(i)),
  )
}

@intrinsic
native fun convertToHhvmHandle(
  h: readonly Runtime.HhvmShapeHandle,
): readonly Runtime.HhvmHandle;

@intrinsic
native fun convertToHhvmShapeHandle(
  h: readonly Runtime.HhvmHandle,
): readonly Runtime.HhvmShapeHandle;

// -- @hhvm_copy --

@hhvm_import
mutable class Object() {}

@hhvm_array
mutable class HHArray() {}

@hhvm_array
mutable class TupleHelper private {} {
  @hhvm_extern("Vector.HH_varray::internalCreate")
  static native fun internalCreate(): mutable this;

  @hhvm_extern("Vector.HH_varray::get")
  readonly native fun get(index: Int): (Int, Int);

  @hhvm_extern("Vector.HH_varray::append")
  mutable native fun append(v: (Int, Int)): void;
}

private fun tupleHelperCreate(): mutable TupleHelper {
  TupleHelper::internalCreate()
}

private fun tupleHelperGet(obj: readonly TupleHelper, idx: Int): (Int, Int) {
  obj.get(idx)
}

private fun tupleHelperAppend(obj: mutable TupleHelper, v: (Int, Int)): void {
  obj.append(v)
}

module end;

module HhvmInterop_ObjectCons;

@cpp_runtime
private native fun create(classId: Int): Runtime.HhvmHandle;

@cpp_runtime
private native fun finish(handle: Runtime.HhvmHandle): void;

@cpp_runtime
private native fun setFieldMixed(
  handle: Runtime.HhvmHandle,
  slot: Int,
  value: (Int, Int),
): void;

module end;

module HhvmInterop_ShapeCons;

@cpp_runtime
private native fun create(shapeId: Int): Runtime.HhvmShapeHandle;

@cpp_runtime
private native fun finish(handle: Runtime.HhvmShapeHandle): void;

@cpp_runtime
private native fun setFieldMixed(
  handle: Runtime.HhvmShapeHandle,
  slot: Int,
  value: (Int, Int),
): void;

module end;

module HhvmInterop_PropertySetHelper;

// Called by propertySetHelper() when the argument is not Option or Nullable.
@intrinsic
private native fun internalSetProperty<T, U>(
  obj: T,
  field: String,
  value: U,
): void;

// Set the given property to Null
@intrinsic
private native fun internalSetPropertyToNull<T>(obj: T, field: String): void;

// Set the given property to undefined
@intrinsic
private native fun internalSetPropertyToUndefined<T>(
  obj: T,
  field: String,
): void;

// Helper for propertySetHelper() - called when the argument is ?T
private fun internalSetOptionProperty<T, U>(
  obj: T,
  field: String,
  value: ?U,
): void {
  value match {
  | Some(v) -> HhvmInterop.propertySetHelper(obj, field, v)
  | None() -> internalSetPropertyToNull<T>(obj, field)
  }
}

// Helper for propertySetHelper() - called when the argument is ??T
private fun internalSetOptionOptionProperty<T, U>(
  obj: T,
  field: String,
  value: ??U,
): void {
  value match {
  | Some(v) -> internalSetOptionProperty(obj, field, v)
  | None() -> internalSetPropertyToUndefined<T>(obj, field)
  }
}

// Helper for propertySetHelper() - called when the argument is Nullable<T>
private fun internalSetNullableProperty<T, U: nonNullable>(
  obj: T,
  field: String,
  value: Nullable<U>,
): void {
  value match {
  | Box(v) -> HhvmInterop.propertySetHelper(obj, field, v)
  | Null() -> internalSetPropertyToNull<T>(obj, field)
  }
}

// Helper for propertySetHelper() - called when the argument is an HH.Lambda
private fun internalSetLambdaProperty<T>(
  obj: T,
  field: String,
  value: HH.Lambda,
): void {
  value match {
  | HH.LambdaString(s) -> HhvmInterop.propertySetHelper(obj, field, s)
  | HH.LambdaObject(o) -> HhvmInterop.propertySetHelper(obj, field, o)
  }
}

// Helper for propertySetHelper() - called when the argument is an HH.Mixed
private fun internalSetMixedProperty<T>(
  obj: T,
  field: String,
  value: HH.Mixed,
): void {
  value match {
  | HH.Null _ -> internalSetPropertyToNull(obj, field)
  | HH.Bool(v) -> HhvmInterop.propertySetHelper(obj, field, v)
  | HH.Int(v) -> HhvmInterop.propertySetHelper(obj, field, v)
  | HH.Float(v) -> HhvmInterop.propertySetHelper(obj, field, v)
  | HH.String(v) -> HhvmInterop.propertySetHelper(obj, field, v)
  | HH.Darray _
  | HH.Dict _
  | HH.Keyset _
  | HH.Set _
  | HH.Varray _
  | HH.Vector _
  | HH.Vec _
  | HH.Object _
  | HH.Resource _ ->
    invariant_violation(
      "internalSetNonNullMixedProperty type not yet supported",
    )
  }
}

module end;

module HhvmInterop_PropertyGetHelper;

private fun checkRetValueType(t: (Int, Int), validTypeMask: Int): void {
  if (validTypeMask.and(1.shl(t.i1)) != 0) {
    return void;
  };

  srcKind = if (t.i1 == HhvmInterop.nullType) {
    if (t.i0 == HhvmInterop.undefinedValue) "Undefined" else "Null"
  } else if (t.i1 == HhvmInterop.boolType) {
    "Bool"
  } else if (t.i1 == HhvmInterop.intType) {
    "Int"
  } else if (t.i1 == HhvmInterop.floatType) {
    "Float"
  } else if (t.i1 == HhvmInterop.stringType) {
    "String"
  } else if (t.i1 == HhvmInterop.objectType) {
    "Object"
  } else if (t.i1 == HhvmInterop.arrayType) {
    "Array"
  } else {
    `(unknown type ${t.i1})`
  };

  targetKind = ((if (validTypeMask.and(1.shl(HhvmInterop.nullType)) != 0) {
    "?"
  } else {
    ""
  }) +
    (if (validTypeMask.and(1.shl(HhvmInterop.boolType)) != 0) "Bool|" else "") +
    (if (validTypeMask.and(1.shl(HhvmInterop.intType)) != 0) "Int|" else "") +
    (if (validTypeMask.and(1.shl(HhvmInterop.floatType)) != 0) {
      "Float|"
    } else {
      ""
    }) +
    (if (validTypeMask.and(1.shl(HhvmInterop.stringType)) != 0) {
      "String|"
    } else {
      ""
    }) +
    (if (validTypeMask.and(1.shl(HhvmInterop.objectType)) != 0) {
      "Object|"
    } else {
      ""
    }) +
    (if (validTypeMask.and(1.shl(HhvmInterop.arrayType)) != 0) {
      "Array|"
    } else {
      ""
    })).stripSuffix("|");

  throw RuntimeError(`Cannot cast from ${srcKind} to ${targetKind}`);
}

private fun internalCreateOptionFromRetValue<T: nonNullable>(
  t: (Int, Int),
): ?T {
  if (t.i1 == HhvmInterop.nullType) {
    None()
  } else {
    Some(internalCreateNonNullableFromRetValue(t))
  }
}

private fun internalCreateOptionOptionFromRetValue<T: nonNullable>(
  t: (Int, Int),
): ??T {
  if (t.i1 == HhvmInterop.nullType) {
    if (t.i0 == HhvmInterop.undefinedValue) {
      // (-1, nullType) is undefined
      None()
    } else {
      // (0, nullType) is a plain-old null
      Some(None())
    }
  } else {
    Some(internalCreateOptionFromRetValue(t))
  }
}

@intrinsic
private native fun internalCreateNonNullableFromRetValue<T: nonNullable>(
  t: (Int, Int),
): T;

// Turn an SVMI (Int, Int) pair into a skip Nullable object
private fun internalCreateNullableFromRetValue<T: nonNullable>(
  t: (Int, Int),
): Nullable<T> {
  if (t.i1 == HhvmInterop.nullType) {
    Null()
  } else {
    Box(internalCreateNonNullableFromRetValue(t))
  }
}

private fun internalCreateMixedFromRetValue(
  t: (Int, Int),
  validTypeMask: Int,
): HH.Mixed {
  checkRetValueType(t, validTypeMask);
  if (t.i1 == HhvmInterop.nullType) {
    HH.Null()
  } else if (t.i1 == HhvmInterop.boolType) {
    HH.Bool(internalCreateNonNullableFromRetValue(t))
  } else if (t.i1 == HhvmInterop.intType) {
    HH.Int(internalCreateNonNullableFromRetValue(t))
  } else if (t.i1 == HhvmInterop.floatType) {
    HH.Float(internalCreateNonNullableFromRetValue(t))
  } else if (t.i1 == HhvmInterop.stringType) {
    HH.String(internalCreateNonNullableFromRetValue(t))
  } else if (t.i1 == HhvmInterop.objectType) {
    HH.ProxyObject(internalCreateNonNullableFromRetValue(t))
  } else {
    invariant_violation(`Cannot convert hhvm type ${t.i1} to Mixed`)
  }
}

private fun internalCreateLambdaFromRetValue(t: (Int, Int)): HH.Lambda {
  if (t.i1 == HhvmInterop.stringType) {
    HH.LambdaString(internalCreateNonNullableFromRetValue(t))
  } else if (t.i1 == HhvmInterop.objectType) {
    HH.LambdaObject(internalCreateNonNullableFromRetValue(t))
  } else {
    invariant_violation(`Cannot convert hhvm type ${t.i1} to Lambda`)
  }
}

private fun internalCreateRetValueFromOption<T>(option: ?T): (Int, Int) {
  option match {
  | Some(value) -> HhvmInterop.internalBitcastToRetValue(value)
  | None() -> (HhvmInterop.nullValue, 0)
  }
}

private fun internalCreateRetValueFromOptionOption<T>(option: ??T): (Int, Int) {
  option match {
  | Some(Some(value)) -> HhvmInterop.internalBitcastToRetValue(value)
  | Some(None()) -> (HhvmInterop.nullValue, 0)
  | None() -> (HhvmInterop.undefinedValue, 0)
  }
}

@intrinsic
private native fun internalBitcastFromInt<T>(i: Int): T;

@intrinsic
private native fun internalCreateFromRetValue<T>(v: (Int, Int)): T;

module end;
