/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module String;

mutable class StringIterator private (
  private s: String,
  private mutable i: Int,
  private length: Int,
) extends Iterator<Char> uses Equality {
  static fun make(s: String): mutable StringIterator {
    mutable StringIterator(s, 0, s.length())
  }

  readonly fun clone(): mutable StringIterator {
    mutable StringIterator(this.s, this.i, this.length);
  }

  mutable fun drop(n: Int): mutable StringIterator {
    invariant(n >= 0, "Called StringIterator::drop with negative number");
    this.!i = min(this.length, this.i + n);
    this
  }

  readonly fun sizeHint(): ?Int {
    Some(this.length - this.i)
  }

  readonly fun current(): ?Char {
    if (this.atEnd()) {
      None()
    } else {
      Some(this.s.get(this.i));
    }
  }

  readonly fun atEnd(): Bool {
    this.i >= this.length
  }

  mutable fun next(): ?Char {
    result = this.current();
    if (result.isSome()) {
      this.!i = this.i + 1;
    };
    result;
  }

  readonly fun substring(end: readonly StringIterator): String {
    this.s.sub(this.i, end.i - this.i);
  }
}
