[
  {
    "kind": "receive",
    "deltaTime": 227,
    "contents": {
      "id": 0,
      "params": {
        "trace": "verbose",
        "rootPath": "%CURRENT_DIR%/project1",
        "initializationOptions": {},
        "processId": 31784,
        "capabilities": {
          "workspace": {
            "executeCommand": {
              "dynamicRegistration": false
            },
            "symbol": {
              "dynamicRegistration": false
            },
            "didChangeConfiguration": {
              "dynamicRegistration": false
            },
            "didChangeWatchedFiles": {
              "dynamicRegistration": true
            },
            "workspaceEdit": {
              "documentChanges": true
            },
            "applyEdit": true
          },
          "textDocument": {
            "synchronization": {
              "willSaveWaitUntil": false,
              "willSave": false,
              "dynamicRegistration": false,
              "didSave": true
            },
            "completion": {
              "completionItem": {
                "snippetSupport": true
              },
              "dynamicRegistration": false
            },
            "onTypeFormatting": {
              "dynamicRegistration": false
            },
            "documentHighlight": {
              "dynamicRegistration": false
            },
            "documentSymbol": {
              "dynamicRegistration": false
            },
            "rename": {
              "dynamicRegistration": false
            },
            "formatting": {
              "dynamicRegistration": false
            },
            "codeAction": {
              "dynamicRegistration": false
            },
            "documentLink": {
              "dynamicRegistration": false
            },
            "rangeFormatting": {
              "dynamicRegistration": false
            },
            "codeLens": {
              "dynamicRegistration": false
            },
            "signatureHelp": {
              "dynamicRegistration": false
            },
            "definition": {
              "dynamicRegistration": true
            },
            "hover": {
              "dynamicRegistration": false
            },
            "references": {
              "dynamicRegistration": false
            }
          },
          "window": {
            "actionRequired": {
              "dynamicRegistration": false
            },
            "progress": {
              "dynamicRegistration": false
            },
            "status": {
              "dynamicRegistration": false
            }
          }
        },
        "rootUri": "file://%CURRENT_DIR%/project1"
      },
      "jsonrpc": "2.0",
      "method": "initialize"
    },
    "elapsedTime": 3
  },
  {
    "kind": "send",
    "contents": {
      "id": 0,
      "result": {
        "capabilities": {
          "textDocumentSync": {
            "openClose": true,
            "change": 1,
            "willSave": false,
            "willSaveWaitUntil": true,
            "save": {
              "includeText": true
            }
          },
          "hoverProvider": false,
          "definitionProvider": true,
          "referencesProvider": false,
          "documentHighlightProvider": false,
          "documentSymbolProvider": true,
          "workspaceSymbolProvider": false,
          "codeActionProvider": false,
          "documentFormattingProvider": true,
          "documentRangeFormattingProvider": false,
          "renameProvider": false
        }
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "elapsedTime": 20,
    "contents": {
      "jsonrpc": "2.0",
      "method": "textDocument/didOpen",
      "params": {
        "textDocument": {
          "languageId": "skip",
          "uri": "file://%CURRENT_DIR%/project1/Option.sk",
          "text": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n  | Some _ as y -> y\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n",
          "version": 1
        }
      }
    },
    "kind": "receive",
    "deltaTime": 948
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/project1/Option.sk",
        "diagnostics": []
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "contents": {
      "jsonrpc": "2.0",
      "method": "textDocument/didChange",
      "params": {
        "contentChanges": [
          {
            "text": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n"
          }
        ],
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk",
          "version": 2
        }
      }
    },
    "elapsedTime": 66789,
    "kind": "receive",
    "deltaTime": 759
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/project1/Option.sk",
        "diagnostics": []
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "receive",
    "deltaTime": 705,
    "elapsedTime": 67105,
    "contents": {
      "params": {
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        }
      },
      "method": "textDocument/documentSymbol",
      "jsonrpc": "2.0",
      "id": 1
    }
  },
  {
    "kind": "send",
    "contents": {
      "id": 1,
      "result": [
        {
          "name": "Option",
          "kind": 5,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 2,
                "character": 0
              },
              "end": {
                "line": 116,
                "character": 1
              }
            }
          }
        },
        {
          "name": "map(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 12,
                "character": 2
              },
              "end": {
                "line": 14,
                "character": 25
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "flatMap(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 16,
                "character": 2
              },
              "end": {
                "line": 18,
                "character": 19
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "maybe(nothing, mjust)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 20,
                "character": 2
              },
              "end": {
                "line": 22,
                "character": 23
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "default(x)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 24,
                "character": 2
              },
              "end": {
                "line": 26,
                "character": 16
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "defaultOption(x)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 28,
                "character": 2
              },
              "end": {
                "line": 29,
                "character": 15
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "test(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 31,
                "character": 2
              },
              "end": {
                "line": 33,
                "character": 19
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "fromSome(msg)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 35,
                "character": 2
              },
              "end": {
                "line": 37,
                "character": 16
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "isSome()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 39,
                "character": 2
              },
              "end": {
                "line": 41,
                "character": 18
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "isNone()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 43,
                "character": 2
              },
              "end": {
                "line": 45,
                "character": 19
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "hash()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 47,
                "character": 2
              },
              "end": {
                "line": 49,
                "character": 27
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "each(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 51,
                "character": 2
              },
              "end": {
                "line": 53,
                "character": 27
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "==(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 55,
                "character": 2
              },
              "end": {
                "line": 61,
                "character": 5
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "!=(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 63,
                "character": 2
              },
              "end": {
                "line": 65,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "<(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 67,
                "character": 2
              },
              "end": {
                "line": 69,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": ">(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 71,
                "character": 2
              },
              "end": {
                "line": 73,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "<=(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 75,
                "character": 2
              },
              "end": {
                "line": 77,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": ">=(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 79,
                "character": 2
              },
              "end": {
                "line": 81,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "compare(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 84,
                "character": 2
              },
              "end": {
                "line": 95,
                "character": 5
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "none()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 97,
                "character": 2
              },
              "end": {
                "line": 99,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "toString()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 101,
                "character": 2
              },
              "end": {
                "line": 103,
                "character": 38
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "genMap(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 109,
                "character": 2
              },
              "end": {
                "line": 111,
                "character": 31
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "genFilter(p)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 113,
                "character": 2
              },
              "end": {
                "line": 115,
                "character": 59
              }
            }
          },
          "containerName": "Option"
        }
      ],
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "receive",
    "deltaTime": 764,
    "elapsedTime": 70583,
    "contents": {
      "params": {
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        },
        "options": {
          "insertSpaces": true,
          "tabSize": 2
        }
      },
      "method": "textDocument/formatting",
      "jsonrpc": "2.0",
      "id": 2
    }
  },
  {
    "kind": "send",
    "contents": {
      "id": 2,
      "result": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 0
            }
          },
          "newText": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n"
        }
      ],
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "elapsedTime": 70612,
    "contents": {
      "method": "textDocument/didSave",
      "jsonrpc": "2.0",
      "params": {
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        },
        "text": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n"
      }
    },
    "kind": "receive",
    "deltaTime": 831
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/project1/Option.sk",
        "diagnostics": [
          {
            "range": {
              "start": {
                "line": 51,
                "character": 19
              },
              "end": {
                "line": 51,
                "character": 23
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 29,
                "character": 2
              },
              "end": {
                "line": 29,
                "character": 15
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Case Some is missing.\nNote you cannot have multiple parents with algebraic patterns",
            "relatedLocations": []
          }
        ]
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/prelude/mini.sk",
        "diagnostics": [
          {
            "range": {
              "start": {
                "line": 16,
                "character": 30
              },
              "end": {
                "line": 16,
                "character": 34
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 36,
                "character": 32
              },
              "end": {
                "line": 36,
                "character": 36
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 18,
                "character": 65
              },
              "end": {
                "line": 18,
                "character": 69
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 35,
                "character": 30
              },
              "end": {
                "line": 35,
                "character": 34
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 31,
                "character": 33
              },
              "end": {
                "line": 31,
                "character": 37
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          }
        ]
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "deltaTime": 908,
    "kind": "receive",
    "contents": {
      "method": "textDocument/didChange",
      "jsonrpc": "2.0",
      "params": {
        "textDocument": {
          "version": 3,
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        },
        "contentChanges": [
          {
            "text": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n  | Some _ as y -> y\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n"
          }
        ]
      }
    },
    "elapsedTime": 74976
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/project1/Option.sk",
        "diagnostics": [
          {
            "range": {
              "start": {
                "line": 51,
                "character": 19
              },
              "end": {
                "line": 51,
                "character": 23
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 29,
                "character": 2
              },
              "end": {
                "line": 29,
                "character": 15
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Case Some is missing.\nNote you cannot have multiple parents with algebraic patterns",
            "relatedLocations": []
          }
        ]
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "elapsedTime": 75278,
    "contents": {
      "params": {
        "id": 1
      },
      "jsonrpc": "2.0",
      "method": "$/cancelRequest"
    },
    "deltaTime": 1095,
    "kind": "receive"
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "deltaTime": 617,
    "kind": "receive",
    "elapsedTime": 75280,
    "contents": {
      "params": {
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        }
      },
      "method": "textDocument/documentSymbol",
      "jsonrpc": "2.0",
      "id": 3
    }
  },
  {
    "kind": "send",
    "contents": {
      "id": 3,
      "result": [
        {
          "name": "Option",
          "kind": 5,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 2,
                "character": 0
              },
              "end": {
                "line": 117,
                "character": 1
              }
            }
          }
        },
        {
          "name": "map(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 12,
                "character": 2
              },
              "end": {
                "line": 14,
                "character": 25
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "flatMap(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 16,
                "character": 2
              },
              "end": {
                "line": 18,
                "character": 19
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "maybe(nothing, mjust)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 20,
                "character": 2
              },
              "end": {
                "line": 22,
                "character": 23
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "default(x)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 24,
                "character": 2
              },
              "end": {
                "line": 26,
                "character": 16
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "defaultOption(x)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 28,
                "character": 2
              },
              "end": {
                "line": 30,
                "character": 20
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "test(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 32,
                "character": 2
              },
              "end": {
                "line": 34,
                "character": 19
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "fromSome(msg)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 36,
                "character": 2
              },
              "end": {
                "line": 38,
                "character": 16
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "isSome()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 40,
                "character": 2
              },
              "end": {
                "line": 42,
                "character": 18
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "isNone()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 44,
                "character": 2
              },
              "end": {
                "line": 46,
                "character": 19
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "hash()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 48,
                "character": 2
              },
              "end": {
                "line": 50,
                "character": 27
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "each(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 52,
                "character": 2
              },
              "end": {
                "line": 54,
                "character": 27
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "==(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 56,
                "character": 2
              },
              "end": {
                "line": 62,
                "character": 5
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "!=(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 64,
                "character": 2
              },
              "end": {
                "line": 66,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "<(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 68,
                "character": 2
              },
              "end": {
                "line": 70,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": ">(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 72,
                "character": 2
              },
              "end": {
                "line": 74,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "<=(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 76,
                "character": 2
              },
              "end": {
                "line": 78,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": ">=(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 80,
                "character": 2
              },
              "end": {
                "line": 82,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "compare(other)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 85,
                "character": 2
              },
              "end": {
                "line": 96,
                "character": 5
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "none()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 98,
                "character": 2
              },
              "end": {
                "line": 100,
                "character": 3
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "toString()",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 102,
                "character": 2
              },
              "end": {
                "line": 104,
                "character": 38
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "genMap(f)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 110,
                "character": 2
              },
              "end": {
                "line": 112,
                "character": 31
              }
            }
          },
          "containerName": "Option"
        },
        {
          "name": "genFilter(p)",
          "kind": 6,
          "deprecated": false,
          "location": {
            "uri": "file://%CURRENT_DIR%/project1/Option.sk",
            "range": {
              "start": {
                "line": 114,
                "character": 2
              },
              "end": {
                "line": 116,
                "character": 59
              }
            }
          },
          "containerName": "Option"
        }
      ],
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "contents": {
      "id": 4,
      "method": "textDocument/formatting",
      "jsonrpc": "2.0",
      "params": {
        "options": {
          "insertSpaces": true,
          "tabSize": 2
        },
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        }
      }
    },
    "elapsedTime": 76245,
    "deltaTime": 114146,
    "kind": "receive"
  },
  {
    "kind": "send",
    "contents": {
      "id": 4,
      "result": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 0
            }
          },
          "newText": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n  | Some _ as y -> y\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n"
        }
      ],
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "elapsedTime": 76264,
    "contents": {
      "params": {
        "text": "// NOTE: As a NBE optimization this implementation is customized in\n// native/FastOption.sk, and the APIs must be kept in sync.\nbase class Option<+T> uses\n  Show[T: Show],\n  Hashable[T: Hashable],\n  Orderable[T: Orderable],\n  Equality[T: Equality],\n{\n  children =\n  | Some(value: T)\n  | None()\n\n  fun map<T2>(f: T -> T2): ?T2\n  | None() -> None()\n  | Some(x) -> Some(f(x))\n\n  fun flatMap<T2>(f: T -> ?T2): ?T2\n  | None() -> None()\n  | Some(x) -> f(x)\n\n  fun maybe<T2>(nothing: T2, mjust: T -> T2): T2\n  | None() -> nothing\n  | Some(x) -> mjust(x)\n\n  fun default<T2>[T: T2](x: T2): T2\n  | None() -> x\n  | Some(y) -> y\n\n  fun defaultOption<T2>[T: T2](x: ?T2): ?T2\n  | None _ -> x\n  | Some _ as y -> y\n\n  fun test(f: T -> Bool): Bool\n  | None _ -> false\n  | Some(x) -> f(x)\n\n  fun fromSome(msg: String = \"fromSome called on None\"): T\n  | None() -> invariant_violation(msg)\n  | Some(x) -> x\n\n  fun isSome(): Bool\n  | None() -> false\n  | Some _ -> true\n\n  fun isNone(): Bool\n  | None() -> true\n  | Some _ -> false\n\n  fun hash[T: Hashable](): Int\n  | None() -> 1027410261\n  | Some(x) -> x.hash() + 1\n\n  fun each(f: T -> void): void\n  | None() -> void\n  | Some(value) -> f(value)\n\n  fun ==<U: Equality>[T: U](other: ?U): Bool\n  | None() -> other.isNone()\n  | Some(x) ->\n    other match {\n    | Some(y) -> x == y\n    | None() -> false\n    }\n\n  fun !=<U: Equality>[T: U](other: ?U): Bool {\n    !(this == other)\n  }\n\n  fun <<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == LT()\n  }\n\n  fun ><U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) == GT()\n  }\n\n  fun <=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != GT()\n  }\n\n  fun >=<U: Orderable>[T: U](other: ?U): Bool {\n    this.compare(other) != LT()\n  }\n\n  // None() is less than Some().\n  fun compare<U: Orderable>[T: U](other: ?U): Order\n  | None() ->\n    if (other.isNone()) {\n      EQ()\n    } else {\n      LT()\n    }\n  | Some(x) ->\n    other match {\n    | Some(y) -> compare(x, y)\n    | None() -> GT()\n    }\n\n  static fun none(): ?T {\n    None()\n  }\n\n  fun toString[T: Show](): String\n  | None() -> \"None()\"\n  | Some(x) -> `Some(${x.toString()})`\n\n  // async frozen fun gen<U>[T: ^U](): ^Option<U>\n  // | None() -> None()\n  // | Some(x) -> Some(await x)\n\n  async frozen fun genMap<U>(f: T ~> ^U): ^?U\n  | None() -> None()\n  | Some(x) -> Some(await f(x))\n\n  async frozen fun genFilter(p: T ~> ^Bool): ^?T\n  | None() -> None()\n  | Some(x) as option -> if (await p(x)) option else None()\n}\n",
        "textDocument": {
          "uri": "file://%CURRENT_DIR%/project1/Option.sk"
        }
      },
      "jsonrpc": "2.0",
      "method": "textDocument/didSave"
    },
    "kind": "receive",
    "deltaTime": 768
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/project1/Option.sk",
        "diagnostics": [
          {
            "range": {
              "start": {
                "line": 52,
                "character": 19
              },
              "end": {
                "line": 52,
                "character": 23
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          }
        ]
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "textDocument/publishDiagnostics",
      "params": {
        "uri": "file://%CURRENT_DIR%/prelude/mini.sk",
        "diagnostics": [
          {
            "range": {
              "start": {
                "line": 16,
                "character": 30
              },
              "end": {
                "line": 16,
                "character": 34
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 36,
                "character": 32
              },
              "end": {
                "line": 36,
                "character": 36
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 18,
                "character": 65
              },
              "end": {
                "line": 18,
                "character": 69
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 35,
                "character": 30
              },
              "end": {
                "line": 35,
                "character": 34
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          },
          {
            "range": {
              "start": {
                "line": 31,
                "character": 33
              },
              "end": {
                "line": 31,
                "character": 37
              }
            },
            "severity": 1,
            "source": "Skip",
            "message": "Unbound class: 'Void'",
            "relatedLocations": []
          }
        ]
      },
      "jsonrpc": "2.0"
    }
  },
  {
    "kind": "send",
    "contents": {
      "method": "telemetry/event",
      "params": "skip_lsp: Done Processing",
      "jsonrpc": "2.0"
    }
  },
  {
    "elapsedTime": 28709,
    "deltaTime": 476,
    "kind": "receive",
    "contents": {
      "id": 3,
      "method": "shutdown",
      "jsonrpc": "2.0",
      "params": null
    }
  }
]