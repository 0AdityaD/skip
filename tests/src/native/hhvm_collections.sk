@cpp_extern
native fun internalMakeHandle(id: Int, t: String): mutable Runtime.HhvmHandle;
@cpp_extern
native fun internalGetHandle(h: mutable Runtime.HhvmHandle): String;

@cpp_extern
untracked native fun internalPushRet(value: HH.Mixed): void;

@cpp_extern
untracked native fun checkRetUsed(): void;

@cpp_extern
untracked native fun internalPushRet_obj(
  value: readonly Runtime.HhvmHandle,
): void;

@cpp_extern
untracked native fun internalPushRet_arr(
  value: readonly Runtime.HhvmHandle,
): void;

module Vector;

extension class HH_varray2 uses Show {
  readonly fun toString(): String {
    `HH_varray<>#${internalGetHandle(HhvmInterop.fetchProxyPointer(this))}`
  }
}

module end;

fun mixedRepr(x: HH.Mixed): String {
  x match {
  | HH.Null() -> "HH.Null"
  | HH.Bool(v) -> `HH.Bool(${v})`
  | HH.Int(v) -> `HH.Int(${v})`
  | HH.Float(v) -> `HH.Float(${v})`
  | HH.String(v) -> `HH.String(${v})`
  | HH.Darray _ -> "HH.Darray(...)"
  | HH.Dict _ -> "HH.Dict(...)"
  | HH.Object _ -> "HH.Object(...)"
  | HH.Keyset _ -> "HH.Keyset(...)"
  | HH.Varray _ -> "HH.Varray(...)"
  | HH.Vec _ -> "HH.Vec(...)"
  | HH.Resource _ -> "HH.Resource(...)"
  }
}

@hhvm_import
class HhvmObject1{} uses Show {
  static fun make(): HhvmObject1 {
    HhvmInterop.createFromProxyPointer(makeObjectHelper("HhvmObject1"))
  }

  fun toString(): String {
    "<HhvmObject1:" +
      internalGetHandle(HhvmInterop.fetchProxyPointer(this)) +
      ">"
  }
}

@hhvm_import
base class HhvmObject2{} {
  overridable fun toString(): String {
    "<HhvmObject2:" +
      internalGetHandle(HhvmInterop.fetchProxyPointer(this)) +
      ">"
  }
}

@hhvm_import
class HhvmObject2a{} extends HhvmObject2 {
  static fun make(): HhvmObject2a {
    HhvmInterop.createFromProxyPointer(makeObjectHelper("HhvmObject2a"))
  }

  fun toString(): String {
    "<HhvmObject2a:" +
      internalGetHandle(HhvmInterop.fetchProxyPointer(this)) +
      ">"
  }
}

@hhvm_import
class HhvmObject2b{} extends HhvmObject2 {
  static fun make(): HhvmObject2b {
    HhvmInterop.createFromProxyPointer(makeObjectHelper("HhvmObject2b"))
  }

  fun toString(): String {
    "<HhvmObject2b:" +
      internalGetHandle(HhvmInterop.fetchProxyPointer(this)) +
      ">"
  }
}

// -----------------------------------------------------------------------------

@hhvm_array
class ArrayHelper{}

@hhvm_import("make_object")
native fun makeObjectHelper(t: String): mutable Runtime.HhvmHandle;

untracked fun test_varray1_bool(): void {
  print_string("--- test_varray1_bool");

  a = Vector.HH_varray2[true, false];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet(HH.Bool(false));
  print_string(`a[1]: ${a[1]}`);
  internalPushRet(HH.Bool(true));
  print_string(`a[2]: ${a[2]}`);

  b = Vector.HH_varray2[
    Some(true),
    Some(false),
    Some(true),
    None(),
    Some(true),
    Some(false),
    Some(false),
  ];
  internalPushRet(HH.Null());
  print_string(`b[1]: ${b[1]}`);
  internalPushRet(HH.Bool(false));
  print_string(`b[2]: ${b[2]}`);
  internalPushRet(HH.Bool(true));
  print_string(`b[3]: ${b[3]}`);

  checkRetUsed();
}

untracked fun test_varray1_int(): void {
  print_string("--- test_varray1_int");

  a = Vector.HH_varray2[1, 2, 3];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet(HH.Int(42));
  print_string(`a[10]: ${a[10]}`);

  b = Vector.HH_varray2[Some(42), None()];
  internalPushRet(HH.Null());
  print_string(`b[15]: ${b[15]}`);
  internalPushRet(HH.Int(43));
  print_string(`b[20]: ${b[20]}`);

  checkRetUsed();
}

untracked fun test_varray1_float(): void {
  print_string("--- test_varray1_float");

  a = Vector.HH_varray2[1.5, 2.5, 3.5];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet(HH.Float(1.25));
  print_string(`a[15]: ${a[15]}`);

  b = Vector.HH_varray2[None(), Some(1.5)];
  internalPushRet(HH.Null());
  print_string(`b[0]: ${b[0]}`);
  internalPushRet(HH.Float(1.25));
  print_string(`b[1]: ${b[1]}`);

  checkRetUsed();
}

untracked fun test_varray1_string(): void {
  print_string("--- test_varray1_string");

  a = Vector.HH_varray2["short", "really long string"];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet(HH.String("short"));
  print_string(`a[20]: "${a[20]}"`);
  internalPushRet(HH.String("this is a long string"));
  print_string(`a[21]: "${a[21]}"`);

  b = Vector.HH_varray2[None(), Some("short"), Some("really long string")];
  internalPushRet(HH.Null());
  print_string(`b[19]: ${b[19]}`);
  internalPushRet(HH.String("short"));
  print_string(`b[21]: ${b[21]}`);
  internalPushRet(HH.String("this is a long string"));
  print_string(`b[23]: ${b[23]}`);

  checkRetUsed();
}

untracked fun test_varray1_object1(): void {
  print_string("--- test_varray1_object1");

  a = Vector.HH_varray2[HhvmObject1::make()];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet_obj(HhvmInterop.fetchProxyPointer(HhvmObject1::make()));
  print_string(`a[30]: ${a[30]}`);

  b = Vector.HH_varray2[None(), Some(HhvmObject1::make())];
  internalPushRet(HH.Null());
  print_string(`b[19]: ${b[19]}`);
  internalPushRet_obj(HhvmInterop.fetchProxyPointer(HhvmObject1::make()));
  print_string(`b[30]: ${b[30]}`);

  checkRetUsed();
}

untracked fun test_varray1_object2(): void {
  print_string("--- test_varray1_object2");

  a = Vector.HH_varray2[HhvmObject2a::make(), HhvmObject2b::make()];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet_obj(HhvmInterop.fetchProxyPointer(HhvmObject2a::make()));
  print_string(`a[40]: ${a[40]}`);

  checkRetUsed();
}

untracked fun test_varray1_hharray(): void {
  print_string("--- test_varray1_hharray");

  a = Vector.HH_varray2[Vector.HH_varray2[1]];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet_arr(HhvmInterop.fetchProxyPointer(Vector.HH_varray2[1, 2]));
  print_string(`a[45]: ${a[45]}`);

  checkRetUsed();
}

untracked fun test_varray1_mixed(): void {
  print_string("--- test_varray1_mixed");

  a = Vector.HH_varray2[HH.Int(3), HH.Float(2.5)];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet(HH.Int(23));
  print_string(`a[50]: ${mixedRepr(a[50])}`);

  checkRetUsed();
}

untracked fun test_varray1_array(): void {
  print_string("--- test_varray1_array");

  a = Vector.HH_varray2[Array[1, 2, 3]];
  print_string(`a.size() = ${a.size()}`);
  internalPushRet_arr(HhvmInterop.fetchProxyPointer(Vector.HH_varray2[1, 2]));
  internalPushRet(HH.Int(13));
  internalPushRet(HH.Int(14));
  print_string(`a[45]: ${a[45]}`);

  checkRetUsed();
}

untracked fun test_varray1_map(): void {
  print_string("--- test_varray1_map");

  a = Vector.HH_varray2[Map[1 => 3, 2 => 2, 3 => 1]];
  internalPushRet_arr(HhvmInterop.fetchProxyPointer(Vector.HH_varray2[1, 2]));
  internalPushRet(HH.Int(11));
  internalPushRet(HH.Int(100));
  internalPushRet(HH.Int(21));
  internalPushRet(HH.Int(101));
  print_string(`a[1]: ${a[1]}`);

  checkRetUsed();
}

// -----------------------------------------------------------------------------

untracked fun main(): void {
  test_varray1_bool();
  test_varray1_int();
  test_varray1_float();
  test_varray1_string();
  test_varray1_object1();
  test_varray1_object2();
  test_varray1_hharray();
  test_varray1_mixed();
  test_varray1_array();
  test_varray1_map();
}
