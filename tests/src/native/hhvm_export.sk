@hhvm_import
value class HhvmObject0{} uses Show {
  @hhvm_import
  static native fun make(id: String): HhvmObject0;

  @hhvm_import
  native fun report(): String;

  fun toString(): String {
    "<object0:" + this.report() + ">"
  }
}

@hhvm_import
base class HhvmObject1{} uses Show {
  @hhvm_import
  static native fun make(id: String): HhvmObject1;

  @hhvm_import
  native fun report(): String;

  fun toString(): String {
    "<object1:" + this.report() + ">"
  }
}

@hhvm_import("HhvmObject1")
class ConcreteHhvmObject1{} extends HhvmObject1

@hhvm_copy
class HhvmObject2(
  a: Int,
  b: Int,
) uses Show {
  fun toString(): String {
    `HhvmObject2(${this.a}, ${this.b})`
  }
}

@hhvm_shape
class Shape1{
  a: Int,
  b: Int,
} uses Show {
  @hhvm_import
  static native fun make(id: String): Shape1;

  fun toString(): String {
    `Shape1`
  }
}

@hhvm_shape_copy
class Shape2{
  a: Int,
  b: Int,
} uses Show {
  fun toString(): String {
    `Shape2(${this.a}, ${this.b})`
  }
}

@hhvm_import
native fun arrayReport(a: mutable Runtime.HhvmHandle): String;

@hhvm_import
native fun arrayMake(id: String): mutable Runtime.HhvmHandle;

module Vector;

extension class HH_varray2 uses Show {
  static fun make(id: String): Vector.HH_varray2<T> {
    HhvmInterop.createFromProxyPointer<HH_varray2<T>>(arrayMake(id))
  }

  readonly fun report(): String {
    arrayReport(HhvmInterop.fetchProxyPointer(this))
  }

  readonly fun toString(): String {
    "<array:" + this.report() + ">"
  }
}

module end;

// -----------------------------------------------------------------------------

fun mixedRepr(x: HH.Mixed): String {
  x match {
  | HH.Null() -> "HH.Null"
  | HH.Bool(v) -> `HH.Bool(${v})`
  | HH.Int(v) -> `HH.Int(${v})`
  | HH.Float(v) -> `HH.Float(${v})`
  | HH.String(v) -> `HH.String(${v})`
  | HH.Darray _ -> "HH.Darray(...)"
  | HH.Dict _ -> "HH.Dict(...)"
  | HH.Object _ -> "HH.Object(...)"
  | HH.Keyset _ -> "HH.Keyset(...)"
  | HH.Varray _ -> "HH.Varray(...)"
  | HH.Vec _ -> "HH.Vec(...)"
  | HH.Resource _ -> "HH.Resource(...)"
  }
}

// -----------------------------------------------------------------------------
// exports with primitive args

@hhvm_export
fun sk_fn1(): void {
  print_string("fn1()");
}

@hhvm_export
fun sk_fn1_b(b: Bool): void {
  print_string(`fn1_b(${b})`);
}

@hhvm_export
fun sk_fn1_i(i: Int): void {
  print_string(`fn1_i(${i})`);
}

@hhvm_export
fun sk_fn1_f(f: Float): void {
  print_string(`fn1_f(${f})`);
}

@hhvm_export
fun sk_fn1_s(s: String): void {
  print_string(`fn1_s(${s})`);
}

@hhvm_export
fun sk_fn1_m(m: HH.Mixed): void {
  print_string(`fn1_m(${mixedRepr(m)})`);
}

@hhvm_export
fun sk_fn1_o0(o: HhvmObject0): void {
  print_string(`fn1_o0(${o.report()})`);
}

@hhvm_export
fun sk_fn1_o1(o: HhvmObject1): void {
  print_string(`fn1_o1(${o.report()})`);
}

@hhvm_export
fun sk_fn1_o2(o: HhvmObject2): void {
  print_string(`fn1_o2(${o})`);
}

@hhvm_export
fun sk_fn1_a(a: Vector.HH_varray2<Int>): void {
  print_string(`fn1_a(${a.report()})`);
}

@hhvm_export
fun sk_fn1_shape1(s: Shape1): void {
  print_string(`sk_fn1_shape1(${s})`)
}

@hhvm_export
fun sk_fn1_shape2(s: Shape2): void {
  print_string(`sk_fn1_shape2(${s})`)
}

@hhvm_export
fun sk_fn1_tuple(s: (Int, Int)): void {
  print_string(`sk_fn1_tuple(${s})`)
}

@hhvm_import
native fun test_params(): void;

// -----------------------------------------------------------------------------
// exports with primitive returns

@hhvm_export
fun sk_fn2_b0(): Bool {
  false
}
@hhvm_export
fun sk_fn2_b1(): Bool {
  true
}
@hhvm_export
fun sk_fn2_i0(): Int {
  0
}
@hhvm_export
fun sk_fn2_i1(): Int {
  Int::min
}
@hhvm_export
fun sk_fn2_i2(): Int {
  Int::max
}
@hhvm_export
fun sk_fn2_f0(): Float {
  0.0
}
@hhvm_export
fun sk_fn2_f1(): Float {
  3.125
}
@hhvm_export
fun sk_fn2_f2(): Float {
  -6.25
}
@hhvm_export
fun sk_fn2_s0(): String {
  "short"
}
@hhvm_export
fun sk_fn2_s1(): String {
  "this is a long string"
}
@hhvm_export
fun sk_fn2_o0(): HhvmObject0 {
  HhvmObject0::make("HhvmObject0")
}
@hhvm_export
fun sk_fn2_o1(): HhvmObject1 {
  HhvmObject1::make("HhvmObject1")
}
@hhvm_export
fun sk_fn2_o2(): HhvmObject2 {
  HhvmObject2(200, 201)
}
@hhvm_export
fun sk_fn2_a(): Vector.HH_varray2<Int> {
  Vector.HH_varray2::make("HhvmArray")
}
@hhvm_export
fun sk_fn2_shape1(): Shape1 {
  Shape1::make("Shape1")
}
@hhvm_export
fun sk_fn2_shape2(): Shape2 {
  Shape2{a => 300, b => 301}
}

@hhvm_export
fun sk_fn2_m0(): HH.Mixed {
  HH.Int(123)
}

@hhvm_export
fun sk_fn2_m1(): HH.Mixed {
  HH.String("this is a test string")
}

@hhvm_export
fun sk_fn2_m2(): HH.Mixed {
  HH.Null()
}

@hhvm_export
fun sk_fn2_tup(): (Int, Int) {
  (123, 321)
}

@hhvm_import
native fun test_returns(): void;

// -----------------------------------------------------------------------------
// exports with nullable args

fun sk_fn3_helper<T: Show>(n: Nullable<T>, name: String): void {
  n match {
  | Null _ -> print_string("null")
  | Box(v) -> print_string(name + `(${v})`)
  };
}

@hhvm_export
fun sk_fn3_b(v: Nullable<Bool>): void {
  sk_fn3_helper(v, "fn3_b");
}
@hhvm_export
fun sk_fn3_i(v: Nullable<Int>): void {
  sk_fn3_helper(v, "fn3_i");
}
@hhvm_export
fun sk_fn3_f(v: Nullable<Float>): void {
  sk_fn3_helper(v, "fn3_f");
}
@hhvm_export
fun sk_fn3_s(v: Nullable<String>): void {
  sk_fn3_helper(v, "fn3_s");
}
@hhvm_export
fun sk_fn3_o0(v: Nullable<HhvmObject0>): void {
  sk_fn3_helper(v, "fn3_o0");
}
@hhvm_export
fun sk_fn3_o1(v: Nullable<HhvmObject1>): void {
  sk_fn3_helper(v, "fn3_o1");
}
@hhvm_export
fun sk_fn3_a(v: Nullable<Vector.HH_varray2<Int>>): void {
  sk_fn3_helper(v, "fn3_a");
}

@hhvm_import
native fun test_nullable_params(): void;

// -----------------------------------------------------------------------------
// exports with option args

fun sk_fn5_helper<T: Show>(n: ?T, name: String): void {
  n match {
  | None() -> print_string("null")
  | Some(v) -> print_string(name + `(${v})`)
  };
}

@hhvm_export
fun sk_fn5_b(v: ?Bool): void {
  sk_fn5_helper(v, "fn5_b");
}
@hhvm_export
fun sk_fn5_i(v: ?Int): void {
  sk_fn5_helper(v, "fn5_i");
}
@hhvm_export
fun sk_fn5_f(v: ?Float): void {
  sk_fn5_helper(v, "fn5_f");
}
@hhvm_export
fun sk_fn5_s(v: ?String): void {
  sk_fn5_helper(v, "fn5_s");
}
@hhvm_export
fun sk_fn5_o0(v: ?HhvmObject0): void {
  sk_fn5_helper(v, "fn5_o0");
}
@hhvm_export
fun sk_fn5_o1(v: ?HhvmObject1): void {
  sk_fn5_helper(v, "fn5_o1");
}
@hhvm_export
fun sk_fn5_o2(v: ?HhvmObject2): void {
  sk_fn5_helper(v, "fn5_o2");
}
@hhvm_export
fun sk_fn5_a(v: ?Vector.HH_varray2<Int>): void {
  sk_fn5_helper(v, "fn5_a");
}
@hhvm_export
fun sk_fn5_shape1(v: ?Shape1): void {
  sk_fn5_helper(v, "fn5_shape1");
}
@hhvm_export
fun sk_fn5_shape2(v: ?Shape2): void {
  sk_fn5_helper(v, "fn5_shape2");
}

@hhvm_import
native fun test_option_params(): void;

// -----------------------------------------------------------------------------
// exports with nullable returns

@hhvm_export
fun sk_fn4_b0(): Nullable<Bool> {
  Null()
}
@hhvm_export
fun sk_fn4_b1(): Nullable<Bool> {
  Box(false)
}
@hhvm_export
fun sk_fn4_b2(): Nullable<Bool> {
  Box(true)
}

@hhvm_export
fun sk_fn4_i0(): Nullable<Int> {
  Null()
}
@hhvm_export
fun sk_fn4_i1(): Nullable<Int> {
  Box(Int::min)
}
@hhvm_export
fun sk_fn4_i2(): Nullable<Int> {
  Box(Int::max)
}

@hhvm_export
fun sk_fn4_f0(): Nullable<Float> {
  Null()
}
@hhvm_export
fun sk_fn4_f1(): Nullable<Float> {
  Box(3.125)
}

@hhvm_export
fun sk_fn4_s0(): Nullable<String> {
  Null()
}
@hhvm_export
fun sk_fn4_s1(): Nullable<String> {
  Box("short")
}
@hhvm_export
fun sk_fn4_s2(): Nullable<String> {
  Box("this is a longer string")
}

@hhvm_export
fun sk_fn4_o0_0(): Nullable<HhvmObject0> {
  Null()
}
@hhvm_export
fun sk_fn4_o0_1(): Nullable<HhvmObject0> {
  Box(HhvmObject0::make("HhvmObject0"))
}

@hhvm_export
fun sk_fn4_o1_0(): Nullable<HhvmObject1> {
  Null()
}
@hhvm_export
fun sk_fn4_o1_1(): Nullable<HhvmObject1> {
  Box(HhvmObject1::make("HhvmObject1"))
}

@hhvm_export
fun sk_fn4_a_0(): Nullable<Vector.HH_varray2<Int>> {
  Null()
}
@hhvm_export
fun sk_fn4_a_1(): Nullable<Vector.HH_varray2<Int>> {
  Box(Vector.HH_varray2::make("HhvmArray"))
}

@hhvm_import
native fun test_nullable_returns(): void;

// -----------------------------------------------------------------------------

@hhvm_export
fun sk_fn6_b0(x: Int): ?Bool {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_b1(x: Int): ?Bool {
  print_string(`arg: ${x}`);
  Some(false)
}
@hhvm_export
fun sk_fn6_b2(x: Int): ?Bool {
  print_string(`arg: ${x}`);
  Some(true)
}

@hhvm_export
fun sk_fn6_i0(x: Int): ?Int {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_i1(x: Int): ?Int {
  print_string(`arg: ${x}`);
  Some(Int::min)
}
@hhvm_export
fun sk_fn6_i2(x: Int): ?Int {
  print_string(`arg: ${x}`);
  Some(Int::max)
}

@hhvm_export
fun sk_fn6_f0(x: Int): ?Float {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_f1(x: Int): ?Float {
  print_string(`arg: ${x}`);
  Some(3.125)
}

@hhvm_export
fun sk_fn6_s0(x: Int): ?String {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_s1(x: Int): ?String {
  print_string(`arg: ${x}`);
  Some("short")
}
@hhvm_export
fun sk_fn6_s2(x: Int): ?String {
  print_string(`arg: ${x}`);
  Some("this is a longer string")
}

@hhvm_export
fun sk_fn6_o0_0(x: Int): ?HhvmObject0 {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_o0_1(x: Int): ?HhvmObject0 {
  print_string(`arg: ${x}`);
  Some(HhvmObject0::make("HhvmObject0"))
}

@hhvm_export
fun sk_fn6_o1_0(x: Int): ?HhvmObject1 {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_o1_1(x: Int): ?HhvmObject1 {
  print_string(`arg: ${x}`);
  Some(HhvmObject1::make("HhvmObject1"))
}

@hhvm_export
fun sk_fn6_o2_0(x: Int): ?HhvmObject2 {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_o2_1(x: Int): ?HhvmObject2 {
  print_string(`arg: ${x}`);
  Some(HhvmObject2(100, 101))
}

@hhvm_export
fun sk_fn6_a_0(x: Int): ?Vector.HH_varray2<Int> {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_a_1(x: Int): ?Vector.HH_varray2<Int> {
  print_string(`arg: ${x}`);
  Some(Vector.HH_varray2::make("HhvmArray"))
}

@hhvm_export
fun sk_fn6_shape1_0(x: Int): ?Shape1 {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_shape1_1(x: Int): ?Shape1 {
  print_string(`arg: ${x}`);
  Some(Shape1::make("Shape1"))
}

@hhvm_export
fun sk_fn6_shape2_0(x: Int): ?Shape2 {
  print_string(`arg: ${x}`);
  None()
}
@hhvm_export
fun sk_fn6_shape2_1(x: Int): ?Shape2 {
  print_string(`arg: ${x}`);
  Some(Shape2{a => 200, b => 201})
}

@hhvm_import
native fun test_option_returns(): void;

// -----------------------------------------------------------------------------

module GatherTest;

@hhvm_copy
class Gather{
  a: Bool,
  b: Int,
  c: Float,
  d: String,
  e: Copy,
  f: ?Copy,
  g: ?Copy,
  h: Proxy,
  i: Base,
  j: Array<Int>,
  k: Map<Int, Int>,
  l: Set<Int>,
  m: ??Copy,
  n: ??Copy,
  o: ??Copy,
  p: CopyShape,
  q: (Int, String, Float),
  r: HH.Int,
  s: HH.Number,
  t: HhvmInterop.HHArray,
  u: EmptyCopy,
}

@hhvm_copy
base class Base{}

@hhvm_copy
class Copy{
  a: Int,
  b: Int,
} extends Base

@hhvm_shape_copy
class CopyShape{
  a: Int,
  b: Int,
}

@hhvm_import
class Proxy{
  a: Int,
  b: Int,
}

@hhvm_copy
class EmptyCopy()

@hhvm_export("sk_fn7")
fun sk_fn7(x: Gather): void {
  print_string("sk_fn7");
  debug(x);
}

@hhvm_import("test_gather_param")
native fun test_gather_param(): void;

module end;

// -----------------------------------------------------------------------------

module Bugs;

// Function with option in and complex out
@hhvm_export("Bugs_bug1")
fun bug1(v: ?Int): ?Int {
  v match {
  | None() -> Some(42)
  | Some(x) -> Some(x - 1)
  }
}

@hhvm_export("Bugs_bug2")
fun bug2(v: Int): HH.Mixed {
  HH.Int(v)
}

@hhvm_import
native fun test(): void;

module end;

// -----------------------------------------------------------------------------

fun main(): void {
  test_params();
  test_nullable_params();
  test_option_params();
  test_returns();
  test_nullable_returns();
  test_option_returns();
  GatherTest.test_gather_param();
  Bugs.test();
}
