@cpp_extern
native fun internalMakeObject(t: String): mutable Runtime.HhvmHandle;
@cpp_extern
native fun internalMakeArray(t: String): mutable Runtime.HhvmHandle;
@cpp_runtime("SKIP_HHVM_Object_getType")
native fun internalGetType(handle: readonly Runtime.HhvmHandle): String;

module Vector;

extension class HH_varray2 uses Show {
  readonly fun toString(): String {
    `HH_varray<>#${internalGetType(HhvmInterop.fetchProxyPointer(this))}`
  }
}

module end;

fun mixedRepr(x: HH.Mixed): String {
  x match {
  | HH.Null() -> "HH.Null"
  | HH.Bool(v) -> `HH.Bool(${v})`
  | HH.Int(v) -> `HH.Int(${v})`
  | HH.Float(v) -> `HH.Float(${v})`
  | HH.String(v) -> `HH.String(${v})`
  | HH.Darray _ -> "HH.Darray(...)"
  | HH.Dict _ -> "HH.Dict(...)"
  | HH.Object _ -> "HH.Object(...)"
  | HH.Keyset _ -> "HH.Keyset(...)"
  | HH.Varray _ -> "HH.Varray(...)"
  | HH.Vec _ -> "HH.Vec(...)"
  | HH.Resource _ -> "HH.Resource(...)"
  }
}

@hhvm_import
value class HhvmObject1{} uses Show {
  static fun make(): HhvmObject1 {
    handle = internalMakeObject("<no type>");
    HhvmInterop.createFromProxyPointer<HhvmObject1>(handle);
  }

  fun toString(): String {
    "HhvmObject1"
  }
}

// A class with a single field
@hhvm_import
base class HhvmObject2{
  a: Int,
} uses Show {
  overridable fun toString(): String {
    "HhvmObject2"
  }
}

@hhvm_import
class HhvmObject2_A{} extends HhvmObject2 {
  fun toString(): String {
    "HhvmObject2_A"
  }

  untracked static fun pushToString(): void {
    internalPushRet(HH.Int(1024));
  }

  static fun make(): HhvmObject2 {
    handle = internalMakeObject("HhvmObject2_A");
    HhvmInterop.createFromProxyPointer<HhvmObject2>(handle);
  }
}

@hhvm_import
class HhvmObject2_B{} extends HhvmObject2 {
  fun toString(): String {
    `HhvmObject2_B`
  }

  untracked static fun pushToString(): void {
    internalPushRet(HH.Int(1025));
  }

  static fun make(): HhvmObject2 {
    handle = internalMakeObject("HhvmObject2_B");
    HhvmInterop.createFromProxyPointer<HhvmObject2>(handle);
  }
}

@hhvm_copy
class HhvmObject7(
  a: Int,
  b: Int,
) uses Show {
  fun toString(): String {
    `HhvmObject7(${this.a}, ${this.b})`
  }

  untracked static fun push(): void {
    internalPushRet_obj(internalMakeObject("HhvmObject7"));
    internalPushRet(HH.Int(10));
    internalPushRet(HH.Int(20));
  }
}

@hhvm_shape
class HhvmShape1{
  a: Int,
  b: Int,
} uses Show {
  static fun make(): HhvmShape1 {
    handle = internalMakeArray("HhvmShape1");
    HhvmInterop.createFromProxyPointer<HhvmShape1>(handle);
  }

  fun toString(): String {
    "HhvmShape1"
  }

  untracked static fun pushToString(): void {
    internalPushRet(HH.Int(1025));
    internalPushRet(HH.Int(1026));
  }
}

@hhvm_shape_copy
class HhvmShape2(
  a: Int,
  b: Int,
) uses Show {
  fun toString(): String {
    `HhvmShape2(${this.a}, ${this.b})`
  }

  untracked static fun push(): void {
    internalPushRet_arr(internalMakeArray("HhvmShape2"));
    internalPushRet(HH.Int(21));
    internalPushRet(HH.Int(22));
  }
}

fun makeArray<T>(): Vector.HH_varray2<T> {
  handle = internalMakeArray("HH_varray");
  HhvmInterop.createFromProxyPointer<Vector.HH_varray2<T>>(handle);
}

@cpp_extern
untracked native fun internalPushRet(v: HH.Mixed): void;
@cpp_extern
@debug
untracked native fun internalPushRet_obj(o: readonly Runtime.HhvmHandle): void;
@cpp_extern
@debug
untracked native fun internalPushRet_arr(v: readonly Runtime.HhvmHandle): void;

// -----------------------------------------------------------------------------

module Params1;

@hhvm_import("fn1")
native fun fn1(): void;
@hhvm_import("fn1_b")
native fun fn1_b(v: Bool): void;
@hhvm_import("fn1_i")
native fun fn1_i(v: Int): void;
@hhvm_import("fn1_f")
native fun fn1_f(v: Float): void;
@hhvm_import("fn1_s")
native fun fn1_s(v: String): void;
@hhvm_import("fn1_o1")
native fun fn1_o1(v: HhvmObject1): void;
@hhvm_import("fn1_o2")
native fun fn1_o2(v: HhvmObject2): void;
@hhvm_import("fn1_o7")
native fun fn1_o7(v: HhvmObject7): void;
@hhvm_import("fn1_a")
native fun fn1_a(v: Vector.HH_varray2<Int>): void;
@hhvm_import("fn1_shape")
native fun fn1_shape(v: HhvmShape1): void;
@hhvm_import("fn1_shape2")
native fun fn1_shape2(v: HhvmShape2): void;
@hhvm_import("fn1_m")
native fun fn1_m(m: HH.Mixed): void;
@hhvm_import("fn1_tup")
untracked native fun fn1_tup(t: (Int, Int)): void;

untracked fun test_params1(): void {
  print_string("--- test_params1");
  // test non-nullable parameter types
  fn1();
  fn1_b(true);
  fn1_b(false);
  fn1_i(42);
  fn1_f(3.125);
  fn1_s("short");
  fn1_s("this is a long string");
  fn1_o1(HhvmObject1::make());
  fn1_o2(HhvmObject2_A::make());
  fn1_a(makeArray());
  fn1_shape(HhvmShape1::make());
  fn1_shape2(HhvmShape2(1, 2));
  fn1_o7(HhvmObject7(1, 2));
  fn1_m(HH.Null());
  fn1_m(HH.Int(123));
  fn1_m(HH.String("abcd"));
  fn1_tup((12, 13));
}

module end;

// -----------------------------------------------------------------------------

module Params2;

@hhvm_import("fn2_b")
native fun fn2_b(v: Nullable<Bool>): void;
@hhvm_import("fn2_i")
native fun fn2_i(v: Nullable<Int>): void;
@hhvm_import("fn2_f")
native fun fn2_f(v: Nullable<Float>): void;
@hhvm_import("fn2_s")
native fun fn2_s(v: Nullable<String>): void;
@hhvm_import("fn2_o1")
native fun fn2_o1(v: Nullable<HhvmObject1>): void;
@hhvm_import("fn2_o2")
native fun fn2_o2(v: Nullable<HhvmObject2>): void;
@hhvm_import("fn2_a")
native fun fn2_a(v: Nullable<Vector.HH_varray2<Int>>): void;

fun test_params2(): void {
  print_string("--- test_params2");
  // test nullable parameter types
  fn2_b(Null());
  fn2_i(Null());
  fn2_f(Null());
  fn2_s(Null());
  fn2_o1(Null());
  fn2_o2(Null());
  fn2_a(Null());

  fn2_b(Box(true));
  fn2_b(Box(false));
  fn2_i(Box(42));
  fn2_f(Box(3.125));
  fn2_s(Box("short"));
  fn2_s(Box("this is a long string"));
  fn2_o1(Box(HhvmObject1::make()));
  fn2_o2(Box(HhvmObject2_A::make()));
  fn2_a(Box(makeArray()));
}

module end;

// -----------------------------------------------------------------------------

module Params3;

@hhvm_import
native fun fn_b(v: ?Bool): void;

@hhvm_import
native fun fn_i(v: ?Int): void;

@hhvm_import
native fun fn_f(v: ?Float): void;

@hhvm_import
native fun fn_s(v: ?String): void;

@hhvm_import
native fun fn_o1(v: ?HhvmObject1): void;

@hhvm_import
native fun fn_o2(v: ?HhvmObject2): void;

@hhvm_import
native fun fn_a(v: ?Vector.HH_varray2<Int>): void;

@hhvm_import
native fun fn_o7(v: ?HhvmObject7): void;

@hhvm_import
native fun fn_shape1(v: ?HhvmShape1): void;

@hhvm_import
native fun fn_shape2(v: ?HhvmShape2): void;

fun test_params3(): void {
  print_string("--- test_params3");
  fn_b(None());
  fn_b(Some(false));
  fn_b(Some(true));

  fn_i(None());
  fn_i(Some(42));

  fn_f(None());
  fn_f(Some(3.5));

  fn_s(None());
  fn_s(Some("short"));
  fn_s(Some("this is a long string"));

  fn_o1(None());
  fn_o1(Some(HhvmObject1::make()));

  fn_o2(None());
  fn_o2(Some(HhvmObject2_A::make()));

  fn_a(None());
  fn_a(Some(makeArray()));

  fn_o7(None());
  fn_o7(Some(HhvmObject7(1, 2)));

  fn_shape1(None());
  fn_shape1(Some(HhvmShape1::make()));

  fn_shape2(None());
  fn_shape2(Some(HhvmShape2(1, 2)));
}

module end;

// -----------------------------------------------------------------------------

module Returns1;

@hhvm_import("fn3_b")
native fun fn3_b(): Bool;

@hhvm_import("fn3_i")
native fun fn3_i(): Int;

@hhvm_import("fn3_f")
native fun fn3_f(): Float;

@hhvm_import("fn3_s")
native fun fn3_s(): String;

@hhvm_import("fn3_o1")
native fun fn3_o1(): HhvmObject1;

@hhvm_import("fn3_o2")
native fun fn3_o2(): HhvmObject2;

@hhvm_import("fn3_o7")
native fun fn3_o7(): HhvmObject7;

@hhvm_import("fn3_a")
native fun fn3_a(): Vector.HH_varray2<Int>;

@hhvm_import("fn3_shape")
native fun fn3_shape(): HhvmShape1;

@hhvm_import("fn3_shape2")
native fun fn3_shape2(): HhvmShape2;

@hhvm_import
untracked native fun fn_mixed(): HH.Mixed;

@hhvm_import("fn3_tuple")
untracked native fun fn3_tuple(): (Int, Int);

untracked fun test_returns1(): void {
  print_string("--- test_returns");
  // test non-nullable return types
  internalPushRet(HH.Bool(false));
  print_string("b: " + fn3_b());
  internalPushRet(HH.Bool(true));
  print_string("b: " + fn3_b());
  internalPushRet(HH.Int(42));
  print_string("i: " + fn3_i());
  internalPushRet(HH.Float(3.125));
  print_string("f: " + fn3_f());
  internalPushRet(HH.String("short"));
  print_string("s: " + fn3_s());
  internalPushRet(HH.String("this is a long string"));
  print_string("s: " + fn3_s());

  internalPushRet_obj(internalMakeObject("<no type>"));
  print_string("o1: " + fn3_o1());

  internalPushRet_obj(internalMakeObject("HhvmObject2_A"));
  print_string("o2: " + fn3_o2());

  HhvmObject7::push();
  print_string(`o7: ${fn3_o7()}`);

  internalPushRet_arr(internalMakeArray("Array1"));
  print_string("a: " + fn3_a());

  internalPushRet_arr(internalMakeArray("HhvmShape1"));
  print_string("shape: " + fn3_shape());

  HhvmShape2::push();
  print_string(`shape2: ${fn3_shape2()}`);

  internalPushRet(HH.Null());
  print_string(`mixed: ${mixedRepr(fn_mixed())}`);
  internalPushRet(HH.Int(123));
  print_string(`mixed: ${mixedRepr(fn_mixed())}`);
  internalPushRet(HH.String("hello, world"));
  print_string(`mixed: ${mixedRepr(fn_mixed())}`);

  internalPushRet_arr(internalMakeArray("Tuple"));
  internalPushRet(HH.Int(22));
  internalPushRet(HH.Int(23));
  print_string(`tuple: ${fn3_tuple()}`);
}

module end;

// -----------------------------------------------------------------------------

module Returns2;

@hhvm_import("fn3_nb")
native fun fn3_nb(): Nullable<Bool>;
@hhvm_import("fn3_ni")
native fun fn3_ni(): Nullable<Int>;
@hhvm_import("fn3_nf")
native fun fn3_nf(): Nullable<Float>;
@hhvm_import("fn3_ns")
native fun fn3_ns(): Nullable<String>;
@hhvm_import("fn3_no1")
native fun fn3_no1(): Nullable<HhvmObject1>;
@hhvm_import("fn3_no2")
native fun fn3_no2(): Nullable<HhvmObject2>;
@hhvm_import("fn3_na")
native fun fn3_na(): Nullable<Vector.HH_varray2<Int>>;
@hhvm_import("fn3_nshape")
native fun fn3_nshape(): Nullable<HhvmShape1>;

untracked fun test_returns2(): void {
  print_string("--- Returns2");
  // test nullable return types
  internalPushRet(HH.Null());
  print_string("b: " + fn3_nb());
  internalPushRet(HH.Null());
  print_string("i: " + fn3_ni());
  internalPushRet(HH.Null());
  print_string("f: " + fn3_nf());
  internalPushRet(HH.Null());
  print_string("s: " + fn3_ns());
  internalPushRet(HH.Null());
  print_string("o1: " + fn3_no1());
  internalPushRet(HH.Null());
  print_string("o2: " + fn3_no2());
  internalPushRet(HH.Null());
  print_string("a: " + fn3_na());
  internalPushRet(HH.Null());
  print_string(`shape: ${fn3_nshape()}`);

  internalPushRet(HH.Bool(false));
  print_string("b: " + fn3_nb());
  internalPushRet(HH.Bool(true));
  print_string("b: " + fn3_nb());
  internalPushRet(HH.Int(42));
  print_string("i: " + fn3_ni());
  internalPushRet(HH.Float(3.125));
  print_string("f: " + fn3_nf());
  internalPushRet(HH.String("short"));
  print_string("s: " + fn3_ns());
  internalPushRet(HH.String("this is a long string"));
  print_string("s: " + fn3_ns());
  internalPushRet_obj(internalMakeObject("<no type>"));
  print_string("o1: " + fn3_no1());
  internalPushRet_obj(internalMakeObject("HhvmObject2_B"));
  print_string("o2: " + fn3_no2());
  internalPushRet_arr(internalMakeArray("Array3"));
  print_string("a: " + fn3_na());
  internalPushRet(HH.Null());
  print_string("shape: " + fn3_nshape());
  internalPushRet_arr(internalMakeArray("Array4"));
  print_string("shape: " + fn3_nshape());
}

module end;

// -----------------------------------------------------------------------------

module Returns3;

@hhvm_import
untracked native fun fn_b(): ?Bool;

@hhvm_import
untracked native fun fn_i(): ?Int;

@hhvm_import
untracked native fun fn_f(): ?Float;

@hhvm_import
untracked native fun fn_s(): ?String;

@hhvm_import
untracked native fun fn_o1(): ?HhvmObject1;

@hhvm_import
untracked native fun fn_o2(): ?HhvmObject2;

@hhvm_import
untracked native fun fn_o7(): ?HhvmObject7;

@hhvm_import
untracked native fun fn_a(): ?Vector.HH_varray2<Int>;

@hhvm_import
untracked native fun fn_shape1(): ?HhvmShape1;

@hhvm_import
untracked native fun fn_shape2(): ?HhvmShape2;

untracked fun test_returns3(): void {
  print_string("--- Returns3");

  internalPushRet(HH.Null());
  print_string(`b0: ${fn_b()}`);
  internalPushRet(HH.Bool(true));
  print_string(`b1: ${fn_b()}`);
  internalPushRet(HH.Bool(false));
  print_string(`b2: ${fn_b()}`);

  internalPushRet(HH.Null());
  print_string(`i0: ${fn_i()}`);
  internalPushRet(HH.Int(123));
  print_string(`i1: ${fn_i()}`);

  internalPushRet(HH.Null());
  print_string(`f0: ${fn_f()}`);
  internalPushRet(HH.Float(3.5));
  print_string(`f1: ${fn_f()}`);

  internalPushRet(HH.Null());
  print_string(`s0: ${fn_s()}`);
  internalPushRet(HH.String("short"));
  print_string(`s1: ${fn_s()}`);
  internalPushRet(HH.String("this is a long string"));
  print_string(`s2: ${fn_s()}`);

  internalPushRet(HH.Null());
  print_string(`o1: ${fn_o1()}`);
  internalPushRet_obj(internalMakeObject("Object1"));
  print_string(`o1: ${fn_o1()}`);

  internalPushRet(HH.Null());
  print_string(`o2: ${fn_o2()}`);
  internalPushRet_obj(internalMakeObject("HhvmObject2_B"));
  print_string(`o2: ${fn_o2()}`);

  internalPushRet(HH.Null());
  print_string(`o7: ${fn_o7()}`);
  HhvmObject7::push();
  print_string(`o7: ${fn_o7()}`);

  internalPushRet(HH.Null());
  print_string(`shape1: ${fn_a()}`);
  internalPushRet_arr(internalMakeArray("Array1"));
  print_string(`shape1: ${fn_a()}`);

  internalPushRet(HH.Null());
  print_string(`shape1: ${fn_shape1()}`);
  internalPushRet_arr(internalMakeArray("Shape1"));
  print_string(`shape1: ${fn_shape1()}`);

  internalPushRet(HH.Null());
  print_string(`shape2: ${fn_shape2()}`);
  HhvmShape2::push();
  print_string(`shape2: ${fn_shape2()}`);
}

module end;

// -----------------------------------------------------------------------------

@hhvm_import
value class HhvmObject3{} uses Show {
  static fun make(): HhvmObject3 {
    handle = internalMakeObject("<no type>");
    HhvmInterop.createFromProxyPointer<HhvmObject3>(handle);
  }

  @hhvm_import
  native fun method1(): void;

  @hhvm_import
  static native fun staticMethod1(): void;

  fun toString(): String {
    "<object3:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

@hhvm_import
value class HhvmObject4{} uses Show {
  static fun make(): HhvmObject4 {
    handle = internalMakeObject("HhvmObject4");
    HhvmInterop.createFromProxyPointer<HhvmObject4>(handle);
  }

  @hhvm_import
  native fun method1(): void;

  fun toString(): String {
    "<object4:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

fun test_methods(): void {
  print_string("--- test_methods");
  HhvmObject3::make().method1();
  HhvmObject3::staticMethod1();
  HhvmObject4::make().method1();
}

// -----------------------------------------------------------------------------

// Make sure to use a class not referenced by a function so we ensure that we
// specialize Box<> and Null<> for field references.
@hhvm_import
value class HhvmObject6{} uses Show {
  static fun make(): HhvmObject6 {
    handle = internalMakeObject("<no type>");
    HhvmInterop.createFromProxyPointer<HhvmObject6>(handle);
  }

  fun toString(): String {
    "<object6:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

@hhvm_import
mutable class HhvmObject5{
  mutable field_bool: Bool,
  mutable field_int: Int,
  mutable field_float: Float,
  mutable field_string: String,
  mutable field_object1: HhvmObject6,
  mutable field_object2: HhvmObject2,
  mutable field_arrayKey: HH.Arraykey,
  mutable field_nonnull: HH.Nonnull,
  mutable field_nullable_bool: Nullable<Bool>,
  mutable field_nullable_int: Nullable<Int>,
  mutable field_nullable_float: Nullable<Float>,
  mutable field_nullable_string: Nullable<String>,
  mutable field_nullable_object1: Nullable<HhvmObject6>,
  mutable field_nullable_object2: Nullable<HhvmObject2>,
  mutable field_nullable_arrayKey: Nullable<HH.Arraykey>,
  mutable field_nullable_mixed: HH.Mixed,
} {
  static fun make(): HhvmObject5 {
    handle = internalMakeObject("<no type>");
    HhvmInterop.createFromProxyPointer<HhvmObject5>(handle);
  }

  static fun mmake(): mutable HhvmObject5 {
    handle = internalMakeObject("<no type>");
    HhvmInterop.createFromProxyPointer<mutable HhvmObject5>(handle);
  }
}

untracked fun test_getters(): void {
  print_string("--- test_getters");
  // Test some getters - note that exhaustive testing is done in hhvm_prop.sk
  internalPushRet(HH.Bool(false));
  print_string(`field_bool: ${HhvmObject5::make().field_bool}`);
  internalPushRet(HH.Bool(true));
  print_string(`field_bool: ${HhvmObject5::make().field_bool}`);
  internalPushRet(HH.Int(42));
  print_string(`field_int: ${HhvmObject5::make().field_int}`);
  internalPushRet(HH.Float(3.125));
  print_string(`field_float: ${HhvmObject5::make().field_float}`);
  internalPushRet(HH.String("hello"));
  print_string(`field_string: ${HhvmObject5::make().field_string}`);
  internalPushRet_obj(internalMakeObject("<no type>"));
  print_string(`field_object: ${HhvmObject5::make().field_object1}`);
  internalPushRet_obj(internalMakeObject("HhvmObject2_B"));
  print_string(`field_object: ${HhvmObject5::make().field_object2}`);
  internalPushRet(HH.Int(123));
  print_string(`field_arrayKey: ${HhvmObject5::make().field_arrayKey}`);
  internalPushRet(HH.String("hello"));
  print_string(`field_arrayKey: ${HhvmObject5::make().field_arrayKey}`);

  // FIXME: We should be able to catch this but for some reason it's not working
  // This should throw since a float isn't an arraykey!
  // internalPushRet(HH.Float(3.14));
  // try {
  //   print_string(`field_arrayKey: ${HhvmObject5::make().field_arrayKey}`);
  //   invariant_violation("should never get here");
  // } catch {
  // | RuntimeError _ -> void
  // };

  internalPushRet(HH.Int(123));
  print_string(
    `field_nonnull: ${mixedRepr(HhvmObject5::make().field_nonnull)}`,
  );

  internalPushRet(HH.Null());
  print_string(
    `field_nullable_bool: ${HhvmObject5::make().field_nullable_bool}`,
  );
  internalPushRet(HH.Bool(false));
  print_string(
    `field_nullable_bool: ${HhvmObject5::make().field_nullable_bool}`,
  );
  internalPushRet(HH.Bool(true));
  print_string(
    `field_nullable_bool: ${HhvmObject5::make().field_nullable_bool}`,
  );

  internalPushRet(HH.Null());
  print_string(`field_nullable_int: ${HhvmObject5::make().field_nullable_int}`);
  internalPushRet(HH.Int(42));
  print_string(`field_nullable_int: ${HhvmObject5::make().field_nullable_int}`);

  internalPushRet(HH.Null());
  print_string(
    `field_nullable_float: ${HhvmObject5::make().field_nullable_float}`,
  );
  internalPushRet(HH.Float(3.125));
  print_string(
    `field_nullable_float: ${HhvmObject5::make().field_nullable_float}`,
  );

  internalPushRet(HH.Null());
  print_string(
    `field_nullable_string: ${HhvmObject5::make().field_nullable_string}`,
  );
  internalPushRet(HH.String("hello"));
  print_string(
    `field_nullable_string: ${HhvmObject5::make().field_nullable_string}`,
  );

  internalPushRet(HH.Null());
  print_string(
    `field_nullable_object: ${HhvmObject5::make().field_nullable_object1}`,
  );
  internalPushRet_obj(internalMakeObject("<no type>"));
  print_string(
    `field_nullable_object: ${HhvmObject5::make().field_nullable_object1}`,
  );

  internalPushRet(HH.Null());
  print_string(
    `field_nullable_object: ${HhvmObject5::make().field_nullable_object2}`,
  );

  internalPushRet_obj(internalMakeObject("HhvmObject2_B"));
  print_string(
    `field_nullable_object: ${HhvmObject5::make().field_nullable_object2}`,
  );

  internalPushRet(HH.Null());
  print_string(
    `field_nullable_arrayKey: ${HhvmObject5::make().field_nullable_arrayKey}`,
  );
  internalPushRet(HH.Int(234));
  print_string(
    `field_nullable_arrayKey: ${HhvmObject5::make().field_nullable_arrayKey}`,
  );
  internalPushRet(HH.String("there"));
  print_string(
    `field_nullable_arrayKey: ${HhvmObject5::make().field_nullable_arrayKey}`,
  );

  internalPushRet(HH.Int(345));
  print_string(`shape: ${HhvmShape1::make().a}`);
}

@debug
fun test_setters(): void {
  print_string("--- test_setters");
  HhvmObject5::mmake().!field_bool = false;
  HhvmObject5::mmake().!field_bool = true;
  HhvmObject5::mmake().!field_int = 42;
  HhvmObject5::mmake().!field_float = -6.25;
  HhvmObject5::mmake().!field_string = "short";
  HhvmObject5::mmake().!field_string = "this is a long string";
  HhvmObject5::mmake().!field_object1 = HhvmObject6::make();
  HhvmObject5::mmake().!field_object2 = HhvmObject2_A::make();
  HhvmObject5::mmake().!field_arrayKey = HH.Int(123);
  HhvmObject5::mmake().!field_arrayKey = HH.String("abc");
  HhvmObject5::mmake().!field_arrayKey = HH.String("123");
  HhvmObject5::mmake().!field_arrayKey = (HH.Int(234) : HH.Arraykey);
  HhvmObject5::mmake().!field_arrayKey = (HH.String("def") : HH.Arraykey);
  HhvmObject5::mmake().!field_nonnull = HH.Bool(false);
  HhvmObject5::mmake().!field_nonnull = HH.Int(17);
  HhvmObject5::mmake().!field_nonnull = HH.Float(3.25);
  HhvmObject5::mmake().!field_nonnull = HH.String("hello");

  HhvmObject5::mmake().!field_nullable_bool = Null();
  HhvmObject5::mmake().!field_nullable_bool = Box(false);
  HhvmObject5::mmake().!field_nullable_bool = Box(true);
  HhvmObject5::mmake().!field_nullable_int = Null();
  HhvmObject5::mmake().!field_nullable_int = Box(42);
  HhvmObject5::mmake().!field_nullable_float = Null();
  HhvmObject5::mmake().!field_nullable_float = Box(-6.25);
  HhvmObject5::mmake().!field_nullable_string = Null();
  HhvmObject5::mmake().!field_nullable_string = Box("short");
  HhvmObject5::mmake().!field_nullable_string = Box("this is a long string");
  HhvmObject5::mmake().!field_nullable_object1 = Null();
  HhvmObject5::mmake().!field_nullable_object1 = Box(HhvmObject6::make());
  HhvmObject5::mmake().!field_nullable_object2 = Null();
  HhvmObject5::mmake().!field_nullable_object2 = Box(HhvmObject2_A::make());
  HhvmObject5::mmake().!field_nullable_arrayKey = Null();
  HhvmObject5::mmake().!field_nullable_arrayKey = Box(HH.Int(123));
  HhvmObject5::mmake().!field_nullable_arrayKey = Box(HH.String("abc"));
  HhvmObject5::mmake().!field_nullable_mixed = HH.Null();
  HhvmObject5::mmake().!field_nullable_mixed = HH.Int(123);
}

// -----------------------------------------------------------------------------

@hhvm_import
base class A{} uses Show {
  fun toString(): String;
}

@hhvm_import("A")
class ConcreteA{} extends A {
  fun toString(): String {
    "<A:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

@hhvm_import
base class B{} extends A {}

@hhvm_import("B")
class ConcreteB{} extends B {
  fun toString(): String {
    "<B:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

@hhvm_import
class C{} extends B {
  fun toString(): String {
    "<C:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

@hhvm_import
class D{} extends A {
  fun toString(): String {
    "<D:" + internalGetType(HhvmInterop.fetchProxyPointer(this)) + ">"
  }
}

fun test_inherit(): void {
  print_string("--- test_inherit");
  handle1 = internalMakeObject("A");
  a = HhvmInterop.createFromProxyPointer<A>(handle1);
  print_string(`${a}`);

  handle2 = internalMakeObject("B");
  b = HhvmInterop.createFromProxyPointer<A>(handle2);
  print_string(`${b}`);

  handle3 = internalMakeObject("C");
  c = HhvmInterop.createFromProxyPointer<A>(handle3);
  print_string(`${c}`);

  handle4 = internalMakeObject("D");
  try {
    _ = HhvmInterop.createFromProxyPointer<B>(handle4);
    invariant_violation("should not get here");
  } catch {
  | RuntimeError(msg) -> print_string(`caught runtime error: ${msg}`)
  | _ -> print_string("Unexpected exception caught")
  };
}

// -----------------------------------------------------------------------------

module CommonBase;

base class Base{deferred a: Int, deferred b: Int, deferred c: Int} uses Show {
  untracked static fun pushToString(i: Int): void {
    internalPushRet(HH.Int(i + 1));
    internalPushRet(HH.Int(i + 2));
    internalPushRet(HH.Int(i + 3));
  }

  fun toString(): String {
    `${this.kind()}{a => ${this.a}, b => ${this.b}, c => ${this.c}}`
  }

  fun kind(): String
  | Import _ -> "Import"
  | Copy _ -> "Copy"
}

@hhvm_import("CommonBase::Import")
class Import{} extends Base {}

@hhvm_copy("CommonBase::Copy")
class Copy{} extends Base {}

untracked fun common(base: Base): void {
  print_string(`Common: ${base}`);
}

untracked fun test1(): void {
  print_string("--- CommonBase.test1");

  a = HhvmInterop.createFromProxyPointer<Import>(
    internalMakeObject("CommonBase::Import"),
  );
  Base::pushToString(1000);
  print_string(`Import: ${a}`);
  Base::pushToString(1000);
  common(a);

  Base::pushToString(2000);
  b = HhvmInterop.copyFromHhvm<Copy>(internalMakeObject("CommonBase::Copy"));
  print_string(`Copy: ${b}`);
  common(b);
}

module end;

// -----------------------------------------------------------------------------

untracked fun main(): void {
  Params1.test_params1();
  Params2.test_params2();
  Params3.test_params3();
  Returns1.test_returns1();
  Returns2.test_returns2();
  Returns3.test_returns3();
  test_methods();
  test_getters();
  test_setters();
  test_inherit();
  CommonBase.test1();
}
