@cpp_extern
untracked native fun internalMakeObject(t: String): mutable Runtime.HhvmHandle;

@cpp_extern
untracked native fun internalMakeArray(
  t: String,
  sz: Int,
): mutable Runtime.HhvmHandle;

@cpp_extern
untracked native fun internalMakeShape(t: String): mutable Runtime.HhvmHandle;

@cpp_extern
untracked native fun internalPushRet(value: HH.Mixed): void;

@cpp_extern
untracked native fun internalPushRet_obj(
  value: readonly Runtime.HhvmHandle,
): void;

@cpp_extern
untracked native fun internalPushRet_arr(
  value: readonly Runtime.HhvmHandle,
): void;

// -----------------------------------------------------------------------------

module NormalClass;

@hhvm_copy("Class1")
class Class1{
  a1: Int,
  b1: String,
  c1: Float,
  d1: Bool,
  e1: Vector<Int>,
  f1: Map<String, Int>,
  g1: Set<Int>,
  h1: (Int, Int),
  i1: HH.Lambda,
}

untracked fun test_copy1(): void {
  print_string("test_copy1:");
  handle = internalMakeObject("Class1");
  // a1
  internalPushRet(HH.Int(42));
  // b1
  internalPushRet(HH.String("hello"));
  // c1
  internalPushRet(HH.Float(3.5));
  // d1
  internalPushRet(HH.Bool(true));
  // e1
  internalPushRet_arr(internalMakeArray("Array1", 3));
  internalPushRet(HH.Int(1));
  internalPushRet(HH.Int(2));
  internalPushRet(HH.Int(3));
  // f1
  internalPushRet_arr(internalMakeArray("Array1", 3));
  internalPushRet(HH.String("A"));
  internalPushRet(HH.Int(1));
  internalPushRet(HH.String("B"));
  internalPushRet(HH.Int(2));
  internalPushRet(HH.String("C"));
  internalPushRet(HH.Int(3));
  // g1
  internalPushRet_arr(internalMakeArray("Array1", 3));
  internalPushRet(HH.Int(10));
  internalPushRet(HH.Int(20));
  internalPushRet(HH.Int(30));
  // h1
  internalPushRet_arr(internalMakeArray("Array1", 2));
  internalPushRet(HH.Int(4));
  internalPushRet(HH.Int(5));
  // i1
  internalPushRet(HH.String("Lambda"));
  a = (HhvmInterop.copyFromHhvm(handle) : Class1);
  debug(a);
  _ = HhvmInterop.copyToHhvm(a);
}

module end;

// -----------------------------------------------------------------------------

module ValueClass;

@hhvm_copy("Class2")
value class Class2{
  a2: Int,
  b2: String,
  c2: Float,
  d2: Bool,
}

untracked fun test_copy2(): void {
  print_string("test_copy2:");
  handle = internalMakeObject("Class2");
  internalPushRet(HH.Int(42));
  internalPushRet(HH.String("hello"));
  internalPushRet(HH.Float(3.5));
  internalPushRet(HH.Bool(true));
  a = (HhvmInterop.copyFromHhvm(handle) : Class2);
  debug(a);
  _ = HhvmInterop.copyToHhvm(a);
}

module end;

// -----------------------------------------------------------------------------

module ContainNormal;

@hhvm_copy("Class3a")
class Class3a{
  a3a: Int,
  b3a: String,
  c3a: Float,
  d3a: Bool,
}

@hhvm_copy("Class3")
class Class3{
  a3: Int,
  b3: Class3a,
  c3: ValueClass.Class2,
}

untracked fun test_copy3(): void {
  print_string("test_copy3:");
  handle = internalMakeObject("Class3");
  internalPushRet(HH.Int(43));
  internalPushRet_obj(internalMakeObject("Class3a"));
  // Class3a
  internalPushRet(HH.Int(42));
  internalPushRet(HH.String("hello"));
  internalPushRet(HH.Float(3.5));
  internalPushRet(HH.Bool(true));
  internalPushRet_obj(internalMakeObject("Class2"));
  // Class2
  internalPushRet(HH.Int(42));
  internalPushRet(HH.String("hello"));
  internalPushRet(HH.Float(3.5));
  internalPushRet(HH.Bool(true));
  a = (HhvmInterop.copyFromHhvm(handle) : Class3);
  debug(a);
  _ = HhvmInterop.copyToHhvm(a);
}

module end;

// -----------------------------------------------------------------------------

module ContainValue;

@hhvm_copy("Class4a")
class Class4a{
  a4a: Int,
  b4a: String,
  c4a: Float,
  d4a: Bool,
}

@hhvm_copy("Class4")
value class Class4{
  a4: Int,
  b4: Class4a,
  c4: ValueClass.Class2,
}

untracked fun test_copy4(): void {
  print_string("test_copy4:");
  handle = internalMakeObject("Class4");
  internalPushRet(HH.Int(44));
  internalPushRet_obj(internalMakeObject("Class4a"));
  // Class4a
  internalPushRet(HH.Int(42));
  internalPushRet(HH.String("hello"));
  internalPushRet(HH.Float(4.5));
  internalPushRet(HH.Bool(true));
  internalPushRet_obj(internalMakeObject("Class2"));
  // Class2
  internalPushRet(HH.Int(42));
  internalPushRet(HH.String("hello"));
  internalPushRet(HH.Float(4.5));
  internalPushRet(HH.Bool(true));
  a = (HhvmInterop.copyFromHhvm(handle) : Class4);
  debug(a);
  _ = HhvmInterop.copyToHhvm(a);
}

module end;

// -----------------------------------------------------------------------------

module Inherit;

@hhvm_copy("ClassA")
base class ClassA{
  a: Int,
}

@hhvm_copy("ClassA")
class ConcreteClassA{} extends ClassA

@hhvm_copy("ClassB")
class ClassB{
  b: Int,
} extends ClassA

untracked fun test(): void {
  print_string("Inherit.test:");

  // make sure that if we specify a base class we actually get the correct
  // derived class
  {
    handle = internalMakeObject("ClassB");
    internalPushRet(HH.Int(10));
    internalPushRet(HH.Int(12));
    a = (HhvmInterop.copyFromHhvm(handle) : ClassA);
    debug(a);
    _ = HhvmInterop.copyToHhvm(a);
  };

  // And make sure that if it really is the base class we have something to instantiate
  {
    handle = internalMakeObject("ClassA");
    internalPushRet(HH.Int(10));
    a = (HhvmInterop.copyFromHhvm(handle) : ClassA);
    debug(a);
    _ = HhvmInterop.copyToHhvm(a);
  };
}

module end;

// -----------------------------------------------------------------------------

module Shape;

@hhvm_shape_copy("Shape1")
class Shape1{
  a: Int,
  b: ?Int,
}

untracked fun test(): void {
  print_string("test_shape1:");
  handle = internalMakeShape("Shape1");
  internalPushRet(HH.Int(42));
  internalPushRet(HH.Null());
  a = (HhvmInterop.copyFromHhvm(handle) : Shape1);
  debug(a);
  _ = HhvmInterop.copyToHhvm(a);
}

module end;

// -----------------------------------------------------------------------------

module Array;

untracked fun test(): void {
  print_string("test_array:");
  handle = internalMakeArray("Array1", 3);
  internalPushRet(HH.Int(10));
  internalPushRet(HH.Int(11));
  internalPushRet(HH.Int(12));
  a = (HhvmInterop.copyFromHhvm(handle) : Array<Int>);
  debug(a);
}

module end;

// -----------------------------------------------------------------------------

untracked fun main(): void {
  NormalClass.test_copy1();
  ValueClass.test_copy2();
  ContainNormal.test_copy3();
  ContainValue.test_copy4();
  Inherit.test();
  Shape.test();
  Array.test();
}
