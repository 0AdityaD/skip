// -----------------------------------------------------------------------------

module Svmi;

extension base class ParamType {
  fun toString(): String
  | Svmi.ParamTypeVoid() -> "Void"
  | Svmi.ParamTypeBool() -> "Bool"
  | Svmi.ParamTypeNullableBool() -> "?Bool"
  | Svmi.ParamTypeInt64() -> "Int64"
  | Svmi.ParamTypeNullableInt64() -> "?Int64"
  | Svmi.ParamTypeFloat64() -> "Float64"
  | Svmi.ParamTypeNullableFloat64() -> "?Float64"
  | Svmi.ParamTypeString() -> "String"
  | Svmi.ParamTypeNullableString() -> "?String"
  | Svmi.ParamTypeHhvmObject() -> "HhvmObject"
  | Svmi.ParamTypeNullableHhvmObject() -> "?HhvmObject"
  | Svmi.ParamTypeHhvmArray() -> "HhvmArray"
  | Svmi.ParamTypeNullableHhvmArray() -> "?HhvmArray"
  | Svmi.ParamTypeMixed() -> "Mixed"
}

extension base class ClassIdMagic {
  fun toString(): String
  | Svmi.ClassIdUnknown() -> "array"
  | Svmi.ClassIdVec() -> "Vec"
  | Svmi.ClassIdDict() -> "Dict"
  | Svmi.ClassIdKeyset() -> "Keyset"
  | Svmi.ClassIdTuple() -> "Tuple"
}

extension base class ClassKind {
  fun toString(): String
  | KBase() -> "base"
  | KObjectProxy() -> "proxy object"
  | KObjectCopy() -> "copy object"
  | KShapeProxy() -> "proxy shape"
  | KShapeCopy() -> "copy shape"
}

module end;

fun describeType(table: Svmi.TypeTable, t: Svmi.Desc): String {
  paramType = Svmi.ParamType::fromCode(t.paramType);
  desc = paramType match {
  | Svmi.ParamTypeHhvmObject()
  | Svmi.ParamTypeNullableHhvmObject() ->
    invariant(t.targs.isEmpty(), "invalid targs");
    `${table.classes[t.classId].name}(object)`
  | Svmi.ParamTypeHhvmArray()
  | Svmi.ParamTypeNullableHhvmArray() ->
    if (t.classId >= 0) {
      invariant(t.targs.isEmpty(), "invalid targs");
      `${table.classes[t.classId].name}(shape)`
    } else {
      `${Svmi.ClassIdMagic::fromCode(t.classId)}<${t.targs
        .map(a -> describeType(table, a))
        .join(", ")}>`
    }
  | _ ->
    invariant(t.classId == 0, "invalid classId");
    invariant(t.targs.isEmpty(), "invalid targs");
    return paramType.toString()
  };

  if (paramType.isNullable()) {
    "?" + desc
  } else {
    desc
  }
}

fun dumpField(table: Svmi.TypeTable, f: Svmi.Field): void {
  print_string(
    `    Field(name => '${f.name}', typ => ${describeType(table, f.typ)})`,
  );
}

fun dumpClass(table: Svmi.TypeTable, cls: Svmi.Class): void {
  if (cls.kind == 0) {
    invariant(cls.fields.isEmpty(), "fields not allowed on base classes");
    print_string(
      `Class(name => '${cls.name}', kind => ${Svmi.ClassKind::fromCode(
        cls.kind,
      )})`,
    );
  } else {
    print_string(
      `Class(name => '${cls.name}', kind => ${Svmi.ClassKind::fromCode(
        cls.kind,
      )},`,
    );
    print_string("  fields => [");
    cls.fields.each(c -> dumpField(table, c));
    print_string("])");
  }
}

module Test1;

@hhvm_copy("Class1")
class Class1{
  a0: Bool,
  a1: ?Bool,
  b0: Int,
  b1: ?Int,
  c0: Float,
  c1: ?Float,
  d0: String,
  d1: ?String,
  e0: Copy,
  e1: ?Copy,
  e2: ??Copy,
  f0: Proxy,
  f1: ?Proxy,
  g0: Base,
  g1: ?Base,
  h0: Array<Int>,
  h1: ?Array<Int>,
  i0: Map<Int, Int>,
  i1: ?Map<Int, Int>,
  j0: Set<Int>,
  j1: ?Set<Int>,
  k0: CopyShape,
  k1: ?CopyShape,
  l0: (Int, String, Float),
  l1: ?(Int, String, Float),
  m0: HH.Int,
  m1: ?HH.Int,
  n0: HH.Number,
  n1: ?HH.Number,
  o0: HhvmInterop.HHArray,
  o1: ?HhvmInterop.HHArray,
  p0: EmptyCopy,
  p1: ?EmptyCopy,
}

@hhvm_copy
base class Base{}

@hhvm_copy
class Copy{
  a: Int,
  b: Int,
} extends Base

@hhvm_shape_copy
class CopyShape{
  a: Int,
  b: Int,
}

@hhvm_import
class Proxy{
  a: Int,
  b: Int,
}

@hhvm_copy
class EmptyCopy()

// Ensure that our class is referenced
untracked fun test(): void {
  interestingClasses = Set[
    "Class1",
    "Test1.Base",
    "Test1.Copy",
    "Test1.CopyShape",
    "Test1.Proxy",
    "Test1.EmptyCopy",
  ];
  table = Svmi.hhvmTypeTable();
  table.classes
    .filter(cls -> interestingClasses.contains(cls.name))
    .sortedBy(cls ~> cls.name)
    .each(c -> dumpClass(table, c));
}

module end;

// -----------------------------------------------------------------------------

untracked fun main(): void {
  Test1.test();
}
