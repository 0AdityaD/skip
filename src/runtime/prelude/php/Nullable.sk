/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

base class Nullable<+T: nonNullable> uses Show[T: readonly Show] {
  children =
  | Box(
    value: T,
  ) // Do not make value mutable
  | Null()

  fun getx(): T
  | Box(value) -> value
  | Null() -> invariant_violation("getx on Null")

  fun default<T2: nonNullable>[T: T2](x: T2): T2
  | Box(y) -> y
  | Null() -> x

  fun isBox(): Bool
  | Box _ -> true
  | Null() -> false

  fun isNull(): Bool
  | Box _ -> false
  | Null() -> true

  fun each(f: T -> void): void
  | Box(x) -> f(x)
  | Null() -> void

  fun test(f: T -> Bool): Bool
  | Box(x) -> f(x)
  | Null() -> false

  fun map<U: nonNullable>(f: T -> U): Nullable<U>
  | Box(x) -> Box(f(x))
  | Null() -> Null()

  fun flatMap<U: nonNullable>(f: T -> Nullable<U>): Nullable<U>
  | Box(x) -> f(x)
  | Null() -> Null()

  fun toString[T: readonly Show](): String
  | Box(x) -> "Box(" + x + ")"
  | Null() -> "Null()"

  fun ==<T2: Equality>[T: T2](other: Nullable<T2>): Bool
  | Box(x) ->
    other match {
    | Box(y) -> x == y
    | Null() -> false
    }
  | Null() ->
    other match {
    | Box(_) -> false
    | Null() -> true
    }

  fun !=<T2: Equality>[T: T2](other: Nullable<T2>): Bool {
    !(this == other)
  }

  // async frozen fun gen<U: nonNullable>[T: ^U](): ^Nullable<U>
  // | Null() -> Null()
  // | Box(x) -> Box(await x)

  async frozen fun genMap<U: nonNullable>(f: T ~> ^U): ^Nullable<U>
  | Null() -> Null()
  | Box(x) -> Box(await f(x))

  async frozen fun genFilter(p: T ~> ^Bool): ^Nullable<T>
  | Null() -> Null()
  | option @ Box(x) -> if (await p(x)) option else Null()
}
