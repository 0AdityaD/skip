/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module HhvmInterop_Gather;

@intrinsic
private native fun gatherConvert<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (T, Int);

@intrinsic
private native fun fetchRawScalar<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (T, Int);

private fun deserializeBool(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (Bool, Int) {
  (value, !offset) = fetchRawScalar<Int>(data, offset);
  (value != 0, offset)
}

private fun deserializeOption<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (?T, Int) {
  (isSome, !offset) = fetchRawScalar<Int>(data, offset);
  if (isSome == 1) {
    (obj, !offset) = gatherConvert<T>(data, offset);
    (Some(obj), offset)
  } else {
    (None(), offset)
  }
}

private fun deserializeOptionOption<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (??T, Int) {
  (isSome, !offset) = fetchRawScalar<Int>(data, offset);
  result = isSome match {
  | 0 -> Some(None())
  | -1 -> None()
  | _ ->
    (obj, !offset) = gatherConvert<T>(data, offset);
    Some(Some(obj))
  };
  (result, offset)
}

private fun deserializeProxy<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (T, Int) {
  (handle, !offset) = fetchRawScalar<Runtime.HhvmHandle>(data, offset);
  (HhvmInterop.createFromProxyPointer<T>(handle), offset)
}

@intrinsic
private native fun deserializeKBase(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable Runtime.GCPointer, Int);

@intrinsic
private native fun mDeserializeKBase(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable Runtime.GCPointer, Int);

private fun deserializeArray<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (Array<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  array = Array<T>::fillBy(size, _ -> {
    (value, !offset) = gatherConvert<T>(data, offset);
    (value : T)
  });
  (array, offset)
}

private fun mDeserializeArray<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable Array<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  array = Array::mfillBy(size, _ -> {
    (value, !offset) = gatherConvert<T>(data, offset);
    value
  });
  (array, offset)
}

private fun deserializeVector<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (Vector<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  array = Vector<T>::fillBy(size, _ -> {
    (value, !offset) = gatherConvert<T>(data, offset);
    (value : T)
  });
  (array, offset)
}

private fun mDeserializeVector<T>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable Vector<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  array = Vector::mfillBy(size, _ -> {
    (value, !offset) = gatherConvert<T>(data, offset);
    value
  });
  (array, offset)
}

private fun deserializeMap<Tk: Hashable & Equality, Tv>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (Map<Tk, Tv>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  map = Map<Tk, Tv>::createFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<Tk>(data, offset);
      (value, !offset) = gatherConvert<Tv>(data, offset);
      (key, value)
    }),
  );
  (map, offset)
}

private fun mDeserializeMap<Tk: Hashable & Equality, Tv>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable Map<Tk, Tv>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  map = Map<Tk, Tv>::mcreateFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<Tk>(data, offset);
      (value, !offset) = gatherConvert<Tv>(data, offset);
      (key, value)
    }),
  );
  (map, offset)
}

private fun deserializeUnorderedMap<Tk: Hashable & Equality, Tv>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (UnorderedMap<Tk, Tv>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  map = UnorderedMap<Tk, Tv>::createFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<Tk>(data, offset);
      (value, !offset) = gatherConvert<Tv>(data, offset);
      (key, value)
    }),
  );
  (map, offset)
}

private fun mDeserializeUnorderedMap<Tk: Hashable & Equality, Tv>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable UnorderedMap<Tk, Tv>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  map = UnorderedMap<Tk, Tv>::mcreateFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<Tk>(data, offset);
      (value, !offset) = gatherConvert<Tv>(data, offset);
      (key, value)
    }),
  );
  (map, offset)
}

private fun deserializeSet<T: Hashable & Equality>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (Set<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  set = Set<T>::createFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<T>(data, offset);
      key
    }),
  );
  (set, offset)
}

private fun mDeserializeSet<T: Hashable & Equality>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable Set<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  set = Set<T>::mcreateFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<T>(data, offset);
      key
    }),
  );
  (set, offset)
}

private fun deserializeUnorderedSet<T: Hashable & Equality>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (UnorderedSet<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  set = UnorderedSet<T>::createFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<T>(data, offset);
      key
    }),
  );
  (set, offset)
}

private fun mDeserializeUnorderedSet<T: Hashable & Equality>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (mutable UnorderedSet<T>, Int) {
  (size, !offset) = fetchRawScalar<Int>(data, offset);
  set = UnorderedSet<T>::mcreateFromItems(
    Range(0, size).map(_ -> {
      (key, !offset) = gatherConvert<T>(data, offset);
      key
    }),
  );
  (set, offset)
}

private fun deserializeTuple2<T0, T1>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): ((T0, T1), Int) {
  (a, !offset) = gatherConvert<T0>(data, offset);
  (b, !offset) = gatherConvert<T1>(data, offset);
  ((a, b), offset)
}

private fun deserializeTuple3<T0, T1, T2>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): ((T0, T1, T2), Int) {
  (a, !offset) = gatherConvert<T0>(data, offset);
  (b, !offset) = gatherConvert<T1>(data, offset);
  (c, !offset) = gatherConvert<T2>(data, offset);
  ((a, b, c), offset)
}

private fun deserializeTuple4<T0, T1, T2, T3>(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): ((T0, T1, T2, T3), Int) {
  (a, !offset) = gatherConvert<T0>(data, offset);
  (b, !offset) = gatherConvert<T1>(data, offset);
  (c, !offset) = gatherConvert<T2>(data, offset);
  (d, !offset) = gatherConvert<T3>(data, offset);
  ((a, b, c, d), offset)
}

private fun deserializeMixed(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
  validTypeMask: Int,
): (HH.Mixed, Int) {
  (value, !offset) = fetchRawScalar<Int>(data, offset);
  (svmiType, !offset) = fetchRawScalar<Int>(data, offset);
  (
    HhvmInterop_PropertyGetHelper.internalCreateMixedFromRetValue(
      (value, svmiType),
      validTypeMask,
    ),
    offset,
  )
}

private fun deserializeLambda(
  data: mutable Runtime.NonGCPointer,
  offset: Int,
): (HH.Lambda, Int) {
  // 0x30 = string + object
  (value, !offset) = deserializeMixed(data, offset, 0x30);
  value match {
  | HH.String(s) -> (HH.LambdaString(s), offset)
  | HH.ProxyObject(o) -> (HH.LambdaObject(o), offset)
  | _ -> invariant_violation("Unhandled mixed type when deserializing lambda")
  }
}

private fun throwUnknownClassIdError(classId: Int): void {
  throw RuntimeError(`unknown class id ${classId}`)
}

// Serialize the given HeapObject and return a cleanup handle (to be passed to
// gatherCleanup) and a pointer to the raw serialized data.
@cpp_runtime
private native fun gatherCollect(
  object: mutable Runtime.NonGCPointer,
  classId: Int,
): (mutable Runtime.NonGCPointer, mutable Runtime.NonGCPointer);

@cpp_runtime
private native fun gatherCleanup(handle: mutable Runtime.NonGCPointer): void;

fun gather<T>(heapObject: mutable Runtime.NonGCPointer, classId: Int): T {
  (handle, data) = gatherCollect(heapObject, classId);
  try {
    (res, _) = gatherConvert<T>(data, 0);
    gatherCleanup(handle);
    res
  } catch {
  | e @ _ ->
    gatherCleanup(handle);
    throw e
  }
}

module end;
