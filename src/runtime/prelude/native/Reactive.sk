/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Reactive;

@cpp_runtime("SKIP_Reactive_reactiveTimer")
private native fun timerHelper(id: String, intervalInSeconds: Float): Int;

memoized fun timer(id: String, intervalInSeconds: Float): Int {
  timerHelper(id, intervalInSeconds)
}

@cpp_runtime
private native fun nextReactiveGlobalCacheID(): Int;

@cpp_runtime
private native fun reactiveGlobalCacheSet<T>(
  id: Int,
  key: String,
  value: ?Ref<T>,
): void;

// See invokeMemoizeThunk()
@cpp_export("SKIP_invokeMemoizeThunk")
private fun invokeMemoizeThunk(func: () -> void): void {
  func()
}

@cpp_runtime("SKIP_Reactive_reactiveGlobalCacheGet")
private native fun reactiveGlobalCacheGetHelper<T>(
  id: Int,
  key: String,
): ?Ref<T>;

private memoized fun reactiveGlobalCacheGet<T>(id: Int, key: String): ?Ref<T> {
  reactiveGlobalCacheGetHelper(id, key)
}

class GlobalCache<T: frozen> private (id: Int) {
  static fun make(): this {
    static(nextReactiveGlobalCacheID())
  }

  fun maybeGet(key: String): ?T {
    reactiveGlobalCacheGet<T>(this.id, key).map(v -> v.value);
  }

  fun set(key: String, value: T): void {
    reactiveGlobalCacheSet(this.id, key, Some(Ref(value)));
  }

  fun remove(key: String): void {
    reactiveGlobalCacheSet(this.id, key, None());
  }
}

@cpp_runtime
native fun withTransaction(() -> void): void;

private class RefCountedCache(cache: Reactive.GlobalCache<Map<String, Int>>) {
  fun create(): this {
    static(Reactive.GlobalCache::make())
  }

  untracked fun add(key: String, values: Vector<String>): void {
    newMap = this.cache.maybeGet(key) match {
    | None() ->
      newMap = mutable Map[];
      values.each(value -> newMap![value] = 1);
      newMap
    | Some(map) ->
      newMap = map.clone();
      values.each(value -> {
        refCount = if (map.containsKey(value)) map[value] else 0;
        newMap![value] = refCount + 1;
      });
      newMap
    };
    this.cache.set(key, unsafe_chill_trust_me(newMap));
  }

  untracked fun remove(key: String, values: Vector<String>): void {
    newMap = this.cache.maybeGet(key) match {
    | None() -> invariant_violation("Cannot remove a nonexistent entry")
    | Some(map) ->
      newMap = map.clone();
      values.each(value -> {
        refCount = if (map.containsKey(value)) map[value] else 0;
        !refCount = refCount - 1;
        if (refCount > 0) {
          newMap![value] = refCount;
        } else {
          newMap.remove(value);
        }
      });
      newMap
    };
    this.cache.set(key, unsafe_chill_trust_me(newMap));
  }

  memoized fun get(key: String): Vector<String> {
    result = mutable Vector[];
    this.cache.maybeGet(key).each(map ->
      map.each((key, refCount) -> {
        invariant(refCount > 0);
        result.push(key)
      })
    );
    result.sort();
    unsafe_chill_trust_me(result)
  }
}

private mutable class VectorDiff{
  oldValues: Vector<String>,
  newValues: Vector<String>,
  mutable index1: Int = 0,
  mutable index2: Int = 0,
  toRemove: mutable Vector<String> = mutable Vector[],
  toAdd: mutable Vector<String> = mutable Vector[],
} {
  private mutable fun loopThis(): void {
    valueOpt1 = this.oldValues.maybeGet(this.index1);
    valueOpt2 = this.newValues.maybeGet(this.index2);
    (valueOpt1, valueOpt2) match {
    | (None(), None()) -> void
    | (None(), Some(value)) ->
      this.toAdd.push(value);
      this.!index2 = this.index2 + 1;
      this.loopThis()
    | (Some(value), None()) ->
      this.toRemove.push(value);
      this.!index1 = this.index1 + 1;
      this.loopThis()
    | (Some(value1), Some(value2)) ->
      compare(value1, value2) match {
      | LT() ->
        this.toRemove.push(value1);
        this.!index1 = this.index1 + 1
      | GT() ->
        this.toAdd.push(value2);
        this.!index2 = this.index2 + 1
      | EQ() ->
        this.!index1 = this.index1 + 1;
        this.!index2 = this.index2 + 1
      };
      this.loopThis()
    }
  }
  mutable fun getResult(): (Vector<String>, Vector<String>) {
    this.loopThis();
    (this.toRemove.chill(), this.toAdd.chill())
  }
}

private fun diffVectors(
  oldValues: Vector<String>,
  newValues: Vector<String>,
): (Vector<String>, Vector<String>) {
  vecDiff = mutable VectorDiff{oldValues, newValues};
  vecDiff.getResult()
}

class DiffCache private {
  refCountedCache: RefCountedCache,
  sourceCache: Reactive.GlobalCache<Vector<String>>,
} {
  static fun create(): this {
    static{
      refCountedCache => RefCountedCache(Reactive.GlobalCache::make()),
      sourceCache => Reactive.GlobalCache::make(),
    }
  }

  untracked fun set(source: String, key: String, values: Vector<String>): void {
    sourceKey = source + ":" + key;
    newValues = {
      x = values.clone();
      x.sort();
      unsafe_chill_trust_me(x)
    };
    this.sourceCache.maybeGet(sourceKey) match {
    | None() ->
      this.sourceCache.set(sourceKey, newValues);
      this.refCountedCache.add(key, newValues)
    | Some(oldValues) ->
      this.sourceCache.set(sourceKey, newValues);
      (toRemove, toAdd) = diffVectors(oldValues, newValues);
      if (toRemove.size() > 0) this.refCountedCache.remove(key, toRemove);
      if (toAdd.size() > 0) this.refCountedCache.add(key, toAdd)
    }
  }

  fun get(key: String): Vector<String> {
    this.refCountedCache.get(key)
  }
}
