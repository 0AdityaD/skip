/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Subprocess;

untracked fun spawn(args: readonly Array<String>): Output {
  if (args.isEmpty()) {
    throw EmptyArgumentsError()
  };
  spawnHelper(args)
}

@cpp_runtime
untracked native private fun spawnHelper(args: readonly Array<String>): Output;

class Output{returnCode: Int, stdout: Array<UInt8>, stderr: Array<UInt8>}

// NOTE: The caller must guarantee no other references exist to stdout/stderr
@cpp_export("SKIP_unsafeCreateSubprocessOutput")
private fun unsafeCreateSubprocessOutput(
  returnCode: Int,
  stdout: mutable Array<UInt8>,
  stderr: mutable Array<UInt8>,
): Output {
  Output{
    returnCode,
    stdout => unsafe_chill_trust_me(stdout),
    stderr => unsafe_chill_trust_me(stderr),
  }
}

@cpp_export("SKIP_UInt8Array_create")
private fun createUInt8Array(size: Int): mutable Array<UInt8> {
  Array<UInt8>::mfill(size, UInt8::min);
}

class EmptyArgumentsError() extends Exception {
  fun getMessage(): String {
    "Empty arguments to sub-process"
  }
}

module end; // Subprocess
