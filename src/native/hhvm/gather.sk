/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module alias I = OuterIst;
module alias O = OuterIstToIR;
module alias F = FunctionTree;

module HhvmInterop_Gather;

// The gather system serializes data being transferred from HHVM to Skip.
//
// The format is as a vector of int64_t values.
//
//   Bool: 0 = false, 1 = true
//   Int: identity
//   Float: 64-bit float interpreted as an int64_t
//   String: The skip::StringRep interpreted as an int64_t
//   Option<T>: 0 or -1 is None(), 1 is Some(T)
//   Option<Option<T>>: Int encoding - 0 is Some(None()), -1 is None(), 1 is Some(Some(T))
//   KClass @hhvm_copy
//   KClass @hhvm_shape_copy: Each field encoded in typeTable order
//   @hhvm_import
//   @hhvm_shape
//   @hhvm_array: The HhvmHandle interpreted as an int64_t
//   KBase: Int concrete class type followed by the concrete class encoded
//   Array<T>
//   Vector<T>: Int size followed by that number of encoded T values
//   Map<Tk, Tv>: Int size followed by that number of encoded Tk, Tv pairs
//   Set<T>: Int size followed by that number of encoded T values
//   Tuple<T0, T1, ...>: Each element encoded in order
//   HH.Lambda: Encoded as an HH.Mixed

private fun crackTuple(
  fs: mutable O.FunSpecializer,
  obj: O.MaybeExists<O.InstrTree>,
  typ: Type,
  pos: Pos,
): (O.MaybeExists<O.InstrTree>, O.MaybeExists<O.InstrTree>) {
  (
    F.emitGetField{fs, typ, obj, field => "i0", pos},
    F.emitGetField{fs, typ => tInt, obj, field => "i1", pos},
  )
}

private fun makeTuple(
  fs: mutable O.FunSpecializer,
  typ: Type,
  obj: O.MaybeExists<O.InstrTree>,
  offset: O.MaybeExists<O.InstrTree>,
  pos: Pos,
): O.MaybeExists<O.InstrTree> {
  tRet = fs.specializer.getReturnTuple(Array[typ.asTclass(pos), tInt]);
  F.emitObject{fs, typ => tRet, args => Array[obj, offset], pos};
}

extension class GatherConvert extends O.CustomIntrinsic {
  protected fun emitIR(
    gInstr: O.GCustomInstr,
    fs: mutable O.FunSpecializer,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    s = fs.specializer;

    targT = fs.specializeType(this.funInfo.tparams[0]);
    data = fs.getValue(gInstr.args[0]);
    offset = fs.getValue(gInstr.args[1]);
    sc = fs.specializer.exampleSClass(targT);

    // Be careful of the order here - need to make sure we check specialized
    // types (like HH.Mixed) before more generic types (like base classes).
    if (targT == tBool) {
      DeserializeBool::call(fs, data, offset, pos)
    } else if ((targT == tInt) || (targT == tFloat) || (targT == tString)) {
      FetchRawScalar::call(fs, targT, data, offset, pos)
    } else if (Hhvm.isOptionType(fs, targT)) {
      typ = Hhvm.getOptionTarg(s, targT, pos);
      if (Hhvm.isOptionType(fs, typ)) {
        // ooh - a ??T
        typ2 = Hhvm.getOptionTarg(s, typ, pos);
        DeserializeOptionOption::call(fs, typ2, data, offset, pos)
      } else {
        DeserializeOption::call(fs, typ, data, offset, pos)
      }
    } else if (Hhvm.isMixedSubclass(fs, targT)) {
      this.emitGatherMixed(fs, targT, data, offset)
    } else if (Hhvm.isHHLambdaSubclass(fs, targT)) {
      DeserializeLambda::call(fs, data, offset, pos);
    } else if (sc.kind.isBaseClass()) {
      (ptr, !offset) = crackTuple(
        fs,
        if (targT.isMutable()) {
          MDeserializeKBase::call(fs, data, offset, pos)
        } else {
          DeserializeKBase::call(fs, data, offset, pos)
        },
        tGCPointer,
        pos,
      );
      makeTuple(
        fs,
        targT,
        F.emitReinterpret{fs, typ => targT, value => ptr, pos},
        offset,
        pos,
      );
    } else if (
      Hhvm.isHhvmCopy(s, targT, pos) ||
      Hhvm.isHhvmShapeCopy(s, targT, pos)
    ) {
      this.emitGatherCopy(fs, targT, data, offset);
    } else if (Hhvm.isHhvmProxy(s, targT, pos)) {
      DeserializeProxy::call(fs, targT, data, offset, pos)
    } else if (HhvmInterop.isArraylike(fs, targT)) {
      typ = HhvmInterop.getTarg(s, targT, 0, pos);
      isVec = HhvmInterop.isVector(fs, targT);
      isMut = targT.isMutable();
      (isVec, isMut) match {
      | (false, false) -> DeserializeArray::call(fs, typ, data, offset, pos)
      | (false, true) -> MDeserializeArray::call(fs, typ, data, offset, pos)
      | (true, false) -> DeserializeVector::call(fs, typ, data, offset, pos)
      | (true, true) -> MDeserializeVector::call(fs, typ, data, offset, pos)
      }
    } else if (HhvmInterop.isMaplike(fs, targT)) {
      tk = HhvmInterop.getTarg(s, targT, 0, pos);
      tv = HhvmInterop.getTarg(s, targT, 1, pos);
      isMap = HhvmInterop.isMap(fs, targT);
      isMut = targT.isMutable();
      (isMap, isMut) match {
      | (false, false) ->
        DeserializeUnorderedMap::call(fs, tk, tv, data, offset, pos)
      | (false, true) ->
        MDeserializeUnorderedMap::call(fs, tk, tv, data, offset, pos)
      | (true, false) -> DeserializeMap::call(fs, tk, tv, data, offset, pos)
      | (true, true) -> MDeserializeMap::call(fs, tk, tv, data, offset, pos)
      }
    } else if (HhvmInterop.isSetlike(fs, targT)) {
      typ = HhvmInterop.getTarg(s, targT, 0, pos);
      isSet = HhvmInterop.isSet(fs, targT);
      isMut = targT.isMutable();
      (isSet, isMut) match {
      | (false, false) ->
        DeserializeUnorderedSet::call(fs, typ, data, offset, pos)
      | (false, true) ->
        MDeserializeUnorderedSet::call(fs, typ, data, offset, pos)
      | (true, false) -> DeserializeSet::call(fs, typ, data, offset, pos)
      | (true, true) -> MDeserializeSet::call(fs, typ, data, offset, pos)
      }
    } else if (HhvmInterop.isTuple(fs, targT)) {
      this.emitGatherTuple(fs, targT, data, offset)
    } else {
      pos.die(`Unable to gather from type '${targT}'`)
    }
  }

  protected fun requestFunctions(
    s: mutable O.Specializer,
    targs: Array<Tclass>,
    tparamEnv: UnorderedMap<O.GTparam, Tclass>,
  ): void {
    pos = this.funInfo.pos;
    targT = targs[0];

    // Be careful of the order here - need to make sure we check specialized
    // types (like HH.Mixed) before more generic types (like base classes).
    if (targT == tBool) {
      DeserializeBool::request(s)
    } else if ((targT == tInt) || (targT == tFloat) || (targT == tString)) {
      FetchRawScalar::request(s, targT)
    } else if (Hhvm.isOptionType(s, targT)) {
      typ = Hhvm.tcGetOptionTarg(s, targT, pos);
      if (Hhvm.isOptionType(s, typ)) {
        // ooh - a ??T
        typ2 = Hhvm.tcGetOptionTarg(s, typ, pos);
        DeserializeOptionOption::request(s, typ2)
      } else {
        DeserializeOption::request(s, typ)
      }
    } else if (Hhvm.isMixedSubclass(s, targT)) {
      this.requestGatherMixed(s, targT)
    } else if (Hhvm.isHHLambdaSubclass(s, targT)) {
      DeserializeLambda::request(s);
    } else if (targT.sclass(s).kind.isBaseClass()) {
      if (targT.mutability == Mutable()) {
        MDeserializeKBase::request(s)
      } else {
        DeserializeKBase::request(s)
      }
    } else if (
      Hhvm.isHhvmCopy(s, targT, pos) ||
      Hhvm.isHhvmShapeCopy(s, targT, pos)
    ) {
      this.requestGatherCopy(s, targs, tparamEnv)
    } else if (Hhvm.isHhvmProxy(s, targT, pos)) {
      DeserializeProxy::request(s, targT)
    } else if (HhvmInterop.isArraylike(s, targT)) {
      typ = HhvmInterop.tcGetTarg(s, targT, 0, pos);
      isVec = HhvmInterop.isVector(s, targT);
      isMut = targT.mutability == Mutable();
      (isVec, isMut) match {
      | (false, false) -> DeserializeArray::request(s, typ)
      | (false, true) -> MDeserializeArray::request(s, typ)
      | (true, false) -> DeserializeVector::request(s, typ)
      | (true, true) -> MDeserializeVector::request(s, typ)
      }
    } else if (HhvmInterop.isMaplike(s, targT)) {
      tk = HhvmInterop.tcGetTarg(s, targT, 0, pos);
      tv = HhvmInterop.tcGetTarg(s, targT, 1, pos);
      isMap = HhvmInterop.isMap(s, targT);
      isMut = targT.mutability == Mutable();
      (isMap, isMut) match {
      | (false, false) -> DeserializeUnorderedMap::request(s, tk, tv)
      | (false, true) -> MDeserializeUnorderedMap::request(s, tk, tv)
      | (true, false) -> DeserializeMap::request(s, tk, tv)
      | (true, true) -> MDeserializeMap::request(s, tk, tv)
      }
    } else if (HhvmInterop.isSetlike(s, targT)) {
      typ = HhvmInterop.tcGetTarg(s, targT, 0, pos);
      isSet = HhvmInterop.isSet(s, targT);
      isMut = targT.mutability == Mutable();
      (isSet, isMut) match {
      | (false, false) -> DeserializeUnorderedSet::request(s, typ)
      | (false, true) -> MDeserializeUnorderedSet::request(s, typ)
      | (true, false) -> DeserializeSet::request(s, typ)
      | (true, true) -> MDeserializeSet::request(s, typ)
      }
    } else if (HhvmInterop.isTuple(s, targT)) {
      this.requestGatherTuple(s, targT)
    } else {
      pos.die(`Unable to gather from type '${targT}'`)
    }
  }

  private fun emitGatherCopy(
    fs: mutable O.FunSpecializer,
    targT: Type,
    data: O.MaybeExists<O.InstrTree>,
    offset: O.MaybeExists<O.InstrTree>,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;

    gcName = targT.asTclass(pos).sclass(fs).gclassName;
    hhvmType = fs.specializer.hhvmTypeTable.getClass(gcName, pos);

    args = hhvmType.fields
      .values()
      .map(f -> {
        typ = fs.specializeType(f.skipType);
        value = GatherConvert::call(fs, typ, data, offset, pos);
        (obj, !offset) = crackTuple(fs, value, typ, pos);
        obj
      })
      .collect(Array);

    makeTuple(fs, targT, F.emitObject{fs, typ => targT, args, pos}, offset, pos)
  }

  private fun requestGatherCopy(
    s: mutable O.Specializer,
    targs: Array<Tclass>,
    tparamEnv: UnorderedMap<O.GTparam, Tclass>,
  ): void {
    pos = this.funInfo.pos;
    targT = targs[0];

    gcName = targT.sclass(s).gclassName;
    hhvmType = s.hhvmTypeTable.getClass(gcName, pos);

    hhvmType.fields.values().each(f -> {
      GatherConvert::request(s, s.getTclass3(f.skipType, tparamEnv, pos));
    });
  }

  private fun emitGatherTuple(
    fs: mutable O.FunSpecializer,
    targT: Type,
    data: O.MaybeExists<O.InstrTree>,
    offset: O.MaybeExists<O.InstrTree>,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    s = fs.specializer;
    size = HhvmInterop.tupleGetSize(s, targT);
    t = Range(0, size).map(i -> HhvmInterop.tupleGetType(s, targT, i)).collect(
      Array,
    );
    // printer-ignore
    size match {
    | 2 -> DeserializeTuple2::call(fs, t[0], t[1], data, offset, pos)
    | 3 -> DeserializeTuple3::call(fs, t[0], t[1], t[2], data, offset, pos)
    | 4 -> DeserializeTuple4::call(fs, t[0], t[1], t[2], t[3], data, offset, pos)
    | _ -> pos.die(`Unhandled tuple size '${targT}' in gather`)
    };
  }

  private fun requestGatherTuple(
    s: mutable O.Specializer,
    targT: Tclass,
  ): void {
    pos = this.funInfo.pos;
    size = HhvmInterop.tupleGetSize(s, targT);
    t = Range(0, size).map(i ->
      HhvmInterop.tcTupleGetType(s, targT, i)
    ).collect(Array);
    // printer-ignore
    size match {
    | 2 -> DeserializeTuple2::request(s, t[0], t[1])
    | 3 -> DeserializeTuple3::request(s, t[0], t[1], t[2])
    | 4 -> DeserializeTuple4::request(s, t[0], t[1], t[2], t[3])
    | _ -> pos.die(`Unhandled tuple size '${targT}' in gather`)
    };
  }

  private fun emitGatherMixed(
    fs: mutable O.FunSpecializer,
    targT: Type,
    data: O.MaybeExists<O.InstrTree>,
    offset: O.MaybeExists<O.InstrTree>,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    tMixed = fs.specializeType(
      O.GTapply(FrontEndLazyGClass("HH.Mixed"), DeepFrozen(), Array[]),
    );
    validTypes = F.constantInt{
      fs,
      value => Svmi.ParamType::maskFromType(fs, targT, pos),
    };
    (value, !offset) = crackTuple(
      fs,
      DeserializeMixed::call(fs, data, offset, validTypes, pos),
      tMixed,
      pos,
    );
    makeTuple(fs, targT, F.emitCast{fs, typ => targT, value, pos}, offset, pos)
  }

  private fun requestGatherMixed(
    s: mutable O.Specializer,
    _targT: Tclass,
  ): void {
    DeserializeMixed::request(s);
  }
}

extension class FetchRawScalar extends O.CustomIntrinsic {
  protected fun emitIR(
    gInstr: O.GCustomInstr,
    fs: mutable O.FunSpecializer,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    targT = fs.specializeType(this.funInfo.tparams[0]).asTclass(pos);
    data = fs.getValue(gInstr.args[0]);
    offset = fs.getValue(gInstr.args[1]);

    addr = F.emitBytePointerAdd{
      fs,
      addr => data,
      offset,
      typ => tNonGCPointer,
      pos,
    };

    scalar = F.emitLoad{
      fs,
      addr,
      bitOffset => 0,
      addrByteAlignment => 1,
      canCSE => false,
      typ => targT,
      pos,
    };

    scalarType = fs.getScalarType(targT);
    pos.lazyInvariant(
      scalarType.bitSize == fs.getScalarType(tInt).bitSize,
      () -> `Illegal sized read for FetchRawScalar reading ${targT}`,
    );
    newOffset = F.emitIntAdd{
      fs,
      lhs => offset,
      rhs => F.constantInt{fs, value => ((scalarType.bitSize + 7) / 8)},
      pos,
    };

    makeTuple(fs, targT, scalar, newOffset, pos);
  }

  protected fun requestFunctions(
    _s: mutable O.Specializer,
    _targs: Array<Tclass>,
    _tparamEnv: UnorderedMap<O.GTparam, Tclass>,
  ): void {
    void
  }
}

base class CommonDeserializeKBase extends O.CustomIntrinsic {
  protected fun emitIR(
    gInstr: O.GCustomInstr,
    fs: mutable O.FunSpecializer,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    data = fs.getValue(gInstr.args[0]);
    offset = fs.getValue(gInstr.args[1]);

    (classId, !offset) = crackTuple(
      fs,
      FetchRawScalar::call(fs, tInt, data, offset, pos),
      tInt,
      pos,
    );

    // now IntSwitch on classId to determine which actual concrete class we need
    // to gather
    classes = fs.specializer.hhvmTypeTable.classes.values().collect(Array);
    cases = classes.map(f -> f.globalIndex);
    successors = cases.map(_ -> BlockSuccessor(fs.newBlockID()));

    join = fs.newBlockID();
    default = fs.newBlockID();

    F.emitIntSwitch{
      fs,
      value => classId,
      cases,
      successors => Array[BlockSuccessor(default)].concat(successors),
      pos,
    };

    fs.startNewBlock(default);
    ThrowUnknownClassIdError::call(fs, classId, pos);
    _ = fs.emitUnreachable{pos, why => "unkown class id"};

    for (i in successors.zip(classes)) {
      (succ, cls) = i;
      fs.startNewBlock(succ.target);
      gt = O.GTapply(cls.lazyGClass, this.mutability(), Array[]);
      typ = fs.specializeType(gt);
      if (fs.scalarize(typ).flattened().isEmpty()) {
        // this is an empty final class which got optimized to a value class -
        // should never get here
        fs.emitUnreachable{
          pos,
          why => "base class for empty final class optimized out",
        };
        continue;
      };

      tup = GatherConvert::call(fs, typ, data, offset, pos);
      (obj, newOffset) = crackTuple(fs, tup, typ, pos);
      ptr = F.emitReinterpret{fs, typ => tGCPointer, value => obj, pos};
      F.emitJump{fs, target => join, args => Array[ptr, newOffset], pos};
    };

    blockParams = F.startNewBlock{
      fs,
      target => join,
      args => Array[tGCPointer, tInt],
      pos,
    };

    makeTuple(fs, tGCPointer, blockParams[0], blockParams[1], pos);
  }

  protected fun requestFunctions(
    s: mutable O.Specializer,
    _targs: Array<Tclass>,
    _tparamEnv: UnorderedMap<O.GTparam, Tclass>,
  ): void {
    FetchRawScalar::request(s, tInt);

    classes = s.hhvmTypeTable.classes.values().collect(Array);

    ThrowUnknownClassIdError::request(s);

    for (cls in classes) {
      t = s.getTclass2(cls.lazyGClass, Array[], this.mutability());
      GatherConvert::request(s, t);
    }
  }

  fun mutability(): Mutability;
}

extension class DeserializeKBase extends CommonDeserializeKBase {
  fun mutability(): Mutability {
    DeepFrozen()
  }
}

extension class MDeserializeKBase extends CommonDeserializeKBase {
  fun mutability(): Mutability {
    Mutable()
  }
}
