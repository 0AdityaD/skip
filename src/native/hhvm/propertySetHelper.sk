/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module alias I = OuterIst;
module alias O = OuterIstToIR;
module alias F = FunctionTree;

module HhvmInterop;

// fun propertySetHelper<T, U>(ptr: T, field: String, value: U): void;
extension class PropertySetHelper extends O.CustomIntrinsic {
  protected fun emitIR(
    call: O.GCustomInstr,
    fs: mutable O.FunSpecializer,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    s = fs.specializer;

    targT = fs.specializeType(this.funInfo.tparams[0]);
    obj = fs.getValue(call.args[0]);
    field = fs.getValue(call.args[1]);

    valueType = fs.specializeType(this.funInfo.tparams[1]);
    value = fs.getValue(call.args[2]);

    if (Hhvm.isHhvmArray(s, targT, pos)) {
      pos.die("@hhvm_array objects cannot have properties");
    };

    if (Hhvm.isNullableType(fs, valueType)) {
      valueTypeArg = Hhvm.getNullableTarg(s, valueType, pos);
      HhvmInterop_PropertySetHelper.InternalSetNullableProperty::call(
        fs,
        targT,
        valueTypeArg,
        obj,
        field,
        value,
        pos,
      );
      return O.Exists(O.kVoidInstrTree);
    };

    if (Hhvm.isOptionType(fs, valueType)) {
      valueTypeArg = Hhvm.getOptionTarg(s, valueType, pos);
      if (Hhvm.isOptionType(fs, valueTypeArg)) {
        HhvmInterop_PropertySetHelper.InternalSetOptionOptionProperty::call(
          fs,
          targT,
          Hhvm.getOptionTarg(s, valueTypeArg, pos),
          obj,
          field,
          value,
          pos,
        );
      } else {
        HhvmInterop_PropertySetHelper.InternalSetOptionProperty::call(
          fs,
          targT,
          valueTypeArg,
          obj,
          field,
          value,
          pos,
        );
      };
      return O.Exists(O.kVoidInstrTree);
    };

    if (Hhvm.isHhvmCopy(s, valueType, pos)) {
      !value = CopyToHhvm::call(fs, valueType, value, pos);
      !valueType = tHhvmHandle;
    };

    if (
      Hhvm.isHhvmShapeCopy(s, valueType, pos) ||
      isArraylike(fs, valueType) ||
      isSetlike(fs, valueType) ||
      isTuple(fs, valueType)
    ) {
      !value = CopyToHhvm::call(fs, valueType, value, pos);
      !valueType = tHhvmShapeHandle;
    };

    HhvmInterop_PropertySetHelper.InternalSetProperty::call(
      fs,
      targT,
      valueType,
      obj,
      field,
      value,
      pos,
    );

    O.Exists(O.kVoidInstrTree)
  }

  protected fun requestFunctions(
    s: mutable O.Specializer,
    targs: Array<Tclass>,
    _tparamEnv: UnorderedMap<O.GTparam, Tclass>,
  ): void {
    pos = this.funInfo.pos;

    targT = targs[0];
    valueType = targs[1];

    if (Hhvm.isNullableType(s, valueType)) {
      valueTypeArg = Hhvm.tcGetNullableTarg(s, valueType, pos);
      HhvmInterop_PropertySetHelper.InternalSetNullableProperty::request(
        s,
        targT,
        valueTypeArg,
      );
      return void;
    };

    if (Hhvm.isOptionType(s, valueType)) {
      valueTypeArg = Hhvm.tcGetOptionTarg(s, valueType, pos);
      if (Hhvm.isOptionType(s, valueTypeArg)) {
        HhvmInterop_PropertySetHelper.InternalSetOptionOptionProperty::request(
          s,
          targT,
          Hhvm.tcGetOptionTarg(s, valueTypeArg, pos),
        );
      } else {
        HhvmInterop_PropertySetHelper.InternalSetOptionProperty::request(
          s,
          targT,
          valueTypeArg,
        );
      };
      return void;
    };

    if (Hhvm.isHhvmCopy(s, valueType, pos)) {
      CopyToHhvm::request(s, valueType);
      !valueType = tHhvmHandle;
    };

    if (
      Hhvm.isHhvmShapeCopy(s, valueType, pos) ||
      isArraylike(s, valueType) ||
      isSetlike(s, valueType) ||
      isTuple(s, valueType)
    ) {
      CopyToHhvm::request(s, valueType);
      !valueType = tHhvmShapeHandle;
    };

    HhvmInterop_PropertySetHelper.InternalSetProperty::request(
      s,
      targT,
      valueType,
    );
  }
}

module end;

module HhvmInterop_PropertySetHelper;

base class InternalSetPropertyToConst extends O.CustomIntrinsic {
  deferred const retType: Int;
  deferred const retValue: Int;

  protected fun emitIR(
    call: O.GCustomInstr,
    fs: mutable O.FunSpecializer,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;

    targT = fs.specializeType(this.funInfo.tparams[0]);
    obj = fs.getValue(call.args[0]);
    field = fs.getValue(call.args[1]);

    typ = F.constantInt{fs, value => static::retType};
    value = F.constantInt{fs, value => static::retValue};

    isShape = Hhvm.isHhvmShapeHandle(targT);
    handleKind = if (isShape) "Shape" else "Object";

    _ = F.emitNamedCall{
      fs,
      typ => tVoid,
      pos,
      name => `SKIP_HHVM_${handleKind}_setField_Mixed`,
      args => Array[obj, field, value, typ],
    };

    O.Exists(O.kVoidInstrTree)
  }
}

// native fun internalSetPropertyToNull<T>(obj: T, field: String): void;
class InternalSetPropertyToNull extends InternalSetPropertyToConst {
  const name: String = "HhvmInterop.internalSetPropertyToNull";
  const retType: Int = HhvmInterop.nullType;
  const retValue: Int = HhvmInterop.nullValue;
}

// native fun internalSetPropertyToUndefined<T>(obj: T, field: String): void;
class InternalSetPropertyToUndefined extends InternalSetPropertyToConst {
  const name: String = "HhvmInterop.internalSetPropertyToUndefined";
  const retType: Int = HhvmInterop.nullType;
  const retValue: Int = HhvmInterop.undefinedValue;
}

// fun internalSetProperty<T, U: nonNullable>(obj: T, field: String, value: U): void;
extension class InternalSetProperty extends O.CustomIntrinsic {
  protected fun emitIR(
    call: O.GCustomInstr,
    fs: mutable O.FunSpecializer,
  ): O.MaybeExists<O.InstrTree> {
    pos = this.funInfo.pos;
    s = fs.specializer;

    targT = fs.specializeType(this.funInfo.tparams[0]);
    targU = fs.specializeType(this.funInfo.tparams[1]);
    obj = fs.getValue(call.args[0]);
    field = fs.getValue(call.args[1]);
    value = fs.getValue(call.args[2]);

    pos.invariant(
      !Hhvm.isHhvmArray(s, targT, pos),
      "@hhvm_array objects cannot have properties",
    );

    if (Hhvm.isMixedSubclass(s, targU)) {
      InternalSetMixedProperty::call(fs, targT, obj, field, value, pos);
      return O.Exists(O.kVoidInstrTree);
    };

    if (Hhvm.isHHLambdaSubclass(s, targU)) {
      InternalSetLambdaProperty::call(fs, targT, obj, field, value, pos);
      return O.Exists(O.kVoidInstrTree);
    };

    isShape = Hhvm.isHhvmShapeHandle(targT);
    handleKind = if (isShape) "Shape" else "Object";

    handle = HhvmInterop.FetchProxyPointer::call(fs, targT, obj, pos);
    tup = HhvmInterop.InternalBitcastToRetValue::call(fs, targU, value, pos);

    _ = F.emitNamedCall{
      fs,
      typ => tVoid,
      pos,
      name => `SKIP_HHVM_${handleKind}_setField_Mixed`,
      args => Array[
        handle,
        field,
        F.emitTupleExtract{fs, obj => tup, index => 0, typ => tInt, pos},
        F.emitTupleExtract{fs, obj => tup, index => 1, typ => tInt, pos},
      ],
    };

    O.Exists(O.kVoidInstrTree)
  }

  protected fun requestFunctions(
    s: mutable O.Specializer,
    targs: Array<Tclass>,
    _tparamEnv: UnorderedMap<O.GTparam, Tclass>,
  ): void {
    targT = targs[0];
    targU = targs[1];

    if (Hhvm.isMixedSubclass(s, targU)) {
      InternalSetMixedProperty::request(s, targT)
    } else if (Hhvm.isHHLambdaSubclass(s, targU)) {
      InternalSetLambdaProperty::request(s, targT)
    } else {
      if (Hhvm.isHhvmProxy(s, targU, s.pos)) {
        HhvmInterop.FetchProxyPointer::request(s, targU);
      };

      HhvmInterop.FetchProxyPointer::request(s, targT);
      HhvmInterop.InternalBitcastToRetValue::request(s, targU);
    };
  }
}

module end;
