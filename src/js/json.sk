/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Hh_json parsing and pretty printing library.
 */
/*
<value> ::=
  | <object>
  | <array>
  | <string>
  | <number>
  | 'true'
  | 'false'
  | 'null'

<object>   ::= '{' <members>* '}'
<members>  ::= <pair> { ',' <pair> }* [',']
<pair>     ::= <string> ':' <value>

<array>    ::= '{' <elements>* '}'
<elements> ::= <value> { ',' <value> }* [',']

<number>   ::=

Caveats:
 (+) No handling of Unicode yet
 (+) Numbers are just stored as strings
 */
module Json;

base class Json {
  children =
  | JSON_Object(List<(String, Json)>)
  | JSON_Array(List<Json>)
  | JSON_String(String)
  | JSON_Number(String)
  | JSON_Bool(Bool)
  | JSON_Null()
}

/* Writing JSON */
fun add_char(vector: mutable Vector<Char>, c: Char): void {
  vector.push(c)
}

fun add_string(vector: mutable Vector<Char>, s: String): void {
  s.each(vector.push)
}

fun escape(s: String): String {
  b = mutable Vector[];
  b.push('\"');
  for (c in s.chars()) {
    c match {
    | '\\' -> "\\\\".each(b.push)
    | '\"' -> "\\\"".each(b.push)
    | '\n' -> "\\n".each(b.push)
    | '\r' -> "\\r".each(b.push)
    | '\t' -> "\\t".each(b.push)
    | _ ->
      code = c.code();
      invariant(code > 0x1f, "Unexpected char in string");
      b.push(c)
    }
  };
  b.push('\"');
  String::fromChars(b.toArray())
}

fun output_list<Ta>(
  oc: mutable Vector<Char>,
  elems: List<Ta>,
  output_elem: ((mutable Vector<Char>, Ta) -> void),
): void {
  elems match {
  | List.Nil() -> void
  | List.Cons(elem, List.Nil()) -> output_elem(oc, elem)
  | List.Cons(elem, other_elems) ->
    output_elem(oc, elem);
    ",".each(oc.push);
    output_list(oc, other_elems, output_elem)
  }
}

fun json_to_output(oc: mutable Vector<Char>, json: Json): void {
  json match {
  | JSON_Object(l) ->
    "{".each(oc.push);
    output_list(oc, l, json_assoc_to_output);
    "}".each(oc.push)
  | JSON_Array(l) ->
    "[".each(oc.push);
    output_list(oc, l, json_to_output);
    "]".each(oc.push)
  | JSON_String(s) -> escape(s).each(oc.push)
  | JSON_Number(n) -> n.each(oc.push)
  | JSON_Bool(b) -> (if (b) "true" else "false").each(oc.push)

  | JSON_Null() -> "null".each(oc.push)
  }
}

fun json_assoc_to_output(oc: mutable Vector<Char>, kv: (String, Json)): void {
  (k, v) = kv;
  escape(k).each(oc.push);
  ":".each(oc.push);
  json_to_output(oc, v)
}

fun json_to_file(json: Json, file: String): void {
  vector = mutable Vector[];
  json_to_output(vector, json);
  FileSystem.writeTextFile(file, String::fromChars(vector.toArray()))
}
